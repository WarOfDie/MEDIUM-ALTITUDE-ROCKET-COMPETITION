
RoketKTR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f7e4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000780  0800f9b8  0800f9b8  0001f9b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010138  08010138  00030238  2**0
                  CONTENTS
  4 .ARM          00000008  08010138  08010138  00020138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010140  08010140  00030238  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010140  08010140  00020140  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010144  08010144  00020144  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000238  20000000  08010148  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004a0  20000238  08010380  00030238  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200006d8  08010380  000306d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030238  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017cf4  00000000  00000000  00030268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000319e  00000000  00000000  00047f5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001490  00000000  00000000  0004b100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001360  00000000  00000000  0004c590  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024f05  00000000  00000000  0004d8f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a834  00000000  00000000  000727f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d92d4  00000000  00000000  0008d029  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001662fd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000706c  00000000  00000000  00166350  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000238 	.word	0x20000238
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800f99c 	.word	0x0800f99c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000023c 	.word	0x2000023c
 800020c:	0800f99c 	.word	0x0800f99c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9aa 	b.w	8001034 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	468e      	mov	lr, r1
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d14d      	bne.n	8000e0e <__udivmoddi4+0xaa>
 8000d72:	428a      	cmp	r2, r1
 8000d74:	4694      	mov	ip, r2
 8000d76:	d969      	bls.n	8000e4c <__udivmoddi4+0xe8>
 8000d78:	fab2 f282 	clz	r2, r2
 8000d7c:	b152      	cbz	r2, 8000d94 <__udivmoddi4+0x30>
 8000d7e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d82:	f1c2 0120 	rsb	r1, r2, #32
 8000d86:	fa20 f101 	lsr.w	r1, r0, r1
 8000d8a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d8e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d92:	4094      	lsls	r4, r2
 8000d94:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d98:	0c21      	lsrs	r1, r4, #16
 8000d9a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d9e:	fa1f f78c 	uxth.w	r7, ip
 8000da2:	fb08 e316 	mls	r3, r8, r6, lr
 8000da6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000daa:	fb06 f107 	mul.w	r1, r6, r7
 8000dae:	4299      	cmp	r1, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x64>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dba:	f080 811f 	bcs.w	8000ffc <__udivmoddi4+0x298>
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	f240 811c 	bls.w	8000ffc <__udivmoddi4+0x298>
 8000dc4:	3e02      	subs	r6, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	1a5b      	subs	r3, r3, r1
 8000dca:	b2a4      	uxth	r4, r4
 8000dcc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dd0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dd4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dd8:	fb00 f707 	mul.w	r7, r0, r7
 8000ddc:	42a7      	cmp	r7, r4
 8000dde:	d90a      	bls.n	8000df6 <__udivmoddi4+0x92>
 8000de0:	eb1c 0404 	adds.w	r4, ip, r4
 8000de4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000de8:	f080 810a 	bcs.w	8001000 <__udivmoddi4+0x29c>
 8000dec:	42a7      	cmp	r7, r4
 8000dee:	f240 8107 	bls.w	8001000 <__udivmoddi4+0x29c>
 8000df2:	4464      	add	r4, ip
 8000df4:	3802      	subs	r0, #2
 8000df6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dfa:	1be4      	subs	r4, r4, r7
 8000dfc:	2600      	movs	r6, #0
 8000dfe:	b11d      	cbz	r5, 8000e08 <__udivmoddi4+0xa4>
 8000e00:	40d4      	lsrs	r4, r2
 8000e02:	2300      	movs	r3, #0
 8000e04:	e9c5 4300 	strd	r4, r3, [r5]
 8000e08:	4631      	mov	r1, r6
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d909      	bls.n	8000e26 <__udivmoddi4+0xc2>
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	f000 80ef 	beq.w	8000ff6 <__udivmoddi4+0x292>
 8000e18:	2600      	movs	r6, #0
 8000e1a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e1e:	4630      	mov	r0, r6
 8000e20:	4631      	mov	r1, r6
 8000e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e26:	fab3 f683 	clz	r6, r3
 8000e2a:	2e00      	cmp	r6, #0
 8000e2c:	d14a      	bne.n	8000ec4 <__udivmoddi4+0x160>
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d302      	bcc.n	8000e38 <__udivmoddi4+0xd4>
 8000e32:	4282      	cmp	r2, r0
 8000e34:	f200 80f9 	bhi.w	800102a <__udivmoddi4+0x2c6>
 8000e38:	1a84      	subs	r4, r0, r2
 8000e3a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e3e:	2001      	movs	r0, #1
 8000e40:	469e      	mov	lr, r3
 8000e42:	2d00      	cmp	r5, #0
 8000e44:	d0e0      	beq.n	8000e08 <__udivmoddi4+0xa4>
 8000e46:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e4a:	e7dd      	b.n	8000e08 <__udivmoddi4+0xa4>
 8000e4c:	b902      	cbnz	r2, 8000e50 <__udivmoddi4+0xec>
 8000e4e:	deff      	udf	#255	; 0xff
 8000e50:	fab2 f282 	clz	r2, r2
 8000e54:	2a00      	cmp	r2, #0
 8000e56:	f040 8092 	bne.w	8000f7e <__udivmoddi4+0x21a>
 8000e5a:	eba1 010c 	sub.w	r1, r1, ip
 8000e5e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e62:	fa1f fe8c 	uxth.w	lr, ip
 8000e66:	2601      	movs	r6, #1
 8000e68:	0c20      	lsrs	r0, r4, #16
 8000e6a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e6e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e72:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e76:	fb0e f003 	mul.w	r0, lr, r3
 8000e7a:	4288      	cmp	r0, r1
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x12c>
 8000e7e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e82:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x12a>
 8000e88:	4288      	cmp	r0, r1
 8000e8a:	f200 80cb 	bhi.w	8001024 <__udivmoddi4+0x2c0>
 8000e8e:	4643      	mov	r3, r8
 8000e90:	1a09      	subs	r1, r1, r0
 8000e92:	b2a4      	uxth	r4, r4
 8000e94:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e98:	fb07 1110 	mls	r1, r7, r0, r1
 8000e9c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ea0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ea4:	45a6      	cmp	lr, r4
 8000ea6:	d908      	bls.n	8000eba <__udivmoddi4+0x156>
 8000ea8:	eb1c 0404 	adds.w	r4, ip, r4
 8000eac:	f100 31ff 	add.w	r1, r0, #4294967295
 8000eb0:	d202      	bcs.n	8000eb8 <__udivmoddi4+0x154>
 8000eb2:	45a6      	cmp	lr, r4
 8000eb4:	f200 80bb 	bhi.w	800102e <__udivmoddi4+0x2ca>
 8000eb8:	4608      	mov	r0, r1
 8000eba:	eba4 040e 	sub.w	r4, r4, lr
 8000ebe:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ec2:	e79c      	b.n	8000dfe <__udivmoddi4+0x9a>
 8000ec4:	f1c6 0720 	rsb	r7, r6, #32
 8000ec8:	40b3      	lsls	r3, r6
 8000eca:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ece:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ed2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ed6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eda:	431c      	orrs	r4, r3
 8000edc:	40f9      	lsrs	r1, r7
 8000ede:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ee2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ee6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eea:	0c20      	lsrs	r0, r4, #16
 8000eec:	fa1f fe8c 	uxth.w	lr, ip
 8000ef0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ef4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ef8:	fb08 f00e 	mul.w	r0, r8, lr
 8000efc:	4288      	cmp	r0, r1
 8000efe:	fa02 f206 	lsl.w	r2, r2, r6
 8000f02:	d90b      	bls.n	8000f1c <__udivmoddi4+0x1b8>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f0c:	f080 8088 	bcs.w	8001020 <__udivmoddi4+0x2bc>
 8000f10:	4288      	cmp	r0, r1
 8000f12:	f240 8085 	bls.w	8001020 <__udivmoddi4+0x2bc>
 8000f16:	f1a8 0802 	sub.w	r8, r8, #2
 8000f1a:	4461      	add	r1, ip
 8000f1c:	1a09      	subs	r1, r1, r0
 8000f1e:	b2a4      	uxth	r4, r4
 8000f20:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f24:	fb09 1110 	mls	r1, r9, r0, r1
 8000f28:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f2c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f30:	458e      	cmp	lr, r1
 8000f32:	d908      	bls.n	8000f46 <__udivmoddi4+0x1e2>
 8000f34:	eb1c 0101 	adds.w	r1, ip, r1
 8000f38:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f3c:	d26c      	bcs.n	8001018 <__udivmoddi4+0x2b4>
 8000f3e:	458e      	cmp	lr, r1
 8000f40:	d96a      	bls.n	8001018 <__udivmoddi4+0x2b4>
 8000f42:	3802      	subs	r0, #2
 8000f44:	4461      	add	r1, ip
 8000f46:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f4a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f4e:	eba1 010e 	sub.w	r1, r1, lr
 8000f52:	42a1      	cmp	r1, r4
 8000f54:	46c8      	mov	r8, r9
 8000f56:	46a6      	mov	lr, r4
 8000f58:	d356      	bcc.n	8001008 <__udivmoddi4+0x2a4>
 8000f5a:	d053      	beq.n	8001004 <__udivmoddi4+0x2a0>
 8000f5c:	b15d      	cbz	r5, 8000f76 <__udivmoddi4+0x212>
 8000f5e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f62:	eb61 010e 	sbc.w	r1, r1, lr
 8000f66:	fa01 f707 	lsl.w	r7, r1, r7
 8000f6a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f6e:	40f1      	lsrs	r1, r6
 8000f70:	431f      	orrs	r7, r3
 8000f72:	e9c5 7100 	strd	r7, r1, [r5]
 8000f76:	2600      	movs	r6, #0
 8000f78:	4631      	mov	r1, r6
 8000f7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f7e:	f1c2 0320 	rsb	r3, r2, #32
 8000f82:	40d8      	lsrs	r0, r3
 8000f84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f88:	fa21 f303 	lsr.w	r3, r1, r3
 8000f8c:	4091      	lsls	r1, r2
 8000f8e:	4301      	orrs	r1, r0
 8000f90:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f94:	fa1f fe8c 	uxth.w	lr, ip
 8000f98:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f9c:	fb07 3610 	mls	r6, r7, r0, r3
 8000fa0:	0c0b      	lsrs	r3, r1, #16
 8000fa2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fa6:	fb00 f60e 	mul.w	r6, r0, lr
 8000faa:	429e      	cmp	r6, r3
 8000fac:	fa04 f402 	lsl.w	r4, r4, r2
 8000fb0:	d908      	bls.n	8000fc4 <__udivmoddi4+0x260>
 8000fb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fba:	d22f      	bcs.n	800101c <__udivmoddi4+0x2b8>
 8000fbc:	429e      	cmp	r6, r3
 8000fbe:	d92d      	bls.n	800101c <__udivmoddi4+0x2b8>
 8000fc0:	3802      	subs	r0, #2
 8000fc2:	4463      	add	r3, ip
 8000fc4:	1b9b      	subs	r3, r3, r6
 8000fc6:	b289      	uxth	r1, r1
 8000fc8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fcc:	fb07 3316 	mls	r3, r7, r6, r3
 8000fd0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fd4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fd8:	428b      	cmp	r3, r1
 8000fda:	d908      	bls.n	8000fee <__udivmoddi4+0x28a>
 8000fdc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fe0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fe4:	d216      	bcs.n	8001014 <__udivmoddi4+0x2b0>
 8000fe6:	428b      	cmp	r3, r1
 8000fe8:	d914      	bls.n	8001014 <__udivmoddi4+0x2b0>
 8000fea:	3e02      	subs	r6, #2
 8000fec:	4461      	add	r1, ip
 8000fee:	1ac9      	subs	r1, r1, r3
 8000ff0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ff4:	e738      	b.n	8000e68 <__udivmoddi4+0x104>
 8000ff6:	462e      	mov	r6, r5
 8000ff8:	4628      	mov	r0, r5
 8000ffa:	e705      	b.n	8000e08 <__udivmoddi4+0xa4>
 8000ffc:	4606      	mov	r6, r0
 8000ffe:	e6e3      	b.n	8000dc8 <__udivmoddi4+0x64>
 8001000:	4618      	mov	r0, r3
 8001002:	e6f8      	b.n	8000df6 <__udivmoddi4+0x92>
 8001004:	454b      	cmp	r3, r9
 8001006:	d2a9      	bcs.n	8000f5c <__udivmoddi4+0x1f8>
 8001008:	ebb9 0802 	subs.w	r8, r9, r2
 800100c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001010:	3801      	subs	r0, #1
 8001012:	e7a3      	b.n	8000f5c <__udivmoddi4+0x1f8>
 8001014:	4646      	mov	r6, r8
 8001016:	e7ea      	b.n	8000fee <__udivmoddi4+0x28a>
 8001018:	4620      	mov	r0, r4
 800101a:	e794      	b.n	8000f46 <__udivmoddi4+0x1e2>
 800101c:	4640      	mov	r0, r8
 800101e:	e7d1      	b.n	8000fc4 <__udivmoddi4+0x260>
 8001020:	46d0      	mov	r8, sl
 8001022:	e77b      	b.n	8000f1c <__udivmoddi4+0x1b8>
 8001024:	3b02      	subs	r3, #2
 8001026:	4461      	add	r1, ip
 8001028:	e732      	b.n	8000e90 <__udivmoddi4+0x12c>
 800102a:	4630      	mov	r0, r6
 800102c:	e709      	b.n	8000e42 <__udivmoddi4+0xde>
 800102e:	4464      	add	r4, ip
 8001030:	3802      	subs	r0, #2
 8001032:	e742      	b.n	8000eba <__udivmoddi4+0x156>

08001034 <__aeabi_idiv0>:
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop

08001038 <Kalman_getPressure>:
 *  Created on: 13 Ağu 2024
 *      Author: alper
 */
#include "kalman.h"

double Kalman_getPressure(Kalman_t *Kalman, float newPressure, double newPressureRate, double dt) {
 8001038:	b5b0      	push	{r4, r5, r7, lr}
 800103a:	b096      	sub	sp, #88	; 0x58
 800103c:	af00      	add	r7, sp, #0
 800103e:	6178      	str	r0, [r7, #20]
 8001040:	ed87 0a04 	vstr	s0, [r7, #16]
 8001044:	ed87 1b02 	vstr	d1, [r7, #8]
 8001048:	ed87 2b00 	vstr	d2, [r7]
    // Basınç oranını ölçüm sapması ile düzeltin
    double rate = newPressureRate - Kalman->bias;
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001052:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001056:	f7ff f937 	bl	80002c8 <__aeabi_dsub>
 800105a:	4602      	mov	r2, r0
 800105c:	460b      	mov	r3, r1
 800105e:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    // Tahmin edilen basıncı güncelleyin
    double pressure = rate * dt;
 8001062:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001066:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800106a:	f7ff fae5 	bl	8000638 <__aeabi_dmul>
 800106e:	4602      	mov	r2, r0
 8001070:	460b      	mov	r3, r1
 8001072:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

    // Hata kovaryans matrisini güncelleyin
    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_pressure);
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8001082:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001086:	f7ff fad7 	bl	8000638 <__aeabi_dmul>
 800108a:	4602      	mov	r2, r0
 800108c:	460b      	mov	r3, r1
 800108e:	4610      	mov	r0, r2
 8001090:	4619      	mov	r1, r3
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001098:	f7ff f916 	bl	80002c8 <__aeabi_dsub>
 800109c:	4602      	mov	r2, r0
 800109e:	460b      	mov	r3, r1
 80010a0:	4610      	mov	r0, r2
 80010a2:	4619      	mov	r1, r3
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80010aa:	f7ff f90d 	bl	80002c8 <__aeabi_dsub>
 80010ae:	4602      	mov	r2, r0
 80010b0:	460b      	mov	r3, r1
 80010b2:	4610      	mov	r0, r2
 80010b4:	4619      	mov	r1, r3
 80010b6:	697b      	ldr	r3, [r7, #20]
 80010b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010bc:	f7ff f906 	bl	80002cc <__adddf3>
 80010c0:	4602      	mov	r2, r0
 80010c2:	460b      	mov	r3, r1
 80010c4:	4610      	mov	r0, r2
 80010c6:	4619      	mov	r1, r3
 80010c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80010cc:	f7ff fab4 	bl	8000638 <__aeabi_dmul>
 80010d0:	4602      	mov	r2, r0
 80010d2:	460b      	mov	r3, r1
 80010d4:	4620      	mov	r0, r4
 80010d6:	4629      	mov	r1, r5
 80010d8:	f7ff f8f8 	bl	80002cc <__adddf3>
 80010dc:	4602      	mov	r2, r0
 80010de:	460b      	mov	r3, r1
 80010e0:	6979      	ldr	r1, [r7, #20]
 80010e2:	e9c1 2308 	strd	r2, r3, [r1, #32]
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80010f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80010f6:	f7ff fa9f 	bl	8000638 <__aeabi_dmul>
 80010fa:	4602      	mov	r2, r0
 80010fc:	460b      	mov	r3, r1
 80010fe:	4620      	mov	r0, r4
 8001100:	4629      	mov	r1, r5
 8001102:	f7ff f8e1 	bl	80002c8 <__aeabi_dsub>
 8001106:	4602      	mov	r2, r0
 8001108:	460b      	mov	r3, r1
 800110a:	6979      	ldr	r1, [r7, #20]
 800110c:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800111c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001120:	f7ff fa8a 	bl	8000638 <__aeabi_dmul>
 8001124:	4602      	mov	r2, r0
 8001126:	460b      	mov	r3, r1
 8001128:	4620      	mov	r0, r4
 800112a:	4629      	mov	r1, r5
 800112c:	f7ff f8cc 	bl	80002c8 <__aeabi_dsub>
 8001130:	4602      	mov	r2, r0
 8001132:	460b      	mov	r3, r1
 8001134:	6979      	ldr	r1, [r7, #20]
 8001136:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001146:	e9d7 2300 	ldrd	r2, r3, [r7]
 800114a:	f7ff fa75 	bl	8000638 <__aeabi_dmul>
 800114e:	4602      	mov	r2, r0
 8001150:	460b      	mov	r3, r1
 8001152:	4620      	mov	r0, r4
 8001154:	4629      	mov	r1, r5
 8001156:	f7ff f8b9 	bl	80002cc <__adddf3>
 800115a:	4602      	mov	r2, r0
 800115c:	460b      	mov	r3, r1
 800115e:	6979      	ldr	r1, [r7, #20]
 8001160:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

    // Kalman kazancı hesaplaması
    double S = Kalman->P[0][0] + Kalman->R_measure;
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001170:	f7ff f8ac 	bl	80002cc <__adddf3>
 8001174:	4602      	mov	r2, r0
 8001176:	460b      	mov	r3, r1
 8001178:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8001182:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001186:	f7ff fb81 	bl	800088c <__aeabi_ddiv>
 800118a:	4602      	mov	r2, r0
 800118c:	460b      	mov	r3, r1
 800118e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    K[1] = Kalman->P[1][0] / S;
 8001192:	697b      	ldr	r3, [r7, #20]
 8001194:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8001198:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800119c:	f7ff fb76 	bl	800088c <__aeabi_ddiv>
 80011a0:	4602      	mov	r2, r0
 80011a2:	460b      	mov	r3, r1
 80011a4:	e9c7 2308 	strd	r2, r3, [r7, #32]

    // Ölçülen basınç ile tahmin edilen basınç arasındaki fark
    double y = newPressure - pressure;
 80011a8:	6938      	ldr	r0, [r7, #16]
 80011aa:	f7ff f9ed 	bl	8000588 <__aeabi_f2d>
 80011ae:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80011b2:	f7ff f889 	bl	80002c8 <__aeabi_dsub>
 80011b6:	4602      	mov	r2, r0
 80011b8:	460b      	mov	r3, r1
 80011ba:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38

    // Tahmin edilen basıncı düzeltin
    pressure += K[0] * y;
 80011be:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80011c2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80011c6:	f7ff fa37 	bl	8000638 <__aeabi_dmul>
 80011ca:	4602      	mov	r2, r0
 80011cc:	460b      	mov	r3, r1
 80011ce:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80011d2:	f7ff f87b 	bl	80002cc <__adddf3>
 80011d6:	4602      	mov	r2, r0
 80011d8:	460b      	mov	r3, r1
 80011da:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    Kalman->bias += K[1] * y;
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80011e4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80011e8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80011ec:	f7ff fa24 	bl	8000638 <__aeabi_dmul>
 80011f0:	4602      	mov	r2, r0
 80011f2:	460b      	mov	r3, r1
 80011f4:	4620      	mov	r0, r4
 80011f6:	4629      	mov	r1, r5
 80011f8:	f7ff f868 	bl	80002cc <__adddf3>
 80011fc:	4602      	mov	r2, r0
 80011fe:	460b      	mov	r3, r1
 8001200:	6979      	ldr	r1, [r7, #20]
 8001202:	e9c1 2306 	strd	r2, r3, [r1, #24]

    // Hata kovaryans matrisini güncelleyin
    double P00_temp = Kalman->P[0][0];
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800120c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    double P01_temp = Kalman->P[0][1];
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001216:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

    Kalman->P[0][0] -= K[0] * P00_temp;
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8001220:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001224:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001228:	f7ff fa06 	bl	8000638 <__aeabi_dmul>
 800122c:	4602      	mov	r2, r0
 800122e:	460b      	mov	r3, r1
 8001230:	4620      	mov	r0, r4
 8001232:	4629      	mov	r1, r5
 8001234:	f7ff f848 	bl	80002c8 <__aeabi_dsub>
 8001238:	4602      	mov	r2, r0
 800123a:	460b      	mov	r3, r1
 800123c:	6979      	ldr	r1, [r7, #20]
 800123e:	e9c1 2308 	strd	r2, r3, [r1, #32]
    Kalman->P[0][1] -= K[0] * P01_temp;
 8001242:	697b      	ldr	r3, [r7, #20]
 8001244:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8001248:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800124c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001250:	f7ff f9f2 	bl	8000638 <__aeabi_dmul>
 8001254:	4602      	mov	r2, r0
 8001256:	460b      	mov	r3, r1
 8001258:	4620      	mov	r0, r4
 800125a:	4629      	mov	r1, r5
 800125c:	f7ff f834 	bl	80002c8 <__aeabi_dsub>
 8001260:	4602      	mov	r2, r0
 8001262:	460b      	mov	r3, r1
 8001264:	6979      	ldr	r1, [r7, #20]
 8001266:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[1][0] -= K[1] * P00_temp;
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8001270:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001274:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001278:	f7ff f9de 	bl	8000638 <__aeabi_dmul>
 800127c:	4602      	mov	r2, r0
 800127e:	460b      	mov	r3, r1
 8001280:	4620      	mov	r0, r4
 8001282:	4629      	mov	r1, r5
 8001284:	f7ff f820 	bl	80002c8 <__aeabi_dsub>
 8001288:	4602      	mov	r2, r0
 800128a:	460b      	mov	r3, r1
 800128c:	6979      	ldr	r1, [r7, #20]
 800128e:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][1] -= K[1] * P01_temp;
 8001292:	697b      	ldr	r3, [r7, #20]
 8001294:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8001298:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800129c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80012a0:	f7ff f9ca 	bl	8000638 <__aeabi_dmul>
 80012a4:	4602      	mov	r2, r0
 80012a6:	460b      	mov	r3, r1
 80012a8:	4620      	mov	r0, r4
 80012aa:	4629      	mov	r1, r5
 80012ac:	f7ff f80c 	bl	80002c8 <__aeabi_dsub>
 80012b0:	4602      	mov	r2, r0
 80012b2:	460b      	mov	r3, r1
 80012b4:	6979      	ldr	r1, [r7, #20]
 80012b6:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

    // Tahmin edilen basıncı döndürün
    return pressure;
 80012ba:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80012be:	ec43 2b17 	vmov	d7, r2, r3
}
 80012c2:	eeb0 0a47 	vmov.f32	s0, s14
 80012c6:	eef0 0a67 	vmov.f32	s1, s15
 80012ca:	3758      	adds	r7, #88	; 0x58
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bdb0      	pop	{r4, r5, r7, pc}

080012d0 <prv_parse_number>:
 *                  Security attacks with invalid input data may trigger 
 *                  overflow in the number, which will later be used wrongly in the application,
 *                  but never inside the library itself.
 */
static int32_t
prv_parse_number(lwgps_t* ghandle, const char* text) {
 80012d0:	b480      	push	{r7}
 80012d2:	b085      	sub	sp, #20
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
 80012d8:	6039      	str	r1, [r7, #0]
    int32_t res = 0;
 80012da:	2300      	movs	r3, #0
 80012dc:	60fb      	str	r3, [r7, #12]
    uint8_t minus = 0;
 80012de:	2300      	movs	r3, #0
 80012e0:	72fb      	strb	r3, [r7, #11]

    if (text == NULL) {
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d106      	bne.n	80012f6 <prv_parse_number+0x26>
        text = ghandle->p.term_str;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	3379      	adds	r3, #121	; 0x79
 80012ec:	603b      	str	r3, [r7, #0]
    }
    for (; text != NULL && *text == ' '; ++text) {} /* Strip leading spaces */
 80012ee:	e002      	b.n	80012f6 <prv_parse_number+0x26>
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	3301      	adds	r3, #1
 80012f4:	603b      	str	r3, [r7, #0]
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d003      	beq.n	8001304 <prv_parse_number+0x34>
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	2b20      	cmp	r3, #32
 8001302:	d0f5      	beq.n	80012f0 <prv_parse_number+0x20>

    minus = (*text == '-' ? (++text, 1) : 0);
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	2b2d      	cmp	r3, #45	; 0x2d
 800130a:	d104      	bne.n	8001316 <prv_parse_number+0x46>
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	3301      	adds	r3, #1
 8001310:	603b      	str	r3, [r7, #0]
 8001312:	2301      	movs	r3, #1
 8001314:	e000      	b.n	8001318 <prv_parse_number+0x48>
 8001316:	2300      	movs	r3, #0
 8001318:	72fb      	strb	r3, [r7, #11]
    for (; text != NULL && CIN(*text); ++text) {
 800131a:	e00d      	b.n	8001338 <prv_parse_number+0x68>
        res = 10L * res + CTN(*text);
 800131c:	68fa      	ldr	r2, [r7, #12]
 800131e:	4613      	mov	r3, r2
 8001320:	009b      	lsls	r3, r3, #2
 8001322:	4413      	add	r3, r2
 8001324:	005b      	lsls	r3, r3, #1
 8001326:	461a      	mov	r2, r3
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	3b30      	subs	r3, #48	; 0x30
 800132e:	4413      	add	r3, r2
 8001330:	60fb      	str	r3, [r7, #12]
    for (; text != NULL && CIN(*text); ++text) {
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	3301      	adds	r3, #1
 8001336:	603b      	str	r3, [r7, #0]
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d007      	beq.n	800134e <prv_parse_number+0x7e>
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	2b2f      	cmp	r3, #47	; 0x2f
 8001344:	d903      	bls.n	800134e <prv_parse_number+0x7e>
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	2b39      	cmp	r3, #57	; 0x39
 800134c:	d9e6      	bls.n	800131c <prv_parse_number+0x4c>
    }
    return minus ? -res : res;
 800134e:	7afb      	ldrb	r3, [r7, #11]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d002      	beq.n	800135a <prv_parse_number+0x8a>
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	425b      	negs	r3, r3
 8001358:	e000      	b.n	800135c <prv_parse_number+0x8c>
 800135a:	68fb      	ldr	r3, [r7, #12]
}
 800135c:	4618      	mov	r0, r3
 800135e:	3714      	adds	r7, #20
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr

08001368 <prv_parse_float_number>:
 *                  Security attacks with invalid input data may trigger 
 *                  overflow in the number, which will later be used wrongly in the application,
 *                  but never inside the library itself.
 */
static lwgps_float_t
prv_parse_float_number(lwgps_t* ghandle, const char* text) {
 8001368:	b5b0      	push	{r4, r5, r7, lr}
 800136a:	b088      	sub	sp, #32
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
 8001370:	6039      	str	r1, [r7, #0]
    lwgps_float_t value = (lwgps_float_t)0, power = (lwgps_float_t)1;
 8001372:	f04f 0200 	mov.w	r2, #0
 8001376:	f04f 0300 	mov.w	r3, #0
 800137a:	e9c7 2306 	strd	r2, r3, [r7, #24]
 800137e:	f04f 0200 	mov.w	r2, #0
 8001382:	4b4d      	ldr	r3, [pc, #308]	; (80014b8 <prv_parse_float_number+0x150>)
 8001384:	e9c7 2304 	strd	r2, r3, [r7, #16]
    int sign = 1;
 8001388:	2301      	movs	r3, #1
 800138a:	60fb      	str	r3, [r7, #12]

    if (text == NULL) {
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d106      	bne.n	80013a0 <prv_parse_float_number+0x38>
        text = ghandle->p.term_str;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	3379      	adds	r3, #121	; 0x79
 8001396:	603b      	str	r3, [r7, #0]
    }
    for (; text != NULL && *text == ' '; ++text) {} /* Strip leading spaces */
 8001398:	e002      	b.n	80013a0 <prv_parse_float_number+0x38>
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	3301      	adds	r3, #1
 800139e:	603b      	str	r3, [r7, #0]
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d003      	beq.n	80013ae <prv_parse_float_number+0x46>
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	2b20      	cmp	r3, #32
 80013ac:	d0f5      	beq.n	800139a <prv_parse_float_number+0x32>

    if (*text == '-') { /* Check sign */
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	2b2d      	cmp	r3, #45	; 0x2d
 80013b4:	d124      	bne.n	8001400 <prv_parse_float_number+0x98>
        sign = -1;
 80013b6:	f04f 33ff 	mov.w	r3, #4294967295
 80013ba:	60fb      	str	r3, [r7, #12]
        ++text;
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	3301      	adds	r3, #1
 80013c0:	603b      	str	r3, [r7, #0]
    }
    while (CIN(*text)) { /* Convert main part */
 80013c2:	e01d      	b.n	8001400 <prv_parse_float_number+0x98>
        value = value * (lwgps_float_t)10 + CTN(*text);
 80013c4:	f04f 0200 	mov.w	r2, #0
 80013c8:	4b3c      	ldr	r3, [pc, #240]	; (80014bc <prv_parse_float_number+0x154>)
 80013ca:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80013ce:	f7ff f933 	bl	8000638 <__aeabi_dmul>
 80013d2:	4602      	mov	r2, r0
 80013d4:	460b      	mov	r3, r1
 80013d6:	4614      	mov	r4, r2
 80013d8:	461d      	mov	r5, r3
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	3b30      	subs	r3, #48	; 0x30
 80013e0:	4618      	mov	r0, r3
 80013e2:	f7ff f8bf 	bl	8000564 <__aeabi_i2d>
 80013e6:	4602      	mov	r2, r0
 80013e8:	460b      	mov	r3, r1
 80013ea:	4620      	mov	r0, r4
 80013ec:	4629      	mov	r1, r5
 80013ee:	f7fe ff6d 	bl	80002cc <__adddf3>
 80013f2:	4602      	mov	r2, r0
 80013f4:	460b      	mov	r3, r1
 80013f6:	e9c7 2306 	strd	r2, r3, [r7, #24]
        ++text;
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	3301      	adds	r3, #1
 80013fe:	603b      	str	r3, [r7, #0]
    while (CIN(*text)) { /* Convert main part */
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	2b2f      	cmp	r3, #47	; 0x2f
 8001406:	d903      	bls.n	8001410 <prv_parse_float_number+0xa8>
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	2b39      	cmp	r3, #57	; 0x39
 800140e:	d9d9      	bls.n	80013c4 <prv_parse_float_number+0x5c>
    }
    if (*text == '.') { /* Skip the dot character */
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	2b2e      	cmp	r3, #46	; 0x2e
 8001416:	d12c      	bne.n	8001472 <prv_parse_float_number+0x10a>
        ++text;
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	3301      	adds	r3, #1
 800141c:	603b      	str	r3, [r7, #0]
    }
    while (CIN(*text)) { /* Get the power */
 800141e:	e028      	b.n	8001472 <prv_parse_float_number+0x10a>
        value = value * (lwgps_float_t)10 + CTN(*text);
 8001420:	f04f 0200 	mov.w	r2, #0
 8001424:	4b25      	ldr	r3, [pc, #148]	; (80014bc <prv_parse_float_number+0x154>)
 8001426:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800142a:	f7ff f905 	bl	8000638 <__aeabi_dmul>
 800142e:	4602      	mov	r2, r0
 8001430:	460b      	mov	r3, r1
 8001432:	4614      	mov	r4, r2
 8001434:	461d      	mov	r5, r3
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	781b      	ldrb	r3, [r3, #0]
 800143a:	3b30      	subs	r3, #48	; 0x30
 800143c:	4618      	mov	r0, r3
 800143e:	f7ff f891 	bl	8000564 <__aeabi_i2d>
 8001442:	4602      	mov	r2, r0
 8001444:	460b      	mov	r3, r1
 8001446:	4620      	mov	r0, r4
 8001448:	4629      	mov	r1, r5
 800144a:	f7fe ff3f 	bl	80002cc <__adddf3>
 800144e:	4602      	mov	r2, r0
 8001450:	460b      	mov	r3, r1
 8001452:	e9c7 2306 	strd	r2, r3, [r7, #24]
        power *= (lwgps_float_t)10;
 8001456:	f04f 0200 	mov.w	r2, #0
 800145a:	4b18      	ldr	r3, [pc, #96]	; (80014bc <prv_parse_float_number+0x154>)
 800145c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001460:	f7ff f8ea 	bl	8000638 <__aeabi_dmul>
 8001464:	4602      	mov	r2, r0
 8001466:	460b      	mov	r3, r1
 8001468:	e9c7 2304 	strd	r2, r3, [r7, #16]
        ++text;
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	3301      	adds	r3, #1
 8001470:	603b      	str	r3, [r7, #0]
    while (CIN(*text)) { /* Get the power */
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	2b2f      	cmp	r3, #47	; 0x2f
 8001478:	d903      	bls.n	8001482 <prv_parse_float_number+0x11a>
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	2b39      	cmp	r3, #57	; 0x39
 8001480:	d9ce      	bls.n	8001420 <prv_parse_float_number+0xb8>
    }
    return sign * value / power;
 8001482:	68f8      	ldr	r0, [r7, #12]
 8001484:	f7ff f86e 	bl	8000564 <__aeabi_i2d>
 8001488:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800148c:	f7ff f8d4 	bl	8000638 <__aeabi_dmul>
 8001490:	4602      	mov	r2, r0
 8001492:	460b      	mov	r3, r1
 8001494:	4610      	mov	r0, r2
 8001496:	4619      	mov	r1, r3
 8001498:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800149c:	f7ff f9f6 	bl	800088c <__aeabi_ddiv>
 80014a0:	4602      	mov	r2, r0
 80014a2:	460b      	mov	r3, r1
 80014a4:	ec43 2b17 	vmov	d7, r2, r3
}
 80014a8:	eeb0 0a47 	vmov.f32	s0, s14
 80014ac:	eef0 0a67 	vmov.f32	s1, s15
 80014b0:	3720      	adds	r7, #32
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bdb0      	pop	{r4, r5, r7, pc}
 80014b6:	bf00      	nop
 80014b8:	3ff00000 	.word	0x3ff00000
 80014bc:	40240000 	.word	0x40240000

080014c0 <prv_parse_lat_long>:
 *                  NMEA output for latitude is ddmm.sss and longitude is dddmm.sss
 * \param[in]       ghandle: GPS handle
 * \return          Latitude/Longitude value in degrees
 */
static lwgps_float_t
prv_parse_lat_long(lwgps_t* ghandle) {
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b088      	sub	sp, #32
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
    lwgps_float_t llong, deg, min;

    llong = prv_parse_float_number(ghandle, NULL); /* Parse value as double */
 80014c8:	2100      	movs	r1, #0
 80014ca:	6878      	ldr	r0, [r7, #4]
 80014cc:	f7ff ff4c 	bl	8001368 <prv_parse_float_number>
 80014d0:	ed87 0b06 	vstr	d0, [r7, #24]
    deg = FLT((int)((int)llong / 100));            /* Get absolute degrees value, interested in integer part only */
 80014d4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80014d8:	f7ff fb5e 	bl	8000b98 <__aeabi_d2iz>
 80014dc:	4603      	mov	r3, r0
 80014de:	4a1d      	ldr	r2, [pc, #116]	; (8001554 <prv_parse_lat_long+0x94>)
 80014e0:	fb82 1203 	smull	r1, r2, r2, r3
 80014e4:	1152      	asrs	r2, r2, #5
 80014e6:	17db      	asrs	r3, r3, #31
 80014e8:	1ad3      	subs	r3, r2, r3
 80014ea:	4618      	mov	r0, r3
 80014ec:	f7ff f83a 	bl	8000564 <__aeabi_i2d>
 80014f0:	4602      	mov	r2, r0
 80014f2:	460b      	mov	r3, r1
 80014f4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    min = llong - (deg * FLT(100));                /* Get remaining part from full number, minutes */
 80014f8:	f04f 0200 	mov.w	r2, #0
 80014fc:	4b16      	ldr	r3, [pc, #88]	; (8001558 <prv_parse_lat_long+0x98>)
 80014fe:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001502:	f7ff f899 	bl	8000638 <__aeabi_dmul>
 8001506:	4602      	mov	r2, r0
 8001508:	460b      	mov	r3, r1
 800150a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800150e:	f7fe fedb 	bl	80002c8 <__aeabi_dsub>
 8001512:	4602      	mov	r2, r0
 8001514:	460b      	mov	r3, r1
 8001516:	e9c7 2302 	strd	r2, r3, [r7, #8]
    llong = deg + (min / FLT(60));                 /* Calculate latitude/longitude */
 800151a:	f04f 0200 	mov.w	r2, #0
 800151e:	4b0f      	ldr	r3, [pc, #60]	; (800155c <prv_parse_lat_long+0x9c>)
 8001520:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001524:	f7ff f9b2 	bl	800088c <__aeabi_ddiv>
 8001528:	4602      	mov	r2, r0
 800152a:	460b      	mov	r3, r1
 800152c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001530:	f7fe fecc 	bl	80002cc <__adddf3>
 8001534:	4602      	mov	r2, r0
 8001536:	460b      	mov	r3, r1
 8001538:	e9c7 2306 	strd	r2, r3, [r7, #24]

    return llong;
 800153c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001540:	ec43 2b17 	vmov	d7, r2, r3
}
 8001544:	eeb0 0a47 	vmov.f32	s0, s14
 8001548:	eef0 0a67 	vmov.f32	s1, s15
 800154c:	3720      	adds	r7, #32
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	51eb851f 	.word	0x51eb851f
 8001558:	40590000 	.word	0x40590000
 800155c:	404e0000 	.word	0x404e0000

08001560 <prv_parse_term>:
 * \brief           Parse received term
 * \param[in]       ghandle: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_parse_term(lwgps_t* ghandle) {
 8001560:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001564:	b082      	sub	sp, #8
 8001566:	af00      	add	r7, sp, #0
 8001568:	6078      	str	r0, [r7, #4]
    if (ghandle->p.term_num == 0) { /* Check string type */
 800156a:	6879      	ldr	r1, [r7, #4]
 800156c:	f891 1087 	ldrb.w	r1, [r1, #135]	; 0x87
 8001570:	2900      	cmp	r1, #0
 8001572:	d169      	bne.n	8001648 <prv_parse_term+0xe8>
        if (0) {
#if LWGPS_CFG_STATEMENT_GPGGA
        } else if (!strncmp(ghandle->p.term_str, "$GPGGA", 6) || !strncmp(ghandle->p.term_str, "$GNGGA", 6)) {
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	3379      	adds	r3, #121	; 0x79
 8001578:	2206      	movs	r2, #6
 800157a:	49bd      	ldr	r1, [pc, #756]	; (8001870 <prv_parse_term+0x310>)
 800157c:	4618      	mov	r0, r3
 800157e:	f009 ff67 	bl	800b450 <strncmp>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d009      	beq.n	800159c <prv_parse_term+0x3c>
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	3379      	adds	r3, #121	; 0x79
 800158c:	2206      	movs	r2, #6
 800158e:	49b9      	ldr	r1, [pc, #740]	; (8001874 <prv_parse_term+0x314>)
 8001590:	4618      	mov	r0, r3
 8001592:	f009 ff5d 	bl	800b450 <strncmp>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d104      	bne.n	80015a6 <prv_parse_term+0x46>
            ghandle->p.stat = STAT_GGA;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2201      	movs	r2, #1
 80015a0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
 80015a4:	e04e      	b.n	8001644 <prv_parse_term+0xe4>
#endif /* LWGPS_CFG_STATEMENT_GPGGA */
#if LWGPS_CFG_STATEMENT_GPGSA
        } else if (!strncmp(ghandle->p.term_str, "$GPGSA", 6) || !strncmp(ghandle->p.term_str, "$GNGSA", 6)) {
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	3379      	adds	r3, #121	; 0x79
 80015aa:	2206      	movs	r2, #6
 80015ac:	49b2      	ldr	r1, [pc, #712]	; (8001878 <prv_parse_term+0x318>)
 80015ae:	4618      	mov	r0, r3
 80015b0:	f009 ff4e 	bl	800b450 <strncmp>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d009      	beq.n	80015ce <prv_parse_term+0x6e>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	3379      	adds	r3, #121	; 0x79
 80015be:	2206      	movs	r2, #6
 80015c0:	49ae      	ldr	r1, [pc, #696]	; (800187c <prv_parse_term+0x31c>)
 80015c2:	4618      	mov	r0, r3
 80015c4:	f009 ff44 	bl	800b450 <strncmp>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d104      	bne.n	80015d8 <prv_parse_term+0x78>
            ghandle->p.stat = STAT_GSA;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2202      	movs	r2, #2
 80015d2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
 80015d6:	e035      	b.n	8001644 <prv_parse_term+0xe4>
#endif /* LWGPS_CFG_STATEMENT_GPGSA */
#if LWGPS_CFG_STATEMENT_GPGSV
        } else if (!strncmp(ghandle->p.term_str, "$GPGSV", 6) || !strncmp(ghandle->p.term_str, "$GNGSV", 6)) {
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	3379      	adds	r3, #121	; 0x79
 80015dc:	2206      	movs	r2, #6
 80015de:	49a8      	ldr	r1, [pc, #672]	; (8001880 <prv_parse_term+0x320>)
 80015e0:	4618      	mov	r0, r3
 80015e2:	f009 ff35 	bl	800b450 <strncmp>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d009      	beq.n	8001600 <prv_parse_term+0xa0>
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	3379      	adds	r3, #121	; 0x79
 80015f0:	2206      	movs	r2, #6
 80015f2:	49a4      	ldr	r1, [pc, #656]	; (8001884 <prv_parse_term+0x324>)
 80015f4:	4618      	mov	r0, r3
 80015f6:	f009 ff2b 	bl	800b450 <strncmp>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d104      	bne.n	800160a <prv_parse_term+0xaa>
            ghandle->p.stat = STAT_GSV;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2203      	movs	r2, #3
 8001604:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
 8001608:	e01c      	b.n	8001644 <prv_parse_term+0xe4>
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
        } else if (!strncmp(ghandle->p.term_str, "$GPRMC", 6) || !strncmp(ghandle->p.term_str, "$GNRMC", 6)) {
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	3379      	adds	r3, #121	; 0x79
 800160e:	2206      	movs	r2, #6
 8001610:	499d      	ldr	r1, [pc, #628]	; (8001888 <prv_parse_term+0x328>)
 8001612:	4618      	mov	r0, r3
 8001614:	f009 ff1c 	bl	800b450 <strncmp>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d009      	beq.n	8001632 <prv_parse_term+0xd2>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	3379      	adds	r3, #121	; 0x79
 8001622:	2206      	movs	r2, #6
 8001624:	4999      	ldr	r1, [pc, #612]	; (800188c <prv_parse_term+0x32c>)
 8001626:	4618      	mov	r0, r3
 8001628:	f009 ff12 	bl	800b450 <strncmp>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d104      	bne.n	800163c <prv_parse_term+0xdc>
            ghandle->p.stat = STAT_RMC;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2204      	movs	r2, #4
 8001636:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
 800163a:	e003      	b.n	8001644 <prv_parse_term+0xe4>
#if LWGPS_CFG_STATEMENT_PUBX
        } else if (!strncmp(ghandle->p.term_str, "$PUBX", 5)) {
            ghandle->p.stat = STAT_UBX;
#endif /* LWGPS_CFG_STATEMENT_PUBX */
        } else {
            ghandle->p.stat = STAT_UNKNOWN; /* Invalid statement for library */
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2200      	movs	r2, #0
 8001640:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        }
        return 1;
 8001644:	2301      	movs	r3, #1
 8001646:	e243      	b.n	8001ad0 <prv_parse_term+0x570>
    }

    /* Start parsing terms */
    if (ghandle->p.stat == STAT_UNKNOWN) {
 8001648:	6879      	ldr	r1, [r7, #4]
 800164a:	f891 1078 	ldrb.w	r1, [r1, #120]	; 0x78
 800164e:	2900      	cmp	r1, #0
 8001650:	f000 823d 	beq.w	8001ace <prv_parse_term+0x56e>
#if LWGPS_CFG_STATEMENT_GPGGA
    } else if (ghandle->p.stat == STAT_GGA) { /* Process GPGGA statement */
 8001654:	6879      	ldr	r1, [r7, #4]
 8001656:	f891 1078 	ldrb.w	r1, [r1, #120]	; 0x78
 800165a:	2901      	cmp	r1, #1
 800165c:	f040 80d9 	bne.w	8001812 <prv_parse_term+0x2b2>
        switch (ghandle->p.term_num) {
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
 8001666:	3b01      	subs	r3, #1
 8001668:	2b0c      	cmp	r3, #12
 800166a:	f200 8223 	bhi.w	8001ab4 <prv_parse_term+0x554>
 800166e:	a201      	add	r2, pc, #4	; (adr r2, 8001674 <prv_parse_term+0x114>)
 8001670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001674:	080016a9 	.word	0x080016a9
 8001678:	08001723 	.word	0x08001723
 800167c:	08001739 	.word	0x08001739
 8001680:	08001763 	.word	0x08001763
 8001684:	08001779 	.word	0x08001779
 8001688:	080017a3 	.word	0x080017a3
 800168c:	080017b7 	.word	0x080017b7
 8001690:	08001ab5 	.word	0x08001ab5
 8001694:	080017cb 	.word	0x080017cb
 8001698:	08001ab5 	.word	0x08001ab5
 800169c:	080017e3 	.word	0x080017e3
 80016a0:	08001ab5 	.word	0x08001ab5
 80016a4:	080017fb 	.word	0x080017fb
            case 1: /* Process UTC time */
                ghandle->p.data.gga.hours = 10 * CTN(ghandle->p.term_str[0]) + CTN(ghandle->p.term_str[1]);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 80016ae:	3b30      	subs	r3, #48	; 0x30
 80016b0:	b2db      	uxtb	r3, r3
 80016b2:	461a      	mov	r2, r3
 80016b4:	0092      	lsls	r2, r2, #2
 80016b6:	4413      	add	r3, r2
 80016b8:	005b      	lsls	r3, r3, #1
 80016ba:	b2da      	uxtb	r2, r3
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 80016c2:	4413      	add	r3, r2
 80016c4:	b2db      	uxtb	r3, r3
 80016c6:	3b30      	subs	r3, #48	; 0x30
 80016c8:	b2da      	uxtb	r2, r3
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
                ghandle->p.data.gga.minutes = 10 * CTN(ghandle->p.term_str[2]) + CTN(ghandle->p.term_str[3]);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 80016d6:	3b30      	subs	r3, #48	; 0x30
 80016d8:	b2db      	uxtb	r3, r3
 80016da:	461a      	mov	r2, r3
 80016dc:	0092      	lsls	r2, r2, #2
 80016de:	4413      	add	r3, r2
 80016e0:	005b      	lsls	r3, r3, #1
 80016e2:	b2da      	uxtb	r2, r3
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80016ea:	4413      	add	r3, r2
 80016ec:	b2db      	uxtb	r3, r3
 80016ee:	3b30      	subs	r3, #48	; 0x30
 80016f0:	b2da      	uxtb	r2, r3
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
                ghandle->p.data.gga.seconds = 10 * CTN(ghandle->p.term_str[4]) + CTN(ghandle->p.term_str[5]);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 80016fe:	3b30      	subs	r3, #48	; 0x30
 8001700:	b2db      	uxtb	r3, r3
 8001702:	461a      	mov	r2, r3
 8001704:	0092      	lsls	r2, r2, #2
 8001706:	4413      	add	r3, r2
 8001708:	005b      	lsls	r3, r3, #1
 800170a:	b2da      	uxtb	r2, r3
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8001712:	4413      	add	r3, r2
 8001714:	b2db      	uxtb	r3, r3
 8001716:	3b30      	subs	r3, #48	; 0x30
 8001718:	b2da      	uxtb	r2, r3
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
                break;
 8001720:	e1d5      	b.n	8001ace <prv_parse_term+0x56e>
            case 2:                                                         /* Latitude */
                ghandle->p.data.gga.latitude = prv_parse_lat_long(ghandle); /* Parse latitude */
 8001722:	6878      	ldr	r0, [r7, #4]
 8001724:	f7ff fecc 	bl	80014c0 <prv_parse_lat_long>
 8001728:	eeb0 7a40 	vmov.f32	s14, s0
 800172c:	eef0 7a60 	vmov.f32	s15, s1
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	ed83 7b24 	vstr	d7, [r3, #144]	; 0x90
                break;
 8001736:	e1ca      	b.n	8001ace <prv_parse_term+0x56e>
            case 3: /* Latitude north/south information */
                if (ghandle->p.term_str[0] == 'S' || ghandle->p.term_str[0] == 's') {
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 800173e:	2b53      	cmp	r3, #83	; 0x53
 8001740:	d005      	beq.n	800174e <prv_parse_term+0x1ee>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8001748:	2b73      	cmp	r3, #115	; 0x73
 800174a:	f040 81b5 	bne.w	8001ab8 <prv_parse_term+0x558>
                    ghandle->p.data.gga.latitude = -ghandle->p.data.gga.latitude;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 8001754:	4690      	mov	r8, r2
 8001756:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	e9c3 8924 	strd	r8, r9, [r3, #144]	; 0x90
                }
                break;
 8001760:	e1aa      	b.n	8001ab8 <prv_parse_term+0x558>
            case 4:                                                          /* Longitude */
                ghandle->p.data.gga.longitude = prv_parse_lat_long(ghandle); /* Parse longitude */
 8001762:	6878      	ldr	r0, [r7, #4]
 8001764:	f7ff feac 	bl	80014c0 <prv_parse_lat_long>
 8001768:	eeb0 7a40 	vmov.f32	s14, s0
 800176c:	eef0 7a60 	vmov.f32	s15, s1
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	ed83 7b26 	vstr	d7, [r3, #152]	; 0x98
                break;
 8001776:	e1aa      	b.n	8001ace <prv_parse_term+0x56e>
            case 5: /* Longitude east/west information */
                if (ghandle->p.term_str[0] == 'W' || ghandle->p.term_str[0] == 'w') {
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 800177e:	2b57      	cmp	r3, #87	; 0x57
 8001780:	d005      	beq.n	800178e <prv_parse_term+0x22e>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8001788:	2b77      	cmp	r3, #119	; 0x77
 800178a:	f040 8197 	bne.w	8001abc <prv_parse_term+0x55c>
                    ghandle->p.data.gga.longitude = -ghandle->p.data.gga.longitude;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	; 0x98
 8001794:	4614      	mov	r4, r2
 8001796:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	e9c3 4526 	strd	r4, r5, [r3, #152]	; 0x98
                }
                break;
 80017a0:	e18c      	b.n	8001abc <prv_parse_term+0x55c>
            case 6: /* Fix status */ ghandle->p.data.gga.fix = (uint8_t)prv_parse_number(ghandle, NULL); break;
 80017a2:	2100      	movs	r1, #0
 80017a4:	6878      	ldr	r0, [r7, #4]
 80017a6:	f7ff fd93 	bl	80012d0 <prv_parse_number>
 80017aa:	4603      	mov	r3, r0
 80017ac:	b2da      	uxtb	r2, r3
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
 80017b4:	e18b      	b.n	8001ace <prv_parse_term+0x56e>
            case 7: /* Satellites in use */
                ghandle->p.data.gga.sats_in_use = (uint8_t)prv_parse_number(ghandle, NULL);
 80017b6:	2100      	movs	r1, #0
 80017b8:	6878      	ldr	r0, [r7, #4]
 80017ba:	f7ff fd89 	bl	80012d0 <prv_parse_number>
 80017be:	4603      	mov	r3, r0
 80017c0:	b2da      	uxtb	r2, r3
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
                break;
 80017c8:	e181      	b.n	8001ace <prv_parse_term+0x56e>
            case 9: /* Altitude */ ghandle->p.data.gga.altitude = prv_parse_float_number(ghandle, NULL); break;
 80017ca:	2100      	movs	r1, #0
 80017cc:	6878      	ldr	r0, [r7, #4]
 80017ce:	f7ff fdcb 	bl	8001368 <prv_parse_float_number>
 80017d2:	eeb0 7a40 	vmov.f32	s14, s0
 80017d6:	eef0 7a60 	vmov.f32	s15, s1
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	ed83 7b28 	vstr	d7, [r3, #160]	; 0xa0
 80017e0:	e175      	b.n	8001ace <prv_parse_term+0x56e>
            case 11: /* Altitude above ellipsoid */
                ghandle->p.data.gga.geo_sep = prv_parse_float_number(ghandle, NULL);
 80017e2:	2100      	movs	r1, #0
 80017e4:	6878      	ldr	r0, [r7, #4]
 80017e6:	f7ff fdbf 	bl	8001368 <prv_parse_float_number>
 80017ea:	eeb0 7a40 	vmov.f32	s14, s0
 80017ee:	eef0 7a60 	vmov.f32	s15, s1
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	ed83 7b2a 	vstr	d7, [r3, #168]	; 0xa8
                break;
 80017f8:	e169      	b.n	8001ace <prv_parse_term+0x56e>
            case 13: /* Age of differential GPS correction data */
                ghandle->p.data.gga.dgps_age = prv_parse_float_number(ghandle, NULL);
 80017fa:	2100      	movs	r1, #0
 80017fc:	6878      	ldr	r0, [r7, #4]
 80017fe:	f7ff fdb3 	bl	8001368 <prv_parse_float_number>
 8001802:	eeb0 7a40 	vmov.f32	s14, s0
 8001806:	eef0 7a60 	vmov.f32	s15, s1
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	ed83 7b2e 	vstr	d7, [r3, #184]	; 0xb8
                break;
 8001810:	e15d      	b.n	8001ace <prv_parse_term+0x56e>
            default: break;
        }
#endif /* LWGPS_CFG_STATEMENT_GPGGA */
#if LWGPS_CFG_STATEMENT_GPGSA
    } else if (ghandle->p.stat == STAT_GSA) { /* Process GPGSA statement */
 8001812:	6879      	ldr	r1, [r7, #4]
 8001814:	f891 1078 	ldrb.w	r1, [r1, #120]	; 0x78
 8001818:	2902      	cmp	r1, #2
 800181a:	f040 8083 	bne.w	8001924 <prv_parse_term+0x3c4>
        switch (ghandle->p.term_num) {
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
 8001824:	3b02      	subs	r3, #2
 8001826:	2b0f      	cmp	r3, #15
 8001828:	d860      	bhi.n	80018ec <prv_parse_term+0x38c>
 800182a:	a201      	add	r2, pc, #4	; (adr r2, 8001830 <prv_parse_term+0x2d0>)
 800182c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001830:	08001891 	.word	0x08001891
 8001834:	080018ed 	.word	0x080018ed
 8001838:	080018ed 	.word	0x080018ed
 800183c:	080018ed 	.word	0x080018ed
 8001840:	080018ed 	.word	0x080018ed
 8001844:	080018ed 	.word	0x080018ed
 8001848:	080018ed 	.word	0x080018ed
 800184c:	080018ed 	.word	0x080018ed
 8001850:	080018ed 	.word	0x080018ed
 8001854:	080018ed 	.word	0x080018ed
 8001858:	080018ed 	.word	0x080018ed
 800185c:	080018ed 	.word	0x080018ed
 8001860:	080018ed 	.word	0x080018ed
 8001864:	080018a5 	.word	0x080018a5
 8001868:	080018bd 	.word	0x080018bd
 800186c:	080018d5 	.word	0x080018d5
 8001870:	0800f9b8 	.word	0x0800f9b8
 8001874:	0800f9c0 	.word	0x0800f9c0
 8001878:	0800f9c8 	.word	0x0800f9c8
 800187c:	0800f9d0 	.word	0x0800f9d0
 8001880:	0800f9d8 	.word	0x0800f9d8
 8001884:	0800f9e0 	.word	0x0800f9e0
 8001888:	0800f9e8 	.word	0x0800f9e8
 800188c:	0800f9f0 	.word	0x0800f9f0
            case 2: ghandle->p.data.gsa.fix_mode = (uint8_t)prv_parse_number(ghandle, NULL); break;
 8001890:	2100      	movs	r1, #0
 8001892:	6878      	ldr	r0, [r7, #4]
 8001894:	f7ff fd1c 	bl	80012d0 <prv_parse_number>
 8001898:	4603      	mov	r3, r0
 800189a:	b2da      	uxtb	r2, r3
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
 80018a2:	e114      	b.n	8001ace <prv_parse_term+0x56e>
            case 15: ghandle->p.data.gsa.dop_p = prv_parse_float_number(ghandle, NULL); break;
 80018a4:	2100      	movs	r1, #0
 80018a6:	6878      	ldr	r0, [r7, #4]
 80018a8:	f7ff fd5e 	bl	8001368 <prv_parse_float_number>
 80018ac:	eeb0 7a40 	vmov.f32	s14, s0
 80018b0:	eef0 7a60 	vmov.f32	s15, s1
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	ed83 7b28 	vstr	d7, [r3, #160]	; 0xa0
 80018ba:	e108      	b.n	8001ace <prv_parse_term+0x56e>
            case 16: ghandle->p.data.gsa.dop_h = prv_parse_float_number(ghandle, NULL); break;
 80018bc:	2100      	movs	r1, #0
 80018be:	6878      	ldr	r0, [r7, #4]
 80018c0:	f7ff fd52 	bl	8001368 <prv_parse_float_number>
 80018c4:	eeb0 7a40 	vmov.f32	s14, s0
 80018c8:	eef0 7a60 	vmov.f32	s15, s1
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	ed83 7b24 	vstr	d7, [r3, #144]	; 0x90
 80018d2:	e0fc      	b.n	8001ace <prv_parse_term+0x56e>
            case 17: ghandle->p.data.gsa.dop_v = prv_parse_float_number(ghandle, NULL); break;
 80018d4:	2100      	movs	r1, #0
 80018d6:	6878      	ldr	r0, [r7, #4]
 80018d8:	f7ff fd46 	bl	8001368 <prv_parse_float_number>
 80018dc:	eeb0 7a40 	vmov.f32	s14, s0
 80018e0:	eef0 7a60 	vmov.f32	s15, s1
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	ed83 7b26 	vstr	d7, [r3, #152]	; 0x98
 80018ea:	e0f0      	b.n	8001ace <prv_parse_term+0x56e>
            default:
                /* Parse satellite IDs */
                if (ghandle->p.term_num >= 3 && ghandle->p.term_num <= 14) {
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
 80018f2:	2b02      	cmp	r3, #2
 80018f4:	f240 80e4 	bls.w	8001ac0 <prv_parse_term+0x560>
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
 80018fe:	2b0e      	cmp	r3, #14
 8001900:	f200 80de 	bhi.w	8001ac0 <prv_parse_term+0x560>
                    ghandle->p.data.gsa.satellites_ids[ghandle->p.term_num - 3] =
                        (uint8_t)prv_parse_number(ghandle, NULL);
 8001904:	2100      	movs	r1, #0
 8001906:	6878      	ldr	r0, [r7, #4]
 8001908:	f7ff fce2 	bl	80012d0 <prv_parse_number>
 800190c:	4602      	mov	r2, r0
                    ghandle->p.data.gsa.satellites_ids[ghandle->p.term_num - 3] =
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
 8001914:	3b03      	subs	r3, #3
                        (uint8_t)prv_parse_number(ghandle, NULL);
 8001916:	b2d1      	uxtb	r1, r2
                    ghandle->p.data.gsa.satellites_ids[ghandle->p.term_num - 3] =
 8001918:	687a      	ldr	r2, [r7, #4]
 800191a:	4413      	add	r3, r2
 800191c:	460a      	mov	r2, r1
 800191e:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
                }
                break;
 8001922:	e0cd      	b.n	8001ac0 <prv_parse_term+0x560>
        }
#endif /* LWGPS_CFG_STATEMENT_GPGSA */
#if LWGPS_CFG_STATEMENT_GPGSV
    } else if (ghandle->p.stat == STAT_GSV) { /* Process GPGSV statement */
 8001924:	6879      	ldr	r1, [r7, #4]
 8001926:	f891 1078 	ldrb.w	r1, [r1, #120]	; 0x78
 800192a:	2903      	cmp	r1, #3
 800192c:	d11b      	bne.n	8001966 <prv_parse_term+0x406>
        switch (ghandle->p.term_num) {
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
 8001934:	2b02      	cmp	r3, #2
 8001936:	d002      	beq.n	800193e <prv_parse_term+0x3de>
 8001938:	2b03      	cmp	r3, #3
 800193a:	d00a      	beq.n	8001952 <prv_parse_term+0x3f2>
                            default: break;
                        }
                    }
                }
#endif /* LWGPS_CFG_STATEMENT_GPGSV_SAT_DET */
                break;
 800193c:	e0c7      	b.n	8001ace <prv_parse_term+0x56e>
                ghandle->p.data.gsv.stat_num = (uint8_t)prv_parse_number(ghandle, NULL);
 800193e:	2100      	movs	r1, #0
 8001940:	6878      	ldr	r0, [r7, #4]
 8001942:	f7ff fcc5 	bl	80012d0 <prv_parse_number>
 8001946:	4603      	mov	r3, r0
 8001948:	b2da      	uxtb	r2, r3
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
                break;
 8001950:	e0bd      	b.n	8001ace <prv_parse_term+0x56e>
                ghandle->p.data.gsv.sats_in_view = (uint8_t)prv_parse_number(ghandle, NULL);
 8001952:	2100      	movs	r1, #0
 8001954:	6878      	ldr	r0, [r7, #4]
 8001956:	f7ff fcbb 	bl	80012d0 <prv_parse_number>
 800195a:	4603      	mov	r3, r0
 800195c:	b2da      	uxtb	r2, r3
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
                break;
 8001964:	e0b3      	b.n	8001ace <prv_parse_term+0x56e>
        }
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
    } else if (ghandle->p.stat == STAT_RMC) { /* Process GPRMC statement */
 8001966:	6879      	ldr	r1, [r7, #4]
 8001968:	f891 1078 	ldrb.w	r1, [r1, #120]	; 0x78
 800196c:	2904      	cmp	r1, #4
 800196e:	f040 80a9 	bne.w	8001ac4 <prv_parse_term+0x564>
        switch (ghandle->p.term_num) {
 8001972:	6879      	ldr	r1, [r7, #4]
 8001974:	f891 1087 	ldrb.w	r1, [r1, #135]	; 0x87
 8001978:	3902      	subs	r1, #2
 800197a:	2909      	cmp	r1, #9
 800197c:	f200 80a4 	bhi.w	8001ac8 <prv_parse_term+0x568>
 8001980:	a001      	add	r0, pc, #4	; (adr r0, 8001988 <prv_parse_term+0x428>)
 8001982:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8001986:	bf00      	nop
 8001988:	080019b1 	.word	0x080019b1
 800198c:	08001ac9 	.word	0x08001ac9
 8001990:	08001ac9 	.word	0x08001ac9
 8001994:	08001ac9 	.word	0x08001ac9
 8001998:	08001ac9 	.word	0x08001ac9
 800199c:	080019cb 	.word	0x080019cb
 80019a0:	080019e3 	.word	0x080019e3
 80019a4:	080019fb 	.word	0x080019fb
 80019a8:	08001a75 	.word	0x08001a75
 80019ac:	08001a8d 	.word	0x08001a8d
            case 2: /* Process valid status */ ghandle->p.data.rmc.is_valid = (ghandle->p.term_str[0] == 'A'); break;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 80019b6:	2b41      	cmp	r3, #65	; 0x41
 80019b8:	bf0c      	ite	eq
 80019ba:	2301      	moveq	r3, #1
 80019bc:	2300      	movne	r3, #0
 80019be:	b2db      	uxtb	r3, r3
 80019c0:	461a      	mov	r2, r3
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
 80019c8:	e081      	b.n	8001ace <prv_parse_term+0x56e>
            case 7: /* Process ground speed in knots */
                ghandle->p.data.rmc.speed = prv_parse_float_number(ghandle, NULL);
 80019ca:	2100      	movs	r1, #0
 80019cc:	6878      	ldr	r0, [r7, #4]
 80019ce:	f7ff fccb 	bl	8001368 <prv_parse_float_number>
 80019d2:	eeb0 7a40 	vmov.f32	s14, s0
 80019d6:	eef0 7a60 	vmov.f32	s15, s1
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	ed83 7b26 	vstr	d7, [r3, #152]	; 0x98
                break;
 80019e0:	e075      	b.n	8001ace <prv_parse_term+0x56e>
            case 8: /* Process true ground coarse */
                ghandle->p.data.rmc.course = prv_parse_float_number(ghandle, NULL);
 80019e2:	2100      	movs	r1, #0
 80019e4:	6878      	ldr	r0, [r7, #4]
 80019e6:	f7ff fcbf 	bl	8001368 <prv_parse_float_number>
 80019ea:	eeb0 7a40 	vmov.f32	s14, s0
 80019ee:	eef0 7a60 	vmov.f32	s15, s1
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	ed83 7b28 	vstr	d7, [r3, #160]	; 0xa0
                break;
 80019f8:	e069      	b.n	8001ace <prv_parse_term+0x56e>
            case 9: /* Process date */
                ghandle->p.data.rmc.date = (uint8_t)(10U * CTN(ghandle->p.term_str[0]) + CTN(ghandle->p.term_str[1]));
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8001a00:	3b30      	subs	r3, #48	; 0x30
 8001a02:	b2db      	uxtb	r3, r3
 8001a04:	461a      	mov	r2, r3
 8001a06:	0092      	lsls	r2, r2, #2
 8001a08:	4413      	add	r3, r2
 8001a0a:	005b      	lsls	r3, r3, #1
 8001a0c:	b2da      	uxtb	r2, r3
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 8001a14:	4413      	add	r3, r2
 8001a16:	b2db      	uxtb	r3, r3
 8001a18:	3b30      	subs	r3, #48	; 0x30
 8001a1a:	b2da      	uxtb	r2, r3
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
                ghandle->p.data.rmc.month = (uint8_t)(10U * CTN(ghandle->p.term_str[2]) + CTN(ghandle->p.term_str[3]));
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 8001a28:	3b30      	subs	r3, #48	; 0x30
 8001a2a:	b2db      	uxtb	r3, r3
 8001a2c:	461a      	mov	r2, r3
 8001a2e:	0092      	lsls	r2, r2, #2
 8001a30:	4413      	add	r3, r2
 8001a32:	005b      	lsls	r3, r3, #1
 8001a34:	b2da      	uxtb	r2, r3
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8001a3c:	4413      	add	r3, r2
 8001a3e:	b2db      	uxtb	r3, r3
 8001a40:	3b30      	subs	r3, #48	; 0x30
 8001a42:	b2da      	uxtb	r2, r3
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
                ghandle->p.data.rmc.year = (uint8_t)(10U * CTN(ghandle->p.term_str[4]) + CTN(ghandle->p.term_str[5]));
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8001a50:	3b30      	subs	r3, #48	; 0x30
 8001a52:	b2db      	uxtb	r3, r3
 8001a54:	461a      	mov	r2, r3
 8001a56:	0092      	lsls	r2, r2, #2
 8001a58:	4413      	add	r3, r2
 8001a5a:	005b      	lsls	r3, r3, #1
 8001a5c:	b2da      	uxtb	r2, r3
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8001a64:	4413      	add	r3, r2
 8001a66:	b2db      	uxtb	r3, r3
 8001a68:	3b30      	subs	r3, #48	; 0x30
 8001a6a:	b2da      	uxtb	r2, r3
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
                break;
 8001a72:	e02c      	b.n	8001ace <prv_parse_term+0x56e>
            case 10: /* Process magnetic variation */
                ghandle->p.data.rmc.variation = prv_parse_float_number(ghandle, NULL);
 8001a74:	2100      	movs	r1, #0
 8001a76:	6878      	ldr	r0, [r7, #4]
 8001a78:	f7ff fc76 	bl	8001368 <prv_parse_float_number>
 8001a7c:	eeb0 7a40 	vmov.f32	s14, s0
 8001a80:	eef0 7a60 	vmov.f32	s15, s1
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	ed83 7b2a 	vstr	d7, [r3, #168]	; 0xa8
                break;
 8001a8a:	e020      	b.n	8001ace <prv_parse_term+0x56e>
            case 11: /* Process magnetic variation east/west */
                if (ghandle->p.term_str[0] == 'W' || ghandle->p.term_str[0] == 'w') {
 8001a8c:	6879      	ldr	r1, [r7, #4]
 8001a8e:	f891 1079 	ldrb.w	r1, [r1, #121]	; 0x79
 8001a92:	2957      	cmp	r1, #87	; 0x57
 8001a94:	d004      	beq.n	8001aa0 <prv_parse_term+0x540>
 8001a96:	6879      	ldr	r1, [r7, #4]
 8001a98:	f891 1079 	ldrb.w	r1, [r1, #121]	; 0x79
 8001a9c:	2977      	cmp	r1, #119	; 0x77
 8001a9e:	d115      	bne.n	8001acc <prv_parse_term+0x56c>
                    ghandle->p.data.rmc.variation = -ghandle->p.data.rmc.variation;
 8001aa0:	6879      	ldr	r1, [r7, #4]
 8001aa2:	e9d1 012a 	ldrd	r0, r1, [r1, #168]	; 0xa8
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	f081 4300 	eor.w	r3, r1, #2147483648	; 0x80000000
 8001aac:	6879      	ldr	r1, [r7, #4]
 8001aae:	e9c1 232a 	strd	r2, r3, [r1, #168]	; 0xa8
                }
                break;
 8001ab2:	e00b      	b.n	8001acc <prv_parse_term+0x56c>
            default: break;
 8001ab4:	bf00      	nop
 8001ab6:	e00a      	b.n	8001ace <prv_parse_term+0x56e>
                break;
 8001ab8:	bf00      	nop
 8001aba:	e008      	b.n	8001ace <prv_parse_term+0x56e>
                break;
 8001abc:	bf00      	nop
 8001abe:	e006      	b.n	8001ace <prv_parse_term+0x56e>
                break;
 8001ac0:	bf00      	nop
 8001ac2:	e004      	b.n	8001ace <prv_parse_term+0x56e>
                break;
            default: break;
        }
#endif /* LWGPS_CFG_STATEMENT_PUBX_TIME */
#endif /* LWGPS_CFG_STATEMENT_PUBX */
    }
 8001ac4:	bf00      	nop
 8001ac6:	e002      	b.n	8001ace <prv_parse_term+0x56e>
            default: break;
 8001ac8:	bf00      	nop
 8001aca:	e000      	b.n	8001ace <prv_parse_term+0x56e>
                break;
 8001acc:	bf00      	nop
    return 1;
 8001ace:	2301      	movs	r3, #1
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	3708      	adds	r7, #8
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001ada:	bf00      	nop

08001adc <prv_check_crc>:
 * \brief           Compare calculated CRC with received CRC
 * \param[in]       ghandle: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_check_crc(lwgps_t* ghandle) {
 8001adc:	b480      	push	{r7}
 8001ade:	b085      	sub	sp, #20
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
    uint8_t crc;
    crc = (uint8_t)((CHTN(ghandle->p.term_str[0]) & 0x0FU) << 0x04U)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
          | (CHTN(ghandle->p.term_str[1]) & 0x0FU); /* Convert received CRC from string (hex) to number */
 8001aea:	2b2f      	cmp	r3, #47	; 0x2f
 8001aec:	d90a      	bls.n	8001b04 <prv_check_crc+0x28>
    crc = (uint8_t)((CHTN(ghandle->p.term_str[0]) & 0x0FU) << 0x04U)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8001af4:	2b39      	cmp	r3, #57	; 0x39
 8001af6:	d805      	bhi.n	8001b04 <prv_check_crc+0x28>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
          | (CHTN(ghandle->p.term_str[1]) & 0x0FU); /* Convert received CRC from string (hex) to number */
 8001afe:	011b      	lsls	r3, r3, #4
 8001b00:	b2da      	uxtb	r2, r3
 8001b02:	e024      	b.n	8001b4e <prv_check_crc+0x72>
    crc = (uint8_t)((CHTN(ghandle->p.term_str[0]) & 0x0FU) << 0x04U)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
          | (CHTN(ghandle->p.term_str[1]) & 0x0FU); /* Convert received CRC from string (hex) to number */
 8001b0a:	2b60      	cmp	r3, #96	; 0x60
 8001b0c:	d90c      	bls.n	8001b28 <prv_check_crc+0x4c>
    crc = (uint8_t)((CHTN(ghandle->p.term_str[0]) & 0x0FU) << 0x04U)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8001b14:	2b7a      	cmp	r3, #122	; 0x7a
 8001b16:	d807      	bhi.n	8001b28 <prv_check_crc+0x4c>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8001b1e:	3b57      	subs	r3, #87	; 0x57
 8001b20:	b2db      	uxtb	r3, r3
          | (CHTN(ghandle->p.term_str[1]) & 0x0FU); /* Convert received CRC from string (hex) to number */
 8001b22:	011b      	lsls	r3, r3, #4
 8001b24:	b2da      	uxtb	r2, r3
 8001b26:	e012      	b.n	8001b4e <prv_check_crc+0x72>
    crc = (uint8_t)((CHTN(ghandle->p.term_str[0]) & 0x0FU) << 0x04U)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
          | (CHTN(ghandle->p.term_str[1]) & 0x0FU); /* Convert received CRC from string (hex) to number */
 8001b2e:	2b40      	cmp	r3, #64	; 0x40
 8001b30:	d90c      	bls.n	8001b4c <prv_check_crc+0x70>
    crc = (uint8_t)((CHTN(ghandle->p.term_str[0]) & 0x0FU) << 0x04U)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8001b38:	2b5a      	cmp	r3, #90	; 0x5a
 8001b3a:	d807      	bhi.n	8001b4c <prv_check_crc+0x70>
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8001b42:	3b37      	subs	r3, #55	; 0x37
 8001b44:	b2db      	uxtb	r3, r3
          | (CHTN(ghandle->p.term_str[1]) & 0x0FU); /* Convert received CRC from string (hex) to number */
 8001b46:	011b      	lsls	r3, r3, #4
 8001b48:	b2da      	uxtb	r2, r3
 8001b4a:	e000      	b.n	8001b4e <prv_check_crc+0x72>
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 8001b54:	2b2f      	cmp	r3, #47	; 0x2f
 8001b56:	d90b      	bls.n	8001b70 <prv_check_crc+0x94>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 8001b5e:	2b39      	cmp	r3, #57	; 0x39
 8001b60:	d806      	bhi.n	8001b70 <prv_check_crc+0x94>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 8001b68:	f003 030f 	and.w	r3, r3, #15
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	e026      	b.n	8001bbe <prv_check_crc+0xe2>
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 8001b76:	2b60      	cmp	r3, #96	; 0x60
 8001b78:	d90d      	bls.n	8001b96 <prv_check_crc+0xba>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 8001b80:	2b7a      	cmp	r3, #122	; 0x7a
 8001b82:	d808      	bhi.n	8001b96 <prv_check_crc+0xba>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 8001b8a:	3b57      	subs	r3, #87	; 0x57
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	f003 030f 	and.w	r3, r3, #15
 8001b92:	b2db      	uxtb	r3, r3
 8001b94:	e013      	b.n	8001bbe <prv_check_crc+0xe2>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 8001b9c:	2b40      	cmp	r3, #64	; 0x40
 8001b9e:	d90d      	bls.n	8001bbc <prv_check_crc+0xe0>
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 8001ba6:	2b5a      	cmp	r3, #90	; 0x5a
 8001ba8:	d808      	bhi.n	8001bbc <prv_check_crc+0xe0>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 8001bb0:	3b37      	subs	r3, #55	; 0x37
 8001bb2:	b2db      	uxtb	r3, r3
 8001bb4:	f003 030f 	and.w	r3, r3, #15
 8001bb8:	b2db      	uxtb	r3, r3
 8001bba:	e000      	b.n	8001bbe <prv_check_crc+0xe2>
 8001bbc:	2300      	movs	r3, #0
    crc = (uint8_t)((CHTN(ghandle->p.term_str[0]) & 0x0FU) << 0x04U)
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	73fb      	strb	r3, [r7, #15]
    return ghandle->p.crc_calc == crc;              /* They must match! */
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8001bc8:	7bfa      	ldrb	r2, [r7, #15]
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	bf0c      	ite	eq
 8001bce:	2301      	moveq	r3, #1
 8001bd0:	2300      	movne	r3, #0
 8001bd2:	b2db      	uxtb	r3, r3
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	3714      	adds	r7, #20
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr

08001be0 <prv_copy_from_tmp_memory>:
 * \brief           Copy temporary memory to user memory
 * \param[in]       ghandle: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_copy_from_tmp_memory(lwgps_t* ghandle) {
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
    if (0) {
#if LWGPS_CFG_STATEMENT_GPGGA
    } else if (ghandle->p.stat == STAT_GGA) {
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	d13c      	bne.n	8001c6c <prv_copy_from_tmp_memory+0x8c>
        ghandle->latitude = ghandle->p.data.gga.latitude;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 8001bf8:	6879      	ldr	r1, [r7, #4]
 8001bfa:	e9c1 2300 	strd	r2, r3, [r1]
        ghandle->longitude = ghandle->p.data.gga.longitude;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	; 0x98
 8001c04:	6879      	ldr	r1, [r7, #4]
 8001c06:	e9c1 2302 	strd	r2, r3, [r1, #8]
        ghandle->altitude = ghandle->p.data.gga.altitude;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	; 0xa0
 8001c10:	6879      	ldr	r1, [r7, #4]
 8001c12:	e9c1 2304 	strd	r2, r3, [r1, #16]
        ghandle->geo_sep = ghandle->p.data.gga.geo_sep;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	e9d3 232a 	ldrd	r2, r3, [r3, #168]	; 0xa8
 8001c1c:	6879      	ldr	r1, [r7, #4]
 8001c1e:	e9c1 2306 	strd	r2, r3, [r1, #24]
        ghandle->sats_in_use = ghandle->p.data.gga.sats_in_use;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	f893 20b0 	ldrb.w	r2, [r3, #176]	; 0xb0
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	f883 2020 	strb.w	r2, [r3, #32]
        ghandle->fix = ghandle->p.data.gga.fix;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	f893 20b1 	ldrb.w	r2, [r3, #177]	; 0xb1
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        ghandle->hours = ghandle->p.data.gga.hours;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	f893 20b2 	ldrb.w	r2, [r3, #178]	; 0xb2
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
        ghandle->minutes = ghandle->p.data.gga.minutes;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	f893 20b3 	ldrb.w	r2, [r3, #179]	; 0xb3
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
        ghandle->seconds = ghandle->p.data.gga.seconds;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	f893 20b4 	ldrb.w	r2, [r3, #180]	; 0xb4
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        ghandle->dgps_age = ghandle->p.data.gga.dgps_age;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	e9d3 232e 	ldrd	r2, r3, [r3, #184]	; 0xb8
 8001c64:	6879      	ldr	r1, [r7, #4]
 8001c66:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
 8001c6a:	e061      	b.n	8001d30 <prv_copy_from_tmp_memory+0x150>
#endif /* LWGPS_CFG_STATEMENT_GPGGA */
#if LWGPS_CFG_STATEMENT_GPGSA
    } else if (ghandle->p.stat == STAT_GSA) {
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8001c72:	2b02      	cmp	r3, #2
 8001c74:	d121      	bne.n	8001cba <prv_copy_from_tmp_memory+0xda>
        ghandle->dop_h = ghandle->p.data.gsa.dop_h;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 8001c7c:	6879      	ldr	r1, [r7, #4]
 8001c7e:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
        ghandle->dop_p = ghandle->p.data.gsa.dop_p;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	; 0xa0
 8001c88:	6879      	ldr	r1, [r7, #4]
 8001c8a:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
        ghandle->dop_v = ghandle->p.data.gsa.dop_v;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	; 0x98
 8001c94:	6879      	ldr	r1, [r7, #4]
 8001c96:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
        ghandle->fix_mode = ghandle->p.data.gsa.fix_mode;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	f893 20a8 	ldrb.w	r2, [r3, #168]	; 0xa8
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
        LWGPS_MEMCPY(ghandle->satellites_ids, ghandle->p.data.gsa.satellites_ids, sizeof(ghandle->satellites_ids));
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	f103 0049 	add.w	r0, r3, #73	; 0x49
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	33a9      	adds	r3, #169	; 0xa9
 8001cb0:	220c      	movs	r2, #12
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	f009 f8f2 	bl	800ae9c <memcpy>
 8001cb8:	e03a      	b.n	8001d30 <prv_copy_from_tmp_memory+0x150>
#endif /* LWGPS_CFG_STATEMENT_GPGSA */
#if LWGPS_CFG_STATEMENT_GPGSV
    } else if (ghandle->p.stat == STAT_GSV) {
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8001cc0:	2b03      	cmp	r3, #3
 8001cc2:	d106      	bne.n	8001cd2 <prv_copy_from_tmp_memory+0xf2>
        ghandle->sats_in_view = ghandle->p.data.gsv.sats_in_view;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	f893 2090 	ldrb.w	r2, [r3, #144]	; 0x90
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
 8001cd0:	e02e      	b.n	8001d30 <prv_copy_from_tmp_memory+0x150>
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
    } else if (ghandle->p.stat == STAT_RMC) {
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8001cd8:	2b04      	cmp	r3, #4
 8001cda:	d129      	bne.n	8001d30 <prv_copy_from_tmp_memory+0x150>
        ghandle->course = ghandle->p.data.rmc.course;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	; 0xa0
 8001ce2:	6879      	ldr	r1, [r7, #4]
 8001ce4:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
        ghandle->is_valid = ghandle->p.data.rmc.is_valid;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	f893 2090 	ldrb.w	r2, [r3, #144]	; 0x90
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
        ghandle->speed = ghandle->p.data.rmc.speed;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	; 0x98
 8001cfa:	6879      	ldr	r1, [r7, #4]
 8001cfc:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
        ghandle->variation = ghandle->p.data.rmc.variation;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	e9d3 232a 	ldrd	r2, r3, [r3, #168]	; 0xa8
 8001d06:	6879      	ldr	r1, [r7, #4]
 8001d08:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
        ghandle->date = ghandle->p.data.rmc.date;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	f893 2091 	ldrb.w	r2, [r3, #145]	; 0x91
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
        ghandle->month = ghandle->p.data.rmc.month;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	f893 2092 	ldrb.w	r2, [r3, #146]	; 0x92
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
        ghandle->year = ghandle->p.data.rmc.year;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	f893 2093 	ldrb.w	r2, [r3, #147]	; 0x93
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
        ghandle->clk_bias = ghandle->p.data.time.clk_bias;
        ghandle->clk_drift = ghandle->p.data.time.clk_drift;
        ghandle->tp_gran = ghandle->p.data.time.tp_gran;
#endif /* LWGPS_CFG_STATEMENT_PUBX_TIME */
    }
    return 1;
 8001d30:	2301      	movs	r3, #1
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	3708      	adds	r7, #8
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}

08001d3a <lwgps_init>:
 * \brief           Init GPS handle
 * \param[in]       ghandle: GPS handle structure
 * \return          `1` on success, `0` otherwise
 */
uint8_t
lwgps_init(lwgps_t* ghandle) {
 8001d3a:	b580      	push	{r7, lr}
 8001d3c:	b082      	sub	sp, #8
 8001d3e:	af00      	add	r7, sp, #0
 8001d40:	6078      	str	r0, [r7, #4]
    LWGPS_MEMSET(ghandle, 0x00, sizeof(*ghandle)); /* Reset structure */
 8001d42:	22c0      	movs	r2, #192	; 0xc0
 8001d44:	2100      	movs	r1, #0
 8001d46:	6878      	ldr	r0, [r7, #4]
 8001d48:	f009 f8b6 	bl	800aeb8 <memset>
    return 1;
 8001d4c:	2301      	movs	r3, #1
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3708      	adds	r7, #8
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}

08001d56 <lwgps_process>:
 */
uint8_t
#if LWGPS_CFG_STATUS || __DOXYGEN__
lwgps_process(lwgps_t* ghandle, const void* data, size_t len, lwgps_process_fn evt_fn) {
#else  /* LWGPS_CFG_STATUS */
lwgps_process(lwgps_t* ghandle, const void* data, size_t len) {
 8001d56:	b580      	push	{r7, lr}
 8001d58:	b086      	sub	sp, #24
 8001d5a:	af00      	add	r7, sp, #0
 8001d5c:	60f8      	str	r0, [r7, #12]
 8001d5e:	60b9      	str	r1, [r7, #8]
 8001d60:	607a      	str	r2, [r7, #4]
#endif /* !LWGPS_CFG_STATUS */
    const uint8_t* d = data;
 8001d62:	68bb      	ldr	r3, [r7, #8]
 8001d64:	617b      	str	r3, [r7, #20]

    for (; len > 0; ++d, --len) {                                /* Process all bytes */
 8001d66:	e0ad      	b.n	8001ec4 <lwgps_process+0x16e>
        if (*d == '$') {                                         /* Check for beginning of NMEA line */
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	781b      	ldrb	r3, [r3, #0]
 8001d6c:	2b24      	cmp	r3, #36	; 0x24
 8001d6e:	d128      	bne.n	8001dc2 <lwgps_process+0x6c>
            LWGPS_MEMSET(&ghandle->p, 0x00, sizeof(ghandle->p)); /* Reset private memory */
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	3378      	adds	r3, #120	; 0x78
 8001d74:	2248      	movs	r2, #72	; 0x48
 8001d76:	2100      	movs	r1, #0
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f009 f89d 	bl	800aeb8 <memset>
            TERM_ADD(ghandle, *d);                               /* Add character to term */
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 8001d84:	2b0b      	cmp	r3, #11
 8001d86:	f200 8097 	bhi.w	8001eb8 <lwgps_process+0x162>
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 8001d90:	4619      	mov	r1, r3
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	781a      	ldrb	r2, [r3, #0]
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	440b      	add	r3, r1
 8001d9a:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 8001da4:	3301      	adds	r3, #1
 8001da6:	b2da      	uxtb	r2, r3
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 8001db4:	461a      	mov	r2, r3
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	4413      	add	r3, r2
 8001dba:	2200      	movs	r2, #0
 8001dbc:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
 8001dc0:	e07a      	b.n	8001eb8 <lwgps_process+0x162>
        } else if (*d == ',') {                                  /* Term separator character */
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	781b      	ldrb	r3, [r3, #0]
 8001dc6:	2b2c      	cmp	r3, #44	; 0x2c
 8001dc8:	d11d      	bne.n	8001e06 <lwgps_process+0xb0>
            prv_parse_term(ghandle);                             /* Parse term we have currently in memory */
 8001dca:	68f8      	ldr	r0, [r7, #12]
 8001dcc:	f7ff fbc8 	bl	8001560 <prv_parse_term>
            CRC_ADD(ghandle, *d);                                /* Add character to CRC computation */
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	f893 2089 	ldrb.w	r2, [r3, #137]	; 0x89
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	781b      	ldrb	r3, [r3, #0]
 8001dda:	4053      	eors	r3, r2
 8001ddc:	b2da      	uxtb	r2, r3
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
            TERM_NEXT(ghandle);                                  /* Start with next term */
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	2200      	movs	r2, #0
 8001de8:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	2200      	movs	r2, #0
 8001df0:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
 8001dfa:	3301      	adds	r3, #1
 8001dfc:	b2da      	uxtb	r2, r3
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
 8001e04:	e058      	b.n	8001eb8 <lwgps_process+0x162>
        } else if (*d == '*') {                                  /* Start indicates end of data for CRC computation */
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	781b      	ldrb	r3, [r3, #0]
 8001e0a:	2b2a      	cmp	r3, #42	; 0x2a
 8001e0c:	d117      	bne.n	8001e3e <lwgps_process+0xe8>
            prv_parse_term(ghandle);                             /* Parse term we have currently in memory */
 8001e0e:	68f8      	ldr	r0, [r7, #12]
 8001e10:	f7ff fba6 	bl	8001560 <prv_parse_term>
            ghandle->p.star = 1;                                 /* STAR detected */
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	2201      	movs	r2, #1
 8001e18:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
            TERM_NEXT(ghandle);                                  /* Start with next term */
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	2200      	movs	r2, #0
 8001e20:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	2200      	movs	r2, #0
 8001e28:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
 8001e32:	3301      	adds	r3, #1
 8001e34:	b2da      	uxtb	r2, r3
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
 8001e3c:	e03c      	b.n	8001eb8 <lwgps_process+0x162>
        } else if (*d == '\r') {
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	781b      	ldrb	r3, [r3, #0]
 8001e42:	2b0d      	cmp	r3, #13
 8001e44:	d109      	bne.n	8001e5a <lwgps_process+0x104>
            if (prv_check_crc(ghandle)) { /* Check for CRC result */
 8001e46:	68f8      	ldr	r0, [r7, #12]
 8001e48:	f7ff fe48 	bl	8001adc <prv_check_crc>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d032      	beq.n	8001eb8 <lwgps_process+0x162>
                /* CRC is OK, in theory we can copy data from statements to user data */
                prv_copy_from_tmp_memory(ghandle); /* Copy memory from temporary to user memory */
 8001e52:	68f8      	ldr	r0, [r7, #12]
 8001e54:	f7ff fec4 	bl	8001be0 <prv_copy_from_tmp_memory>
 8001e58:	e02e      	b.n	8001eb8 <lwgps_process+0x162>
            } else if (evt_fn != NULL) {
                evt_fn(STAT_CHECKSUM_FAIL);
#endif /* LWGPS_CFG_STATUS */
            }
        } else {
            if (!ghandle->p.star) {   /* Add to CRC only if star not yet detected */
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d109      	bne.n	8001e78 <lwgps_process+0x122>
                CRC_ADD(ghandle, *d); /* Add to CRC */
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	f893 2089 	ldrb.w	r2, [r3, #137]	; 0x89
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	781b      	ldrb	r3, [r3, #0]
 8001e6e:	4053      	eors	r3, r2
 8001e70:	b2da      	uxtb	r2, r3
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
            }
            TERM_ADD(ghandle, *d); /* Add character to term */
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 8001e7e:	2b0b      	cmp	r3, #11
 8001e80:	d81a      	bhi.n	8001eb8 <lwgps_process+0x162>
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 8001e88:	4619      	mov	r1, r3
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	781a      	ldrb	r2, [r3, #0]
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	440b      	add	r3, r1
 8001e92:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 8001e9c:	3301      	adds	r3, #1
 8001e9e:	b2da      	uxtb	r2, r3
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 8001eac:	461a      	mov	r2, r3
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	4413      	add	r3, r2
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
    for (; len > 0; ++d, --len) {                                /* Process all bytes */
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	3301      	adds	r3, #1
 8001ebc:	617b      	str	r3, [r7, #20]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	3b01      	subs	r3, #1
 8001ec2:	607b      	str	r3, [r7, #4]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	f47f af4e 	bne.w	8001d68 <lwgps_process+0x12>
        }
    }
    return 1;
 8001ecc:	2301      	movs	r3, #1
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	3718      	adds	r7, #24
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
	...

08001ed8 <_write>:
static void MX_SPI2_Init(void);
static void MX_TIM7_Init(void);
/* USER CODE BEGIN PFP */

int _write(int file, char *ptr, int len)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b084      	sub	sp, #16
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	60f8      	str	r0, [r7, #12]
 8001ee0:	60b9      	str	r1, [r7, #8]
 8001ee2:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	b29a      	uxth	r2, r3
 8001ee8:	f04f 33ff 	mov.w	r3, #4294967295
 8001eec:	68b9      	ldr	r1, [r7, #8]
 8001eee:	4804      	ldr	r0, [pc, #16]	; (8001f00 <_write+0x28>)
 8001ef0:	f007 ff7f 	bl	8009df2 <HAL_UART_Transmit>
	return len;
 8001ef4:	687b      	ldr	r3, [r7, #4]
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3710      	adds	r7, #16
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	20000390 	.word	0x20000390

08001f04 <HAL_TIM_PeriodElapsedCallback>:
void paketolustur(void);

double altitudeC(float  P);

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b084      	sub	sp, #16
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]

	readSensorFlag = true;
 8001f0c:	4b1d      	ldr	r3, [pc, #116]	; (8001f84 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001f0e:	2201      	movs	r2, #1
 8001f10:	701a      	strb	r2, [r3, #0]


	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 8001f12:	2201      	movs	r2, #1
 8001f14:	2120      	movs	r1, #32
 8001f16:	481c      	ldr	r0, [pc, #112]	; (8001f88 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001f18:	f005 f8f0 	bl	80070fc <HAL_GPIO_WritePin>
	paketolustur();
 8001f1c:	f000 f9f2 	bl	8002304 <paketolustur>

	uint8_t buffer = 0x00;
 8001f20:	2300      	movs	r3, #0
 8001f22:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart3, &buffer, 1, 100);
 8001f24:	f107 010f 	add.w	r1, r7, #15
 8001f28:	2364      	movs	r3, #100	; 0x64
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	4817      	ldr	r0, [pc, #92]	; (8001f8c <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001f2e:	f007 ff60 	bl	8009df2 <HAL_UART_Transmit>

	HAL_UART_Transmit(&huart3, &buffer, 1, 100);
 8001f32:	f107 010f 	add.w	r1, r7, #15
 8001f36:	2364      	movs	r3, #100	; 0x64
 8001f38:	2201      	movs	r2, #1
 8001f3a:	4814      	ldr	r0, [pc, #80]	; (8001f8c <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001f3c:	f007 ff59 	bl	8009df2 <HAL_UART_Transmit>
	buffer = 0x17;
 8001f40:	2317      	movs	r3, #23
 8001f42:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart3, &buffer, 1, 100);
 8001f44:	f107 010f 	add.w	r1, r7, #15
 8001f48:	2364      	movs	r3, #100	; 0x64
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	480f      	ldr	r0, [pc, #60]	; (8001f8c <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001f4e:	f007 ff50 	bl	8009df2 <HAL_UART_Transmit>


	HAL_UART_Transmit(&huart3, olusturalacak_paket, 48, 100);
 8001f52:	2364      	movs	r3, #100	; 0x64
 8001f54:	2230      	movs	r2, #48	; 0x30
 8001f56:	490e      	ldr	r1, [pc, #56]	; (8001f90 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001f58:	480c      	ldr	r0, [pc, #48]	; (8001f8c <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001f5a:	f007 ff4a 	bl	8009df2 <HAL_UART_Transmit>

	HAL_UART_Transmit(&huart3, &buffer, 1, 100);
 8001f5e:	f107 010f 	add.w	r1, r7, #15
 8001f62:	2364      	movs	r3, #100	; 0x64
 8001f64:	2201      	movs	r2, #1
 8001f66:	4809      	ldr	r0, [pc, #36]	; (8001f8c <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001f68:	f007 ff43 	bl	8009df2 <HAL_UART_Transmit>
	HAL_TIM_Base_Start_IT(&htim7);
 8001f6c:	4809      	ldr	r0, [pc, #36]	; (8001f94 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001f6e:	f007 fc23 	bl	80097b8 <HAL_TIM_Base_Start_IT>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 8001f72:	2200      	movs	r2, #0
 8001f74:	2120      	movs	r1, #32
 8001f76:	4804      	ldr	r0, [pc, #16]	; (8001f88 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001f78:	f005 f8c0 	bl	80070fc <HAL_GPIO_WritePin>

}
 8001f7c:	bf00      	nop
 8001f7e:	3710      	adds	r7, #16
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	200005cc 	.word	0x200005cc
 8001f88:	40020000 	.word	0x40020000
 8001f8c:	200003d4 	.word	0x200003d4
 8001f90:	2000059c 	.word	0x2000059c
 8001f94:	20000304 	.word	0x20000304

08001f98 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b082      	sub	sp, #8
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
	if(huart == &huart1)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	4a17      	ldr	r2, [pc, #92]	; (8002000 <HAL_UART_RxCpltCallback+0x68>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d126      	bne.n	8001ff6 <HAL_UART_RxCpltCallback+0x5e>
	{
		if(rx_data != '\n'&& rx_index<=sizeof(rx_buffer))
 8001fa8:	4b16      	ldr	r3, [pc, #88]	; (8002004 <HAL_UART_RxCpltCallback+0x6c>)
 8001faa:	781b      	ldrb	r3, [r3, #0]
 8001fac:	2b0a      	cmp	r3, #10
 8001fae:	d00f      	beq.n	8001fd0 <HAL_UART_RxCpltCallback+0x38>
 8001fb0:	4b15      	ldr	r3, [pc, #84]	; (8002008 <HAL_UART_RxCpltCallback+0x70>)
 8001fb2:	781b      	ldrb	r3, [r3, #0]
 8001fb4:	2b80      	cmp	r3, #128	; 0x80
 8001fb6:	d80b      	bhi.n	8001fd0 <HAL_UART_RxCpltCallback+0x38>
		{
			rx_buffer[rx_index++] = rx_data;
 8001fb8:	4b13      	ldr	r3, [pc, #76]	; (8002008 <HAL_UART_RxCpltCallback+0x70>)
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	1c5a      	adds	r2, r3, #1
 8001fbe:	b2d1      	uxtb	r1, r2
 8001fc0:	4a11      	ldr	r2, [pc, #68]	; (8002008 <HAL_UART_RxCpltCallback+0x70>)
 8001fc2:	7011      	strb	r1, [r2, #0]
 8001fc4:	461a      	mov	r2, r3
 8001fc6:	4b0f      	ldr	r3, [pc, #60]	; (8002004 <HAL_UART_RxCpltCallback+0x6c>)
 8001fc8:	7819      	ldrb	r1, [r3, #0]
 8001fca:	4b10      	ldr	r3, [pc, #64]	; (800200c <HAL_UART_RxCpltCallback+0x74>)
 8001fcc:	5499      	strb	r1, [r3, r2]
 8001fce:	e00d      	b.n	8001fec <HAL_UART_RxCpltCallback+0x54>

		}
		else
		{
			//parser
			lwgps_process(&gps, rx_buffer, rx_index+1);
 8001fd0:	4b0d      	ldr	r3, [pc, #52]	; (8002008 <HAL_UART_RxCpltCallback+0x70>)
 8001fd2:	781b      	ldrb	r3, [r3, #0]
 8001fd4:	3301      	adds	r3, #1
 8001fd6:	461a      	mov	r2, r3
 8001fd8:	490c      	ldr	r1, [pc, #48]	; (800200c <HAL_UART_RxCpltCallback+0x74>)
 8001fda:	480d      	ldr	r0, [pc, #52]	; (8002010 <HAL_UART_RxCpltCallback+0x78>)
 8001fdc:	f7ff febb 	bl	8001d56 <lwgps_process>
			rx_index=0;
 8001fe0:	4b09      	ldr	r3, [pc, #36]	; (8002008 <HAL_UART_RxCpltCallback+0x70>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	701a      	strb	r2, [r3, #0]
			rx_data = 0;
 8001fe6:	4b07      	ldr	r3, [pc, #28]	; (8002004 <HAL_UART_RxCpltCallback+0x6c>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	701a      	strb	r2, [r3, #0]


		}
		HAL_UART_Receive_IT(&huart1, &rx_data, 1);
 8001fec:	2201      	movs	r2, #1
 8001fee:	4905      	ldr	r1, [pc, #20]	; (8002004 <HAL_UART_RxCpltCallback+0x6c>)
 8001ff0:	4803      	ldr	r0, [pc, #12]	; (8002000 <HAL_UART_RxCpltCallback+0x68>)
 8001ff2:	f007 ff90 	bl	8009f16 <HAL_UART_Receive_IT>
	}


}
 8001ff6:	bf00      	nop
 8001ff8:	3708      	adds	r7, #8
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	2000034c 	.word	0x2000034c
 8002004:	20000558 	.word	0x20000558
 8002008:	20000559 	.word	0x20000559
 800200c:	200004d8 	.word	0x200004d8
 8002010:	20000418 	.word	0x20000418
 8002014:	00000000 	.word	0x00000000

08002018 <altitude>:

double altitude(float P)
// Given a pressure measurement P (mbar) and the pressure at a baseline P0 (mbar),
// return altitude (meters) above baseline.
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b082      	sub	sp, #8
 800201c:	af00      	add	r7, sp, #0
 800201e:	ed87 0a01 	vstr	s0, [r7, #4]
	return(44330.0*(1-pow(P/1013.25,1/5.255)));
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	f7fe fab0 	bl	8000588 <__aeabi_f2d>
 8002028:	a31a      	add	r3, pc, #104	; (adr r3, 8002094 <altitude+0x7c>)
 800202a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800202e:	f7fe fc2d 	bl	800088c <__aeabi_ddiv>
 8002032:	4602      	mov	r2, r0
 8002034:	460b      	mov	r3, r1
 8002036:	ec43 2b17 	vmov	d7, r2, r3
 800203a:	ed9f 1b11 	vldr	d1, [pc, #68]	; 8002080 <altitude+0x68>
 800203e:	eeb0 0a47 	vmov.f32	s0, s14
 8002042:	eef0 0a67 	vmov.f32	s1, s15
 8002046:	f00c fad9 	bl	800e5fc <pow>
 800204a:	ec53 2b10 	vmov	r2, r3, d0
 800204e:	f04f 0000 	mov.w	r0, #0
 8002052:	490f      	ldr	r1, [pc, #60]	; (8002090 <altitude+0x78>)
 8002054:	f7fe f938 	bl	80002c8 <__aeabi_dsub>
 8002058:	4602      	mov	r2, r0
 800205a:	460b      	mov	r3, r1
 800205c:	4610      	mov	r0, r2
 800205e:	4619      	mov	r1, r3
 8002060:	a309      	add	r3, pc, #36	; (adr r3, 8002088 <altitude+0x70>)
 8002062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002066:	f7fe fae7 	bl	8000638 <__aeabi_dmul>
 800206a:	4602      	mov	r2, r0
 800206c:	460b      	mov	r3, r1
 800206e:	ec43 2b17 	vmov	d7, r2, r3
}
 8002072:	eeb0 0a47 	vmov.f32	s0, s14
 8002076:	eef0 0a67 	vmov.f32	s1, s15
 800207a:	3708      	adds	r7, #8
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}
 8002080:	ccd9456c 	.word	0xccd9456c
 8002084:	3fc85b95 	.word	0x3fc85b95
 8002088:	00000000 	.word	0x00000000
 800208c:	40e5a540 	.word	0x40e5a540
 8002090:	3ff00000 	.word	0x3ff00000
 8002094:	00000000 	.word	0x00000000
 8002098:	408faa00 	.word	0x408faa00
 800209c:	00000000 	.word	0x00000000

080020a0 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80020a6:	f004 fc5b 	bl	8006960 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80020aa:	f000 fa25 	bl	80024f8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80020ae:	f000 fbad 	bl	800280c <MX_GPIO_Init>
	MX_USART2_UART_Init();
 80020b2:	f000 fb57 	bl	8002764 <MX_USART2_UART_Init>
	MX_USART1_UART_Init();
 80020b6:	f000 fb2b 	bl	8002710 <MX_USART1_UART_Init>
	MX_USART3_UART_Init();
 80020ba:	f000 fb7d 	bl	80027b8 <MX_USART3_UART_Init>
	MX_I2C1_Init();
 80020be:	f000 fa8d 	bl	80025dc <MX_I2C1_Init>
	MX_SPI2_Init();
 80020c2:	f000 fab9 	bl	8002638 <MX_SPI2_Init>
	MX_TIM7_Init();
 80020c6:	f000 faed 	bl	80026a4 <MX_TIM7_Init>

	/* USER CODE BEGIN 2 */
	//gps init
	lwgps_init(&gps);
 80020ca:	4859      	ldr	r0, [pc, #356]	; (8002230 <main+0x190>)
 80020cc:	f7ff fe35 	bl	8001d3a <lwgps_init>


	//ms5803 init

	HAL_StatusTypeDef test = MS5803_reset(&hi2c1); //reset
 80020d0:	4858      	ldr	r0, [pc, #352]	; (8002234 <main+0x194>)
 80020d2:	f003 fd93 	bl	8005bfc <MS5803_reset>
 80020d6:	4603      	mov	r3, r0
 80020d8:	71fb      	strb	r3, [r7, #7]
	MS5803_Init(&hi2c1, 6);
 80020da:	2106      	movs	r1, #6
 80020dc:	4855      	ldr	r0, [pc, #340]	; (8002234 <main+0x194>)
 80020de:	f003 fda7 	bl	8005c30 <MS5803_Init>


	while(test == HAL_ERROR) {
 80020e2:	79fb      	ldrb	r3, [r7, #7]
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	d0fc      	beq.n	80020e2 <main+0x42>
		//if the test fails
	}
	while(MPU9255_Init(&hi2c1)==1);
 80020e8:	bf00      	nop
 80020ea:	4852      	ldr	r0, [pc, #328]	; (8002234 <main+0x194>)
 80020ec:	f000 fc3a 	bl	8002964 <MPU9255_Init>
 80020f0:	4603      	mov	r3, r0
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	d0f9      	beq.n	80020ea <main+0x4a>
	HAL_Delay(1000);
 80020f6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80020fa:	f004 fca3 	bl	8006a44 <HAL_Delay>
	HAL_UART_Receive_IT(&huart1, &rx_data, 1);
 80020fe:	2201      	movs	r2, #1
 8002100:	494d      	ldr	r1, [pc, #308]	; (8002238 <main+0x198>)
 8002102:	484e      	ldr	r0, [pc, #312]	; (800223c <main+0x19c>)
 8002104:	f007 ff07 	bl	8009f16 <HAL_UART_Receive_IT>
	HAL_TIM_Base_Start_IT(&htim7);
 8002108:	484d      	ldr	r0, [pc, #308]	; (8002240 <main+0x1a0>)
 800210a:	f007 fb55 	bl	80097b8 <HAL_TIM_Base_Start_IT>
	/* USER CODE BEGIN WHILE */
	while (1)
	{


		MS5803_get_values(&hi2c1, ADC_4096, &temperature, &pressure);
 800210e:	4b4d      	ldr	r3, [pc, #308]	; (8002244 <main+0x1a4>)
 8002110:	4a4d      	ldr	r2, [pc, #308]	; (8002248 <main+0x1a8>)
 8002112:	2108      	movs	r1, #8
 8002114:	4847      	ldr	r0, [pc, #284]	; (8002234 <main+0x194>)
 8002116:	f003 fe23 	bl	8005d60 <MS5803_get_values>
		readAll(&hi2c1, &MPU9255);
 800211a:	494c      	ldr	r1, [pc, #304]	; (800224c <main+0x1ac>)
 800211c:	4845      	ldr	r0, [pc, #276]	; (8002234 <main+0x194>)
 800211e:	f000 fca3 	bl	8002a68 <readAll>
		//HAL_Delay(10);
		irtifaP = altitude(pressure);
 8002122:	4b48      	ldr	r3, [pc, #288]	; (8002244 <main+0x1a4>)
 8002124:	edd3 7a00 	vldr	s15, [r3]
 8002128:	eeb0 0a67 	vmov.f32	s0, s15
 800212c:	f7ff ff74 	bl	8002018 <altitude>
 8002130:	ec53 2b10 	vmov	r2, r3, d0
 8002134:	4610      	mov	r0, r2
 8002136:	4619      	mov	r1, r3
 8002138:	f7fe fd76 	bl	8000c28 <__aeabi_d2f>
 800213c:	4603      	mov	r3, r0
 800213e:	4a44      	ldr	r2, [pc, #272]	; (8002250 <main+0x1b0>)
 8002140:	6013      	str	r3, [r2, #0]
		Rpitch = MPU9255.pitch;
 8002142:	4b42      	ldr	r3, [pc, #264]	; (800224c <main+0x1ac>)
 8002144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002146:	4a43      	ldr	r2, [pc, #268]	; (8002254 <main+0x1b4>)
 8002148:	6013      	str	r3, [r2, #0]
		if(readSensorFlag)
 800214a:	4b43      	ldr	r3, [pc, #268]	; (8002258 <main+0x1b8>)
 800214c:	781b      	ldrb	r3, [r3, #0]
 800214e:	b2db      	uxtb	r3, r3
 8002150:	2b00      	cmp	r3, #0
 8002152:	d04c      	beq.n	80021ee <main+0x14e>
		{
			if(timerCount > 20)
 8002154:	4b41      	ldr	r3, [pc, #260]	; (800225c <main+0x1bc>)
 8002156:	881b      	ldrh	r3, [r3, #0]
 8002158:	2b14      	cmp	r3, #20
 800215a:	d902      	bls.n	8002162 <main+0xc2>
			{
				bayrak = true;
 800215c:	4b40      	ldr	r3, [pc, #256]	; (8002260 <main+0x1c0>)
 800215e:	2201      	movs	r2, #1
 8002160:	701a      	strb	r2, [r3, #0]
			}
			timerCount++;
 8002162:	4b3e      	ldr	r3, [pc, #248]	; (800225c <main+0x1bc>)
 8002164:	881b      	ldrh	r3, [r3, #0]
 8002166:	3301      	adds	r3, #1
 8002168:	b29a      	uxth	r2, r3
 800216a:	4b3c      	ldr	r3, [pc, #240]	; (800225c <main+0x1bc>)
 800216c:	801a      	strh	r2, [r3, #0]
			altitudeChange = altitudeC(pressure);
 800216e:	4b35      	ldr	r3, [pc, #212]	; (8002244 <main+0x1a4>)
 8002170:	edd3 7a00 	vldr	s15, [r3]
 8002174:	eeb0 0a67 	vmov.f32	s0, s15
 8002178:	f000 f87a 	bl	8002270 <altitudeC>
 800217c:	ec53 2b10 	vmov	r2, r3, d0
 8002180:	4610      	mov	r0, r2
 8002182:	4619      	mov	r1, r3
 8002184:	f7fe fd50 	bl	8000c28 <__aeabi_d2f>
 8002188:	4603      	mov	r3, r0
 800218a:	4a36      	ldr	r2, [pc, #216]	; (8002264 <main+0x1c4>)
 800218c:	6013      	str	r3, [r2, #0]
			readSensorFlag = false;
 800218e:	4b32      	ldr	r3, [pc, #200]	; (8002258 <main+0x1b8>)
 8002190:	2200      	movs	r2, #0
 8002192:	701a      	strb	r2, [r3, #0]
			if((timerCount > 20 || bayrak ) && ((altitudeChange > 7) || (MPU9255.AccelZ < 0.1)))
 8002194:	4b31      	ldr	r3, [pc, #196]	; (800225c <main+0x1bc>)
 8002196:	881b      	ldrh	r3, [r3, #0]
 8002198:	2b14      	cmp	r3, #20
 800219a:	d803      	bhi.n	80021a4 <main+0x104>
 800219c:	4b30      	ldr	r3, [pc, #192]	; (8002260 <main+0x1c0>)
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d024      	beq.n	80021ee <main+0x14e>
 80021a4:	4b2f      	ldr	r3, [pc, #188]	; (8002264 <main+0x1c4>)
 80021a6:	edd3 7a00 	vldr	s15, [r3]
 80021aa:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 80021ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021b6:	dc0c      	bgt.n	80021d2 <main+0x132>
 80021b8:	4b24      	ldr	r3, [pc, #144]	; (800224c <main+0x1ac>)
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	4618      	mov	r0, r3
 80021be:	f7fe f9e3 	bl	8000588 <__aeabi_f2d>
 80021c2:	a319      	add	r3, pc, #100	; (adr r3, 8002228 <main+0x188>)
 80021c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021c8:	f7fe fca8 	bl	8000b1c <__aeabi_dcmplt>
 80021cc:	4603      	mov	r3, r0
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d00d      	beq.n	80021ee <main+0x14e>
			{
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 80021d2:	2201      	movs	r2, #1
 80021d4:	2120      	movs	r1, #32
 80021d6:	4824      	ldr	r0, [pc, #144]	; (8002268 <main+0x1c8>)
 80021d8:	f004 ff90 	bl	80070fc <HAL_GPIO_WritePin>
				HAL_Delay(400);
 80021dc:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80021e0:	f004 fc30 	bl	8006a44 <HAL_Delay>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80021e4:	2200      	movs	r2, #0
 80021e6:	2120      	movs	r1, #32
 80021e8:	481f      	ldr	r0, [pc, #124]	; (8002268 <main+0x1c8>)
 80021ea:	f004 ff87 	bl	80070fc <HAL_GPIO_WritePin>
			}
		}
		if(((MPU9255.AccelZ < 0.1)))
 80021ee:	4b17      	ldr	r3, [pc, #92]	; (800224c <main+0x1ac>)
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	4618      	mov	r0, r3
 80021f4:	f7fe f9c8 	bl	8000588 <__aeabi_f2d>
 80021f8:	a30b      	add	r3, pc, #44	; (adr r3, 8002228 <main+0x188>)
 80021fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021fe:	f7fe fc8d 	bl	8000b1c <__aeabi_dcmplt>
 8002202:	4603      	mov	r3, r0
 8002204:	2b00      	cmp	r3, #0
 8002206:	d00d      	beq.n	8002224 <main+0x184>
		{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8002208:	2201      	movs	r2, #1
 800220a:	2120      	movs	r1, #32
 800220c:	4816      	ldr	r0, [pc, #88]	; (8002268 <main+0x1c8>)
 800220e:	f004 ff75 	bl	80070fc <HAL_GPIO_WritePin>
			HAL_Delay(400);
 8002212:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8002216:	f004 fc15 	bl	8006a44 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 800221a:	2200      	movs	r2, #0
 800221c:	2120      	movs	r1, #32
 800221e:	4812      	ldr	r0, [pc, #72]	; (8002268 <main+0x1c8>)
 8002220:	f004 ff6c 	bl	80070fc <HAL_GPIO_WritePin>
		MS5803_get_values(&hi2c1, ADC_4096, &temperature, &pressure);
 8002224:	e773      	b.n	800210e <main+0x6e>
 8002226:	bf00      	nop
 8002228:	9999999a 	.word	0x9999999a
 800222c:	3fb99999 	.word	0x3fb99999
 8002230:	20000418 	.word	0x20000418
 8002234:	20000258 	.word	0x20000258
 8002238:	20000558 	.word	0x20000558
 800223c:	2000034c 	.word	0x2000034c
 8002240:	20000304 	.word	0x20000304
 8002244:	20000560 	.word	0x20000560
 8002248:	2000055c 	.word	0x2000055c
 800224c:	2000056c 	.word	0x2000056c
 8002250:	20000568 	.word	0x20000568
 8002254:	20000564 	.word	0x20000564
 8002258:	200005cc 	.word	0x200005cc
 800225c:	200005d4 	.word	0x200005d4
 8002260:	200005d6 	.word	0x200005d6
 8002264:	200005d0 	.word	0x200005d0
 8002268:	40020400 	.word	0x40020400
 800226c:	00000000 	.word	0x00000000

08002270 <altitudeC>:
	/* USER CODE END 3 */
}
double altitudeC(float  P)
// Given a pressure measurement P (mbar) and the pressure at a baseline P0 (mbar),
// return altitude (meters) above baseline.
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b084      	sub	sp, #16
 8002274:	af00      	add	r7, sp, #0
 8002276:	ed87 0a01 	vstr	s0, [r7, #4]

	float p0ressure = 0;
 800227a:	f04f 0300 	mov.w	r3, #0
 800227e:	60fb      	str	r3, [r7, #12]
	MS5803_get_values(&hi2c1, ADC_4096, &temperature, &p0ressure);
 8002280:	f107 030c 	add.w	r3, r7, #12
 8002284:	4a1c      	ldr	r2, [pc, #112]	; (80022f8 <altitudeC+0x88>)
 8002286:	2108      	movs	r1, #8
 8002288:	481c      	ldr	r0, [pc, #112]	; (80022fc <altitudeC+0x8c>)
 800228a:	f003 fd69 	bl	8005d60 <MS5803_get_values>

	return(44330.0*(1-pow(P/p0ressure,1/5.255)));
 800228e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002292:	ed97 7a01 	vldr	s14, [r7, #4]
 8002296:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800229a:	ee16 0a90 	vmov	r0, s13
 800229e:	f7fe f973 	bl	8000588 <__aeabi_f2d>
 80022a2:	4602      	mov	r2, r0
 80022a4:	460b      	mov	r3, r1
 80022a6:	ed9f 1b10 	vldr	d1, [pc, #64]	; 80022e8 <altitudeC+0x78>
 80022aa:	ec43 2b10 	vmov	d0, r2, r3
 80022ae:	f00c f9a5 	bl	800e5fc <pow>
 80022b2:	ec53 2b10 	vmov	r2, r3, d0
 80022b6:	f04f 0000 	mov.w	r0, #0
 80022ba:	4911      	ldr	r1, [pc, #68]	; (8002300 <altitudeC+0x90>)
 80022bc:	f7fe f804 	bl	80002c8 <__aeabi_dsub>
 80022c0:	4602      	mov	r2, r0
 80022c2:	460b      	mov	r3, r1
 80022c4:	4610      	mov	r0, r2
 80022c6:	4619      	mov	r1, r3
 80022c8:	a309      	add	r3, pc, #36	; (adr r3, 80022f0 <altitudeC+0x80>)
 80022ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022ce:	f7fe f9b3 	bl	8000638 <__aeabi_dmul>
 80022d2:	4602      	mov	r2, r0
 80022d4:	460b      	mov	r3, r1
 80022d6:	ec43 2b17 	vmov	d7, r2, r3

}
 80022da:	eeb0 0a47 	vmov.f32	s0, s14
 80022de:	eef0 0a67 	vmov.f32	s1, s15
 80022e2:	3710      	adds	r7, #16
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	ccd9456c 	.word	0xccd9456c
 80022ec:	3fc85b95 	.word	0x3fc85b95
 80022f0:	00000000 	.word	0x00000000
 80022f4:	40e5a540 	.word	0x40e5a540
 80022f8:	2000055c 	.word	0x2000055c
 80022fc:	20000258 	.word	0x20000258
 8002300:	3ff00000 	.word	0x3ff00000

08002304 <paketolustur>:

void paketolustur(void)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b08c      	sub	sp, #48	; 0x30
 8002308:	af00      	add	r7, sp, #0

	FLOAT32_UINT8_DONUSTURUCU irtifa;
	irtifa.sayi = irtifaP;
 800230a:	4b75      	ldr	r3, [pc, #468]	; (80024e0 <paketolustur+0x1dc>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	62fb      	str	r3, [r7, #44]	; 0x2c
	olusturalacak_paket[0]=irtifa.array[0];
 8002310:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8002314:	4b73      	ldr	r3, [pc, #460]	; (80024e4 <paketolustur+0x1e0>)
 8002316:	701a      	strb	r2, [r3, #0]
	olusturalacak_paket[1]=irtifa.array[1];
 8002318:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800231c:	4b71      	ldr	r3, [pc, #452]	; (80024e4 <paketolustur+0x1e0>)
 800231e:	705a      	strb	r2, [r3, #1]
	olusturalacak_paket[2]=irtifa.array[2];
 8002320:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8002324:	4b6f      	ldr	r3, [pc, #444]	; (80024e4 <paketolustur+0x1e0>)
 8002326:	709a      	strb	r2, [r3, #2]
	olusturalacak_paket[3]=irtifa.array[3];
 8002328:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800232c:	4b6d      	ldr	r3, [pc, #436]	; (80024e4 <paketolustur+0x1e0>)
 800232e:	70da      	strb	r2, [r3, #3]

	FLOAT32_UINT8_DONUSTURUCU gpsIrtifa;
	gpsIrtifa.sayi = gps.altitude;
 8002330:	4b6d      	ldr	r3, [pc, #436]	; (80024e8 <paketolustur+0x1e4>)
 8002332:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002336:	4610      	mov	r0, r2
 8002338:	4619      	mov	r1, r3
 800233a:	f7fe fc75 	bl	8000c28 <__aeabi_d2f>
 800233e:	4603      	mov	r3, r0
 8002340:	62bb      	str	r3, [r7, #40]	; 0x28
	olusturalacak_paket[4]=gpsIrtifa.array[0];
 8002342:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8002346:	4b67      	ldr	r3, [pc, #412]	; (80024e4 <paketolustur+0x1e0>)
 8002348:	711a      	strb	r2, [r3, #4]
	olusturalacak_paket[5]=gpsIrtifa.array[1];
 800234a:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 800234e:	4b65      	ldr	r3, [pc, #404]	; (80024e4 <paketolustur+0x1e0>)
 8002350:	715a      	strb	r2, [r3, #5]
	olusturalacak_paket[6]=gpsIrtifa.array[2];
 8002352:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 8002356:	4b63      	ldr	r3, [pc, #396]	; (80024e4 <paketolustur+0x1e0>)
 8002358:	719a      	strb	r2, [r3, #6]
	olusturalacak_paket[7]=gpsIrtifa.array[3];
 800235a:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800235e:	4b61      	ldr	r3, [pc, #388]	; (80024e4 <paketolustur+0x1e0>)
 8002360:	71da      	strb	r2, [r3, #7]

	FLOAT32_UINT8_DONUSTURUCU enlem;
	enlem.sayi = gps.latitude;
 8002362:	4b61      	ldr	r3, [pc, #388]	; (80024e8 <paketolustur+0x1e4>)
 8002364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002368:	4610      	mov	r0, r2
 800236a:	4619      	mov	r1, r3
 800236c:	f7fe fc5c 	bl	8000c28 <__aeabi_d2f>
 8002370:	4603      	mov	r3, r0
 8002372:	627b      	str	r3, [r7, #36]	; 0x24
	olusturalacak_paket[8]=enlem.array[0];
 8002374:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002378:	4b5a      	ldr	r3, [pc, #360]	; (80024e4 <paketolustur+0x1e0>)
 800237a:	721a      	strb	r2, [r3, #8]
	olusturalacak_paket[9]=enlem.array[1];
 800237c:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8002380:	4b58      	ldr	r3, [pc, #352]	; (80024e4 <paketolustur+0x1e0>)
 8002382:	725a      	strb	r2, [r3, #9]
	olusturalacak_paket[10]=enlem.array[2];
 8002384:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002388:	4b56      	ldr	r3, [pc, #344]	; (80024e4 <paketolustur+0x1e0>)
 800238a:	729a      	strb	r2, [r3, #10]
	olusturalacak_paket[11]=enlem.array[3];
 800238c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002390:	4b54      	ldr	r3, [pc, #336]	; (80024e4 <paketolustur+0x1e0>)
 8002392:	72da      	strb	r2, [r3, #11]

	FLOAT32_UINT8_DONUSTURUCU boylam;
	boylam.sayi = gps.longitude;
 8002394:	4b54      	ldr	r3, [pc, #336]	; (80024e8 <paketolustur+0x1e4>)
 8002396:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800239a:	4610      	mov	r0, r2
 800239c:	4619      	mov	r1, r3
 800239e:	f7fe fc43 	bl	8000c28 <__aeabi_d2f>
 80023a2:	4603      	mov	r3, r0
 80023a4:	623b      	str	r3, [r7, #32]
	olusturalacak_paket[12]=boylam.array[0];
 80023a6:	f897 2020 	ldrb.w	r2, [r7, #32]
 80023aa:	4b4e      	ldr	r3, [pc, #312]	; (80024e4 <paketolustur+0x1e0>)
 80023ac:	731a      	strb	r2, [r3, #12]
	olusturalacak_paket[13]=boylam.array[1];
 80023ae:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80023b2:	4b4c      	ldr	r3, [pc, #304]	; (80024e4 <paketolustur+0x1e0>)
 80023b4:	735a      	strb	r2, [r3, #13]
	olusturalacak_paket[14]=boylam.array[2];
 80023b6:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80023ba:	4b4a      	ldr	r3, [pc, #296]	; (80024e4 <paketolustur+0x1e0>)
 80023bc:	739a      	strb	r2, [r3, #14]
	olusturalacak_paket[15]=boylam.array[3];
 80023be:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80023c2:	4b48      	ldr	r3, [pc, #288]	; (80024e4 <paketolustur+0x1e0>)
 80023c4:	73da      	strb	r2, [r3, #15]



	FLOAT32_UINT8_DONUSTURUCU gyroX;
	gyroX.sayi = MPU9255.GyroX;
 80023c6:	4b49      	ldr	r3, [pc, #292]	; (80024ec <paketolustur+0x1e8>)
 80023c8:	68db      	ldr	r3, [r3, #12]
 80023ca:	61fb      	str	r3, [r7, #28]
	olusturalacak_paket[16]=gyroX.array[0];
 80023cc:	7f3a      	ldrb	r2, [r7, #28]
 80023ce:	4b45      	ldr	r3, [pc, #276]	; (80024e4 <paketolustur+0x1e0>)
 80023d0:	741a      	strb	r2, [r3, #16]
	olusturalacak_paket[17]=gyroX.array[1];
 80023d2:	7f7a      	ldrb	r2, [r7, #29]
 80023d4:	4b43      	ldr	r3, [pc, #268]	; (80024e4 <paketolustur+0x1e0>)
 80023d6:	745a      	strb	r2, [r3, #17]
	olusturalacak_paket[18]=gyroX.array[2];
 80023d8:	7fba      	ldrb	r2, [r7, #30]
 80023da:	4b42      	ldr	r3, [pc, #264]	; (80024e4 <paketolustur+0x1e0>)
 80023dc:	749a      	strb	r2, [r3, #18]
	olusturalacak_paket[19]=gyroX.array[3];
 80023de:	7ffa      	ldrb	r2, [r7, #31]
 80023e0:	4b40      	ldr	r3, [pc, #256]	; (80024e4 <paketolustur+0x1e0>)
 80023e2:	74da      	strb	r2, [r3, #19]

	FLOAT32_UINT8_DONUSTURUCU gyroY;
	gyroY.sayi = MPU9255.GyroY;
 80023e4:	4b41      	ldr	r3, [pc, #260]	; (80024ec <paketolustur+0x1e8>)
 80023e6:	691b      	ldr	r3, [r3, #16]
 80023e8:	61bb      	str	r3, [r7, #24]
	olusturalacak_paket[20]=gyroY.array[0];
 80023ea:	7e3a      	ldrb	r2, [r7, #24]
 80023ec:	4b3d      	ldr	r3, [pc, #244]	; (80024e4 <paketolustur+0x1e0>)
 80023ee:	751a      	strb	r2, [r3, #20]
	olusturalacak_paket[21]=gyroY.array[1];
 80023f0:	7e7a      	ldrb	r2, [r7, #25]
 80023f2:	4b3c      	ldr	r3, [pc, #240]	; (80024e4 <paketolustur+0x1e0>)
 80023f4:	755a      	strb	r2, [r3, #21]
	olusturalacak_paket[22]=gyroY.array[2];
 80023f6:	7eba      	ldrb	r2, [r7, #26]
 80023f8:	4b3a      	ldr	r3, [pc, #232]	; (80024e4 <paketolustur+0x1e0>)
 80023fa:	759a      	strb	r2, [r3, #22]
	olusturalacak_paket[23]=gyroY.array[3];
 80023fc:	7efa      	ldrb	r2, [r7, #27]
 80023fe:	4b39      	ldr	r3, [pc, #228]	; (80024e4 <paketolustur+0x1e0>)
 8002400:	75da      	strb	r2, [r3, #23]

	FLOAT32_UINT8_DONUSTURUCU gyroZ;
	gyroZ.sayi = MPU9255.GyroZ;
 8002402:	4b3a      	ldr	r3, [pc, #232]	; (80024ec <paketolustur+0x1e8>)
 8002404:	695b      	ldr	r3, [r3, #20]
 8002406:	617b      	str	r3, [r7, #20]
	olusturalacak_paket[24]=gyroZ.array[0];
 8002408:	7d3a      	ldrb	r2, [r7, #20]
 800240a:	4b36      	ldr	r3, [pc, #216]	; (80024e4 <paketolustur+0x1e0>)
 800240c:	761a      	strb	r2, [r3, #24]
	olusturalacak_paket[25]=gyroZ.array[1];
 800240e:	7d7a      	ldrb	r2, [r7, #21]
 8002410:	4b34      	ldr	r3, [pc, #208]	; (80024e4 <paketolustur+0x1e0>)
 8002412:	765a      	strb	r2, [r3, #25]
	olusturalacak_paket[26]=gyroZ.array[2];
 8002414:	7dba      	ldrb	r2, [r7, #22]
 8002416:	4b33      	ldr	r3, [pc, #204]	; (80024e4 <paketolustur+0x1e0>)
 8002418:	769a      	strb	r2, [r3, #26]
	olusturalacak_paket[27]=gyroZ.array[3];
 800241a:	7dfa      	ldrb	r2, [r7, #23]
 800241c:	4b31      	ldr	r3, [pc, #196]	; (80024e4 <paketolustur+0x1e0>)
 800241e:	76da      	strb	r2, [r3, #27]

	FLOAT32_UINT8_DONUSTURUCU acx;
	acx.sayi = MPU9255.AccelX;
 8002420:	4b32      	ldr	r3, [pc, #200]	; (80024ec <paketolustur+0x1e8>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	613b      	str	r3, [r7, #16]
	olusturalacak_paket[28]=acx.array[0];
 8002426:	7c3a      	ldrb	r2, [r7, #16]
 8002428:	4b2e      	ldr	r3, [pc, #184]	; (80024e4 <paketolustur+0x1e0>)
 800242a:	771a      	strb	r2, [r3, #28]
	olusturalacak_paket[29]=acx.array[1];
 800242c:	7c7a      	ldrb	r2, [r7, #17]
 800242e:	4b2d      	ldr	r3, [pc, #180]	; (80024e4 <paketolustur+0x1e0>)
 8002430:	775a      	strb	r2, [r3, #29]
	olusturalacak_paket[30]=acx.array[2];
 8002432:	7cba      	ldrb	r2, [r7, #18]
 8002434:	4b2b      	ldr	r3, [pc, #172]	; (80024e4 <paketolustur+0x1e0>)
 8002436:	779a      	strb	r2, [r3, #30]
	olusturalacak_paket[31]=acx.array[3];
 8002438:	7cfa      	ldrb	r2, [r7, #19]
 800243a:	4b2a      	ldr	r3, [pc, #168]	; (80024e4 <paketolustur+0x1e0>)
 800243c:	77da      	strb	r2, [r3, #31]

	FLOAT32_UINT8_DONUSTURUCU acy;
	acy.sayi = MPU9255.AccelY;
 800243e:	4b2b      	ldr	r3, [pc, #172]	; (80024ec <paketolustur+0x1e8>)
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	60fb      	str	r3, [r7, #12]
	olusturalacak_paket[32]=acy.array[0];
 8002444:	7b3a      	ldrb	r2, [r7, #12]
 8002446:	4b27      	ldr	r3, [pc, #156]	; (80024e4 <paketolustur+0x1e0>)
 8002448:	f883 2020 	strb.w	r2, [r3, #32]
	olusturalacak_paket[33]=acy.array[1];
 800244c:	7b7a      	ldrb	r2, [r7, #13]
 800244e:	4b25      	ldr	r3, [pc, #148]	; (80024e4 <paketolustur+0x1e0>)
 8002450:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	olusturalacak_paket[34]=acy.array[2];
 8002454:	7bba      	ldrb	r2, [r7, #14]
 8002456:	4b23      	ldr	r3, [pc, #140]	; (80024e4 <paketolustur+0x1e0>)
 8002458:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	olusturalacak_paket[35]=acy.array[3];
 800245c:	7bfa      	ldrb	r2, [r7, #15]
 800245e:	4b21      	ldr	r3, [pc, #132]	; (80024e4 <paketolustur+0x1e0>)
 8002460:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

	FLOAT32_UINT8_DONUSTURUCU acz;
	acz.sayi = MPU9255.AccelZ;
 8002464:	4b21      	ldr	r3, [pc, #132]	; (80024ec <paketolustur+0x1e8>)
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	60bb      	str	r3, [r7, #8]
	olusturalacak_paket[36]=acz.array[0];
 800246a:	7a3a      	ldrb	r2, [r7, #8]
 800246c:	4b1d      	ldr	r3, [pc, #116]	; (80024e4 <paketolustur+0x1e0>)
 800246e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	olusturalacak_paket[37]=acz.array[1];
 8002472:	7a7a      	ldrb	r2, [r7, #9]
 8002474:	4b1b      	ldr	r3, [pc, #108]	; (80024e4 <paketolustur+0x1e0>)
 8002476:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	olusturalacak_paket[38]=acz.array[2];
 800247a:	7aba      	ldrb	r2, [r7, #10]
 800247c:	4b19      	ldr	r3, [pc, #100]	; (80024e4 <paketolustur+0x1e0>)
 800247e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	olusturalacak_paket[39]=acz.array[3];
 8002482:	7afa      	ldrb	r2, [r7, #11]
 8002484:	4b17      	ldr	r3, [pc, #92]	; (80024e4 <paketolustur+0x1e0>)
 8002486:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

	FLOAT32_UINT8_DONUSTURUCU angle;
	angle.sayi = Rpitch;
 800248a:	4b19      	ldr	r3, [pc, #100]	; (80024f0 <paketolustur+0x1ec>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	607b      	str	r3, [r7, #4]
	olusturalacak_paket[40]=angle.array[0];
 8002490:	793a      	ldrb	r2, [r7, #4]
 8002492:	4b14      	ldr	r3, [pc, #80]	; (80024e4 <paketolustur+0x1e0>)
 8002494:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	olusturalacak_paket[41]=angle.array[1];
 8002498:	797a      	ldrb	r2, [r7, #5]
 800249a:	4b12      	ldr	r3, [pc, #72]	; (80024e4 <paketolustur+0x1e0>)
 800249c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	olusturalacak_paket[42]=angle.array[2];
 80024a0:	79ba      	ldrb	r2, [r7, #6]
 80024a2:	4b10      	ldr	r3, [pc, #64]	; (80024e4 <paketolustur+0x1e0>)
 80024a4:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	olusturalacak_paket[43]=angle.array[3];
 80024a8:	79fa      	ldrb	r2, [r7, #7]
 80024aa:	4b0e      	ldr	r3, [pc, #56]	; (80024e4 <paketolustur+0x1e0>)
 80024ac:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

	FLOAT32_UINT8_DONUSTURUCU sicaklik;
	sicaklik.sayi = temperature;
 80024b0:	4b10      	ldr	r3, [pc, #64]	; (80024f4 <paketolustur+0x1f0>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	603b      	str	r3, [r7, #0]
	olusturalacak_paket[44]=sicaklik.array[0];
 80024b6:	783a      	ldrb	r2, [r7, #0]
 80024b8:	4b0a      	ldr	r3, [pc, #40]	; (80024e4 <paketolustur+0x1e0>)
 80024ba:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	olusturalacak_paket[45]=sicaklik.array[1];
 80024be:	787a      	ldrb	r2, [r7, #1]
 80024c0:	4b08      	ldr	r3, [pc, #32]	; (80024e4 <paketolustur+0x1e0>)
 80024c2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	olusturalacak_paket[46]=sicaklik.array[2];
 80024c6:	78ba      	ldrb	r2, [r7, #2]
 80024c8:	4b06      	ldr	r3, [pc, #24]	; (80024e4 <paketolustur+0x1e0>)
 80024ca:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	olusturalacak_paket[47]=sicaklik.array[3];
 80024ce:	78fa      	ldrb	r2, [r7, #3]
 80024d0:	4b04      	ldr	r3, [pc, #16]	; (80024e4 <paketolustur+0x1e0>)
 80024d2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f




}
 80024d6:	bf00      	nop
 80024d8:	3730      	adds	r7, #48	; 0x30
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	20000568 	.word	0x20000568
 80024e4:	2000059c 	.word	0x2000059c
 80024e8:	20000418 	.word	0x20000418
 80024ec:	2000056c 	.word	0x2000056c
 80024f0:	20000564 	.word	0x20000564
 80024f4:	2000055c 	.word	0x2000055c

080024f8 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b094      	sub	sp, #80	; 0x50
 80024fc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80024fe:	f107 031c 	add.w	r3, r7, #28
 8002502:	2234      	movs	r2, #52	; 0x34
 8002504:	2100      	movs	r1, #0
 8002506:	4618      	mov	r0, r3
 8002508:	f008 fcd6 	bl	800aeb8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800250c:	f107 0308 	add.w	r3, r7, #8
 8002510:	2200      	movs	r2, #0
 8002512:	601a      	str	r2, [r3, #0]
 8002514:	605a      	str	r2, [r3, #4]
 8002516:	609a      	str	r2, [r3, #8]
 8002518:	60da      	str	r2, [r3, #12]
 800251a:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 800251c:	2300      	movs	r3, #0
 800251e:	607b      	str	r3, [r7, #4]
 8002520:	4b2c      	ldr	r3, [pc, #176]	; (80025d4 <SystemClock_Config+0xdc>)
 8002522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002524:	4a2b      	ldr	r2, [pc, #172]	; (80025d4 <SystemClock_Config+0xdc>)
 8002526:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800252a:	6413      	str	r3, [r2, #64]	; 0x40
 800252c:	4b29      	ldr	r3, [pc, #164]	; (80025d4 <SystemClock_Config+0xdc>)
 800252e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002530:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002534:	607b      	str	r3, [r7, #4]
 8002536:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002538:	2300      	movs	r3, #0
 800253a:	603b      	str	r3, [r7, #0]
 800253c:	4b26      	ldr	r3, [pc, #152]	; (80025d8 <SystemClock_Config+0xe0>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a25      	ldr	r2, [pc, #148]	; (80025d8 <SystemClock_Config+0xe0>)
 8002542:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002546:	6013      	str	r3, [r2, #0]
 8002548:	4b23      	ldr	r3, [pc, #140]	; (80025d8 <SystemClock_Config+0xe0>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002550:	603b      	str	r3, [r7, #0]
 8002552:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002554:	2302      	movs	r3, #2
 8002556:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002558:	2301      	movs	r3, #1
 800255a:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800255c:	2310      	movs	r3, #16
 800255e:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002560:	2302      	movs	r3, #2
 8002562:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002564:	2300      	movs	r3, #0
 8002566:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 8;
 8002568:	2308      	movs	r3, #8
 800256a:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 180;
 800256c:	23b4      	movs	r3, #180	; 0xb4
 800256e:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002570:	2302      	movs	r3, #2
 8002572:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8002574:	2302      	movs	r3, #2
 8002576:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 8002578:	2302      	movs	r3, #2
 800257a:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800257c:	f107 031c 	add.w	r3, r7, #28
 8002580:	4618      	mov	r0, r3
 8002582:	f006 fda3 	bl	80090cc <HAL_RCC_OscConfig>
 8002586:	4603      	mov	r3, r0
 8002588:	2b00      	cmp	r3, #0
 800258a:	d001      	beq.n	8002590 <SystemClock_Config+0x98>
	{
		Error_Handler();
 800258c:	f000 f9e4 	bl	8002958 <Error_Handler>
	}

	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002590:	f006 fa02 	bl	8008998 <HAL_PWREx_EnableOverDrive>
 8002594:	4603      	mov	r3, r0
 8002596:	2b00      	cmp	r3, #0
 8002598:	d001      	beq.n	800259e <SystemClock_Config+0xa6>
	{
		Error_Handler();
 800259a:	f000 f9dd 	bl	8002958 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800259e:	230f      	movs	r3, #15
 80025a0:	60bb      	str	r3, [r7, #8]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80025a2:	2302      	movs	r3, #2
 80025a4:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80025a6:	2300      	movs	r3, #0
 80025a8:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80025aa:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80025ae:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80025b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025b4:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80025b6:	f107 0308 	add.w	r3, r7, #8
 80025ba:	2105      	movs	r1, #5
 80025bc:	4618      	mov	r0, r3
 80025be:	f006 fa3b 	bl	8008a38 <HAL_RCC_ClockConfig>
 80025c2:	4603      	mov	r3, r0
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d001      	beq.n	80025cc <SystemClock_Config+0xd4>
	{
		Error_Handler();
 80025c8:	f000 f9c6 	bl	8002958 <Error_Handler>
	}
}
 80025cc:	bf00      	nop
 80025ce:	3750      	adds	r7, #80	; 0x50
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}
 80025d4:	40023800 	.word	0x40023800
 80025d8:	40007000 	.word	0x40007000

080025dc <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 80025e0:	4b12      	ldr	r3, [pc, #72]	; (800262c <MX_I2C1_Init+0x50>)
 80025e2:	4a13      	ldr	r2, [pc, #76]	; (8002630 <MX_I2C1_Init+0x54>)
 80025e4:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 400000;
 80025e6:	4b11      	ldr	r3, [pc, #68]	; (800262c <MX_I2C1_Init+0x50>)
 80025e8:	4a12      	ldr	r2, [pc, #72]	; (8002634 <MX_I2C1_Init+0x58>)
 80025ea:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80025ec:	4b0f      	ldr	r3, [pc, #60]	; (800262c <MX_I2C1_Init+0x50>)
 80025ee:	2200      	movs	r2, #0
 80025f0:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 80025f2:	4b0e      	ldr	r3, [pc, #56]	; (800262c <MX_I2C1_Init+0x50>)
 80025f4:	2200      	movs	r2, #0
 80025f6:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80025f8:	4b0c      	ldr	r3, [pc, #48]	; (800262c <MX_I2C1_Init+0x50>)
 80025fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80025fe:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002600:	4b0a      	ldr	r3, [pc, #40]	; (800262c <MX_I2C1_Init+0x50>)
 8002602:	2200      	movs	r2, #0
 8002604:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8002606:	4b09      	ldr	r3, [pc, #36]	; (800262c <MX_I2C1_Init+0x50>)
 8002608:	2200      	movs	r2, #0
 800260a:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800260c:	4b07      	ldr	r3, [pc, #28]	; (800262c <MX_I2C1_Init+0x50>)
 800260e:	2200      	movs	r2, #0
 8002610:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002612:	4b06      	ldr	r3, [pc, #24]	; (800262c <MX_I2C1_Init+0x50>)
 8002614:	2200      	movs	r2, #0
 8002616:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002618:	4804      	ldr	r0, [pc, #16]	; (800262c <MX_I2C1_Init+0x50>)
 800261a:	f004 fd89 	bl	8007130 <HAL_I2C_Init>
 800261e:	4603      	mov	r3, r0
 8002620:	2b00      	cmp	r3, #0
 8002622:	d001      	beq.n	8002628 <MX_I2C1_Init+0x4c>
	{
		Error_Handler();
 8002624:	f000 f998 	bl	8002958 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8002628:	bf00      	nop
 800262a:	bd80      	pop	{r7, pc}
 800262c:	20000258 	.word	0x20000258
 8002630:	40005400 	.word	0x40005400
 8002634:	00061a80 	.word	0x00061a80

08002638 <MX_SPI2_Init>:
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 800263c:	4b17      	ldr	r3, [pc, #92]	; (800269c <MX_SPI2_Init+0x64>)
 800263e:	4a18      	ldr	r2, [pc, #96]	; (80026a0 <MX_SPI2_Init+0x68>)
 8002640:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 8002642:	4b16      	ldr	r3, [pc, #88]	; (800269c <MX_SPI2_Init+0x64>)
 8002644:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002648:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800264a:	4b14      	ldr	r3, [pc, #80]	; (800269c <MX_SPI2_Init+0x64>)
 800264c:	2200      	movs	r2, #0
 800264e:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002650:	4b12      	ldr	r3, [pc, #72]	; (800269c <MX_SPI2_Init+0x64>)
 8002652:	2200      	movs	r2, #0
 8002654:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002656:	4b11      	ldr	r3, [pc, #68]	; (800269c <MX_SPI2_Init+0x64>)
 8002658:	2200      	movs	r2, #0
 800265a:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800265c:	4b0f      	ldr	r3, [pc, #60]	; (800269c <MX_SPI2_Init+0x64>)
 800265e:	2200      	movs	r2, #0
 8002660:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 8002662:	4b0e      	ldr	r3, [pc, #56]	; (800269c <MX_SPI2_Init+0x64>)
 8002664:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002668:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800266a:	4b0c      	ldr	r3, [pc, #48]	; (800269c <MX_SPI2_Init+0x64>)
 800266c:	2200      	movs	r2, #0
 800266e:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002670:	4b0a      	ldr	r3, [pc, #40]	; (800269c <MX_SPI2_Init+0x64>)
 8002672:	2200      	movs	r2, #0
 8002674:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002676:	4b09      	ldr	r3, [pc, #36]	; (800269c <MX_SPI2_Init+0x64>)
 8002678:	2200      	movs	r2, #0
 800267a:	625a      	str	r2, [r3, #36]	; 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800267c:	4b07      	ldr	r3, [pc, #28]	; (800269c <MX_SPI2_Init+0x64>)
 800267e:	2200      	movs	r2, #0
 8002680:	629a      	str	r2, [r3, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 10;
 8002682:	4b06      	ldr	r3, [pc, #24]	; (800269c <MX_SPI2_Init+0x64>)
 8002684:	220a      	movs	r2, #10
 8002686:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002688:	4804      	ldr	r0, [pc, #16]	; (800269c <MX_SPI2_Init+0x64>)
 800268a:	f006 ffbd 	bl	8009608 <HAL_SPI_Init>
 800268e:	4603      	mov	r3, r0
 8002690:	2b00      	cmp	r3, #0
 8002692:	d001      	beq.n	8002698 <MX_SPI2_Init+0x60>
	{
		Error_Handler();
 8002694:	f000 f960 	bl	8002958 <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
 8002698:	bf00      	nop
 800269a:	bd80      	pop	{r7, pc}
 800269c:	200002ac 	.word	0x200002ac
 80026a0:	40003800 	.word	0x40003800

080026a4 <MX_TIM7_Init>:
 * @brief TIM7 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM7_Init(void)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b082      	sub	sp, #8
 80026a8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM7_Init 0 */

	/* USER CODE END TIM7_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026aa:	463b      	mov	r3, r7
 80026ac:	2200      	movs	r2, #0
 80026ae:	601a      	str	r2, [r3, #0]
 80026b0:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM7_Init 1 */

	/* USER CODE END TIM7_Init 1 */
	htim7.Instance = TIM7;
 80026b2:	4b15      	ldr	r3, [pc, #84]	; (8002708 <MX_TIM7_Init+0x64>)
 80026b4:	4a15      	ldr	r2, [pc, #84]	; (800270c <MX_TIM7_Init+0x68>)
 80026b6:	601a      	str	r2, [r3, #0]
	htim7.Init.Prescaler = 2400;
 80026b8:	4b13      	ldr	r3, [pc, #76]	; (8002708 <MX_TIM7_Init+0x64>)
 80026ba:	f44f 6216 	mov.w	r2, #2400	; 0x960
 80026be:	605a      	str	r2, [r3, #4]
	htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026c0:	4b11      	ldr	r3, [pc, #68]	; (8002708 <MX_TIM7_Init+0x64>)
 80026c2:	2200      	movs	r2, #0
 80026c4:	609a      	str	r2, [r3, #8]
	htim7.Init.Period = 65535;
 80026c6:	4b10      	ldr	r3, [pc, #64]	; (8002708 <MX_TIM7_Init+0x64>)
 80026c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80026cc:	60da      	str	r2, [r3, #12]
	htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026ce:	4b0e      	ldr	r3, [pc, #56]	; (8002708 <MX_TIM7_Init+0x64>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80026d4:	480c      	ldr	r0, [pc, #48]	; (8002708 <MX_TIM7_Init+0x64>)
 80026d6:	f007 f820 	bl	800971a <HAL_TIM_Base_Init>
 80026da:	4603      	mov	r3, r0
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d001      	beq.n	80026e4 <MX_TIM7_Init+0x40>
	{
		Error_Handler();
 80026e0:	f000 f93a 	bl	8002958 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026e4:	2300      	movs	r3, #0
 80026e6:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026e8:	2300      	movs	r3, #0
 80026ea:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80026ec:	463b      	mov	r3, r7
 80026ee:	4619      	mov	r1, r3
 80026f0:	4805      	ldr	r0, [pc, #20]	; (8002708 <MX_TIM7_Init+0x64>)
 80026f2:	f007 faa1 	bl	8009c38 <HAL_TIMEx_MasterConfigSynchronization>
 80026f6:	4603      	mov	r3, r0
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d001      	beq.n	8002700 <MX_TIM7_Init+0x5c>
	{
		Error_Handler();
 80026fc:	f000 f92c 	bl	8002958 <Error_Handler>
	}
	/* USER CODE BEGIN TIM7_Init 2 */

	/* USER CODE END TIM7_Init 2 */

}
 8002700:	bf00      	nop
 8002702:	3708      	adds	r7, #8
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}
 8002708:	20000304 	.word	0x20000304
 800270c:	40001400 	.word	0x40001400

08002710 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8002714:	4b11      	ldr	r3, [pc, #68]	; (800275c <MX_USART1_UART_Init+0x4c>)
 8002716:	4a12      	ldr	r2, [pc, #72]	; (8002760 <MX_USART1_UART_Init+0x50>)
 8002718:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 9600;
 800271a:	4b10      	ldr	r3, [pc, #64]	; (800275c <MX_USART1_UART_Init+0x4c>)
 800271c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002720:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002722:	4b0e      	ldr	r3, [pc, #56]	; (800275c <MX_USART1_UART_Init+0x4c>)
 8002724:	2200      	movs	r2, #0
 8002726:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8002728:	4b0c      	ldr	r3, [pc, #48]	; (800275c <MX_USART1_UART_Init+0x4c>)
 800272a:	2200      	movs	r2, #0
 800272c:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 800272e:	4b0b      	ldr	r3, [pc, #44]	; (800275c <MX_USART1_UART_Init+0x4c>)
 8002730:	2200      	movs	r2, #0
 8002732:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8002734:	4b09      	ldr	r3, [pc, #36]	; (800275c <MX_USART1_UART_Init+0x4c>)
 8002736:	220c      	movs	r2, #12
 8002738:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800273a:	4b08      	ldr	r3, [pc, #32]	; (800275c <MX_USART1_UART_Init+0x4c>)
 800273c:	2200      	movs	r2, #0
 800273e:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002740:	4b06      	ldr	r3, [pc, #24]	; (800275c <MX_USART1_UART_Init+0x4c>)
 8002742:	2200      	movs	r2, #0
 8002744:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8002746:	4805      	ldr	r0, [pc, #20]	; (800275c <MX_USART1_UART_Init+0x4c>)
 8002748:	f007 fb06 	bl	8009d58 <HAL_UART_Init>
 800274c:	4603      	mov	r3, r0
 800274e:	2b00      	cmp	r3, #0
 8002750:	d001      	beq.n	8002756 <MX_USART1_UART_Init+0x46>
	{
		Error_Handler();
 8002752:	f000 f901 	bl	8002958 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8002756:	bf00      	nop
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	2000034c 	.word	0x2000034c
 8002760:	40011000 	.word	0x40011000

08002764 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8002768:	4b11      	ldr	r3, [pc, #68]	; (80027b0 <MX_USART2_UART_Init+0x4c>)
 800276a:	4a12      	ldr	r2, [pc, #72]	; (80027b4 <MX_USART2_UART_Init+0x50>)
 800276c:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 800276e:	4b10      	ldr	r3, [pc, #64]	; (80027b0 <MX_USART2_UART_Init+0x4c>)
 8002770:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002774:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002776:	4b0e      	ldr	r3, [pc, #56]	; (80027b0 <MX_USART2_UART_Init+0x4c>)
 8002778:	2200      	movs	r2, #0
 800277a:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 800277c:	4b0c      	ldr	r3, [pc, #48]	; (80027b0 <MX_USART2_UART_Init+0x4c>)
 800277e:	2200      	movs	r2, #0
 8002780:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8002782:	4b0b      	ldr	r3, [pc, #44]	; (80027b0 <MX_USART2_UART_Init+0x4c>)
 8002784:	2200      	movs	r2, #0
 8002786:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8002788:	4b09      	ldr	r3, [pc, #36]	; (80027b0 <MX_USART2_UART_Init+0x4c>)
 800278a:	220c      	movs	r2, #12
 800278c:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800278e:	4b08      	ldr	r3, [pc, #32]	; (80027b0 <MX_USART2_UART_Init+0x4c>)
 8002790:	2200      	movs	r2, #0
 8002792:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002794:	4b06      	ldr	r3, [pc, #24]	; (80027b0 <MX_USART2_UART_Init+0x4c>)
 8002796:	2200      	movs	r2, #0
 8002798:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK)
 800279a:	4805      	ldr	r0, [pc, #20]	; (80027b0 <MX_USART2_UART_Init+0x4c>)
 800279c:	f007 fadc 	bl	8009d58 <HAL_UART_Init>
 80027a0:	4603      	mov	r3, r0
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d001      	beq.n	80027aa <MX_USART2_UART_Init+0x46>
	{
		Error_Handler();
 80027a6:	f000 f8d7 	bl	8002958 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80027aa:	bf00      	nop
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	20000390 	.word	0x20000390
 80027b4:	40004400 	.word	0x40004400

080027b8 <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 80027bc:	4b11      	ldr	r3, [pc, #68]	; (8002804 <MX_USART3_UART_Init+0x4c>)
 80027be:	4a12      	ldr	r2, [pc, #72]	; (8002808 <MX_USART3_UART_Init+0x50>)
 80027c0:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 9600;
 80027c2:	4b10      	ldr	r3, [pc, #64]	; (8002804 <MX_USART3_UART_Init+0x4c>)
 80027c4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80027c8:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80027ca:	4b0e      	ldr	r3, [pc, #56]	; (8002804 <MX_USART3_UART_Init+0x4c>)
 80027cc:	2200      	movs	r2, #0
 80027ce:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 80027d0:	4b0c      	ldr	r3, [pc, #48]	; (8002804 <MX_USART3_UART_Init+0x4c>)
 80027d2:	2200      	movs	r2, #0
 80027d4:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 80027d6:	4b0b      	ldr	r3, [pc, #44]	; (8002804 <MX_USART3_UART_Init+0x4c>)
 80027d8:	2200      	movs	r2, #0
 80027da:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 80027dc:	4b09      	ldr	r3, [pc, #36]	; (8002804 <MX_USART3_UART_Init+0x4c>)
 80027de:	220c      	movs	r2, #12
 80027e0:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027e2:	4b08      	ldr	r3, [pc, #32]	; (8002804 <MX_USART3_UART_Init+0x4c>)
 80027e4:	2200      	movs	r2, #0
 80027e6:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80027e8:	4b06      	ldr	r3, [pc, #24]	; (8002804 <MX_USART3_UART_Init+0x4c>)
 80027ea:	2200      	movs	r2, #0
 80027ec:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK)
 80027ee:	4805      	ldr	r0, [pc, #20]	; (8002804 <MX_USART3_UART_Init+0x4c>)
 80027f0:	f007 fab2 	bl	8009d58 <HAL_UART_Init>
 80027f4:	4603      	mov	r3, r0
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d001      	beq.n	80027fe <MX_USART3_UART_Init+0x46>
	{
		Error_Handler();
 80027fa:	f000 f8ad 	bl	8002958 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 80027fe:	bf00      	nop
 8002800:	bd80      	pop	{r7, pc}
 8002802:	bf00      	nop
 8002804:	200003d4 	.word	0x200003d4
 8002808:	40004800 	.word	0x40004800

0800280c <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b08a      	sub	sp, #40	; 0x28
 8002810:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002812:	f107 0314 	add.w	r3, r7, #20
 8002816:	2200      	movs	r2, #0
 8002818:	601a      	str	r2, [r3, #0]
 800281a:	605a      	str	r2, [r3, #4]
 800281c:	609a      	str	r2, [r3, #8]
 800281e:	60da      	str	r2, [r3, #12]
 8002820:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8002822:	2300      	movs	r3, #0
 8002824:	613b      	str	r3, [r7, #16]
 8002826:	4b48      	ldr	r3, [pc, #288]	; (8002948 <MX_GPIO_Init+0x13c>)
 8002828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800282a:	4a47      	ldr	r2, [pc, #284]	; (8002948 <MX_GPIO_Init+0x13c>)
 800282c:	f043 0304 	orr.w	r3, r3, #4
 8002830:	6313      	str	r3, [r2, #48]	; 0x30
 8002832:	4b45      	ldr	r3, [pc, #276]	; (8002948 <MX_GPIO_Init+0x13c>)
 8002834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002836:	f003 0304 	and.w	r3, r3, #4
 800283a:	613b      	str	r3, [r7, #16]
 800283c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800283e:	2300      	movs	r3, #0
 8002840:	60fb      	str	r3, [r7, #12]
 8002842:	4b41      	ldr	r3, [pc, #260]	; (8002948 <MX_GPIO_Init+0x13c>)
 8002844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002846:	4a40      	ldr	r2, [pc, #256]	; (8002948 <MX_GPIO_Init+0x13c>)
 8002848:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800284c:	6313      	str	r3, [r2, #48]	; 0x30
 800284e:	4b3e      	ldr	r3, [pc, #248]	; (8002948 <MX_GPIO_Init+0x13c>)
 8002850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002852:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002856:	60fb      	str	r3, [r7, #12]
 8002858:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800285a:	2300      	movs	r3, #0
 800285c:	60bb      	str	r3, [r7, #8]
 800285e:	4b3a      	ldr	r3, [pc, #232]	; (8002948 <MX_GPIO_Init+0x13c>)
 8002860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002862:	4a39      	ldr	r2, [pc, #228]	; (8002948 <MX_GPIO_Init+0x13c>)
 8002864:	f043 0301 	orr.w	r3, r3, #1
 8002868:	6313      	str	r3, [r2, #48]	; 0x30
 800286a:	4b37      	ldr	r3, [pc, #220]	; (8002948 <MX_GPIO_Init+0x13c>)
 800286c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800286e:	f003 0301 	and.w	r3, r3, #1
 8002872:	60bb      	str	r3, [r7, #8]
 8002874:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002876:	2300      	movs	r3, #0
 8002878:	607b      	str	r3, [r7, #4]
 800287a:	4b33      	ldr	r3, [pc, #204]	; (8002948 <MX_GPIO_Init+0x13c>)
 800287c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800287e:	4a32      	ldr	r2, [pc, #200]	; (8002948 <MX_GPIO_Init+0x13c>)
 8002880:	f043 0302 	orr.w	r3, r3, #2
 8002884:	6313      	str	r3, [r2, #48]	; 0x30
 8002886:	4b30      	ldr	r3, [pc, #192]	; (8002948 <MX_GPIO_Init+0x13c>)
 8002888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800288a:	f003 0302 	and.w	r3, r3, #2
 800288e:	607b      	str	r3, [r7, #4]
 8002890:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_12, GPIO_PIN_RESET);
 8002892:	2200      	movs	r2, #0
 8002894:	f44f 5181 	mov.w	r1, #4128	; 0x1020
 8002898:	482c      	ldr	r0, [pc, #176]	; (800294c <MX_GPIO_Init+0x140>)
 800289a:	f004 fc2f 	bl	80070fc <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 800289e:	2201      	movs	r2, #1
 80028a0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80028a4:	482a      	ldr	r0, [pc, #168]	; (8002950 <MX_GPIO_Init+0x144>)
 80028a6:	f004 fc29 	bl	80070fc <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 80028aa:	2200      	movs	r2, #0
 80028ac:	2130      	movs	r1, #48	; 0x30
 80028ae:	4828      	ldr	r0, [pc, #160]	; (8002950 <MX_GPIO_Init+0x144>)
 80028b0:	f004 fc24 	bl	80070fc <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 80028b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80028b8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80028ba:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80028be:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c0:	2300      	movs	r3, #0
 80028c2:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80028c4:	f107 0314 	add.w	r3, r7, #20
 80028c8:	4619      	mov	r1, r3
 80028ca:	4822      	ldr	r0, [pc, #136]	; (8002954 <MX_GPIO_Init+0x148>)
 80028cc:	f004 fa82 	bl	8006dd4 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 80028d0:	2320      	movs	r3, #32
 80028d2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028d4:	2301      	movs	r3, #1
 80028d6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d8:	2300      	movs	r3, #0
 80028da:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028dc:	2300      	movs	r3, #0
 80028de:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80028e0:	f107 0314 	add.w	r3, r7, #20
 80028e4:	4619      	mov	r1, r3
 80028e6:	4819      	ldr	r0, [pc, #100]	; (800294c <MX_GPIO_Init+0x140>)
 80028e8:	f004 fa74 	bl	8006dd4 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB12 PB4 PB5 */
	GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_4|GPIO_PIN_5;
 80028ec:	f241 0330 	movw	r3, #4144	; 0x1030
 80028f0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028f2:	2301      	movs	r3, #1
 80028f4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80028f6:	2302      	movs	r3, #2
 80028f8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028fa:	2300      	movs	r3, #0
 80028fc:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028fe:	f107 0314 	add.w	r3, r7, #20
 8002902:	4619      	mov	r1, r3
 8002904:	4812      	ldr	r0, [pc, #72]	; (8002950 <MX_GPIO_Init+0x144>)
 8002906:	f004 fa65 	bl	8006dd4 <HAL_GPIO_Init>

	/*Configure GPIO pin : PC6 */
	GPIO_InitStruct.Pin = GPIO_PIN_6;
 800290a:	2340      	movs	r3, #64	; 0x40
 800290c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800290e:	2300      	movs	r3, #0
 8002910:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002912:	2300      	movs	r3, #0
 8002914:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002916:	f107 0314 	add.w	r3, r7, #20
 800291a:	4619      	mov	r1, r3
 800291c:	480d      	ldr	r0, [pc, #52]	; (8002954 <MX_GPIO_Init+0x148>)
 800291e:	f004 fa59 	bl	8006dd4 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA12 */
	GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002922:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002926:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002928:	2301      	movs	r3, #1
 800292a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800292c:	2301      	movs	r3, #1
 800292e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002930:	2300      	movs	r3, #0
 8002932:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002934:	f107 0314 	add.w	r3, r7, #20
 8002938:	4619      	mov	r1, r3
 800293a:	4804      	ldr	r0, [pc, #16]	; (800294c <MX_GPIO_Init+0x140>)
 800293c:	f004 fa4a 	bl	8006dd4 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8002940:	bf00      	nop
 8002942:	3728      	adds	r7, #40	; 0x28
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}
 8002948:	40023800 	.word	0x40023800
 800294c:	40020000 	.word	0x40020000
 8002950:	40020400 	.word	0x40020400
 8002954:	40020800 	.word	0x40020800

08002958 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8002958:	b480      	push	{r7}
 800295a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800295c:	b672      	cpsid	i
}
 800295e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8002960:	e7fe      	b.n	8002960 <Error_Handler+0x8>
	...

08002964 <MPU9255_Init>:

//===================================================================================================================
//====== MAIN INIT FUNCTION
//===================================================================================================================

uint8_t MPU9255_Init(I2C_HandleTypeDef *I2Cx){
 8002964:	b580      	push	{r7, lr}
 8002966:	b088      	sub	sp, #32
 8002968:	af04      	add	r7, sp, #16
 800296a:	6078      	str	r0, [r7, #4]
	//pre-def. vars
	uint8_t readData;
	uint8_t writeData;
	printf("**************************** \r\n");
 800296c:	4833      	ldr	r0, [pc, #204]	; (8002a3c <MPU9255_Init+0xd8>)
 800296e:	f008 fd41 	bl	800b3f4 <puts>
	printf("MPU9250 STM32 Implementation \r\n");
 8002972:	4833      	ldr	r0, [pc, #204]	; (8002a40 <MPU9255_Init+0xdc>)
 8002974:	f008 fd3e 	bl	800b3f4 <puts>
	printf("**************************** \r\n");
 8002978:	4830      	ldr	r0, [pc, #192]	; (8002a3c <MPU9255_Init+0xd8>)
 800297a:	f008 fd3b 	bl	800b3f4 <puts>

	//read MPU9255 WHOAMI
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, WHO_AM_I_MPU9250, 1, &readData, 1, i2c_timeout);
 800297e:	2364      	movs	r3, #100	; 0x64
 8002980:	9302      	str	r3, [sp, #8]
 8002982:	2301      	movs	r3, #1
 8002984:	9301      	str	r3, [sp, #4]
 8002986:	f107 030f 	add.w	r3, r7, #15
 800298a:	9300      	str	r3, [sp, #0]
 800298c:	2301      	movs	r3, #1
 800298e:	2275      	movs	r2, #117	; 0x75
 8002990:	21d0      	movs	r1, #208	; 0xd0
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	f005 f92e 	bl	8007bf4 <HAL_I2C_Mem_Read>

	if (SerialDebugA) {printf("MPU -WHO AM I- is: (Must return 113) %d\r\n", readData);}
 8002998:	7bfb      	ldrb	r3, [r7, #15]
 800299a:	4619      	mov	r1, r3
 800299c:	4829      	ldr	r0, [pc, #164]	; (8002a44 <MPU9255_Init+0xe0>)
 800299e:	f008 fca3 	bl	800b2e8 <iprintf>

	if (readData == 113) {
 80029a2:	7bfb      	ldrb	r3, [r7, #15]
 80029a4:	2b71      	cmp	r3, #113	; 0x71
 80029a6:	d143      	bne.n	8002a30 <MPU9255_Init+0xcc>

		//Start by performing self test and reporting values
		MPU9250SelfTest(I2Cx, SelfTest);
 80029a8:	4927      	ldr	r1, [pc, #156]	; (8002a48 <MPU9255_Init+0xe4>)
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	f001 fd0c 	bl	80043c8 <MPU9250SelfTest>

		//Calibrate gyro and accelerometers, load biases in bias registers
		calibrateMPU9250(I2Cx, gyroBias, accelBias);
 80029b0:	4a26      	ldr	r2, [pc, #152]	; (8002a4c <MPU9255_Init+0xe8>)
 80029b2:	4927      	ldr	r1, [pc, #156]	; (8002a50 <MPU9255_Init+0xec>)
 80029b4:	6878      	ldr	r0, [r7, #4]
 80029b6:	f001 f83f 	bl	8003a38 <calibrateMPU9250>
		HAL_Delay(1000);
 80029ba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80029be:	f004 f841 	bl	8006a44 <HAL_Delay>

		//init Gyro and Accelerometer
		initMPU9250(I2Cx);
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	f000 ff52 	bl	800386c <initMPU9250>

		//enable Mag bypass
		writeData = 0x22;
 80029c8:	2322      	movs	r3, #34	; 0x22
 80029ca:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, INT_PIN_CFG, 1, &writeData, 1, i2c_timeout);
 80029cc:	2364      	movs	r3, #100	; 0x64
 80029ce:	9302      	str	r3, [sp, #8]
 80029d0:	2301      	movs	r3, #1
 80029d2:	9301      	str	r3, [sp, #4]
 80029d4:	f107 030e 	add.w	r3, r7, #14
 80029d8:	9300      	str	r3, [sp, #0]
 80029da:	2301      	movs	r3, #1
 80029dc:	2237      	movs	r2, #55	; 0x37
 80029de:	21d0      	movs	r1, #208	; 0xd0
 80029e0:	6878      	ldr	r0, [r7, #4]
 80029e2:	f005 f80d 	bl	8007a00 <HAL_I2C_Mem_Write>

		//Read the WHO_AM_I register of the magnetometer
		HAL_I2C_Mem_Read(I2Cx, AK8963_ADDRESS, AK8963_WHO_AM_I, 1, &readData, 1, i2c_timeout);// Read WHO_AM_I register for AK8963
 80029e6:	2364      	movs	r3, #100	; 0x64
 80029e8:	9302      	str	r3, [sp, #8]
 80029ea:	2301      	movs	r3, #1
 80029ec:	9301      	str	r3, [sp, #4]
 80029ee:	f107 030f 	add.w	r3, r7, #15
 80029f2:	9300      	str	r3, [sp, #0]
 80029f4:	2301      	movs	r3, #1
 80029f6:	2200      	movs	r2, #0
 80029f8:	2118      	movs	r1, #24
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	f005 f8fa 	bl	8007bf4 <HAL_I2C_Mem_Read>
		if (SerialDebugA) {printf("MAG -WHO AM I- is: (Must return 72) %d\r\n", readData);}
 8002a00:	7bfb      	ldrb	r3, [r7, #15]
 8002a02:	4619      	mov	r1, r3
 8002a04:	4813      	ldr	r0, [pc, #76]	; (8002a54 <MPU9255_Init+0xf0>)
 8002a06:	f008 fc6f 	bl	800b2e8 <iprintf>
		HAL_Delay(1000);
 8002a0a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002a0e:	f004 f819 	bl	8006a44 <HAL_Delay>

		//Get magnetometer calibration from AK8963 ROM
		initAK8963(I2Cx, magCalibration);  // Initialize device for active mode read of magnetometer
 8002a12:	4911      	ldr	r1, [pc, #68]	; (8002a58 <MPU9255_Init+0xf4>)
 8002a14:	6878      	ldr	r0, [r7, #4]
 8002a16:	f000 fcbd 	bl	8003394 <initAK8963>

		calibrateMag(I2Cx, magBias, magScale);
 8002a1a:	4a10      	ldr	r2, [pc, #64]	; (8002a5c <MPU9255_Init+0xf8>)
 8002a1c:	4910      	ldr	r1, [pc, #64]	; (8002a60 <MPU9255_Init+0xfc>)
 8002a1e:	6878      	ldr	r0, [r7, #4]
 8002a20:	f000 fdbe 	bl	80035a0 <calibrateMag>

		HAL_Delay(1000);
 8002a24:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002a28:	f004 f80c 	bl	8006a44 <HAL_Delay>
		return 0;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	e000      	b.n	8002a32 <MPU9255_Init+0xce>
	}
	return 1; // Loop forever if communication doesn't happen
 8002a30:	2301      	movs	r3, #1
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	3710      	adds	r7, #16
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}
 8002a3a:	bf00      	nop
 8002a3c:	0800f9f8 	.word	0x0800f9f8
 8002a40:	0800fa18 	.word	0x0800fa18
 8002a44:	0800fa38 	.word	0x0800fa38
 8002a48:	20000638 	.word	0x20000638
 8002a4c:	20000614 	.word	0x20000614
 8002a50:	20000608 	.word	0x20000608
 8002a54:	0800fa64 	.word	0x0800fa64
 8002a58:	200005fc 	.word	0x200005fc
 8002a5c:	2000062c 	.word	0x2000062c
 8002a60:	20000620 	.word	0x20000620
 8002a64:	00000000 	.word	0x00000000

08002a68 <readAll>:

void readAll(I2C_HandleTypeDef *I2Cx, MPU9255_t*DataStruct) {
 8002a68:	b5b0      	push	{r4, r5, r7, lr}
 8002a6a:	ed2d 8b04 	vpush	{d8-d9}
 8002a6e:	b088      	sub	sp, #32
 8002a70:	af04      	add	r7, sp, #16
 8002a72:	6078      	str	r0, [r7, #4]
 8002a74:	6039      	str	r1, [r7, #0]
	uint8_t Data;

	// If intPin goes high, all data registers have new data
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, INT_STATUS, 1, &Data, 1, i2c_timeout);
 8002a76:	2364      	movs	r3, #100	; 0x64
 8002a78:	9302      	str	r3, [sp, #8]
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	9301      	str	r3, [sp, #4]
 8002a7e:	f107 030f 	add.w	r3, r7, #15
 8002a82:	9300      	str	r3, [sp, #0]
 8002a84:	2301      	movs	r3, #1
 8002a86:	223a      	movs	r2, #58	; 0x3a
 8002a88:	21d0      	movs	r1, #208	; 0xd0
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	f005 f8b2 	bl	8007bf4 <HAL_I2C_Mem_Read>
	if (Data & 0x01) {  // On interrupt, check if data ready interrupt
 8002a90:	7bfb      	ldrb	r3, [r7, #15]
 8002a92:	f003 0301 	and.w	r3, r3, #1
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	f000 80fc 	beq.w	8002c94 <readAll+0x22c>
		readAccelData(I2Cx, accelCount);  // Read the x/y/z adc values
 8002a9c:	49c0      	ldr	r1, [pc, #768]	; (8002da0 <readAll+0x338>)
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	f000 fbc6 	bl	8003230 <readAccelData>
		getAres();
 8002aa4:	f000 fb94 	bl	80031d0 <getAres>

		// Now we'll calculate the accleration value into actual g's
		ax = (float)accelCount[0]*aRes; // - accelBias[0];  // get actual g value, this depends on scale being set
 8002aa8:	4bbd      	ldr	r3, [pc, #756]	; (8002da0 <readAll+0x338>)
 8002aaa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002aae:	ee07 3a90 	vmov	s15, r3
 8002ab2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002ab6:	4bbb      	ldr	r3, [pc, #748]	; (8002da4 <readAll+0x33c>)
 8002ab8:	edd3 7a00 	vldr	s15, [r3]
 8002abc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ac0:	4bb9      	ldr	r3, [pc, #740]	; (8002da8 <readAll+0x340>)
 8002ac2:	edc3 7a00 	vstr	s15, [r3]
		ay = (float)accelCount[1]*aRes; // - accelBias[1];
 8002ac6:	4bb6      	ldr	r3, [pc, #728]	; (8002da0 <readAll+0x338>)
 8002ac8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002acc:	ee07 3a90 	vmov	s15, r3
 8002ad0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002ad4:	4bb3      	ldr	r3, [pc, #716]	; (8002da4 <readAll+0x33c>)
 8002ad6:	edd3 7a00 	vldr	s15, [r3]
 8002ada:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ade:	4bb3      	ldr	r3, [pc, #716]	; (8002dac <readAll+0x344>)
 8002ae0:	edc3 7a00 	vstr	s15, [r3]
		az = (float)accelCount[2]*aRes; // - accelBias[2];
 8002ae4:	4bae      	ldr	r3, [pc, #696]	; (8002da0 <readAll+0x338>)
 8002ae6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002aea:	ee07 3a90 	vmov	s15, r3
 8002aee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002af2:	4bac      	ldr	r3, [pc, #688]	; (8002da4 <readAll+0x33c>)
 8002af4:	edd3 7a00 	vldr	s15, [r3]
 8002af8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002afc:	4bac      	ldr	r3, [pc, #688]	; (8002db0 <readAll+0x348>)
 8002afe:	edc3 7a00 	vstr	s15, [r3]

		DataStruct->AccelX = ax;
 8002b02:	4ba9      	ldr	r3, [pc, #676]	; (8002da8 <readAll+0x340>)
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	601a      	str	r2, [r3, #0]
		DataStruct->AccelY = ay;
 8002b0a:	4ba8      	ldr	r3, [pc, #672]	; (8002dac <readAll+0x344>)
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	605a      	str	r2, [r3, #4]
		DataStruct->AccelZ = az;
 8002b12:	4ba7      	ldr	r3, [pc, #668]	; (8002db0 <readAll+0x348>)
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	609a      	str	r2, [r3, #8]

		readGyroData(I2Cx, gyroCount);  // Read the x/y/z adc values
 8002b1a:	49a6      	ldr	r1, [pc, #664]	; (8002db4 <readAll+0x34c>)
 8002b1c:	6878      	ldr	r0, [r7, #4]
 8002b1e:	f000 fbba 	bl	8003296 <readGyroData>
		getGres();
 8002b22:	f000 fb21 	bl	8003168 <getGres>

		// Calculate the gyro value into actual degrees per second
		gx = (float)gyroCount[0]*gRes;  // get actual gyro value, this depends on scale being set
 8002b26:	4ba3      	ldr	r3, [pc, #652]	; (8002db4 <readAll+0x34c>)
 8002b28:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b2c:	ee07 3a90 	vmov	s15, r3
 8002b30:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002b34:	4ba0      	ldr	r3, [pc, #640]	; (8002db8 <readAll+0x350>)
 8002b36:	edd3 7a00 	vldr	s15, [r3]
 8002b3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b3e:	4b9f      	ldr	r3, [pc, #636]	; (8002dbc <readAll+0x354>)
 8002b40:	edc3 7a00 	vstr	s15, [r3]
		gy = (float)gyroCount[1]*gRes;
 8002b44:	4b9b      	ldr	r3, [pc, #620]	; (8002db4 <readAll+0x34c>)
 8002b46:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002b4a:	ee07 3a90 	vmov	s15, r3
 8002b4e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002b52:	4b99      	ldr	r3, [pc, #612]	; (8002db8 <readAll+0x350>)
 8002b54:	edd3 7a00 	vldr	s15, [r3]
 8002b58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b5c:	4b98      	ldr	r3, [pc, #608]	; (8002dc0 <readAll+0x358>)
 8002b5e:	edc3 7a00 	vstr	s15, [r3]
		gz = (float)gyroCount[2]*gRes;
 8002b62:	4b94      	ldr	r3, [pc, #592]	; (8002db4 <readAll+0x34c>)
 8002b64:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002b68:	ee07 3a90 	vmov	s15, r3
 8002b6c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002b70:	4b91      	ldr	r3, [pc, #580]	; (8002db8 <readAll+0x350>)
 8002b72:	edd3 7a00 	vldr	s15, [r3]
 8002b76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b7a:	4b92      	ldr	r3, [pc, #584]	; (8002dc4 <readAll+0x35c>)
 8002b7c:	edc3 7a00 	vstr	s15, [r3]

		DataStruct->GyroX = gx;
 8002b80:	4b8e      	ldr	r3, [pc, #568]	; (8002dbc <readAll+0x354>)
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	60da      	str	r2, [r3, #12]
		DataStruct->GyroY = gy;
 8002b88:	4b8d      	ldr	r3, [pc, #564]	; (8002dc0 <readAll+0x358>)
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	611a      	str	r2, [r3, #16]
		DataStruct->GyroZ = gz;
 8002b90:	4b8c      	ldr	r3, [pc, #560]	; (8002dc4 <readAll+0x35c>)
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	615a      	str	r2, [r3, #20]

		readMagData(I2Cx, magCount);  // Read the x/y/z adc values
 8002b98:	498b      	ldr	r1, [pc, #556]	; (8002dc8 <readAll+0x360>)
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f000 fbae 	bl	80032fc <readMagData>
		getMres();
 8002ba0:	f000 fac4 	bl	800312c <getMres>

		// Calculate the magnetometer values in milliGauss
		// Include factory calibration per data sheet and user environmental corrections
		mx = (float)magCount[0]*mRes*magCalibration[0] - magBias[0];  // get actual magnetometer value, this depends on scale being set
 8002ba4:	4b88      	ldr	r3, [pc, #544]	; (8002dc8 <readAll+0x360>)
 8002ba6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002baa:	ee07 3a90 	vmov	s15, r3
 8002bae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002bb2:	4b86      	ldr	r3, [pc, #536]	; (8002dcc <readAll+0x364>)
 8002bb4:	edd3 7a00 	vldr	s15, [r3]
 8002bb8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002bbc:	4b84      	ldr	r3, [pc, #528]	; (8002dd0 <readAll+0x368>)
 8002bbe:	edd3 7a00 	vldr	s15, [r3]
 8002bc2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002bc6:	4b83      	ldr	r3, [pc, #524]	; (8002dd4 <readAll+0x36c>)
 8002bc8:	edd3 7a00 	vldr	s15, [r3]
 8002bcc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002bd0:	4b81      	ldr	r3, [pc, #516]	; (8002dd8 <readAll+0x370>)
 8002bd2:	edc3 7a00 	vstr	s15, [r3]
		my = (float)magCount[1]*mRes*magCalibration[1] - magBias[1];
 8002bd6:	4b7c      	ldr	r3, [pc, #496]	; (8002dc8 <readAll+0x360>)
 8002bd8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002bdc:	ee07 3a90 	vmov	s15, r3
 8002be0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002be4:	4b79      	ldr	r3, [pc, #484]	; (8002dcc <readAll+0x364>)
 8002be6:	edd3 7a00 	vldr	s15, [r3]
 8002bea:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002bee:	4b78      	ldr	r3, [pc, #480]	; (8002dd0 <readAll+0x368>)
 8002bf0:	edd3 7a01 	vldr	s15, [r3, #4]
 8002bf4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002bf8:	4b76      	ldr	r3, [pc, #472]	; (8002dd4 <readAll+0x36c>)
 8002bfa:	edd3 7a01 	vldr	s15, [r3, #4]
 8002bfe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c02:	4b76      	ldr	r3, [pc, #472]	; (8002ddc <readAll+0x374>)
 8002c04:	edc3 7a00 	vstr	s15, [r3]
		mz = (float)magCount[2]*mRes*magCalibration[2] - magBias[2];
 8002c08:	4b6f      	ldr	r3, [pc, #444]	; (8002dc8 <readAll+0x360>)
 8002c0a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002c0e:	ee07 3a90 	vmov	s15, r3
 8002c12:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c16:	4b6d      	ldr	r3, [pc, #436]	; (8002dcc <readAll+0x364>)
 8002c18:	edd3 7a00 	vldr	s15, [r3]
 8002c1c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c20:	4b6b      	ldr	r3, [pc, #428]	; (8002dd0 <readAll+0x368>)
 8002c22:	edd3 7a02 	vldr	s15, [r3, #8]
 8002c26:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c2a:	4b6a      	ldr	r3, [pc, #424]	; (8002dd4 <readAll+0x36c>)
 8002c2c:	edd3 7a02 	vldr	s15, [r3, #8]
 8002c30:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c34:	4b6a      	ldr	r3, [pc, #424]	; (8002de0 <readAll+0x378>)
 8002c36:	edc3 7a00 	vstr	s15, [r3]
		mx *= magScale[0];
 8002c3a:	4b6a      	ldr	r3, [pc, #424]	; (8002de4 <readAll+0x37c>)
 8002c3c:	ed93 7a00 	vldr	s14, [r3]
 8002c40:	4b65      	ldr	r3, [pc, #404]	; (8002dd8 <readAll+0x370>)
 8002c42:	edd3 7a00 	vldr	s15, [r3]
 8002c46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c4a:	4b63      	ldr	r3, [pc, #396]	; (8002dd8 <readAll+0x370>)
 8002c4c:	edc3 7a00 	vstr	s15, [r3]
		my *= magScale[1];
 8002c50:	4b64      	ldr	r3, [pc, #400]	; (8002de4 <readAll+0x37c>)
 8002c52:	ed93 7a01 	vldr	s14, [r3, #4]
 8002c56:	4b61      	ldr	r3, [pc, #388]	; (8002ddc <readAll+0x374>)
 8002c58:	edd3 7a00 	vldr	s15, [r3]
 8002c5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c60:	4b5e      	ldr	r3, [pc, #376]	; (8002ddc <readAll+0x374>)
 8002c62:	edc3 7a00 	vstr	s15, [r3]
		mz *= magScale[2];
 8002c66:	4b5f      	ldr	r3, [pc, #380]	; (8002de4 <readAll+0x37c>)
 8002c68:	ed93 7a02 	vldr	s14, [r3, #8]
 8002c6c:	4b5c      	ldr	r3, [pc, #368]	; (8002de0 <readAll+0x378>)
 8002c6e:	edd3 7a00 	vldr	s15, [r3]
 8002c72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c76:	4b5a      	ldr	r3, [pc, #360]	; (8002de0 <readAll+0x378>)
 8002c78:	edc3 7a00 	vstr	s15, [r3]

		DataStruct->MagX = mx;
 8002c7c:	4b56      	ldr	r3, [pc, #344]	; (8002dd8 <readAll+0x370>)
 8002c7e:	681a      	ldr	r2, [r3, #0]
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	619a      	str	r2, [r3, #24]
		DataStruct->MagY = my;
 8002c84:	4b55      	ldr	r3, [pc, #340]	; (8002ddc <readAll+0x374>)
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	61da      	str	r2, [r3, #28]
		DataStruct->MagZ = mz;
 8002c8c:	4b54      	ldr	r3, [pc, #336]	; (8002de0 <readAll+0x378>)
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	621a      	str	r2, [r3, #32]
	}

	//Now = __HAL_TIM_GET_COUNTER(&htim1);
	Now = HAL_GetTick();
 8002c94:	f003 feca 	bl	8006a2c <HAL_GetTick>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	4a53      	ldr	r2, [pc, #332]	; (8002de8 <readAll+0x380>)
 8002c9c:	6013      	str	r3, [r2, #0]
	deltat = ((Now - lastUpdate)/1000.0f); // set integration time by time elapsed since last filter update
 8002c9e:	4b52      	ldr	r3, [pc, #328]	; (8002de8 <readAll+0x380>)
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	4b52      	ldr	r3, [pc, #328]	; (8002dec <readAll+0x384>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	1ad3      	subs	r3, r2, r3
 8002ca8:	ee07 3a90 	vmov	s15, r3
 8002cac:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002cb0:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8002df0 <readAll+0x388>
 8002cb4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002cb8:	4b4e      	ldr	r3, [pc, #312]	; (8002df4 <readAll+0x38c>)
 8002cba:	edc3 7a00 	vstr	s15, [r3]
	lastUpdate = Now;
 8002cbe:	4b4a      	ldr	r3, [pc, #296]	; (8002de8 <readAll+0x380>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a4a      	ldr	r2, [pc, #296]	; (8002dec <readAll+0x384>)
 8002cc4:	6013      	str	r3, [r2, #0]
	sum += deltat; // sum for averaging filter update rate
 8002cc6:	4b4c      	ldr	r3, [pc, #304]	; (8002df8 <readAll+0x390>)
 8002cc8:	ed93 7a00 	vldr	s14, [r3]
 8002ccc:	4b49      	ldr	r3, [pc, #292]	; (8002df4 <readAll+0x38c>)
 8002cce:	edd3 7a00 	vldr	s15, [r3]
 8002cd2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cd6:	4b48      	ldr	r3, [pc, #288]	; (8002df8 <readAll+0x390>)
 8002cd8:	edc3 7a00 	vstr	s15, [r3]

	// Calculate quaternions based on Madgwick's filter
	//Since MPU9250's mag. and IMU modules are different and seperate (AK8963 and MPU6050), their...
	//...coordinate systems also different. So, to compensate this, order should be my - mx - mz
	//QuaternionUpdate(-ax, ay, az, gx*PI/180.0f, -gy*PI/180.0f, -gz*PI/180.0f,  my,  -mx, mz);
	QuaternionUpdate(ax, ay, az, gx*PI/180.0f, gy*PI/180.0f, gz*PI/180.0f,  my,  mx, mz);
 8002cdc:	4b32      	ldr	r3, [pc, #200]	; (8002da8 <readAll+0x340>)
 8002cde:	ed93 8a00 	vldr	s16, [r3]
 8002ce2:	4b32      	ldr	r3, [pc, #200]	; (8002dac <readAll+0x344>)
 8002ce4:	edd3 8a00 	vldr	s17, [r3]
 8002ce8:	4b31      	ldr	r3, [pc, #196]	; (8002db0 <readAll+0x348>)
 8002cea:	ed93 9a00 	vldr	s18, [r3]
 8002cee:	4b33      	ldr	r3, [pc, #204]	; (8002dbc <readAll+0x354>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f7fd fc48 	bl	8000588 <__aeabi_f2d>
 8002cf8:	a327      	add	r3, pc, #156	; (adr r3, 8002d98 <readAll+0x330>)
 8002cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cfe:	f7fd fc9b 	bl	8000638 <__aeabi_dmul>
 8002d02:	4602      	mov	r2, r0
 8002d04:	460b      	mov	r3, r1
 8002d06:	4610      	mov	r0, r2
 8002d08:	4619      	mov	r1, r3
 8002d0a:	f04f 0200 	mov.w	r2, #0
 8002d0e:	4b3b      	ldr	r3, [pc, #236]	; (8002dfc <readAll+0x394>)
 8002d10:	f7fd fdbc 	bl	800088c <__aeabi_ddiv>
 8002d14:	4602      	mov	r2, r0
 8002d16:	460b      	mov	r3, r1
 8002d18:	4610      	mov	r0, r2
 8002d1a:	4619      	mov	r1, r3
 8002d1c:	f7fd ff84 	bl	8000c28 <__aeabi_d2f>
 8002d20:	4604      	mov	r4, r0
 8002d22:	4b27      	ldr	r3, [pc, #156]	; (8002dc0 <readAll+0x358>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4618      	mov	r0, r3
 8002d28:	f7fd fc2e 	bl	8000588 <__aeabi_f2d>
 8002d2c:	a31a      	add	r3, pc, #104	; (adr r3, 8002d98 <readAll+0x330>)
 8002d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d32:	f7fd fc81 	bl	8000638 <__aeabi_dmul>
 8002d36:	4602      	mov	r2, r0
 8002d38:	460b      	mov	r3, r1
 8002d3a:	4610      	mov	r0, r2
 8002d3c:	4619      	mov	r1, r3
 8002d3e:	f04f 0200 	mov.w	r2, #0
 8002d42:	4b2e      	ldr	r3, [pc, #184]	; (8002dfc <readAll+0x394>)
 8002d44:	f7fd fda2 	bl	800088c <__aeabi_ddiv>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	460b      	mov	r3, r1
 8002d4c:	4610      	mov	r0, r2
 8002d4e:	4619      	mov	r1, r3
 8002d50:	f7fd ff6a 	bl	8000c28 <__aeabi_d2f>
 8002d54:	4605      	mov	r5, r0
 8002d56:	4b1b      	ldr	r3, [pc, #108]	; (8002dc4 <readAll+0x35c>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f7fd fc14 	bl	8000588 <__aeabi_f2d>
 8002d60:	a30d      	add	r3, pc, #52	; (adr r3, 8002d98 <readAll+0x330>)
 8002d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d66:	f7fd fc67 	bl	8000638 <__aeabi_dmul>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	460b      	mov	r3, r1
 8002d6e:	4610      	mov	r0, r2
 8002d70:	4619      	mov	r1, r3
 8002d72:	f04f 0200 	mov.w	r2, #0
 8002d76:	4b21      	ldr	r3, [pc, #132]	; (8002dfc <readAll+0x394>)
 8002d78:	f7fd fd88 	bl	800088c <__aeabi_ddiv>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	460b      	mov	r3, r1
 8002d80:	4610      	mov	r0, r2
 8002d82:	4619      	mov	r1, r3
 8002d84:	f7fd ff50 	bl	8000c28 <__aeabi_d2f>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	4b14      	ldr	r3, [pc, #80]	; (8002ddc <readAll+0x374>)
 8002d8c:	edd3 7a00 	vldr	s15, [r3]
 8002d90:	4b11      	ldr	r3, [pc, #68]	; (8002dd8 <readAll+0x370>)
 8002d92:	ed93 7a00 	vldr	s14, [r3]
 8002d96:	e033      	b.n	8002e00 <readAll+0x398>
 8002d98:	35f80991 	.word	0x35f80991
 8002d9c:	40092492 	.word	0x40092492
 8002da0:	200005e4 	.word	0x200005e4
 8002da4:	200005d8 	.word	0x200005d8
 8002da8:	2000066c 	.word	0x2000066c
 8002dac:	20000670 	.word	0x20000670
 8002db0:	20000674 	.word	0x20000674
 8002db4:	200005ec 	.word	0x200005ec
 8002db8:	200005dc 	.word	0x200005dc
 8002dbc:	20000678 	.word	0x20000678
 8002dc0:	2000067c 	.word	0x2000067c
 8002dc4:	20000680 	.word	0x20000680
 8002dc8:	200005f4 	.word	0x200005f4
 8002dcc:	200005e0 	.word	0x200005e0
 8002dd0:	200005fc 	.word	0x200005fc
 8002dd4:	20000620 	.word	0x20000620
 8002dd8:	20000684 	.word	0x20000684
 8002ddc:	20000688 	.word	0x20000688
 8002de0:	2000068c 	.word	0x2000068c
 8002de4:	2000062c 	.word	0x2000062c
 8002de8:	20000668 	.word	0x20000668
 8002dec:	20000664 	.word	0x20000664
 8002df0:	447a0000 	.word	0x447a0000
 8002df4:	2000065c 	.word	0x2000065c
 8002df8:	20000660 	.word	0x20000660
 8002dfc:	40668000 	.word	0x40668000
 8002e00:	4bb7      	ldr	r3, [pc, #732]	; (80030e0 <readAll+0x678>)
 8002e02:	edd3 6a00 	vldr	s13, [r3]
 8002e06:	eeb0 4a66 	vmov.f32	s8, s13
 8002e0a:	eef0 3a47 	vmov.f32	s7, s14
 8002e0e:	eeb0 3a67 	vmov.f32	s6, s15
 8002e12:	ee02 2a90 	vmov	s5, r2
 8002e16:	ee02 5a10 	vmov	s4, r5
 8002e1a:	ee01 4a90 	vmov	s3, r4
 8002e1e:	eeb0 1a49 	vmov.f32	s2, s18
 8002e22:	eef0 0a68 	vmov.f32	s1, s17
 8002e26:	eeb0 0a48 	vmov.f32	s0, s16
 8002e2a:	f002 f847 	bl	8004ebc <QuaternionUpdate>

	// Convert quaternions to Euler angles
	a12 =   2.0f * (q[1] * q[2] + q[0] * q[3]);
 8002e2e:	4bad      	ldr	r3, [pc, #692]	; (80030e4 <readAll+0x67c>)
 8002e30:	ed93 7a01 	vldr	s14, [r3, #4]
 8002e34:	4bab      	ldr	r3, [pc, #684]	; (80030e4 <readAll+0x67c>)
 8002e36:	edd3 7a02 	vldr	s15, [r3, #8]
 8002e3a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002e3e:	4ba9      	ldr	r3, [pc, #676]	; (80030e4 <readAll+0x67c>)
 8002e40:	edd3 6a00 	vldr	s13, [r3]
 8002e44:	4ba7      	ldr	r3, [pc, #668]	; (80030e4 <readAll+0x67c>)
 8002e46:	edd3 7a03 	vldr	s15, [r3, #12]
 8002e4a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e52:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002e56:	4ba4      	ldr	r3, [pc, #656]	; (80030e8 <readAll+0x680>)
 8002e58:	edc3 7a00 	vstr	s15, [r3]
	a22 =   q[0] * q[0] + q[1] * q[1] - q[2] * q[2] - q[3] * q[3];
 8002e5c:	4ba1      	ldr	r3, [pc, #644]	; (80030e4 <readAll+0x67c>)
 8002e5e:	ed93 7a00 	vldr	s14, [r3]
 8002e62:	4ba0      	ldr	r3, [pc, #640]	; (80030e4 <readAll+0x67c>)
 8002e64:	edd3 7a00 	vldr	s15, [r3]
 8002e68:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002e6c:	4b9d      	ldr	r3, [pc, #628]	; (80030e4 <readAll+0x67c>)
 8002e6e:	edd3 6a01 	vldr	s13, [r3, #4]
 8002e72:	4b9c      	ldr	r3, [pc, #624]	; (80030e4 <readAll+0x67c>)
 8002e74:	edd3 7a01 	vldr	s15, [r3, #4]
 8002e78:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e7c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e80:	4b98      	ldr	r3, [pc, #608]	; (80030e4 <readAll+0x67c>)
 8002e82:	edd3 6a02 	vldr	s13, [r3, #8]
 8002e86:	4b97      	ldr	r3, [pc, #604]	; (80030e4 <readAll+0x67c>)
 8002e88:	edd3 7a02 	vldr	s15, [r3, #8]
 8002e8c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e90:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002e94:	4b93      	ldr	r3, [pc, #588]	; (80030e4 <readAll+0x67c>)
 8002e96:	edd3 6a03 	vldr	s13, [r3, #12]
 8002e9a:	4b92      	ldr	r3, [pc, #584]	; (80030e4 <readAll+0x67c>)
 8002e9c:	edd3 7a03 	vldr	s15, [r3, #12]
 8002ea0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ea4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ea8:	4b90      	ldr	r3, [pc, #576]	; (80030ec <readAll+0x684>)
 8002eaa:	edc3 7a00 	vstr	s15, [r3]
	a31 =   2.0f * (q[0] * q[1] + q[2] * q[3]);
 8002eae:	4b8d      	ldr	r3, [pc, #564]	; (80030e4 <readAll+0x67c>)
 8002eb0:	ed93 7a00 	vldr	s14, [r3]
 8002eb4:	4b8b      	ldr	r3, [pc, #556]	; (80030e4 <readAll+0x67c>)
 8002eb6:	edd3 7a01 	vldr	s15, [r3, #4]
 8002eba:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ebe:	4b89      	ldr	r3, [pc, #548]	; (80030e4 <readAll+0x67c>)
 8002ec0:	edd3 6a02 	vldr	s13, [r3, #8]
 8002ec4:	4b87      	ldr	r3, [pc, #540]	; (80030e4 <readAll+0x67c>)
 8002ec6:	edd3 7a03 	vldr	s15, [r3, #12]
 8002eca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ece:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ed2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002ed6:	4b86      	ldr	r3, [pc, #536]	; (80030f0 <readAll+0x688>)
 8002ed8:	edc3 7a00 	vstr	s15, [r3]
	a32 =   2.0f * (q[1] * q[3] - q[0] * q[2]);
 8002edc:	4b81      	ldr	r3, [pc, #516]	; (80030e4 <readAll+0x67c>)
 8002ede:	ed93 7a01 	vldr	s14, [r3, #4]
 8002ee2:	4b80      	ldr	r3, [pc, #512]	; (80030e4 <readAll+0x67c>)
 8002ee4:	edd3 7a03 	vldr	s15, [r3, #12]
 8002ee8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002eec:	4b7d      	ldr	r3, [pc, #500]	; (80030e4 <readAll+0x67c>)
 8002eee:	edd3 6a00 	vldr	s13, [r3]
 8002ef2:	4b7c      	ldr	r3, [pc, #496]	; (80030e4 <readAll+0x67c>)
 8002ef4:	edd3 7a02 	vldr	s15, [r3, #8]
 8002ef8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002efc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f00:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002f04:	4b7b      	ldr	r3, [pc, #492]	; (80030f4 <readAll+0x68c>)
 8002f06:	edc3 7a00 	vstr	s15, [r3]
	a33 =   q[0] * q[0] - q[1] * q[1] - q[2] * q[2] + q[3] * q[3];
 8002f0a:	4b76      	ldr	r3, [pc, #472]	; (80030e4 <readAll+0x67c>)
 8002f0c:	ed93 7a00 	vldr	s14, [r3]
 8002f10:	4b74      	ldr	r3, [pc, #464]	; (80030e4 <readAll+0x67c>)
 8002f12:	edd3 7a00 	vldr	s15, [r3]
 8002f16:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f1a:	4b72      	ldr	r3, [pc, #456]	; (80030e4 <readAll+0x67c>)
 8002f1c:	edd3 6a01 	vldr	s13, [r3, #4]
 8002f20:	4b70      	ldr	r3, [pc, #448]	; (80030e4 <readAll+0x67c>)
 8002f22:	edd3 7a01 	vldr	s15, [r3, #4]
 8002f26:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f2a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002f2e:	4b6d      	ldr	r3, [pc, #436]	; (80030e4 <readAll+0x67c>)
 8002f30:	edd3 6a02 	vldr	s13, [r3, #8]
 8002f34:	4b6b      	ldr	r3, [pc, #428]	; (80030e4 <readAll+0x67c>)
 8002f36:	edd3 7a02 	vldr	s15, [r3, #8]
 8002f3a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f3e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002f42:	4b68      	ldr	r3, [pc, #416]	; (80030e4 <readAll+0x67c>)
 8002f44:	edd3 6a03 	vldr	s13, [r3, #12]
 8002f48:	4b66      	ldr	r3, [pc, #408]	; (80030e4 <readAll+0x67c>)
 8002f4a:	edd3 7a03 	vldr	s15, [r3, #12]
 8002f4e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f56:	4b68      	ldr	r3, [pc, #416]	; (80030f8 <readAll+0x690>)
 8002f58:	edc3 7a00 	vstr	s15, [r3]

	pitch = -asinf(a32);
 8002f5c:	4b65      	ldr	r3, [pc, #404]	; (80030f4 <readAll+0x68c>)
 8002f5e:	edd3 7a00 	vldr	s15, [r3]
 8002f62:	eeb0 0a67 	vmov.f32	s0, s15
 8002f66:	f00b fbb9 	bl	800e6dc <asinf>
 8002f6a:	eef0 7a40 	vmov.f32	s15, s0
 8002f6e:	eef1 7a67 	vneg.f32	s15, s15
 8002f72:	4b62      	ldr	r3, [pc, #392]	; (80030fc <readAll+0x694>)
 8002f74:	edc3 7a00 	vstr	s15, [r3]
	roll  = atan2f(a31, a33);
 8002f78:	4b5d      	ldr	r3, [pc, #372]	; (80030f0 <readAll+0x688>)
 8002f7a:	edd3 7a00 	vldr	s15, [r3]
 8002f7e:	4b5e      	ldr	r3, [pc, #376]	; (80030f8 <readAll+0x690>)
 8002f80:	ed93 7a00 	vldr	s14, [r3]
 8002f84:	eef0 0a47 	vmov.f32	s1, s14
 8002f88:	eeb0 0a67 	vmov.f32	s0, s15
 8002f8c:	f00b fbd2 	bl	800e734 <atan2f>
 8002f90:	eef0 7a40 	vmov.f32	s15, s0
 8002f94:	4b5a      	ldr	r3, [pc, #360]	; (8003100 <readAll+0x698>)
 8002f96:	edc3 7a00 	vstr	s15, [r3]
	yaw   = atan2f(a12, a22);
 8002f9a:	4b53      	ldr	r3, [pc, #332]	; (80030e8 <readAll+0x680>)
 8002f9c:	edd3 7a00 	vldr	s15, [r3]
 8002fa0:	4b52      	ldr	r3, [pc, #328]	; (80030ec <readAll+0x684>)
 8002fa2:	ed93 7a00 	vldr	s14, [r3]
 8002fa6:	eef0 0a47 	vmov.f32	s1, s14
 8002faa:	eeb0 0a67 	vmov.f32	s0, s15
 8002fae:	f00b fbc1 	bl	800e734 <atan2f>
 8002fb2:	eef0 7a40 	vmov.f32	s15, s0
 8002fb6:	4b53      	ldr	r3, [pc, #332]	; (8003104 <readAll+0x69c>)
 8002fb8:	edc3 7a00 	vstr	s15, [r3]
	pitch *= 180.0f / PI;
 8002fbc:	4b4f      	ldr	r3, [pc, #316]	; (80030fc <readAll+0x694>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f7fd fae1 	bl	8000588 <__aeabi_f2d>
 8002fc6:	a344      	add	r3, pc, #272	; (adr r3, 80030d8 <readAll+0x670>)
 8002fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fcc:	f7fd fb34 	bl	8000638 <__aeabi_dmul>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	460b      	mov	r3, r1
 8002fd4:	4610      	mov	r0, r2
 8002fd6:	4619      	mov	r1, r3
 8002fd8:	f7fd fe26 	bl	8000c28 <__aeabi_d2f>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	4a47      	ldr	r2, [pc, #284]	; (80030fc <readAll+0x694>)
 8002fe0:	6013      	str	r3, [r2, #0]
	yaw   *= 180.0f / PI;
 8002fe2:	4b48      	ldr	r3, [pc, #288]	; (8003104 <readAll+0x69c>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f7fd face 	bl	8000588 <__aeabi_f2d>
 8002fec:	a33a      	add	r3, pc, #232	; (adr r3, 80030d8 <readAll+0x670>)
 8002fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ff2:	f7fd fb21 	bl	8000638 <__aeabi_dmul>
 8002ff6:	4602      	mov	r2, r0
 8002ff8:	460b      	mov	r3, r1
 8002ffa:	4610      	mov	r0, r2
 8002ffc:	4619      	mov	r1, r3
 8002ffe:	f7fd fe13 	bl	8000c28 <__aeabi_d2f>
 8003002:	4603      	mov	r3, r0
 8003004:	4a3f      	ldr	r2, [pc, #252]	; (8003104 <readAll+0x69c>)
 8003006:	6013      	str	r3, [r2, #0]
	yaw   += 5.53f; // Declination
 8003008:	4b3e      	ldr	r3, [pc, #248]	; (8003104 <readAll+0x69c>)
 800300a:	edd3 7a00 	vldr	s15, [r3]
 800300e:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8003108 <readAll+0x6a0>
 8003012:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003016:	4b3b      	ldr	r3, [pc, #236]	; (8003104 <readAll+0x69c>)
 8003018:	edc3 7a00 	vstr	s15, [r3]

	if(yaw < 0) yaw   += 360.0f; // Ensure yaw stays between 0 and 360
 800301c:	4b39      	ldr	r3, [pc, #228]	; (8003104 <readAll+0x69c>)
 800301e:	edd3 7a00 	vldr	s15, [r3]
 8003022:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003026:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800302a:	d509      	bpl.n	8003040 <readAll+0x5d8>
 800302c:	4b35      	ldr	r3, [pc, #212]	; (8003104 <readAll+0x69c>)
 800302e:	edd3 7a00 	vldr	s15, [r3]
 8003032:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800310c <readAll+0x6a4>
 8003036:	ee77 7a87 	vadd.f32	s15, s15, s14
 800303a:	4b32      	ldr	r3, [pc, #200]	; (8003104 <readAll+0x69c>)
 800303c:	edc3 7a00 	vstr	s15, [r3]
	roll  *= 180.0f / PI;
 8003040:	4b2f      	ldr	r3, [pc, #188]	; (8003100 <readAll+0x698>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4618      	mov	r0, r3
 8003046:	f7fd fa9f 	bl	8000588 <__aeabi_f2d>
 800304a:	a323      	add	r3, pc, #140	; (adr r3, 80030d8 <readAll+0x670>)
 800304c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003050:	f7fd faf2 	bl	8000638 <__aeabi_dmul>
 8003054:	4602      	mov	r2, r0
 8003056:	460b      	mov	r3, r1
 8003058:	4610      	mov	r0, r2
 800305a:	4619      	mov	r1, r3
 800305c:	f7fd fde4 	bl	8000c28 <__aeabi_d2f>
 8003060:	4603      	mov	r3, r0
 8003062:	4a27      	ldr	r2, [pc, #156]	; (8003100 <readAll+0x698>)
 8003064:	6013      	str	r3, [r2, #0]
	lin_ax = ax + a31;
 8003066:	4b2a      	ldr	r3, [pc, #168]	; (8003110 <readAll+0x6a8>)
 8003068:	ed93 7a00 	vldr	s14, [r3]
 800306c:	4b20      	ldr	r3, [pc, #128]	; (80030f0 <readAll+0x688>)
 800306e:	edd3 7a00 	vldr	s15, [r3]
 8003072:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003076:	4b27      	ldr	r3, [pc, #156]	; (8003114 <readAll+0x6ac>)
 8003078:	edc3 7a00 	vstr	s15, [r3]
	lin_ay = ay + a32;
 800307c:	4b26      	ldr	r3, [pc, #152]	; (8003118 <readAll+0x6b0>)
 800307e:	ed93 7a00 	vldr	s14, [r3]
 8003082:	4b1c      	ldr	r3, [pc, #112]	; (80030f4 <readAll+0x68c>)
 8003084:	edd3 7a00 	vldr	s15, [r3]
 8003088:	ee77 7a27 	vadd.f32	s15, s14, s15
 800308c:	4b23      	ldr	r3, [pc, #140]	; (800311c <readAll+0x6b4>)
 800308e:	edc3 7a00 	vstr	s15, [r3]
	lin_az = az - a33;
 8003092:	4b23      	ldr	r3, [pc, #140]	; (8003120 <readAll+0x6b8>)
 8003094:	ed93 7a00 	vldr	s14, [r3]
 8003098:	4b17      	ldr	r3, [pc, #92]	; (80030f8 <readAll+0x690>)
 800309a:	edd3 7a00 	vldr	s15, [r3]
 800309e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030a2:	4b20      	ldr	r3, [pc, #128]	; (8003124 <readAll+0x6bc>)
 80030a4:	edc3 7a00 	vstr	s15, [r3]


	DataStruct->yaw = yaw;
 80030a8:	4b16      	ldr	r3, [pc, #88]	; (8003104 <readAll+0x69c>)
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	62da      	str	r2, [r3, #44]	; 0x2c
	DataStruct->pitch = pitch;
 80030b0:	4b12      	ldr	r3, [pc, #72]	; (80030fc <readAll+0x694>)
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	625a      	str	r2, [r3, #36]	; 0x24
	DataStruct->roll = roll;
 80030b8:	4b11      	ldr	r3, [pc, #68]	; (8003100 <readAll+0x698>)
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	629a      	str	r2, [r3, #40]	; 0x28

	sum = 0;
 80030c0:	4b19      	ldr	r3, [pc, #100]	; (8003128 <readAll+0x6c0>)
 80030c2:	f04f 0200 	mov.w	r2, #0
 80030c6:	601a      	str	r2, [r3, #0]
	}
 80030c8:	bf00      	nop
 80030ca:	3710      	adds	r7, #16
 80030cc:	46bd      	mov	sp, r7
 80030ce:	ecbd 8b04 	vpop	{d8-d9}
 80030d2:	bdb0      	pop	{r4, r5, r7, pc}
 80030d4:	f3af 8000 	nop.w
 80030d8:	d0051a32 	.word	0xd0051a32
 80030dc:	404ca2e8 	.word	0x404ca2e8
 80030e0:	2000068c 	.word	0x2000068c
 80030e4:	20000008 	.word	0x20000008
 80030e8:	2000069c 	.word	0x2000069c
 80030ec:	200006a0 	.word	0x200006a0
 80030f0:	200006a4 	.word	0x200006a4
 80030f4:	200006a8 	.word	0x200006a8
 80030f8:	200006ac 	.word	0x200006ac
 80030fc:	20000650 	.word	0x20000650
 8003100:	20000658 	.word	0x20000658
 8003104:	20000654 	.word	0x20000654
 8003108:	40b0f5c3 	.word	0x40b0f5c3
 800310c:	43b40000 	.word	0x43b40000
 8003110:	2000066c 	.word	0x2000066c
 8003114:	20000690 	.word	0x20000690
 8003118:	20000670 	.word	0x20000670
 800311c:	20000694 	.word	0x20000694
 8003120:	20000674 	.word	0x20000674
 8003124:	20000698 	.word	0x20000698
 8003128:	20000660 	.word	0x20000660

0800312c <getMres>:

//==========================================================================================================
//====== FUNCTIONS TO READ AND WRITE DATA FROM REGISTERS AND ALSO INITS KALMAN AND QUATERNION FILTERS ======
//==========================================================================================================

void getMres() {
 800312c:	b480      	push	{r7}
 800312e:	af00      	add	r7, sp, #0
  switch (Mscale)
 8003130:	4b09      	ldr	r3, [pc, #36]	; (8003158 <getMres+0x2c>)
 8003132:	781b      	ldrb	r3, [r3, #0]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d002      	beq.n	800313e <getMres+0x12>
 8003138:	2b01      	cmp	r3, #1
 800313a:	d004      	beq.n	8003146 <getMres+0x1a>
          break;
    case MFS_16BITS:
          mRes = 10.*4912./32760.0; // Proper scale to return milliGauss
          break;
  }
}
 800313c:	e007      	b.n	800314e <getMres+0x22>
          mRes = 10.*4912./8190.; // Proper scale to return milliGauss
 800313e:	4b07      	ldr	r3, [pc, #28]	; (800315c <getMres+0x30>)
 8003140:	4a07      	ldr	r2, [pc, #28]	; (8003160 <getMres+0x34>)
 8003142:	601a      	str	r2, [r3, #0]
          break;
 8003144:	e003      	b.n	800314e <getMres+0x22>
          mRes = 10.*4912./32760.0; // Proper scale to return milliGauss
 8003146:	4b05      	ldr	r3, [pc, #20]	; (800315c <getMres+0x30>)
 8003148:	4a06      	ldr	r2, [pc, #24]	; (8003164 <getMres+0x38>)
 800314a:	601a      	str	r2, [r3, #0]
          break;
 800314c:	bf00      	nop
}
 800314e:	bf00      	nop
 8003150:	46bd      	mov	sp, r7
 8003152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003156:	4770      	bx	lr
 8003158:	20000002 	.word	0x20000002
 800315c:	200005e0 	.word	0x200005e0
 8003160:	40bfebff 	.word	0x40bfebff
 8003164:	3fbfebff 	.word	0x3fbfebff

08003168 <getGres>:

void getGres() {
 8003168:	b480      	push	{r7}
 800316a:	af00      	add	r7, sp, #0
  switch (Gscale)
 800316c:	4b12      	ldr	r3, [pc, #72]	; (80031b8 <getGres+0x50>)
 800316e:	781b      	ldrb	r3, [r3, #0]
 8003170:	2b03      	cmp	r3, #3
 8003172:	d81b      	bhi.n	80031ac <getGres+0x44>
 8003174:	a201      	add	r2, pc, #4	; (adr r2, 800317c <getGres+0x14>)
 8003176:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800317a:	bf00      	nop
 800317c:	0800318d 	.word	0x0800318d
 8003180:	08003195 	.word	0x08003195
 8003184:	0800319d 	.word	0x0800319d
 8003188:	080031a5 	.word	0x080031a5
  {
  // Possible gyro scales (and their register bit settings) are:
  // 250 DPS (00), 500 DPS (01), 1000 DPS (10), and 2000 DPS  (11).
        // Here's a bit of an algorith to calculate DPS/(ADC tick) based on that 2-bit value:
    case GFS_250DPS:
          gRes = 250.0/32768.0;
 800318c:	4b0b      	ldr	r3, [pc, #44]	; (80031bc <getGres+0x54>)
 800318e:	4a0c      	ldr	r2, [pc, #48]	; (80031c0 <getGres+0x58>)
 8003190:	601a      	str	r2, [r3, #0]
          break;
 8003192:	e00b      	b.n	80031ac <getGres+0x44>
    case GFS_500DPS:
          gRes = 500.0/32768.0;
 8003194:	4b09      	ldr	r3, [pc, #36]	; (80031bc <getGres+0x54>)
 8003196:	4a0b      	ldr	r2, [pc, #44]	; (80031c4 <getGres+0x5c>)
 8003198:	601a      	str	r2, [r3, #0]
          break;
 800319a:	e007      	b.n	80031ac <getGres+0x44>
    case GFS_1000DPS:
          gRes = 1000.0/32768.0;
 800319c:	4b07      	ldr	r3, [pc, #28]	; (80031bc <getGres+0x54>)
 800319e:	4a0a      	ldr	r2, [pc, #40]	; (80031c8 <getGres+0x60>)
 80031a0:	601a      	str	r2, [r3, #0]
          break;
 80031a2:	e003      	b.n	80031ac <getGres+0x44>
    case GFS_2000DPS:
          gRes = 2000.0/32768.0;
 80031a4:	4b05      	ldr	r3, [pc, #20]	; (80031bc <getGres+0x54>)
 80031a6:	4a09      	ldr	r2, [pc, #36]	; (80031cc <getGres+0x64>)
 80031a8:	601a      	str	r2, [r3, #0]
          break;
 80031aa:	bf00      	nop
  }
}
 80031ac:	bf00      	nop
 80031ae:	46bd      	mov	sp, r7
 80031b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b4:	4770      	bx	lr
 80031b6:	bf00      	nop
 80031b8:	20000000 	.word	0x20000000
 80031bc:	200005dc 	.word	0x200005dc
 80031c0:	3bfa0000 	.word	0x3bfa0000
 80031c4:	3c7a0000 	.word	0x3c7a0000
 80031c8:	3cfa0000 	.word	0x3cfa0000
 80031cc:	3d7a0000 	.word	0x3d7a0000

080031d0 <getAres>:

void getAres() {
 80031d0:	b480      	push	{r7}
 80031d2:	af00      	add	r7, sp, #0
  switch (Ascale)
 80031d4:	4b14      	ldr	r3, [pc, #80]	; (8003228 <getAres+0x58>)
 80031d6:	781b      	ldrb	r3, [r3, #0]
 80031d8:	2b03      	cmp	r3, #3
 80031da:	d81f      	bhi.n	800321c <getAres+0x4c>
 80031dc:	a201      	add	r2, pc, #4	; (adr r2, 80031e4 <getAres+0x14>)
 80031de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031e2:	bf00      	nop
 80031e4:	080031f5 	.word	0x080031f5
 80031e8:	080031ff 	.word	0x080031ff
 80031ec:	08003209 	.word	0x08003209
 80031f0:	08003213 	.word	0x08003213
  {
  // Possible accelerometer scales (and their register bit settings) are:
  // 2 Gs (00), 4 Gs (01), 8 Gs (10), and 16 Gs  (11).
        // Here's a bit of an algorith to calculate DPS/(ADC tick) based on that 2-bit value:
    case AFS_2G:
          aRes = 2.0/32768.0;
 80031f4:	4b0d      	ldr	r3, [pc, #52]	; (800322c <getAres+0x5c>)
 80031f6:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
 80031fa:	601a      	str	r2, [r3, #0]
          break;
 80031fc:	e00e      	b.n	800321c <getAres+0x4c>
    case AFS_4G:
          aRes = 4.0/32768.0;
 80031fe:	4b0b      	ldr	r3, [pc, #44]	; (800322c <getAres+0x5c>)
 8003200:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 8003204:	601a      	str	r2, [r3, #0]
          break;
 8003206:	e009      	b.n	800321c <getAres+0x4c>
    case AFS_8G:
          aRes = 8.0/32768.0;
 8003208:	4b08      	ldr	r3, [pc, #32]	; (800322c <getAres+0x5c>)
 800320a:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 800320e:	601a      	str	r2, [r3, #0]
          break;
 8003210:	e004      	b.n	800321c <getAres+0x4c>
    case AFS_16G:
          aRes = 16.0/32768.0;
 8003212:	4b06      	ldr	r3, [pc, #24]	; (800322c <getAres+0x5c>)
 8003214:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 8003218:	601a      	str	r2, [r3, #0]
          break;
 800321a:	bf00      	nop
  }
}
 800321c:	bf00      	nop
 800321e:	46bd      	mov	sp, r7
 8003220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003224:	4770      	bx	lr
 8003226:	bf00      	nop
 8003228:	20000001 	.word	0x20000001
 800322c:	200005d8 	.word	0x200005d8

08003230 <readAccelData>:

//read raw Accelerometer values from registers
void readAccelData(I2C_HandleTypeDef *I2Cx, int16_t * destination){
 8003230:	b580      	push	{r7, lr}
 8003232:	b088      	sub	sp, #32
 8003234:	af04      	add	r7, sp, #16
 8003236:	6078      	str	r0, [r7, #4]
 8003238:	6039      	str	r1, [r7, #0]
  uint8_t rawAccelData[6];  // x/y/z accel register data stored here
  HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, ACCEL_XOUT_H, 1, &rawAccelData[0], 6, i2c_timeout); // Read the six raw data registers into data array
 800323a:	2364      	movs	r3, #100	; 0x64
 800323c:	9302      	str	r3, [sp, #8]
 800323e:	2306      	movs	r3, #6
 8003240:	9301      	str	r3, [sp, #4]
 8003242:	f107 0308 	add.w	r3, r7, #8
 8003246:	9300      	str	r3, [sp, #0]
 8003248:	2301      	movs	r3, #1
 800324a:	223b      	movs	r2, #59	; 0x3b
 800324c:	21d0      	movs	r1, #208	; 0xd0
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	f004 fcd0 	bl	8007bf4 <HAL_I2C_Mem_Read>
  destination[0] = ((int16_t)rawAccelData[0] << 8) | rawAccelData[1];  // Turn the MSB and LSB into a signed 16-bit value
 8003254:	7a3b      	ldrb	r3, [r7, #8]
 8003256:	021b      	lsls	r3, r3, #8
 8003258:	b21a      	sxth	r2, r3
 800325a:	7a7b      	ldrb	r3, [r7, #9]
 800325c:	b21b      	sxth	r3, r3
 800325e:	4313      	orrs	r3, r2
 8003260:	b21a      	sxth	r2, r3
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	801a      	strh	r2, [r3, #0]
  destination[1] = ((int16_t)rawAccelData[2] << 8) | rawAccelData[3];
 8003266:	7abb      	ldrb	r3, [r7, #10]
 8003268:	021b      	lsls	r3, r3, #8
 800326a:	b219      	sxth	r1, r3
 800326c:	7afb      	ldrb	r3, [r7, #11]
 800326e:	b21a      	sxth	r2, r3
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	3302      	adds	r3, #2
 8003274:	430a      	orrs	r2, r1
 8003276:	b212      	sxth	r2, r2
 8003278:	801a      	strh	r2, [r3, #0]
  destination[2] = ((int16_t)rawAccelData[4] << 8) | rawAccelData[5];
 800327a:	7b3b      	ldrb	r3, [r7, #12]
 800327c:	021b      	lsls	r3, r3, #8
 800327e:	b219      	sxth	r1, r3
 8003280:	7b7b      	ldrb	r3, [r7, #13]
 8003282:	b21a      	sxth	r2, r3
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	3304      	adds	r3, #4
 8003288:	430a      	orrs	r2, r1
 800328a:	b212      	sxth	r2, r2
 800328c:	801a      	strh	r2, [r3, #0]
	printf("Acc X: %d\r\n", destination[0]);
	printf("Acc Y: %d\r\n", destination[1]);
	printf("Acc Z: %d\r\n", destination[2]);
	printf("-------------------------\r\n");
  }
}
 800328e:	bf00      	nop
 8003290:	3710      	adds	r7, #16
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}

08003296 <readGyroData>:

//read raw Gyro values from registers
void readGyroData(I2C_HandleTypeDef *I2Cx, int16_t * destination){
 8003296:	b580      	push	{r7, lr}
 8003298:	b088      	sub	sp, #32
 800329a:	af04      	add	r7, sp, #16
 800329c:	6078      	str	r0, [r7, #4]
 800329e:	6039      	str	r1, [r7, #0]
  uint8_t rawGyroData[6];  // x/y/z gyro register data stored here
  HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, GYRO_XOUT_H, 1, &rawGyroData[0], 6, i2c_timeout);  // Read the six raw data registers sequentially into data array
 80032a0:	2364      	movs	r3, #100	; 0x64
 80032a2:	9302      	str	r3, [sp, #8]
 80032a4:	2306      	movs	r3, #6
 80032a6:	9301      	str	r3, [sp, #4]
 80032a8:	f107 0308 	add.w	r3, r7, #8
 80032ac:	9300      	str	r3, [sp, #0]
 80032ae:	2301      	movs	r3, #1
 80032b0:	2243      	movs	r2, #67	; 0x43
 80032b2:	21d0      	movs	r1, #208	; 0xd0
 80032b4:	6878      	ldr	r0, [r7, #4]
 80032b6:	f004 fc9d 	bl	8007bf4 <HAL_I2C_Mem_Read>
  destination[0] = ((int16_t)rawGyroData[0] << 8) | rawGyroData[1];  // Turn the MSB and LSB into a signed 16-bit value
 80032ba:	7a3b      	ldrb	r3, [r7, #8]
 80032bc:	021b      	lsls	r3, r3, #8
 80032be:	b21a      	sxth	r2, r3
 80032c0:	7a7b      	ldrb	r3, [r7, #9]
 80032c2:	b21b      	sxth	r3, r3
 80032c4:	4313      	orrs	r3, r2
 80032c6:	b21a      	sxth	r2, r3
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	801a      	strh	r2, [r3, #0]
  destination[1] = ((int16_t)rawGyroData[2] << 8) | rawGyroData[3];
 80032cc:	7abb      	ldrb	r3, [r7, #10]
 80032ce:	021b      	lsls	r3, r3, #8
 80032d0:	b219      	sxth	r1, r3
 80032d2:	7afb      	ldrb	r3, [r7, #11]
 80032d4:	b21a      	sxth	r2, r3
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	3302      	adds	r3, #2
 80032da:	430a      	orrs	r2, r1
 80032dc:	b212      	sxth	r2, r2
 80032de:	801a      	strh	r2, [r3, #0]
  destination[2] = ((int16_t)rawGyroData[4] << 8) | rawGyroData[5];
 80032e0:	7b3b      	ldrb	r3, [r7, #12]
 80032e2:	021b      	lsls	r3, r3, #8
 80032e4:	b219      	sxth	r1, r3
 80032e6:	7b7b      	ldrb	r3, [r7, #13]
 80032e8:	b21a      	sxth	r2, r3
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	3304      	adds	r3, #4
 80032ee:	430a      	orrs	r2, r1
 80032f0:	b212      	sxth	r2, r2
 80032f2:	801a      	strh	r2, [r3, #0]
	printf("Gyro X: %d\r\n", destination[0]);
	printf("Gyro Y: %d\r\n", destination[1]);
	printf("Gyro Z: %d\r\n", destination[2]);
	printf("---------------------------\r\n");
  }
}
 80032f4:	bf00      	nop
 80032f6:	3710      	adds	r7, #16
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bd80      	pop	{r7, pc}

080032fc <readMagData>:

void readMagData(I2C_HandleTypeDef *I2Cx, int16_t * destination){
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b08a      	sub	sp, #40	; 0x28
 8003300:	af04      	add	r7, sp, #16
 8003302:	6078      	str	r0, [r7, #4]
 8003304:	6039      	str	r1, [r7, #0]

	uint8_t readData;

	HAL_I2C_Mem_Read(I2Cx, AK8963_ADDRESS, AK8963_ST1, 1, &readData, 1, i2c_timeout);
 8003306:	2364      	movs	r3, #100	; 0x64
 8003308:	9302      	str	r3, [sp, #8]
 800330a:	2301      	movs	r3, #1
 800330c:	9301      	str	r3, [sp, #4]
 800330e:	f107 0316 	add.w	r3, r7, #22
 8003312:	9300      	str	r3, [sp, #0]
 8003314:	2301      	movs	r3, #1
 8003316:	2202      	movs	r2, #2
 8003318:	2118      	movs	r1, #24
 800331a:	6878      	ldr	r0, [r7, #4]
 800331c:	f004 fc6a 	bl	8007bf4 <HAL_I2C_Mem_Read>
	if( (readData & 0x01) == 0x01 ){
 8003320:	7dbb      	ldrb	r3, [r7, #22]
 8003322:	f003 0301 	and.w	r3, r3, #1
 8003326:	2b00      	cmp	r3, #0
 8003328:	d030      	beq.n	800338c <readMagData+0x90>
		uint8_t rawMagData[7];  // x/y/z gyro register data, ST2 register stored here, must read ST2 at end of data acquisition
		HAL_I2C_Mem_Read(I2Cx, AK8963_ADDRESS, AK8963_XOUT_L, 1, &rawMagData[0], 7, i2c_timeout);  // Read the six raw data and ST2 registers sequentially into data array
 800332a:	2364      	movs	r3, #100	; 0x64
 800332c:	9302      	str	r3, [sp, #8]
 800332e:	2307      	movs	r3, #7
 8003330:	9301      	str	r3, [sp, #4]
 8003332:	f107 030c 	add.w	r3, r7, #12
 8003336:	9300      	str	r3, [sp, #0]
 8003338:	2301      	movs	r3, #1
 800333a:	2203      	movs	r2, #3
 800333c:	2118      	movs	r1, #24
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	f004 fc58 	bl	8007bf4 <HAL_I2C_Mem_Read>
		uint8_t c = rawMagData[6];
 8003344:	7cbb      	ldrb	r3, [r7, #18]
 8003346:	75fb      	strb	r3, [r7, #23]
		if(!(c & 0x08)) {
 8003348:	7dfb      	ldrb	r3, [r7, #23]
 800334a:	f003 0308 	and.w	r3, r3, #8
 800334e:	2b00      	cmp	r3, #0
 8003350:	d11c      	bne.n	800338c <readMagData+0x90>
			destination[0] = ((int16_t)rawMagData[1] << 8) | rawMagData[0] ;  // Turn the MSB and LSB into a signed 16-bit value
 8003352:	7b7b      	ldrb	r3, [r7, #13]
 8003354:	021b      	lsls	r3, r3, #8
 8003356:	b21a      	sxth	r2, r3
 8003358:	7b3b      	ldrb	r3, [r7, #12]
 800335a:	b21b      	sxth	r3, r3
 800335c:	4313      	orrs	r3, r2
 800335e:	b21a      	sxth	r2, r3
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	801a      	strh	r2, [r3, #0]
			destination[1] = ((int16_t)rawMagData[3] << 8) | rawMagData[2] ;  // Data stored as little Endian
 8003364:	7bfb      	ldrb	r3, [r7, #15]
 8003366:	021b      	lsls	r3, r3, #8
 8003368:	b219      	sxth	r1, r3
 800336a:	7bbb      	ldrb	r3, [r7, #14]
 800336c:	b21a      	sxth	r2, r3
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	3302      	adds	r3, #2
 8003372:	430a      	orrs	r2, r1
 8003374:	b212      	sxth	r2, r2
 8003376:	801a      	strh	r2, [r3, #0]
			destination[2] = ((int16_t)rawMagData[5] << 8) | rawMagData[4] ;
 8003378:	7c7b      	ldrb	r3, [r7, #17]
 800337a:	021b      	lsls	r3, r3, #8
 800337c:	b219      	sxth	r1, r3
 800337e:	7c3b      	ldrb	r3, [r7, #16]
 8003380:	b21a      	sxth	r2, r3
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	3304      	adds	r3, #4
 8003386:	430a      	orrs	r2, r1
 8003388:	b212      	sxth	r2, r2
 800338a:	801a      	strh	r2, [r3, #0]
				printf("Mag Z: %d\r\n", destination[2]);
				printf("-------------------------\r\n");
			}
		}
	}
}
 800338c:	bf00      	nop
 800338e:	3718      	adds	r7, #24
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}

08003394 <initAK8963>:

void initAK8963(I2C_HandleTypeDef *I2Cx, float * destination){
 8003394:	b590      	push	{r4, r7, lr}
 8003396:	b089      	sub	sp, #36	; 0x24
 8003398:	af04      	add	r7, sp, #16
 800339a:	6078      	str	r0, [r7, #4]
 800339c:	6039      	str	r1, [r7, #0]
  //First extract the factory calibration for each magnetometer axis
  // x/y/z gyro calibration data stored here
  uint8_t rawMagCalData[3];

  //Power down magnetometer
  writeData = 0x00;
 800339e:	2300      	movs	r3, #0
 80033a0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Mem_Write(I2Cx, AK8963_ADDRESS, AK8963_CNTL, 1, &writeData, 1, i2c_timeout);
 80033a2:	2364      	movs	r3, #100	; 0x64
 80033a4:	9302      	str	r3, [sp, #8]
 80033a6:	2301      	movs	r3, #1
 80033a8:	9301      	str	r3, [sp, #4]
 80033aa:	f107 030f 	add.w	r3, r7, #15
 80033ae:	9300      	str	r3, [sp, #0]
 80033b0:	2301      	movs	r3, #1
 80033b2:	220a      	movs	r2, #10
 80033b4:	2118      	movs	r1, #24
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f004 fb22 	bl	8007a00 <HAL_I2C_Mem_Write>
  HAL_Delay(100);
 80033bc:	2064      	movs	r0, #100	; 0x64
 80033be:	f003 fb41 	bl	8006a44 <HAL_Delay>

  writeData = 0x0F;
 80033c2:	230f      	movs	r3, #15
 80033c4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Mem_Write(I2Cx, AK8963_ADDRESS, AK8963_CNTL, 1, &writeData, 1, i2c_timeout);// Enter Fuse ROM access mode
 80033c6:	2364      	movs	r3, #100	; 0x64
 80033c8:	9302      	str	r3, [sp, #8]
 80033ca:	2301      	movs	r3, #1
 80033cc:	9301      	str	r3, [sp, #4]
 80033ce:	f107 030f 	add.w	r3, r7, #15
 80033d2:	9300      	str	r3, [sp, #0]
 80033d4:	2301      	movs	r3, #1
 80033d6:	220a      	movs	r2, #10
 80033d8:	2118      	movs	r1, #24
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	f004 fb10 	bl	8007a00 <HAL_I2C_Mem_Write>
  HAL_Delay(100);
 80033e0:	2064      	movs	r0, #100	; 0x64
 80033e2:	f003 fb2f 	bl	8006a44 <HAL_Delay>


  HAL_I2C_Mem_Read(I2Cx, AK8963_ADDRESS, AK8963_ASAX, 1, &rawMagCalData[0], 3, i2c_timeout);// Read the x-, y-, and z-axis calibration values
 80033e6:	2364      	movs	r3, #100	; 0x64
 80033e8:	9302      	str	r3, [sp, #8]
 80033ea:	2303      	movs	r3, #3
 80033ec:	9301      	str	r3, [sp, #4]
 80033ee:	f107 030c 	add.w	r3, r7, #12
 80033f2:	9300      	str	r3, [sp, #0]
 80033f4:	2301      	movs	r3, #1
 80033f6:	2210      	movs	r2, #16
 80033f8:	2118      	movs	r1, #24
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f004 fbfa 	bl	8007bf4 <HAL_I2C_Mem_Read>
  destination[0] =  (float)(rawMagCalData[0] - 128)/256. + 1.;   // Return x-axis sensitivity adjustment values, etc.
 8003400:	7b3b      	ldrb	r3, [r7, #12]
 8003402:	3b80      	subs	r3, #128	; 0x80
 8003404:	ee07 3a90 	vmov	s15, r3
 8003408:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800340c:	ee17 0a90 	vmov	r0, s15
 8003410:	f7fd f8ba 	bl	8000588 <__aeabi_f2d>
 8003414:	f04f 0200 	mov.w	r2, #0
 8003418:	4b58      	ldr	r3, [pc, #352]	; (800357c <initAK8963+0x1e8>)
 800341a:	f7fd fa37 	bl	800088c <__aeabi_ddiv>
 800341e:	4602      	mov	r2, r0
 8003420:	460b      	mov	r3, r1
 8003422:	4610      	mov	r0, r2
 8003424:	4619      	mov	r1, r3
 8003426:	f04f 0200 	mov.w	r2, #0
 800342a:	4b55      	ldr	r3, [pc, #340]	; (8003580 <initAK8963+0x1ec>)
 800342c:	f7fc ff4e 	bl	80002cc <__adddf3>
 8003430:	4602      	mov	r2, r0
 8003432:	460b      	mov	r3, r1
 8003434:	4610      	mov	r0, r2
 8003436:	4619      	mov	r1, r3
 8003438:	f7fd fbf6 	bl	8000c28 <__aeabi_d2f>
 800343c:	4602      	mov	r2, r0
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	601a      	str	r2, [r3, #0]
  destination[1] =  (float)(rawMagCalData[1] - 128)/256. + 1.;
 8003442:	7b7b      	ldrb	r3, [r7, #13]
 8003444:	3b80      	subs	r3, #128	; 0x80
 8003446:	ee07 3a90 	vmov	s15, r3
 800344a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800344e:	ee17 0a90 	vmov	r0, s15
 8003452:	f7fd f899 	bl	8000588 <__aeabi_f2d>
 8003456:	f04f 0200 	mov.w	r2, #0
 800345a:	4b48      	ldr	r3, [pc, #288]	; (800357c <initAK8963+0x1e8>)
 800345c:	f7fd fa16 	bl	800088c <__aeabi_ddiv>
 8003460:	4602      	mov	r2, r0
 8003462:	460b      	mov	r3, r1
 8003464:	4610      	mov	r0, r2
 8003466:	4619      	mov	r1, r3
 8003468:	f04f 0200 	mov.w	r2, #0
 800346c:	4b44      	ldr	r3, [pc, #272]	; (8003580 <initAK8963+0x1ec>)
 800346e:	f7fc ff2d 	bl	80002cc <__adddf3>
 8003472:	4602      	mov	r2, r0
 8003474:	460b      	mov	r3, r1
 8003476:	4610      	mov	r0, r2
 8003478:	4619      	mov	r1, r3
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	1d1c      	adds	r4, r3, #4
 800347e:	f7fd fbd3 	bl	8000c28 <__aeabi_d2f>
 8003482:	4603      	mov	r3, r0
 8003484:	6023      	str	r3, [r4, #0]
  destination[2] =  (float)(rawMagCalData[2] - 128)/256. + 1.;
 8003486:	7bbb      	ldrb	r3, [r7, #14]
 8003488:	3b80      	subs	r3, #128	; 0x80
 800348a:	ee07 3a90 	vmov	s15, r3
 800348e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003492:	ee17 0a90 	vmov	r0, s15
 8003496:	f7fd f877 	bl	8000588 <__aeabi_f2d>
 800349a:	f04f 0200 	mov.w	r2, #0
 800349e:	4b37      	ldr	r3, [pc, #220]	; (800357c <initAK8963+0x1e8>)
 80034a0:	f7fd f9f4 	bl	800088c <__aeabi_ddiv>
 80034a4:	4602      	mov	r2, r0
 80034a6:	460b      	mov	r3, r1
 80034a8:	4610      	mov	r0, r2
 80034aa:	4619      	mov	r1, r3
 80034ac:	f04f 0200 	mov.w	r2, #0
 80034b0:	4b33      	ldr	r3, [pc, #204]	; (8003580 <initAK8963+0x1ec>)
 80034b2:	f7fc ff0b 	bl	80002cc <__adddf3>
 80034b6:	4602      	mov	r2, r0
 80034b8:	460b      	mov	r3, r1
 80034ba:	4610      	mov	r0, r2
 80034bc:	4619      	mov	r1, r3
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	f103 0408 	add.w	r4, r3, #8
 80034c4:	f7fd fbb0 	bl	8000c28 <__aeabi_d2f>
 80034c8:	4603      	mov	r3, r0
 80034ca:	6023      	str	r3, [r4, #0]

  if(SerialDebugA){
	printf("Mag cal off X: %f\r\n", destination[0]); // @suppress("Float formatting support")
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4618      	mov	r0, r3
 80034d2:	f7fd f859 	bl	8000588 <__aeabi_f2d>
 80034d6:	4602      	mov	r2, r0
 80034d8:	460b      	mov	r3, r1
 80034da:	482a      	ldr	r0, [pc, #168]	; (8003584 <initAK8963+0x1f0>)
 80034dc:	f007 ff04 	bl	800b2e8 <iprintf>
	printf("Mag cal off Y: %f\r\n", destination[1]); // @suppress("Float formatting support")
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	3304      	adds	r3, #4
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4618      	mov	r0, r3
 80034e8:	f7fd f84e 	bl	8000588 <__aeabi_f2d>
 80034ec:	4602      	mov	r2, r0
 80034ee:	460b      	mov	r3, r1
 80034f0:	4825      	ldr	r0, [pc, #148]	; (8003588 <initAK8963+0x1f4>)
 80034f2:	f007 fef9 	bl	800b2e8 <iprintf>
	printf("Mag cal off Z: %f\r\n", destination[2]); // @suppress("Float formatting support")
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	3308      	adds	r3, #8
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4618      	mov	r0, r3
 80034fe:	f7fd f843 	bl	8000588 <__aeabi_f2d>
 8003502:	4602      	mov	r2, r0
 8003504:	460b      	mov	r3, r1
 8003506:	4821      	ldr	r0, [pc, #132]	; (800358c <initAK8963+0x1f8>)
 8003508:	f007 feee 	bl	800b2e8 <iprintf>
	printf("-------------------------\r\n");
 800350c:	4820      	ldr	r0, [pc, #128]	; (8003590 <initAK8963+0x1fc>)
 800350e:	f007 ff71 	bl	800b3f4 <puts>
  }

  writeData = 0x00;
 8003512:	2300      	movs	r3, #0
 8003514:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Mem_Write(I2Cx, AK8963_ADDRESS, AK8963_CNTL, 1, &writeData, 1, i2c_timeout);// Power down magnetometer
 8003516:	2364      	movs	r3, #100	; 0x64
 8003518:	9302      	str	r3, [sp, #8]
 800351a:	2301      	movs	r3, #1
 800351c:	9301      	str	r3, [sp, #4]
 800351e:	f107 030f 	add.w	r3, r7, #15
 8003522:	9300      	str	r3, [sp, #0]
 8003524:	2301      	movs	r3, #1
 8003526:	220a      	movs	r2, #10
 8003528:	2118      	movs	r1, #24
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f004 fa68 	bl	8007a00 <HAL_I2C_Mem_Write>
  HAL_Delay(100);
 8003530:	2064      	movs	r0, #100	; 0x64
 8003532:	f003 fa87 	bl	8006a44 <HAL_Delay>

  // Configure the magnetometer for continuous read and highest resolution
  // set Mscale bit 4 to 1 (0) to enable 16 (14) bit resolution in CNTL register,
  // and enable continuous mode data acquisition Mmode (bits [3:0]), 0010 for 8 Hz and 0110 for 100 Hz sample rates
  writeData = Mscale << 4 | Mmode;
 8003536:	4b17      	ldr	r3, [pc, #92]	; (8003594 <initAK8963+0x200>)
 8003538:	781b      	ldrb	r3, [r3, #0]
 800353a:	011b      	lsls	r3, r3, #4
 800353c:	b25a      	sxtb	r2, r3
 800353e:	4b16      	ldr	r3, [pc, #88]	; (8003598 <initAK8963+0x204>)
 8003540:	781b      	ldrb	r3, [r3, #0]
 8003542:	b25b      	sxtb	r3, r3
 8003544:	4313      	orrs	r3, r2
 8003546:	b25b      	sxtb	r3, r3
 8003548:	b2db      	uxtb	r3, r3
 800354a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Mem_Write(I2Cx, AK8963_ADDRESS, AK8963_CNTL, 1, &writeData, 1, i2c_timeout);// Set magnetometer data resolution and sample ODR
 800354c:	2364      	movs	r3, #100	; 0x64
 800354e:	9302      	str	r3, [sp, #8]
 8003550:	2301      	movs	r3, #1
 8003552:	9301      	str	r3, [sp, #4]
 8003554:	f107 030f 	add.w	r3, r7, #15
 8003558:	9300      	str	r3, [sp, #0]
 800355a:	2301      	movs	r3, #1
 800355c:	220a      	movs	r2, #10
 800355e:	2118      	movs	r1, #24
 8003560:	6878      	ldr	r0, [r7, #4]
 8003562:	f004 fa4d 	bl	8007a00 <HAL_I2C_Mem_Write>

//writeData = 0x16;
//HAL_I2C_Mem_Write(I2Cx, AK8963_ADDRESS, AK8963_CNTL, 1, &writeData, 1, i2c_timeout);
  HAL_Delay(10);
 8003566:	200a      	movs	r0, #10
 8003568:	f003 fa6c 	bl	8006a44 <HAL_Delay>

  if(SerialDebugA){printf("MAG Init Succesful! \r\n");}
 800356c:	480b      	ldr	r0, [pc, #44]	; (800359c <initAK8963+0x208>)
 800356e:	f007 ff41 	bl	800b3f4 <puts>
}
 8003572:	bf00      	nop
 8003574:	3714      	adds	r7, #20
 8003576:	46bd      	mov	sp, r7
 8003578:	bd90      	pop	{r4, r7, pc}
 800357a:	bf00      	nop
 800357c:	40700000 	.word	0x40700000
 8003580:	3ff00000 	.word	0x3ff00000
 8003584:	0800fa90 	.word	0x0800fa90
 8003588:	0800faa4 	.word	0x0800faa4
 800358c:	0800fab8 	.word	0x0800fab8
 8003590:	0800facc 	.word	0x0800facc
 8003594:	20000002 	.word	0x20000002
 8003598:	20000003 	.word	0x20000003
 800359c:	0800fae8 	.word	0x0800fae8

080035a0 <calibrateMag>:

void calibrateMag(I2C_HandleTypeDef *I2Cx, float * dest1, float * dest2){
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b094      	sub	sp, #80	; 0x50
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	60f8      	str	r0, [r7, #12]
 80035a8:	60b9      	str	r1, [r7, #8]
 80035aa:	607a      	str	r2, [r7, #4]

  uint16_t ii = 0, sample_count = 0;
 80035ac:	2300      	movs	r3, #0
 80035ae:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80035b2:	2300      	movs	r3, #0
 80035b4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
  int32_t mag_bias[3] = {0, 0, 0}, mag_scale[3] = {0, 0, 0};
 80035b8:	2300      	movs	r3, #0
 80035ba:	63bb      	str	r3, [r7, #56]	; 0x38
 80035bc:	2300      	movs	r3, #0
 80035be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035c0:	2300      	movs	r3, #0
 80035c2:	643b      	str	r3, [r7, #64]	; 0x40
 80035c4:	2300      	movs	r3, #0
 80035c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035c8:	2300      	movs	r3, #0
 80035ca:	633b      	str	r3, [r7, #48]	; 0x30
 80035cc:	2300      	movs	r3, #0
 80035ce:	637b      	str	r3, [r7, #52]	; 0x34
  int16_t mag_max[3] = {-32767, -32767, -32767}, mag_min[3] = {32767, 32767, 32767}, mag_temp[3] = {0, 0, 0};
 80035d0:	4a9f      	ldr	r2, [pc, #636]	; (8003850 <calibrateMag+0x2b0>)
 80035d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035d6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80035da:	6018      	str	r0, [r3, #0]
 80035dc:	3304      	adds	r3, #4
 80035de:	8019      	strh	r1, [r3, #0]
 80035e0:	4a9c      	ldr	r2, [pc, #624]	; (8003854 <calibrateMag+0x2b4>)
 80035e2:	f107 031c 	add.w	r3, r7, #28
 80035e6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80035ea:	6018      	str	r0, [r3, #0]
 80035ec:	3304      	adds	r3, #4
 80035ee:	8019      	strh	r1, [r3, #0]
 80035f0:	2300      	movs	r3, #0
 80035f2:	82bb      	strh	r3, [r7, #20]
 80035f4:	2300      	movs	r3, #0
 80035f6:	82fb      	strh	r3, [r7, #22]
 80035f8:	2300      	movs	r3, #0
 80035fa:	833b      	strh	r3, [r7, #24]

  if (SerialDebugA){printf("Mag Calibration: Wave device in a figure eight until done!\r\n");}
 80035fc:	4896      	ldr	r0, [pc, #600]	; (8003858 <calibrateMag+0x2b8>)
 80035fe:	f007 fef9 	bl	800b3f4 <puts>
  HAL_Delay(4000);
 8003602:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8003606:	f003 fa1d 	bl	8006a44 <HAL_Delay>

    // shoot for ~fifteen seconds of mag data
    if(Mmode == 0x02) sample_count = 128;  // at 8 Hz ODR, new mag data is available every 125 ms
 800360a:	4b94      	ldr	r3, [pc, #592]	; (800385c <calibrateMag+0x2bc>)
 800360c:	781b      	ldrb	r3, [r3, #0]
 800360e:	2b02      	cmp	r3, #2
 8003610:	d102      	bne.n	8003618 <calibrateMag+0x78>
 8003612:	2380      	movs	r3, #128	; 0x80
 8003614:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
    if(Mmode == 0x06) sample_count = 1500;  // at 100 Hz ODR, new mag data is available every 10 ms
 8003618:	4b90      	ldr	r3, [pc, #576]	; (800385c <calibrateMag+0x2bc>)
 800361a:	781b      	ldrb	r3, [r3, #0]
 800361c:	2b06      	cmp	r3, #6
 800361e:	d103      	bne.n	8003628 <calibrateMag+0x88>
 8003620:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8003624:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
   for(ii = 0; ii < sample_count; ii++) {
 8003628:	2300      	movs	r3, #0
 800362a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800362e:	e055      	b.n	80036dc <calibrateMag+0x13c>
    readMagData(I2Cx, mag_temp);  // Read the mag data
 8003630:	f107 0314 	add.w	r3, r7, #20
 8003634:	4619      	mov	r1, r3
 8003636:	68f8      	ldr	r0, [r7, #12]
 8003638:	f7ff fe60 	bl	80032fc <readMagData>
    for (int jj = 0; jj < 3; jj++) {
 800363c:	2300      	movs	r3, #0
 800363e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003640:	e036      	b.n	80036b0 <calibrateMag+0x110>
      if(mag_temp[jj] > mag_max[jj]) mag_max[jj] = mag_temp[jj];
 8003642:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003644:	005b      	lsls	r3, r3, #1
 8003646:	3350      	adds	r3, #80	; 0x50
 8003648:	443b      	add	r3, r7
 800364a:	f933 2c3c 	ldrsh.w	r2, [r3, #-60]
 800364e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003650:	005b      	lsls	r3, r3, #1
 8003652:	3350      	adds	r3, #80	; 0x50
 8003654:	443b      	add	r3, r7
 8003656:	f933 3c2c 	ldrsh.w	r3, [r3, #-44]
 800365a:	429a      	cmp	r2, r3
 800365c:	dd0b      	ble.n	8003676 <calibrateMag+0xd6>
 800365e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003660:	005b      	lsls	r3, r3, #1
 8003662:	3350      	adds	r3, #80	; 0x50
 8003664:	443b      	add	r3, r7
 8003666:	f933 2c3c 	ldrsh.w	r2, [r3, #-60]
 800366a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800366c:	005b      	lsls	r3, r3, #1
 800366e:	3350      	adds	r3, #80	; 0x50
 8003670:	443b      	add	r3, r7
 8003672:	f823 2c2c 	strh.w	r2, [r3, #-44]
      if(mag_temp[jj] < mag_min[jj]) mag_min[jj] = mag_temp[jj];
 8003676:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003678:	005b      	lsls	r3, r3, #1
 800367a:	3350      	adds	r3, #80	; 0x50
 800367c:	443b      	add	r3, r7
 800367e:	f933 2c3c 	ldrsh.w	r2, [r3, #-60]
 8003682:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003684:	005b      	lsls	r3, r3, #1
 8003686:	3350      	adds	r3, #80	; 0x50
 8003688:	443b      	add	r3, r7
 800368a:	f933 3c34 	ldrsh.w	r3, [r3, #-52]
 800368e:	429a      	cmp	r2, r3
 8003690:	da0b      	bge.n	80036aa <calibrateMag+0x10a>
 8003692:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003694:	005b      	lsls	r3, r3, #1
 8003696:	3350      	adds	r3, #80	; 0x50
 8003698:	443b      	add	r3, r7
 800369a:	f933 2c3c 	ldrsh.w	r2, [r3, #-60]
 800369e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036a0:	005b      	lsls	r3, r3, #1
 80036a2:	3350      	adds	r3, #80	; 0x50
 80036a4:	443b      	add	r3, r7
 80036a6:	f823 2c34 	strh.w	r2, [r3, #-52]
    for (int jj = 0; jj < 3; jj++) {
 80036aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036ac:	3301      	adds	r3, #1
 80036ae:	64bb      	str	r3, [r7, #72]	; 0x48
 80036b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036b2:	2b02      	cmp	r3, #2
 80036b4:	ddc5      	ble.n	8003642 <calibrateMag+0xa2>
    }
    if(Mmode == 0x02) HAL_Delay(135);  // at 8 Hz ODR, new mag data is available every 125 ms
 80036b6:	4b69      	ldr	r3, [pc, #420]	; (800385c <calibrateMag+0x2bc>)
 80036b8:	781b      	ldrb	r3, [r3, #0]
 80036ba:	2b02      	cmp	r3, #2
 80036bc:	d102      	bne.n	80036c4 <calibrateMag+0x124>
 80036be:	2087      	movs	r0, #135	; 0x87
 80036c0:	f003 f9c0 	bl	8006a44 <HAL_Delay>
    if(Mmode == 0x06) HAL_Delay(12);  // at 100 Hz ODR, new mag data is available every 10 ms
 80036c4:	4b65      	ldr	r3, [pc, #404]	; (800385c <calibrateMag+0x2bc>)
 80036c6:	781b      	ldrb	r3, [r3, #0]
 80036c8:	2b06      	cmp	r3, #6
 80036ca:	d102      	bne.n	80036d2 <calibrateMag+0x132>
 80036cc:	200c      	movs	r0, #12
 80036ce:	f003 f9b9 	bl	8006a44 <HAL_Delay>
   for(ii = 0; ii < sample_count; ii++) {
 80036d2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80036d6:	3301      	adds	r3, #1
 80036d8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80036dc:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80036e0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80036e4:	429a      	cmp	r2, r3
 80036e6:	d3a3      	bcc.n	8003630 <calibrateMag+0x90>
    }

    // Get hard iron correction
    mag_bias[0]  = (mag_max[0] + mag_min[0])/2;  // get average x mag bias in counts
 80036e8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80036ec:	461a      	mov	r2, r3
 80036ee:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80036f2:	4413      	add	r3, r2
 80036f4:	0fda      	lsrs	r2, r3, #31
 80036f6:	4413      	add	r3, r2
 80036f8:	105b      	asrs	r3, r3, #1
 80036fa:	63bb      	str	r3, [r7, #56]	; 0x38
    mag_bias[1]  = (mag_max[1] + mag_min[1])/2;  // get average y mag bias in counts
 80036fc:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8003700:	461a      	mov	r2, r3
 8003702:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003706:	4413      	add	r3, r2
 8003708:	0fda      	lsrs	r2, r3, #31
 800370a:	4413      	add	r3, r2
 800370c:	105b      	asrs	r3, r3, #1
 800370e:	63fb      	str	r3, [r7, #60]	; 0x3c
    mag_bias[2]  = (mag_max[2] + mag_min[2])/2;  // get average z mag bias in counts
 8003710:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8003714:	461a      	mov	r2, r3
 8003716:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800371a:	4413      	add	r3, r2
 800371c:	0fda      	lsrs	r2, r3, #31
 800371e:	4413      	add	r3, r2
 8003720:	105b      	asrs	r3, r3, #1
 8003722:	643b      	str	r3, [r7, #64]	; 0x40

    dest1[0] = (float) mag_bias[0]*mRes*magCalibration[0];  // save mag biases in G for main program
 8003724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003726:	ee07 3a90 	vmov	s15, r3
 800372a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800372e:	4b4c      	ldr	r3, [pc, #304]	; (8003860 <calibrateMag+0x2c0>)
 8003730:	edd3 7a00 	vldr	s15, [r3]
 8003734:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003738:	4b4a      	ldr	r3, [pc, #296]	; (8003864 <calibrateMag+0x2c4>)
 800373a:	edd3 7a00 	vldr	s15, [r3]
 800373e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	edc3 7a00 	vstr	s15, [r3]
    dest1[1] = (float) mag_bias[1]*mRes*magCalibration[1];
 8003748:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800374a:	ee07 3a90 	vmov	s15, r3
 800374e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003752:	4b43      	ldr	r3, [pc, #268]	; (8003860 <calibrateMag+0x2c0>)
 8003754:	edd3 7a00 	vldr	s15, [r3]
 8003758:	ee27 7a27 	vmul.f32	s14, s14, s15
 800375c:	4b41      	ldr	r3, [pc, #260]	; (8003864 <calibrateMag+0x2c4>)
 800375e:	edd3 7a01 	vldr	s15, [r3, #4]
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	3304      	adds	r3, #4
 8003766:	ee67 7a27 	vmul.f32	s15, s14, s15
 800376a:	edc3 7a00 	vstr	s15, [r3]
    dest1[2] = (float) mag_bias[2]*mRes*magCalibration[2];
 800376e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003770:	ee07 3a90 	vmov	s15, r3
 8003774:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003778:	4b39      	ldr	r3, [pc, #228]	; (8003860 <calibrateMag+0x2c0>)
 800377a:	edd3 7a00 	vldr	s15, [r3]
 800377e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003782:	4b38      	ldr	r3, [pc, #224]	; (8003864 <calibrateMag+0x2c4>)
 8003784:	edd3 7a02 	vldr	s15, [r3, #8]
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	3308      	adds	r3, #8
 800378c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003790:	edc3 7a00 	vstr	s15, [r3]

    // Get soft iron correction estimate
    mag_scale[0]  = (mag_max[0] - mag_min[0])/2;  // get average x axis max chord length in counts
 8003794:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8003798:	461a      	mov	r2, r3
 800379a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800379e:	1ad3      	subs	r3, r2, r3
 80037a0:	0fda      	lsrs	r2, r3, #31
 80037a2:	4413      	add	r3, r2
 80037a4:	105b      	asrs	r3, r3, #1
 80037a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    mag_scale[1]  = (mag_max[1] - mag_min[1])/2;  // get average y axis max chord length in counts
 80037a8:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80037ac:	461a      	mov	r2, r3
 80037ae:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80037b2:	1ad3      	subs	r3, r2, r3
 80037b4:	0fda      	lsrs	r2, r3, #31
 80037b6:	4413      	add	r3, r2
 80037b8:	105b      	asrs	r3, r3, #1
 80037ba:	633b      	str	r3, [r7, #48]	; 0x30
    mag_scale[2]  = (mag_max[2] - mag_min[2])/2;  // get average z axis max chord length in counts
 80037bc:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80037c0:	461a      	mov	r2, r3
 80037c2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80037c6:	1ad3      	subs	r3, r2, r3
 80037c8:	0fda      	lsrs	r2, r3, #31
 80037ca:	4413      	add	r3, r2
 80037cc:	105b      	asrs	r3, r3, #1
 80037ce:	637b      	str	r3, [r7, #52]	; 0x34

    float avg_rad = mag_scale[0] + mag_scale[1] + mag_scale[2];
 80037d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037d4:	441a      	add	r2, r3
 80037d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037d8:	4413      	add	r3, r2
 80037da:	ee07 3a90 	vmov	s15, r3
 80037de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80037e2:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    avg_rad /= 3.0;
 80037e6:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 80037ea:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 80037ee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80037f2:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44

    dest2[0] = avg_rad/((float)mag_scale[0]);
 80037f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037f8:	ee07 3a90 	vmov	s15, r3
 80037fc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003800:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 8003804:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	edc3 7a00 	vstr	s15, [r3]
    dest2[1] = avg_rad/((float)mag_scale[1]);
 800380e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003810:	ee07 3a90 	vmov	s15, r3
 8003814:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	3304      	adds	r3, #4
 800381c:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 8003820:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003824:	edc3 7a00 	vstr	s15, [r3]
    dest2[2] = avg_rad/((float)mag_scale[2]);
 8003828:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800382a:	ee07 3a90 	vmov	s15, r3
 800382e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	3308      	adds	r3, #8
 8003836:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 800383a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800383e:	edc3 7a00 	vstr	s15, [r3]

    if (SerialDebugA){printf("Mag Calibration done!\r\n");}
 8003842:	4809      	ldr	r0, [pc, #36]	; (8003868 <calibrateMag+0x2c8>)
 8003844:	f007 fdd6 	bl	800b3f4 <puts>
}
 8003848:	bf00      	nop
 800384a:	3750      	adds	r7, #80	; 0x50
 800384c:	46bd      	mov	sp, r7
 800384e:	bd80      	pop	{r7, pc}
 8003850:	0800fb54 	.word	0x0800fb54
 8003854:	0800fb5c 	.word	0x0800fb5c
 8003858:	0800fb00 	.word	0x0800fb00
 800385c:	20000003 	.word	0x20000003
 8003860:	200005e0 	.word	0x200005e0
 8003864:	200005fc 	.word	0x200005fc
 8003868:	0800fb3c 	.word	0x0800fb3c

0800386c <initMPU9250>:


void initMPU9250(I2C_HandleTypeDef *I2Cx){
 800386c:	b580      	push	{r7, lr}
 800386e:	b088      	sub	sp, #32
 8003870:	af04      	add	r7, sp, #16
 8003872:	6078      	str	r0, [r7, #4]
	//pre def. vars
	uint8_t readData;
	uint8_t writeData;

	//Wake up device
	writeData = 0x00;
 8003874:	2300      	movs	r3, #0
 8003876:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, PWR_MGMT_1, 1, &writeData, 1, i2c_timeout);
 8003878:	2364      	movs	r3, #100	; 0x64
 800387a:	9302      	str	r3, [sp, #8]
 800387c:	2301      	movs	r3, #1
 800387e:	9301      	str	r3, [sp, #4]
 8003880:	f107 030e 	add.w	r3, r7, #14
 8003884:	9300      	str	r3, [sp, #0]
 8003886:	2301      	movs	r3, #1
 8003888:	226b      	movs	r2, #107	; 0x6b
 800388a:	21d0      	movs	r1, #208	; 0xd0
 800388c:	6878      	ldr	r0, [r7, #4]
 800388e:	f004 f8b7 	bl	8007a00 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 8003892:	2064      	movs	r0, #100	; 0x64
 8003894:	f003 f8d6 	bl	8006a44 <HAL_Delay>

	writeData = 0x01;
 8003898:	2301      	movs	r3, #1
 800389a:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, PWR_MGMT_1, 1, &writeData, 1, i2c_timeout);
 800389c:	2364      	movs	r3, #100	; 0x64
 800389e:	9302      	str	r3, [sp, #8]
 80038a0:	2301      	movs	r3, #1
 80038a2:	9301      	str	r3, [sp, #4]
 80038a4:	f107 030e 	add.w	r3, r7, #14
 80038a8:	9300      	str	r3, [sp, #0]
 80038aa:	2301      	movs	r3, #1
 80038ac:	226b      	movs	r2, #107	; 0x6b
 80038ae:	21d0      	movs	r1, #208	; 0xd0
 80038b0:	6878      	ldr	r0, [r7, #4]
 80038b2:	f004 f8a5 	bl	8007a00 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 80038b6:	2064      	movs	r0, #100	; 0x64
 80038b8:	f003 f8c4 	bl	8006a44 <HAL_Delay>

	writeData = 0x03;
 80038bc:	2303      	movs	r3, #3
 80038be:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, CONFIG, 1, &writeData, 1, i2c_timeout);
 80038c0:	2364      	movs	r3, #100	; 0x64
 80038c2:	9302      	str	r3, [sp, #8]
 80038c4:	2301      	movs	r3, #1
 80038c6:	9301      	str	r3, [sp, #4]
 80038c8:	f107 030e 	add.w	r3, r7, #14
 80038cc:	9300      	str	r3, [sp, #0]
 80038ce:	2301      	movs	r3, #1
 80038d0:	221a      	movs	r2, #26
 80038d2:	21d0      	movs	r1, #208	; 0xd0
 80038d4:	6878      	ldr	r0, [r7, #4]
 80038d6:	f004 f893 	bl	8007a00 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 80038da:	2064      	movs	r0, #100	; 0x64
 80038dc:	f003 f8b2 	bl	8006a44 <HAL_Delay>

	writeData = 0x04;
 80038e0:	2304      	movs	r3, #4
 80038e2:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, SMPLRT_DIV, 1, &writeData, 1, i2c_timeout);
 80038e4:	2364      	movs	r3, #100	; 0x64
 80038e6:	9302      	str	r3, [sp, #8]
 80038e8:	2301      	movs	r3, #1
 80038ea:	9301      	str	r3, [sp, #4]
 80038ec:	f107 030e 	add.w	r3, r7, #14
 80038f0:	9300      	str	r3, [sp, #0]
 80038f2:	2301      	movs	r3, #1
 80038f4:	2219      	movs	r2, #25
 80038f6:	21d0      	movs	r1, #208	; 0xd0
 80038f8:	6878      	ldr	r0, [r7, #4]
 80038fa:	f004 f881 	bl	8007a00 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 80038fe:	2064      	movs	r0, #100	; 0x64
 8003900:	f003 f8a0 	bl	8006a44 <HAL_Delay>

	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, GYRO_CONFIG, 1, &readData, 1, i2c_timeout);
 8003904:	2364      	movs	r3, #100	; 0x64
 8003906:	9302      	str	r3, [sp, #8]
 8003908:	2301      	movs	r3, #1
 800390a:	9301      	str	r3, [sp, #4]
 800390c:	f107 030f 	add.w	r3, r7, #15
 8003910:	9300      	str	r3, [sp, #0]
 8003912:	2301      	movs	r3, #1
 8003914:	221b      	movs	r2, #27
 8003916:	21d0      	movs	r1, #208	; 0xd0
 8003918:	6878      	ldr	r0, [r7, #4]
 800391a:	f004 f96b 	bl	8007bf4 <HAL_I2C_Mem_Read>
	readData = readData & ~0x03; // Clear Fchoice bits [1:0]
 800391e:	7bfb      	ldrb	r3, [r7, #15]
 8003920:	f023 0303 	bic.w	r3, r3, #3
 8003924:	b2db      	uxtb	r3, r3
 8003926:	73fb      	strb	r3, [r7, #15]
	readData = readData & ~0x18; // Clear GFS bits [4:3]
 8003928:	7bfb      	ldrb	r3, [r7, #15]
 800392a:	f023 0318 	bic.w	r3, r3, #24
 800392e:	b2db      	uxtb	r3, r3
 8003930:	73fb      	strb	r3, [r7, #15]
	readData = readData | Gscale << 3; // Set full scale range for the gyro
 8003932:	4b3e      	ldr	r3, [pc, #248]	; (8003a2c <initMPU9250+0x1c0>)
 8003934:	781b      	ldrb	r3, [r3, #0]
 8003936:	00db      	lsls	r3, r3, #3
 8003938:	b25a      	sxtb	r2, r3
 800393a:	7bfb      	ldrb	r3, [r7, #15]
 800393c:	b25b      	sxtb	r3, r3
 800393e:	4313      	orrs	r3, r2
 8003940:	b25b      	sxtb	r3, r3
 8003942:	b2db      	uxtb	r3, r3
 8003944:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(100);
 8003946:	2064      	movs	r0, #100	; 0x64
 8003948:	f003 f87c 	bl	8006a44 <HAL_Delay>

	writeData = readData;
 800394c:	7bfb      	ldrb	r3, [r7, #15]
 800394e:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, GYRO_CONFIG, 1, &writeData, 1, i2c_timeout);
 8003950:	2364      	movs	r3, #100	; 0x64
 8003952:	9302      	str	r3, [sp, #8]
 8003954:	2301      	movs	r3, #1
 8003956:	9301      	str	r3, [sp, #4]
 8003958:	f107 030e 	add.w	r3, r7, #14
 800395c:	9300      	str	r3, [sp, #0]
 800395e:	2301      	movs	r3, #1
 8003960:	221b      	movs	r2, #27
 8003962:	21d0      	movs	r1, #208	; 0xd0
 8003964:	6878      	ldr	r0, [r7, #4]
 8003966:	f004 f84b 	bl	8007a00 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 800396a:	2064      	movs	r0, #100	; 0x64
 800396c:	f003 f86a 	bl	8006a44 <HAL_Delay>

	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, ACCEL_CONFIG, 1, &readData, 1, i2c_timeout);
 8003970:	2364      	movs	r3, #100	; 0x64
 8003972:	9302      	str	r3, [sp, #8]
 8003974:	2301      	movs	r3, #1
 8003976:	9301      	str	r3, [sp, #4]
 8003978:	f107 030f 	add.w	r3, r7, #15
 800397c:	9300      	str	r3, [sp, #0]
 800397e:	2301      	movs	r3, #1
 8003980:	221c      	movs	r2, #28
 8003982:	21d0      	movs	r1, #208	; 0xd0
 8003984:	6878      	ldr	r0, [r7, #4]
 8003986:	f004 f935 	bl	8007bf4 <HAL_I2C_Mem_Read>
	readData = readData & ~0x18;  // Clear AFS bits [4:3]
 800398a:	7bfb      	ldrb	r3, [r7, #15]
 800398c:	f023 0318 	bic.w	r3, r3, #24
 8003990:	b2db      	uxtb	r3, r3
 8003992:	73fb      	strb	r3, [r7, #15]
	readData = readData | Ascale << 3; // Set full scale range for the accelerometer
 8003994:	4b26      	ldr	r3, [pc, #152]	; (8003a30 <initMPU9250+0x1c4>)
 8003996:	781b      	ldrb	r3, [r3, #0]
 8003998:	00db      	lsls	r3, r3, #3
 800399a:	b25a      	sxtb	r2, r3
 800399c:	7bfb      	ldrb	r3, [r7, #15]
 800399e:	b25b      	sxtb	r3, r3
 80039a0:	4313      	orrs	r3, r2
 80039a2:	b25b      	sxtb	r3, r3
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	73fb      	strb	r3, [r7, #15]

	writeData = readData;
 80039a8:	7bfb      	ldrb	r3, [r7, #15]
 80039aa:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ACCEL_CONFIG, 1, &writeData, 1, i2c_timeout);
 80039ac:	2364      	movs	r3, #100	; 0x64
 80039ae:	9302      	str	r3, [sp, #8]
 80039b0:	2301      	movs	r3, #1
 80039b2:	9301      	str	r3, [sp, #4]
 80039b4:	f107 030e 	add.w	r3, r7, #14
 80039b8:	9300      	str	r3, [sp, #0]
 80039ba:	2301      	movs	r3, #1
 80039bc:	221c      	movs	r2, #28
 80039be:	21d0      	movs	r1, #208	; 0xd0
 80039c0:	6878      	ldr	r0, [r7, #4]
 80039c2:	f004 f81d 	bl	8007a00 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 80039c6:	2064      	movs	r0, #100	; 0x64
 80039c8:	f003 f83c 	bl	8006a44 <HAL_Delay>
	//**
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, ACCEL_CONFIG2, 1, &readData, 1, i2c_timeout);
 80039cc:	2364      	movs	r3, #100	; 0x64
 80039ce:	9302      	str	r3, [sp, #8]
 80039d0:	2301      	movs	r3, #1
 80039d2:	9301      	str	r3, [sp, #4]
 80039d4:	f107 030f 	add.w	r3, r7, #15
 80039d8:	9300      	str	r3, [sp, #0]
 80039da:	2301      	movs	r3, #1
 80039dc:	221d      	movs	r2, #29
 80039de:	21d0      	movs	r1, #208	; 0xd0
 80039e0:	6878      	ldr	r0, [r7, #4]
 80039e2:	f004 f907 	bl	8007bf4 <HAL_I2C_Mem_Read>
	readData = readData & ~0x0F; // Clear accel_fchoice_b (bit 3) and A_DLPFG (bits [2:0])
 80039e6:	7bfb      	ldrb	r3, [r7, #15]
 80039e8:	f023 030f 	bic.w	r3, r3, #15
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	73fb      	strb	r3, [r7, #15]
	readData = readData | 0x03;  // Set accelerometer rate to 1 kHz and bandwidth to 41 Hz
 80039f0:	7bfb      	ldrb	r3, [r7, #15]
 80039f2:	f043 0303 	orr.w	r3, r3, #3
 80039f6:	b2db      	uxtb	r3, r3
 80039f8:	73fb      	strb	r3, [r7, #15]

	writeData = readData;
 80039fa:	7bfb      	ldrb	r3, [r7, #15]
 80039fc:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ACCEL_CONFIG2, 1, &writeData, 1, i2c_timeout);
 80039fe:	2364      	movs	r3, #100	; 0x64
 8003a00:	9302      	str	r3, [sp, #8]
 8003a02:	2301      	movs	r3, #1
 8003a04:	9301      	str	r3, [sp, #4]
 8003a06:	f107 030e 	add.w	r3, r7, #14
 8003a0a:	9300      	str	r3, [sp, #0]
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	221d      	movs	r2, #29
 8003a10:	21d0      	movs	r1, #208	; 0xd0
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	f003 fff4 	bl	8007a00 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 8003a18:	2064      	movs	r0, #100	; 0x64
 8003a1a:	f003 f813 	bl	8006a44 <HAL_Delay>

	if(SerialDebugA){printf("MPU Init Succesful! \r\n");}
 8003a1e:	4805      	ldr	r0, [pc, #20]	; (8003a34 <initMPU9250+0x1c8>)
 8003a20:	f007 fce8 	bl	800b3f4 <puts>
}
 8003a24:	bf00      	nop
 8003a26:	3710      	adds	r7, #16
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}
 8003a2c:	20000000 	.word	0x20000000
 8003a30:	20000001 	.word	0x20000001
 8003a34:	0800fb64 	.word	0x0800fb64

08003a38 <calibrateMPU9250>:


// Function which accumulates gyro and accelerometer data after device initialization. It calculates the average
// of the at-rest readings and then loads the resulting offsets into accelerometer and gyro bias registers.
void calibrateMPU9250(I2C_HandleTypeDef *I2Cx, float * dest1, float * dest2){
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b0a4      	sub	sp, #144	; 0x90
 8003a3c:	af04      	add	r7, sp, #16
 8003a3e:	60f8      	str	r0, [r7, #12]
 8003a40:	60b9      	str	r1, [r7, #8]
 8003a42:	607a      	str	r2, [r7, #4]
  //pre def. vars
  uint8_t writeData;

	uint8_t calibData[12]; // data array to hold accelerometer and gyro x, y, z, data
	uint16_t ii, packet_count, fifo_count;
	int32_t gyro_bias[3]  = {0, 0, 0}, accel_bias[3] = {0, 0, 0};
 8003a44:	2300      	movs	r3, #0
 8003a46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a48:	2300      	movs	r3, #0
 8003a4a:	643b      	str	r3, [r7, #64]	; 0x40
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	647b      	str	r3, [r7, #68]	; 0x44
 8003a50:	2300      	movs	r3, #0
 8003a52:	633b      	str	r3, [r7, #48]	; 0x30
 8003a54:	2300      	movs	r3, #0
 8003a56:	637b      	str	r3, [r7, #52]	; 0x34
 8003a58:	2300      	movs	r3, #0
 8003a5a:	63bb      	str	r3, [r7, #56]	; 0x38

	// reset device
	writeData = 0x80;
 8003a5c:	2380      	movs	r3, #128	; 0x80
 8003a5e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, PWR_MGMT_1, 1, &writeData, 1, i2c_timeout);// Write a one to bit 7 reset bit; toggle reset device
 8003a62:	2364      	movs	r3, #100	; 0x64
 8003a64:	9302      	str	r3, [sp, #8]
 8003a66:	2301      	movs	r3, #1
 8003a68:	9301      	str	r3, [sp, #4]
 8003a6a:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8003a6e:	9300      	str	r3, [sp, #0]
 8003a70:	2301      	movs	r3, #1
 8003a72:	226b      	movs	r2, #107	; 0x6b
 8003a74:	21d0      	movs	r1, #208	; 0xd0
 8003a76:	68f8      	ldr	r0, [r7, #12]
 8003a78:	f003 ffc2 	bl	8007a00 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 8003a7c:	2064      	movs	r0, #100	; 0x64
 8003a7e:	f002 ffe1 	bl	8006a44 <HAL_Delay>

	// get stable time source; Auto select clock source to be PLL gyroscope reference if ready
	// else use the internal oscillator, bits 2:0 = 001
	writeData = 0x01;
 8003a82:	2301      	movs	r3, #1
 8003a84:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, PWR_MGMT_1, 1, &writeData, 1, i2c_timeout);
 8003a88:	2364      	movs	r3, #100	; 0x64
 8003a8a:	9302      	str	r3, [sp, #8]
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	9301      	str	r3, [sp, #4]
 8003a90:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8003a94:	9300      	str	r3, [sp, #0]
 8003a96:	2301      	movs	r3, #1
 8003a98:	226b      	movs	r2, #107	; 0x6b
 8003a9a:	21d0      	movs	r1, #208	; 0xd0
 8003a9c:	68f8      	ldr	r0, [r7, #12]
 8003a9e:	f003 ffaf 	bl	8007a00 <HAL_I2C_Mem_Write>
	writeData = 0x00;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, PWR_MGMT_2, 1, &writeData, 1, i2c_timeout);
 8003aa8:	2364      	movs	r3, #100	; 0x64
 8003aaa:	9302      	str	r3, [sp, #8]
 8003aac:	2301      	movs	r3, #1
 8003aae:	9301      	str	r3, [sp, #4]
 8003ab0:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8003ab4:	9300      	str	r3, [sp, #0]
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	226c      	movs	r2, #108	; 0x6c
 8003aba:	21d0      	movs	r1, #208	; 0xd0
 8003abc:	68f8      	ldr	r0, [r7, #12]
 8003abe:	f003 ff9f 	bl	8007a00 <HAL_I2C_Mem_Write>
	HAL_Delay(200);
 8003ac2:	20c8      	movs	r0, #200	; 0xc8
 8003ac4:	f002 ffbe 	bl	8006a44 <HAL_Delay>

	// Configure device for bias calculation
	writeData = 0x00;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, INT_ENABLE, 1, &writeData, 1, i2c_timeout);// Disable all interrupts
 8003ace:	2364      	movs	r3, #100	; 0x64
 8003ad0:	9302      	str	r3, [sp, #8]
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	9301      	str	r3, [sp, #4]
 8003ad6:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8003ada:	9300      	str	r3, [sp, #0]
 8003adc:	2301      	movs	r3, #1
 8003ade:	2238      	movs	r2, #56	; 0x38
 8003ae0:	21d0      	movs	r1, #208	; 0xd0
 8003ae2:	68f8      	ldr	r0, [r7, #12]
 8003ae4:	f003 ff8c 	bl	8007a00 <HAL_I2C_Mem_Write>
	writeData = 0x00;
 8003ae8:	2300      	movs	r3, #0
 8003aea:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, FIFO_EN, 1, &writeData, 1, i2c_timeout);// Disable FIFO
 8003aee:	2364      	movs	r3, #100	; 0x64
 8003af0:	9302      	str	r3, [sp, #8]
 8003af2:	2301      	movs	r3, #1
 8003af4:	9301      	str	r3, [sp, #4]
 8003af6:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8003afa:	9300      	str	r3, [sp, #0]
 8003afc:	2301      	movs	r3, #1
 8003afe:	2223      	movs	r2, #35	; 0x23
 8003b00:	21d0      	movs	r1, #208	; 0xd0
 8003b02:	68f8      	ldr	r0, [r7, #12]
 8003b04:	f003 ff7c 	bl	8007a00 <HAL_I2C_Mem_Write>
	writeData = 0x00;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, PWR_MGMT_1, 1, &writeData, 1, i2c_timeout);// Turn on internal clock source
 8003b0e:	2364      	movs	r3, #100	; 0x64
 8003b10:	9302      	str	r3, [sp, #8]
 8003b12:	2301      	movs	r3, #1
 8003b14:	9301      	str	r3, [sp, #4]
 8003b16:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8003b1a:	9300      	str	r3, [sp, #0]
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	226b      	movs	r2, #107	; 0x6b
 8003b20:	21d0      	movs	r1, #208	; 0xd0
 8003b22:	68f8      	ldr	r0, [r7, #12]
 8003b24:	f003 ff6c 	bl	8007a00 <HAL_I2C_Mem_Write>
	writeData = 0x00;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, I2C_MST_CTRL, 1, &writeData, 1, i2c_timeout);// Disable I2C master
 8003b2e:	2364      	movs	r3, #100	; 0x64
 8003b30:	9302      	str	r3, [sp, #8]
 8003b32:	2301      	movs	r3, #1
 8003b34:	9301      	str	r3, [sp, #4]
 8003b36:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8003b3a:	9300      	str	r3, [sp, #0]
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	2224      	movs	r2, #36	; 0x24
 8003b40:	21d0      	movs	r1, #208	; 0xd0
 8003b42:	68f8      	ldr	r0, [r7, #12]
 8003b44:	f003 ff5c 	bl	8007a00 <HAL_I2C_Mem_Write>
	writeData = 0x00;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, USER_CTRL, 1, &writeData, 1, i2c_timeout);// Disable FIFO and I2C master modes
 8003b4e:	2364      	movs	r3, #100	; 0x64
 8003b50:	9302      	str	r3, [sp, #8]
 8003b52:	2301      	movs	r3, #1
 8003b54:	9301      	str	r3, [sp, #4]
 8003b56:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8003b5a:	9300      	str	r3, [sp, #0]
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	226a      	movs	r2, #106	; 0x6a
 8003b60:	21d0      	movs	r1, #208	; 0xd0
 8003b62:	68f8      	ldr	r0, [r7, #12]
 8003b64:	f003 ff4c 	bl	8007a00 <HAL_I2C_Mem_Write>
	writeData = 0x0C;
 8003b68:	230c      	movs	r3, #12
 8003b6a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, USER_CTRL, 1, &writeData, 1, i2c_timeout);// Reset FIFO and DMP
 8003b6e:	2364      	movs	r3, #100	; 0x64
 8003b70:	9302      	str	r3, [sp, #8]
 8003b72:	2301      	movs	r3, #1
 8003b74:	9301      	str	r3, [sp, #4]
 8003b76:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8003b7a:	9300      	str	r3, [sp, #0]
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	226a      	movs	r2, #106	; 0x6a
 8003b80:	21d0      	movs	r1, #208	; 0xd0
 8003b82:	68f8      	ldr	r0, [r7, #12]
 8003b84:	f003 ff3c 	bl	8007a00 <HAL_I2C_Mem_Write>
	HAL_Delay(15);
 8003b88:	200f      	movs	r0, #15
 8003b8a:	f002 ff5b 	bl	8006a44 <HAL_Delay>

	// Configure MPU6050 gyro and accelerometer for bias calculation
	writeData = 0x01;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, CONFIG, 1, &writeData, 1, i2c_timeout);// Set low-pass filter to 188 Hz
 8003b94:	2364      	movs	r3, #100	; 0x64
 8003b96:	9302      	str	r3, [sp, #8]
 8003b98:	2301      	movs	r3, #1
 8003b9a:	9301      	str	r3, [sp, #4]
 8003b9c:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8003ba0:	9300      	str	r3, [sp, #0]
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	221a      	movs	r2, #26
 8003ba6:	21d0      	movs	r1, #208	; 0xd0
 8003ba8:	68f8      	ldr	r0, [r7, #12]
 8003baa:	f003 ff29 	bl	8007a00 <HAL_I2C_Mem_Write>
	writeData = 0x00;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, SMPLRT_DIV, 1, &writeData, 1, i2c_timeout);// Set sample rate to 1 kHz
 8003bb4:	2364      	movs	r3, #100	; 0x64
 8003bb6:	9302      	str	r3, [sp, #8]
 8003bb8:	2301      	movs	r3, #1
 8003bba:	9301      	str	r3, [sp, #4]
 8003bbc:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8003bc0:	9300      	str	r3, [sp, #0]
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	2219      	movs	r2, #25
 8003bc6:	21d0      	movs	r1, #208	; 0xd0
 8003bc8:	68f8      	ldr	r0, [r7, #12]
 8003bca:	f003 ff19 	bl	8007a00 <HAL_I2C_Mem_Write>
	writeData = 0x00;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, GYRO_CONFIG, 1, &writeData, 1, i2c_timeout);// Set gyro full-scale to 250 degrees per second, maximum sensitivity
 8003bd4:	2364      	movs	r3, #100	; 0x64
 8003bd6:	9302      	str	r3, [sp, #8]
 8003bd8:	2301      	movs	r3, #1
 8003bda:	9301      	str	r3, [sp, #4]
 8003bdc:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8003be0:	9300      	str	r3, [sp, #0]
 8003be2:	2301      	movs	r3, #1
 8003be4:	221b      	movs	r2, #27
 8003be6:	21d0      	movs	r1, #208	; 0xd0
 8003be8:	68f8      	ldr	r0, [r7, #12]
 8003bea:	f003 ff09 	bl	8007a00 <HAL_I2C_Mem_Write>
	writeData = 0x00;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ACCEL_CONFIG, 1, &writeData, 1, i2c_timeout);// Set accelerometer full-scale to 2 g, maximum sensitivity
 8003bf4:	2364      	movs	r3, #100	; 0x64
 8003bf6:	9302      	str	r3, [sp, #8]
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	9301      	str	r3, [sp, #4]
 8003bfc:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8003c00:	9300      	str	r3, [sp, #0]
 8003c02:	2301      	movs	r3, #1
 8003c04:	221c      	movs	r2, #28
 8003c06:	21d0      	movs	r1, #208	; 0xd0
 8003c08:	68f8      	ldr	r0, [r7, #12]
 8003c0a:	f003 fef9 	bl	8007a00 <HAL_I2C_Mem_Write>

	uint16_t  gyrosensitivity  = 131;   // = 131 LSB/degrees/sec
 8003c0e:	2383      	movs	r3, #131	; 0x83
 8003c10:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
	uint16_t  accelsensitivity = 16384;  // = 16384 LSB/g
 8003c14:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003c18:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a

	// Configure FIFO to capture accelerometer and gyro data for bias calculation
	writeData = 0x40;
 8003c1c:	2340      	movs	r3, #64	; 0x40
 8003c1e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, USER_CTRL, 1, &writeData, 1, i2c_timeout);// Enable FIFO
 8003c22:	2364      	movs	r3, #100	; 0x64
 8003c24:	9302      	str	r3, [sp, #8]
 8003c26:	2301      	movs	r3, #1
 8003c28:	9301      	str	r3, [sp, #4]
 8003c2a:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8003c2e:	9300      	str	r3, [sp, #0]
 8003c30:	2301      	movs	r3, #1
 8003c32:	226a      	movs	r2, #106	; 0x6a
 8003c34:	21d0      	movs	r1, #208	; 0xd0
 8003c36:	68f8      	ldr	r0, [r7, #12]
 8003c38:	f003 fee2 	bl	8007a00 <HAL_I2C_Mem_Write>
	writeData = 0x78;
 8003c3c:	2378      	movs	r3, #120	; 0x78
 8003c3e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, FIFO_EN, 1, &writeData, 1, i2c_timeout);// Enable gyro and accelerometer sensors for FIFO  (max size 512 bytes in MPU-9150)
 8003c42:	2364      	movs	r3, #100	; 0x64
 8003c44:	9302      	str	r3, [sp, #8]
 8003c46:	2301      	movs	r3, #1
 8003c48:	9301      	str	r3, [sp, #4]
 8003c4a:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8003c4e:	9300      	str	r3, [sp, #0]
 8003c50:	2301      	movs	r3, #1
 8003c52:	2223      	movs	r2, #35	; 0x23
 8003c54:	21d0      	movs	r1, #208	; 0xd0
 8003c56:	68f8      	ldr	r0, [r7, #12]
 8003c58:	f003 fed2 	bl	8007a00 <HAL_I2C_Mem_Write>
	HAL_Delay(40); // accumulate 40 samples in 40 milliseconds = 480 bytes
 8003c5c:	2028      	movs	r0, #40	; 0x28
 8003c5e:	f002 fef1 	bl	8006a44 <HAL_Delay>

	// At end of sample accumulation, turn off FIFO sensor read
	writeData = 0x00;
 8003c62:	2300      	movs	r3, #0
 8003c64:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, FIFO_EN, 1, &writeData, 1, i2c_timeout);// Disable gyro and accelerometer sensors for FIFO
 8003c68:	2364      	movs	r3, #100	; 0x64
 8003c6a:	9302      	str	r3, [sp, #8]
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	9301      	str	r3, [sp, #4]
 8003c70:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8003c74:	9300      	str	r3, [sp, #0]
 8003c76:	2301      	movs	r3, #1
 8003c78:	2223      	movs	r2, #35	; 0x23
 8003c7a:	21d0      	movs	r1, #208	; 0xd0
 8003c7c:	68f8      	ldr	r0, [r7, #12]
 8003c7e:	f003 febf 	bl	8007a00 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, FIFO_COUNTH, 1, &calibData[0], 2, i2c_timeout);// read FIFO sample count
 8003c82:	2364      	movs	r3, #100	; 0x64
 8003c84:	9302      	str	r3, [sp, #8]
 8003c86:	2302      	movs	r3, #2
 8003c88:	9301      	str	r3, [sp, #4]
 8003c8a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003c8e:	9300      	str	r3, [sp, #0]
 8003c90:	2301      	movs	r3, #1
 8003c92:	2272      	movs	r2, #114	; 0x72
 8003c94:	21d0      	movs	r1, #208	; 0xd0
 8003c96:	68f8      	ldr	r0, [r7, #12]
 8003c98:	f003 ffac 	bl	8007bf4 <HAL_I2C_Mem_Read>
	fifo_count = ((uint16_t)calibData[0] << 8) | calibData[1];
 8003c9c:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8003ca0:	021b      	lsls	r3, r3, #8
 8003ca2:	b21a      	sxth	r2, r3
 8003ca4:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8003ca8:	b21b      	sxth	r3, r3
 8003caa:	4313      	orrs	r3, r2
 8003cac:	b21b      	sxth	r3, r3
 8003cae:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
	packet_count = fifo_count/12;// How many sets of full gyro and accelerometer data for averaging
 8003cb2:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8003cb6:	4a5a      	ldr	r2, [pc, #360]	; (8003e20 <calibrateMPU9250+0x3e8>)
 8003cb8:	fba2 2303 	umull	r2, r3, r2, r3
 8003cbc:	08db      	lsrs	r3, r3, #3
 8003cbe:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

	for (ii = 0; ii < packet_count; ii++) {
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 8003cc8:	e077      	b.n	8003dba <calibrateMPU9250+0x382>
		int16_t accel_temp[3] = {0, 0, 0}, gyro_temp[3] = {0, 0, 0};
 8003cca:	2300      	movs	r3, #0
 8003ccc:	833b      	strh	r3, [r7, #24]
 8003cce:	2300      	movs	r3, #0
 8003cd0:	837b      	strh	r3, [r7, #26]
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	83bb      	strh	r3, [r7, #28]
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	823b      	strh	r3, [r7, #16]
 8003cda:	2300      	movs	r3, #0
 8003cdc:	827b      	strh	r3, [r7, #18]
 8003cde:	2300      	movs	r3, #0
 8003ce0:	82bb      	strh	r3, [r7, #20]
		HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, FIFO_R_W, 1, &calibData[0], 12, i2c_timeout);
 8003ce2:	2364      	movs	r3, #100	; 0x64
 8003ce4:	9302      	str	r3, [sp, #8]
 8003ce6:	230c      	movs	r3, #12
 8003ce8:	9301      	str	r3, [sp, #4]
 8003cea:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003cee:	9300      	str	r3, [sp, #0]
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	2274      	movs	r2, #116	; 0x74
 8003cf4:	21d0      	movs	r1, #208	; 0xd0
 8003cf6:	68f8      	ldr	r0, [r7, #12]
 8003cf8:	f003 ff7c 	bl	8007bf4 <HAL_I2C_Mem_Read>

		//Form signed 16-bit integer for each sample in FIFO
		accel_temp[0] = (int16_t) (((int16_t)calibData[0] << 8) | calibData[1]  ) ;
 8003cfc:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8003d00:	021b      	lsls	r3, r3, #8
 8003d02:	b21a      	sxth	r2, r3
 8003d04:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8003d08:	b21b      	sxth	r3, r3
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	b21b      	sxth	r3, r3
 8003d0e:	833b      	strh	r3, [r7, #24]
		accel_temp[1] = (int16_t) (((int16_t)calibData[2] << 8) | calibData[3]  ) ;
 8003d10:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8003d14:	021b      	lsls	r3, r3, #8
 8003d16:	b21a      	sxth	r2, r3
 8003d18:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8003d1c:	b21b      	sxth	r3, r3
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	b21b      	sxth	r3, r3
 8003d22:	837b      	strh	r3, [r7, #26]
		accel_temp[2] = (int16_t) (((int16_t)calibData[4] << 8) | calibData[5]  ) ;
 8003d24:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8003d28:	021b      	lsls	r3, r3, #8
 8003d2a:	b21a      	sxth	r2, r3
 8003d2c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003d30:	b21b      	sxth	r3, r3
 8003d32:	4313      	orrs	r3, r2
 8003d34:	b21b      	sxth	r3, r3
 8003d36:	83bb      	strh	r3, [r7, #28]
		gyro_temp[0]  = (int16_t) (((int16_t)calibData[6] << 8) | calibData[7]  ) ;
 8003d38:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8003d3c:	021b      	lsls	r3, r3, #8
 8003d3e:	b21a      	sxth	r2, r3
 8003d40:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8003d44:	b21b      	sxth	r3, r3
 8003d46:	4313      	orrs	r3, r2
 8003d48:	b21b      	sxth	r3, r3
 8003d4a:	823b      	strh	r3, [r7, #16]
		gyro_temp[1]  = (int16_t) (((int16_t)calibData[8] << 8) | calibData[9]  ) ;
 8003d4c:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8003d50:	021b      	lsls	r3, r3, #8
 8003d52:	b21a      	sxth	r2, r3
 8003d54:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8003d58:	b21b      	sxth	r3, r3
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	b21b      	sxth	r3, r3
 8003d5e:	827b      	strh	r3, [r7, #18]
		gyro_temp[2]  = (int16_t) (((int16_t)calibData[10] << 8) | calibData[11]) ;
 8003d60:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8003d64:	021b      	lsls	r3, r3, #8
 8003d66:	b21a      	sxth	r2, r3
 8003d68:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8003d6c:	b21b      	sxth	r3, r3
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	b21b      	sxth	r3, r3
 8003d72:	82bb      	strh	r3, [r7, #20]

		//Sum individual signed 16-bit biases to get accumulated signed 32-bit biases
		accel_bias[0] += (int32_t) accel_temp[0];
 8003d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d76:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8003d7a:	4413      	add	r3, r2
 8003d7c:	633b      	str	r3, [r7, #48]	; 0x30
		accel_bias[1] += (int32_t) accel_temp[1];
 8003d7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d80:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8003d84:	4413      	add	r3, r2
 8003d86:	637b      	str	r3, [r7, #52]	; 0x34
		accel_bias[2] += (int32_t) accel_temp[2];
 8003d88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d8a:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8003d8e:	4413      	add	r3, r2
 8003d90:	63bb      	str	r3, [r7, #56]	; 0x38
		gyro_bias[0]  += (int32_t) gyro_temp[0];
 8003d92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d94:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8003d98:	4413      	add	r3, r2
 8003d9a:	63fb      	str	r3, [r7, #60]	; 0x3c
		gyro_bias[1]  += (int32_t) gyro_temp[1];
 8003d9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d9e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8003da2:	4413      	add	r3, r2
 8003da4:	643b      	str	r3, [r7, #64]	; 0x40
		gyro_bias[2]  += (int32_t) gyro_temp[2];
 8003da6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003da8:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8003dac:	4413      	add	r3, r2
 8003dae:	647b      	str	r3, [r7, #68]	; 0x44
	for (ii = 0; ii < packet_count; ii++) {
 8003db0:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8003db4:	3301      	adds	r3, #1
 8003db6:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 8003dba:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 8003dbe:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8003dc2:	429a      	cmp	r2, r3
 8003dc4:	d381      	bcc.n	8003cca <calibrateMPU9250+0x292>
	}

	//Normalize sums to get average count biases
	accel_bias[0] /= (int32_t) packet_count;
 8003dc6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003dc8:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8003dcc:	fb92 f3f3 	sdiv	r3, r2, r3
 8003dd0:	633b      	str	r3, [r7, #48]	; 0x30
	accel_bias[1] /= (int32_t) packet_count;
 8003dd2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003dd4:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8003dd8:	fb92 f3f3 	sdiv	r3, r2, r3
 8003ddc:	637b      	str	r3, [r7, #52]	; 0x34
	accel_bias[2] /= (int32_t) packet_count;
 8003dde:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003de0:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8003de4:	fb92 f3f3 	sdiv	r3, r2, r3
 8003de8:	63bb      	str	r3, [r7, #56]	; 0x38
	gyro_bias[0]  /= (int32_t) packet_count;
 8003dea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003dec:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8003df0:	fb92 f3f3 	sdiv	r3, r2, r3
 8003df4:	63fb      	str	r3, [r7, #60]	; 0x3c
	gyro_bias[1]  /= (int32_t) packet_count;
 8003df6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003df8:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8003dfc:	fb92 f3f3 	sdiv	r3, r2, r3
 8003e00:	643b      	str	r3, [r7, #64]	; 0x40
	gyro_bias[2]  /= (int32_t) packet_count;
 8003e02:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003e04:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8003e08:	fb92 f3f3 	sdiv	r3, r2, r3
 8003e0c:	647b      	str	r3, [r7, #68]	; 0x44

	//Remove gravity from the z-axis accelerometer bias calculation
	if(accel_bias[2] > 0L) {accel_bias[2] -= (int32_t) accelsensitivity;}
 8003e0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	dd07      	ble.n	8003e24 <calibrateMPU9250+0x3ec>
 8003e14:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003e16:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8003e1a:	1ad3      	subs	r3, r2, r3
 8003e1c:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e1e:	e006      	b.n	8003e2e <calibrateMPU9250+0x3f6>
 8003e20:	aaaaaaab 	.word	0xaaaaaaab
	else {accel_bias[2] += (int32_t) accelsensitivity;}
 8003e24:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003e26:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8003e2a:	4413      	add	r3, r2
 8003e2c:	63bb      	str	r3, [r7, #56]	; 0x38

	//Construct the gyro biases for push to the hardware gyro bias registers, which are reset to zero upon device startup
	calibData[0] = (-gyro_bias[0]/4  >> 8) & 0xFF; // Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input format
 8003e2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e30:	425b      	negs	r3, r3
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	da00      	bge.n	8003e38 <calibrateMPU9250+0x400>
 8003e36:	3303      	adds	r3, #3
 8003e38:	109b      	asrs	r3, r3, #2
 8003e3a:	121b      	asrs	r3, r3, #8
 8003e3c:	b2db      	uxtb	r3, r3
 8003e3e:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	calibData[1] = (-gyro_bias[0]/4)       & 0xFF; // Biases are additive, so change sign on calculated average gyro biases
 8003e42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e44:	425b      	negs	r3, r3
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	da00      	bge.n	8003e4c <calibrateMPU9250+0x414>
 8003e4a:	3303      	adds	r3, #3
 8003e4c:	109b      	asrs	r3, r3, #2
 8003e4e:	b2db      	uxtb	r3, r3
 8003e50:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
	calibData[2] = (-gyro_bias[1]/4  >> 8) & 0xFF;
 8003e54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e56:	425b      	negs	r3, r3
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	da00      	bge.n	8003e5e <calibrateMPU9250+0x426>
 8003e5c:	3303      	adds	r3, #3
 8003e5e:	109b      	asrs	r3, r3, #2
 8003e60:	121b      	asrs	r3, r3, #8
 8003e62:	b2db      	uxtb	r3, r3
 8003e64:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
	calibData[3] = (-gyro_bias[1]/4)       & 0xFF;
 8003e68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e6a:	425b      	negs	r3, r3
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	da00      	bge.n	8003e72 <calibrateMPU9250+0x43a>
 8003e70:	3303      	adds	r3, #3
 8003e72:	109b      	asrs	r3, r3, #2
 8003e74:	b2db      	uxtb	r3, r3
 8003e76:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	calibData[4] = (-gyro_bias[2]/4  >> 8) & 0xFF;
 8003e7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e7c:	425b      	negs	r3, r3
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	da00      	bge.n	8003e84 <calibrateMPU9250+0x44c>
 8003e82:	3303      	adds	r3, #3
 8003e84:	109b      	asrs	r3, r3, #2
 8003e86:	121b      	asrs	r3, r3, #8
 8003e88:	b2db      	uxtb	r3, r3
 8003e8a:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
	calibData[5] = (-gyro_bias[2]/4)       & 0xFF;
 8003e8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e90:	425b      	negs	r3, r3
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	da00      	bge.n	8003e98 <calibrateMPU9250+0x460>
 8003e96:	3303      	adds	r3, #3
 8003e98:	109b      	asrs	r3, r3, #2
 8003e9a:	b2db      	uxtb	r3, r3
 8003e9c:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

	//Push gyro biases to hardware registers
	writeData = calibData[0];
 8003ea0:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8003ea4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, XG_OFFSET_H, 1, &writeData, 1, i2c_timeout);
 8003ea8:	2364      	movs	r3, #100	; 0x64
 8003eaa:	9302      	str	r3, [sp, #8]
 8003eac:	2301      	movs	r3, #1
 8003eae:	9301      	str	r3, [sp, #4]
 8003eb0:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8003eb4:	9300      	str	r3, [sp, #0]
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	2213      	movs	r2, #19
 8003eba:	21d0      	movs	r1, #208	; 0xd0
 8003ebc:	68f8      	ldr	r0, [r7, #12]
 8003ebe:	f003 fd9f 	bl	8007a00 <HAL_I2C_Mem_Write>
	writeData = calibData[1];
 8003ec2:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8003ec6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, XG_OFFSET_L, 1, &writeData, 1, i2c_timeout);
 8003eca:	2364      	movs	r3, #100	; 0x64
 8003ecc:	9302      	str	r3, [sp, #8]
 8003ece:	2301      	movs	r3, #1
 8003ed0:	9301      	str	r3, [sp, #4]
 8003ed2:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8003ed6:	9300      	str	r3, [sp, #0]
 8003ed8:	2301      	movs	r3, #1
 8003eda:	2214      	movs	r2, #20
 8003edc:	21d0      	movs	r1, #208	; 0xd0
 8003ede:	68f8      	ldr	r0, [r7, #12]
 8003ee0:	f003 fd8e 	bl	8007a00 <HAL_I2C_Mem_Write>
	writeData = calibData[2];
 8003ee4:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8003ee8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, YG_OFFSET_H, 1, &writeData, 1, i2c_timeout);
 8003eec:	2364      	movs	r3, #100	; 0x64
 8003eee:	9302      	str	r3, [sp, #8]
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	9301      	str	r3, [sp, #4]
 8003ef4:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8003ef8:	9300      	str	r3, [sp, #0]
 8003efa:	2301      	movs	r3, #1
 8003efc:	2215      	movs	r2, #21
 8003efe:	21d0      	movs	r1, #208	; 0xd0
 8003f00:	68f8      	ldr	r0, [r7, #12]
 8003f02:	f003 fd7d 	bl	8007a00 <HAL_I2C_Mem_Write>
	writeData = calibData[3];
 8003f06:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8003f0a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, YG_OFFSET_L, 1, &writeData, 1, i2c_timeout);
 8003f0e:	2364      	movs	r3, #100	; 0x64
 8003f10:	9302      	str	r3, [sp, #8]
 8003f12:	2301      	movs	r3, #1
 8003f14:	9301      	str	r3, [sp, #4]
 8003f16:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8003f1a:	9300      	str	r3, [sp, #0]
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	2216      	movs	r2, #22
 8003f20:	21d0      	movs	r1, #208	; 0xd0
 8003f22:	68f8      	ldr	r0, [r7, #12]
 8003f24:	f003 fd6c 	bl	8007a00 <HAL_I2C_Mem_Write>
	writeData = calibData[4];
 8003f28:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8003f2c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ZG_OFFSET_H, 1, &writeData, 1, i2c_timeout);
 8003f30:	2364      	movs	r3, #100	; 0x64
 8003f32:	9302      	str	r3, [sp, #8]
 8003f34:	2301      	movs	r3, #1
 8003f36:	9301      	str	r3, [sp, #4]
 8003f38:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8003f3c:	9300      	str	r3, [sp, #0]
 8003f3e:	2301      	movs	r3, #1
 8003f40:	2217      	movs	r2, #23
 8003f42:	21d0      	movs	r1, #208	; 0xd0
 8003f44:	68f8      	ldr	r0, [r7, #12]
 8003f46:	f003 fd5b 	bl	8007a00 <HAL_I2C_Mem_Write>
	writeData = calibData[5];
 8003f4a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003f4e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ZG_OFFSET_L, 1, &writeData, 1, i2c_timeout);
 8003f52:	2364      	movs	r3, #100	; 0x64
 8003f54:	9302      	str	r3, [sp, #8]
 8003f56:	2301      	movs	r3, #1
 8003f58:	9301      	str	r3, [sp, #4]
 8003f5a:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8003f5e:	9300      	str	r3, [sp, #0]
 8003f60:	2301      	movs	r3, #1
 8003f62:	2218      	movs	r2, #24
 8003f64:	21d0      	movs	r1, #208	; 0xd0
 8003f66:	68f8      	ldr	r0, [r7, #12]
 8003f68:	f003 fd4a 	bl	8007a00 <HAL_I2C_Mem_Write>

	//Output scaled gyro biases for display in the main program
	dest1[0] = (float) gyro_bias[0]/(float) gyrosensitivity;
 8003f6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f6e:	ee07 3a90 	vmov	s15, r3
 8003f72:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003f76:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8003f7a:	ee07 3a90 	vmov	s15, r3
 8003f7e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003f82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	edc3 7a00 	vstr	s15, [r3]
	dest1[1] = (float) gyro_bias[1]/(float) gyrosensitivity;
 8003f8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f8e:	ee07 3a90 	vmov	s15, r3
 8003f92:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003f96:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8003f9a:	ee07 3a90 	vmov	s15, r3
 8003f9e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	3304      	adds	r3, #4
 8003fa6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003faa:	edc3 7a00 	vstr	s15, [r3]
	dest1[2] = (float) gyro_bias[2]/(float) gyrosensitivity;
 8003fae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003fb0:	ee07 3a90 	vmov	s15, r3
 8003fb4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003fb8:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8003fbc:	ee07 3a90 	vmov	s15, r3
 8003fc0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	3308      	adds	r3, #8
 8003fc8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003fcc:	edc3 7a00 	vstr	s15, [r3]

	if(SerialDebugA){
		float gyroBiasX = (float) gyro_bias[0]/(float) gyrosensitivity;
 8003fd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fd2:	ee07 3a90 	vmov	s15, r3
 8003fd6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003fda:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8003fde:	ee07 3a90 	vmov	s15, r3
 8003fe2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003fe6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003fea:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
		float gyroBiasY = (float) gyro_bias[1]/(float) gyrosensitivity;
 8003fee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ff0:	ee07 3a90 	vmov	s15, r3
 8003ff4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003ff8:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8003ffc:	ee07 3a90 	vmov	s15, r3
 8004000:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004004:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004008:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
		float gyroBiasZ = (float) gyro_bias[2]/(float) gyrosensitivity;
 800400c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800400e:	ee07 3a90 	vmov	s15, r3
 8004012:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004016:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 800401a:	ee07 3a90 	vmov	s15, r3
 800401e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004022:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004026:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68

		printf("Gyro bias X: %f\r\n", gyroBiasX); // @suppress("Float formatting support")
 800402a:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800402c:	f7fc faac 	bl	8000588 <__aeabi_f2d>
 8004030:	4602      	mov	r2, r0
 8004032:	460b      	mov	r3, r1
 8004034:	4833      	ldr	r0, [pc, #204]	; (8004104 <calibrateMPU9250+0x6cc>)
 8004036:	f007 f957 	bl	800b2e8 <iprintf>
		printf("Gyro bias Y: %f\r\n", gyroBiasY); // @suppress("Float formatting support")
 800403a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800403c:	f7fc faa4 	bl	8000588 <__aeabi_f2d>
 8004040:	4602      	mov	r2, r0
 8004042:	460b      	mov	r3, r1
 8004044:	4830      	ldr	r0, [pc, #192]	; (8004108 <calibrateMPU9250+0x6d0>)
 8004046:	f007 f94f 	bl	800b2e8 <iprintf>
		printf("Gyro bias Z: %f\r\n", gyroBiasZ); // @suppress("Float formatting support")
 800404a:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800404c:	f7fc fa9c 	bl	8000588 <__aeabi_f2d>
 8004050:	4602      	mov	r2, r0
 8004052:	460b      	mov	r3, r1
 8004054:	482d      	ldr	r0, [pc, #180]	; (800410c <calibrateMPU9250+0x6d4>)
 8004056:	f007 f947 	bl	800b2e8 <iprintf>

		printf("-------------------------\r\n");
 800405a:	482d      	ldr	r0, [pc, #180]	; (8004110 <calibrateMPU9250+0x6d8>)
 800405c:	f007 f9ca 	bl	800b3f4 <puts>
	}

	//Construct the accelerometer biases for push to the hardware accelerometer bias registers.
	int32_t accel_bias_reg[3] = {0, 0, 0}; //A place to hold the factory accelerometer trim biases
 8004060:	2300      	movs	r3, #0
 8004062:	627b      	str	r3, [r7, #36]	; 0x24
 8004064:	2300      	movs	r3, #0
 8004066:	62bb      	str	r3, [r7, #40]	; 0x28
 8004068:	2300      	movs	r3, #0
 800406a:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, XA_OFFSET_H, 1, &calibData[0], 2, i2c_timeout); //Read factory accelerometer trim values
 800406c:	2364      	movs	r3, #100	; 0x64
 800406e:	9302      	str	r3, [sp, #8]
 8004070:	2302      	movs	r3, #2
 8004072:	9301      	str	r3, [sp, #4]
 8004074:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004078:	9300      	str	r3, [sp, #0]
 800407a:	2301      	movs	r3, #1
 800407c:	2277      	movs	r2, #119	; 0x77
 800407e:	21d0      	movs	r1, #208	; 0xd0
 8004080:	68f8      	ldr	r0, [r7, #12]
 8004082:	f003 fdb7 	bl	8007bf4 <HAL_I2C_Mem_Read>
	accel_bias_reg[0] = (int32_t) (((int16_t)calibData[0] << 8) | calibData[1]);
 8004086:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800408a:	021b      	lsls	r3, r3, #8
 800408c:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 8004090:	4313      	orrs	r3, r2
 8004092:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, YA_OFFSET_H, 1, &calibData[0], 2, i2c_timeout);
 8004094:	2364      	movs	r3, #100	; 0x64
 8004096:	9302      	str	r3, [sp, #8]
 8004098:	2302      	movs	r3, #2
 800409a:	9301      	str	r3, [sp, #4]
 800409c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80040a0:	9300      	str	r3, [sp, #0]
 80040a2:	2301      	movs	r3, #1
 80040a4:	227a      	movs	r2, #122	; 0x7a
 80040a6:	21d0      	movs	r1, #208	; 0xd0
 80040a8:	68f8      	ldr	r0, [r7, #12]
 80040aa:	f003 fda3 	bl	8007bf4 <HAL_I2C_Mem_Read>
	accel_bias_reg[1] = (int32_t) (((int16_t)calibData[0] << 8) | calibData[1]);
 80040ae:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80040b2:	021b      	lsls	r3, r3, #8
 80040b4:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 80040b8:	4313      	orrs	r3, r2
 80040ba:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, ZA_OFFSET_H, 1, &calibData[0], 2, i2c_timeout);
 80040bc:	2364      	movs	r3, #100	; 0x64
 80040be:	9302      	str	r3, [sp, #8]
 80040c0:	2302      	movs	r3, #2
 80040c2:	9301      	str	r3, [sp, #4]
 80040c4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80040c8:	9300      	str	r3, [sp, #0]
 80040ca:	2301      	movs	r3, #1
 80040cc:	227d      	movs	r2, #125	; 0x7d
 80040ce:	21d0      	movs	r1, #208	; 0xd0
 80040d0:	68f8      	ldr	r0, [r7, #12]
 80040d2:	f003 fd8f 	bl	8007bf4 <HAL_I2C_Mem_Read>
	accel_bias_reg[2] = (int32_t) (((int16_t)calibData[0] << 8) | calibData[1]);
 80040d6:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80040da:	021b      	lsls	r3, r3, #8
 80040dc:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 80040e0:	4313      	orrs	r3, r2
 80040e2:	62fb      	str	r3, [r7, #44]	; 0x2c

	//Define mask for temperature compensation bit 0 of lower byte of accelerometer bias registers
	uint32_t mask = 1uL;
 80040e4:	2301      	movs	r3, #1
 80040e6:	667b      	str	r3, [r7, #100]	; 0x64
	//Define array to hold mask bit for each accelerometer bias axis
	uint8_t mask_bit[3] = {0, 0, 0};
 80040e8:	4a0a      	ldr	r2, [pc, #40]	; (8004114 <calibrateMPU9250+0x6dc>)
 80040ea:	f107 0320 	add.w	r3, r7, #32
 80040ee:	6812      	ldr	r2, [r2, #0]
 80040f0:	4611      	mov	r1, r2
 80040f2:	8019      	strh	r1, [r3, #0]
 80040f4:	3302      	adds	r3, #2
 80040f6:	0c12      	lsrs	r2, r2, #16
 80040f8:	701a      	strb	r2, [r3, #0]

	for(ii = 0; ii < 3; ii++) {
 80040fa:	2300      	movs	r3, #0
 80040fc:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 8004100:	e022      	b.n	8004148 <calibrateMPU9250+0x710>
 8004102:	bf00      	nop
 8004104:	0800fb7c 	.word	0x0800fb7c
 8004108:	0800fb90 	.word	0x0800fb90
 800410c:	0800fba4 	.word	0x0800fba4
 8004110:	0800facc 	.word	0x0800facc
 8004114:	0800fbf4 	.word	0x0800fbf4
		//If temperature compensation bit is set, record that fact in mask_bit
		if((accel_bias_reg[ii] & mask)) mask_bit[ii] = 0x01;
 8004118:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800411c:	009b      	lsls	r3, r3, #2
 800411e:	3380      	adds	r3, #128	; 0x80
 8004120:	443b      	add	r3, r7
 8004122:	f853 3c5c 	ldr.w	r3, [r3, #-92]
 8004126:	461a      	mov	r2, r3
 8004128:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800412a:	4013      	ands	r3, r2
 800412c:	2b00      	cmp	r3, #0
 800412e:	d006      	beq.n	800413e <calibrateMPU9250+0x706>
 8004130:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8004134:	3380      	adds	r3, #128	; 0x80
 8004136:	443b      	add	r3, r7
 8004138:	2201      	movs	r2, #1
 800413a:	f803 2c60 	strb.w	r2, [r3, #-96]
	for(ii = 0; ii < 3; ii++) {
 800413e:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8004142:	3301      	adds	r3, #1
 8004144:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 8004148:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800414c:	2b02      	cmp	r3, #2
 800414e:	d9e3      	bls.n	8004118 <calibrateMPU9250+0x6e0>
	}

	//Construct total accelerometer bias, including calculated average accelerometer bias from above
	accel_bias_reg[0] -= (accel_bias[0]/8); //Subtract calculated averaged accelerometer bias scaled to 2048 LSB/g (16 g full scale)
 8004150:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004154:	2b00      	cmp	r3, #0
 8004156:	da00      	bge.n	800415a <calibrateMPU9250+0x722>
 8004158:	3307      	adds	r3, #7
 800415a:	10db      	asrs	r3, r3, #3
 800415c:	425b      	negs	r3, r3
 800415e:	4413      	add	r3, r2
 8004160:	627b      	str	r3, [r7, #36]	; 0x24
	accel_bias_reg[1] -= (accel_bias[1]/8);
 8004162:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004164:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004166:	2b00      	cmp	r3, #0
 8004168:	da00      	bge.n	800416c <calibrateMPU9250+0x734>
 800416a:	3307      	adds	r3, #7
 800416c:	10db      	asrs	r3, r3, #3
 800416e:	425b      	negs	r3, r3
 8004170:	4413      	add	r3, r2
 8004172:	62bb      	str	r3, [r7, #40]	; 0x28
	accel_bias_reg[2] -= (accel_bias[2]/8);
 8004174:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004178:	2b00      	cmp	r3, #0
 800417a:	da00      	bge.n	800417e <calibrateMPU9250+0x746>
 800417c:	3307      	adds	r3, #7
 800417e:	10db      	asrs	r3, r3, #3
 8004180:	425b      	negs	r3, r3
 8004182:	4413      	add	r3, r2
 8004184:	62fb      	str	r3, [r7, #44]	; 0x2c

	calibData[0] = (accel_bias_reg[0] >> 8) & 0xFF;
 8004186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004188:	121b      	asrs	r3, r3, #8
 800418a:	b2db      	uxtb	r3, r3
 800418c:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	calibData[1] = (accel_bias_reg[0])      & 0xFF;
 8004190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004192:	b2db      	uxtb	r3, r3
 8004194:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
	calibData[1] = calibData[1] | mask_bit[0]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 8004198:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 800419c:	f897 3020 	ldrb.w	r3, [r7, #32]
 80041a0:	4313      	orrs	r3, r2
 80041a2:	b2db      	uxtb	r3, r3
 80041a4:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
	calibData[2] = (accel_bias_reg[1] >> 8) & 0xFF;
 80041a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041aa:	121b      	asrs	r3, r3, #8
 80041ac:	b2db      	uxtb	r3, r3
 80041ae:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
	calibData[3] = (accel_bias_reg[1])      & 0xFF;
 80041b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041b4:	b2db      	uxtb	r3, r3
 80041b6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	calibData[3] = calibData[3] | mask_bit[1]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 80041ba:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 80041be:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80041c2:	4313      	orrs	r3, r2
 80041c4:	b2db      	uxtb	r3, r3
 80041c6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	calibData[4] = (accel_bias_reg[2] >> 8) & 0xFF;
 80041ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041cc:	121b      	asrs	r3, r3, #8
 80041ce:	b2db      	uxtb	r3, r3
 80041d0:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
	calibData[5] = (accel_bias_reg[2])      & 0xFF;
 80041d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041d6:	b2db      	uxtb	r3, r3
 80041d8:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	calibData[5] = calibData[5] | mask_bit[2]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 80041dc:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 80041e0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80041e4:	4313      	orrs	r3, r2
 80041e6:	b2db      	uxtb	r3, r3
 80041e8:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

	//Push accelerometer biases to hardware registers
	writeData = calibData[0];
 80041ec:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80041f0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, XA_OFFSET_H, 1, &writeData, 1, i2c_timeout);
 80041f4:	2364      	movs	r3, #100	; 0x64
 80041f6:	9302      	str	r3, [sp, #8]
 80041f8:	2301      	movs	r3, #1
 80041fa:	9301      	str	r3, [sp, #4]
 80041fc:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8004200:	9300      	str	r3, [sp, #0]
 8004202:	2301      	movs	r3, #1
 8004204:	2277      	movs	r2, #119	; 0x77
 8004206:	21d0      	movs	r1, #208	; 0xd0
 8004208:	68f8      	ldr	r0, [r7, #12]
 800420a:	f003 fbf9 	bl	8007a00 <HAL_I2C_Mem_Write>
	writeData = calibData[1];
 800420e:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8004212:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, XA_OFFSET_L, 1, &writeData, 1, i2c_timeout);
 8004216:	2364      	movs	r3, #100	; 0x64
 8004218:	9302      	str	r3, [sp, #8]
 800421a:	2301      	movs	r3, #1
 800421c:	9301      	str	r3, [sp, #4]
 800421e:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8004222:	9300      	str	r3, [sp, #0]
 8004224:	2301      	movs	r3, #1
 8004226:	2278      	movs	r2, #120	; 0x78
 8004228:	21d0      	movs	r1, #208	; 0xd0
 800422a:	68f8      	ldr	r0, [r7, #12]
 800422c:	f003 fbe8 	bl	8007a00 <HAL_I2C_Mem_Write>
	writeData = calibData[2];
 8004230:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8004234:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, YA_OFFSET_H, 1, &writeData, 1, i2c_timeout);
 8004238:	2364      	movs	r3, #100	; 0x64
 800423a:	9302      	str	r3, [sp, #8]
 800423c:	2301      	movs	r3, #1
 800423e:	9301      	str	r3, [sp, #4]
 8004240:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8004244:	9300      	str	r3, [sp, #0]
 8004246:	2301      	movs	r3, #1
 8004248:	227a      	movs	r2, #122	; 0x7a
 800424a:	21d0      	movs	r1, #208	; 0xd0
 800424c:	68f8      	ldr	r0, [r7, #12]
 800424e:	f003 fbd7 	bl	8007a00 <HAL_I2C_Mem_Write>
	writeData = calibData[3];
 8004252:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8004256:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, YA_OFFSET_L, 1, &writeData, 1, i2c_timeout);
 800425a:	2364      	movs	r3, #100	; 0x64
 800425c:	9302      	str	r3, [sp, #8]
 800425e:	2301      	movs	r3, #1
 8004260:	9301      	str	r3, [sp, #4]
 8004262:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8004266:	9300      	str	r3, [sp, #0]
 8004268:	2301      	movs	r3, #1
 800426a:	227b      	movs	r2, #123	; 0x7b
 800426c:	21d0      	movs	r1, #208	; 0xd0
 800426e:	68f8      	ldr	r0, [r7, #12]
 8004270:	f003 fbc6 	bl	8007a00 <HAL_I2C_Mem_Write>
	writeData = calibData[4];
 8004274:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8004278:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ZA_OFFSET_H, 1, &writeData, 1, i2c_timeout);
 800427c:	2364      	movs	r3, #100	; 0x64
 800427e:	9302      	str	r3, [sp, #8]
 8004280:	2301      	movs	r3, #1
 8004282:	9301      	str	r3, [sp, #4]
 8004284:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8004288:	9300      	str	r3, [sp, #0]
 800428a:	2301      	movs	r3, #1
 800428c:	227d      	movs	r2, #125	; 0x7d
 800428e:	21d0      	movs	r1, #208	; 0xd0
 8004290:	68f8      	ldr	r0, [r7, #12]
 8004292:	f003 fbb5 	bl	8007a00 <HAL_I2C_Mem_Write>
	writeData = calibData[5];
 8004296:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800429a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ZA_OFFSET_L, 1, &writeData, 1, i2c_timeout);
 800429e:	2364      	movs	r3, #100	; 0x64
 80042a0:	9302      	str	r3, [sp, #8]
 80042a2:	2301      	movs	r3, #1
 80042a4:	9301      	str	r3, [sp, #4]
 80042a6:	f107 0357 	add.w	r3, r7, #87	; 0x57
 80042aa:	9300      	str	r3, [sp, #0]
 80042ac:	2301      	movs	r3, #1
 80042ae:	227e      	movs	r2, #126	; 0x7e
 80042b0:	21d0      	movs	r1, #208	; 0xd0
 80042b2:	68f8      	ldr	r0, [r7, #12]
 80042b4:	f003 fba4 	bl	8007a00 <HAL_I2C_Mem_Write>

	//Output scaled gyro biases for display in the main program
	dest2[0] = (float) accel_bias[0]/(float) accelsensitivity;
 80042b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ba:	ee07 3a90 	vmov	s15, r3
 80042be:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80042c2:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80042c6:	ee07 3a90 	vmov	s15, r3
 80042ca:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80042ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	edc3 7a00 	vstr	s15, [r3]
	dest2[1] = (float) accel_bias[1]/(float) accelsensitivity;
 80042d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042da:	ee07 3a90 	vmov	s15, r3
 80042de:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80042e2:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80042e6:	ee07 3a90 	vmov	s15, r3
 80042ea:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	3304      	adds	r3, #4
 80042f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80042f6:	edc3 7a00 	vstr	s15, [r3]
	dest2[2] = (float) accel_bias[2]/(float) accelsensitivity;
 80042fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042fc:	ee07 3a90 	vmov	s15, r3
 8004300:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004304:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8004308:	ee07 3a90 	vmov	s15, r3
 800430c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	3308      	adds	r3, #8
 8004314:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004318:	edc3 7a00 	vstr	s15, [r3]

	if(SerialDebugA){
		float accelBiasX = (float) accel_bias[0]/(float) accelsensitivity;
 800431c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800431e:	ee07 3a90 	vmov	s15, r3
 8004322:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004326:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800432a:	ee07 3a90 	vmov	s15, r3
 800432e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004332:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004336:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
		float accelBiasY = (float) accel_bias[1]/(float) accelsensitivity;
 800433a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800433c:	ee07 3a90 	vmov	s15, r3
 8004340:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004344:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8004348:	ee07 3a90 	vmov	s15, r3
 800434c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004350:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004354:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
		float accelBiasZ = (float) accel_bias[2]/(float) accelsensitivity;
 8004358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800435a:	ee07 3a90 	vmov	s15, r3
 800435e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004362:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8004366:	ee07 3a90 	vmov	s15, r3
 800436a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800436e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004372:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58

		printf("Accel bias X: %f\r\n", accelBiasX); // @suppress("Float formatting support")
 8004376:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8004378:	f7fc f906 	bl	8000588 <__aeabi_f2d>
 800437c:	4602      	mov	r2, r0
 800437e:	460b      	mov	r3, r1
 8004380:	480c      	ldr	r0, [pc, #48]	; (80043b4 <calibrateMPU9250+0x97c>)
 8004382:	f006 ffb1 	bl	800b2e8 <iprintf>
		printf("Accel bias Y: %f\r\n", accelBiasY); // @suppress("Float formatting support")
 8004386:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8004388:	f7fc f8fe 	bl	8000588 <__aeabi_f2d>
 800438c:	4602      	mov	r2, r0
 800438e:	460b      	mov	r3, r1
 8004390:	4809      	ldr	r0, [pc, #36]	; (80043b8 <calibrateMPU9250+0x980>)
 8004392:	f006 ffa9 	bl	800b2e8 <iprintf>
		printf("Accel bias Z: %f\r\n", accelBiasZ); // @suppress("Float formatting support")
 8004396:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8004398:	f7fc f8f6 	bl	8000588 <__aeabi_f2d>
 800439c:	4602      	mov	r2, r0
 800439e:	460b      	mov	r3, r1
 80043a0:	4806      	ldr	r0, [pc, #24]	; (80043bc <calibrateMPU9250+0x984>)
 80043a2:	f006 ffa1 	bl	800b2e8 <iprintf>

		printf("-------------------------\r\n");
 80043a6:	4806      	ldr	r0, [pc, #24]	; (80043c0 <calibrateMPU9250+0x988>)
 80043a8:	f007 f824 	bl	800b3f4 <puts>
	}
}
 80043ac:	bf00      	nop
 80043ae:	3780      	adds	r7, #128	; 0x80
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bd80      	pop	{r7, pc}
 80043b4:	0800fbb8 	.word	0x0800fbb8
 80043b8:	0800fbcc 	.word	0x0800fbcc
 80043bc:	0800fbe0 	.word	0x0800fbe0
 80043c0:	0800facc 	.word	0x0800facc
 80043c4:	00000000 	.word	0x00000000

080043c8 <MPU9250SelfTest>:


// Accelerometer and gyroscope self test; check calibration wrt factory settings
void MPU9250SelfTest(I2C_HandleTypeDef *I2Cx, float * destination) {
 80043c8:	b5b0      	push	{r4, r5, r7, lr}
 80043ca:	b0b0      	sub	sp, #192	; 0xc0
 80043cc:	af04      	add	r7, sp, #16
 80043ce:	6078      	str	r0, [r7, #4]
 80043d0:	6039      	str	r1, [r7, #0]
	uint8_t writeData;

	uint8_t rawTestData[6] = {0, 0, 0, 0, 0, 0};
 80043d2:	4aa2      	ldr	r2, [pc, #648]	; (800465c <MPU9250SelfTest+0x294>)
 80043d4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80043d8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80043dc:	6018      	str	r0, [r3, #0]
 80043de:	3304      	adds	r3, #4
 80043e0:	8019      	strh	r1, [r3, #0]
	uint8_t selfTest[6];
	int32_t gAvg[3] = {0}, aAvg[3] = {0}, aSTAvg[3] = {0}, gSTAvg[3] = {0};
 80043e2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80043e6:	2200      	movs	r2, #0
 80043e8:	601a      	str	r2, [r3, #0]
 80043ea:	605a      	str	r2, [r3, #4]
 80043ec:	609a      	str	r2, [r3, #8]
 80043ee:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80043f2:	2200      	movs	r2, #0
 80043f4:	601a      	str	r2, [r3, #0]
 80043f6:	605a      	str	r2, [r3, #4]
 80043f8:	609a      	str	r2, [r3, #8]
 80043fa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80043fe:	2200      	movs	r2, #0
 8004400:	601a      	str	r2, [r3, #0]
 8004402:	605a      	str	r2, [r3, #4]
 8004404:	609a      	str	r2, [r3, #8]
 8004406:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800440a:	2200      	movs	r2, #0
 800440c:	601a      	str	r2, [r3, #0]
 800440e:	605a      	str	r2, [r3, #4]
 8004410:	609a      	str	r2, [r3, #8]
	float factoryTrim[6];
	uint8_t FS = 0;
 8004412:	2300      	movs	r3, #0
 8004414:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

	writeData = 0x00;
 8004418:	2300      	movs	r3, #0
 800441a:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, SMPLRT_DIV, 1, &writeData, 1, i2c_timeout);// Set gyro sample rate to 1 kHz
 800441e:	2364      	movs	r3, #100	; 0x64
 8004420:	9302      	str	r3, [sp, #8]
 8004422:	2301      	movs	r3, #1
 8004424:	9301      	str	r3, [sp, #4]
 8004426:	f107 037b 	add.w	r3, r7, #123	; 0x7b
 800442a:	9300      	str	r3, [sp, #0]
 800442c:	2301      	movs	r3, #1
 800442e:	2219      	movs	r2, #25
 8004430:	21d0      	movs	r1, #208	; 0xd0
 8004432:	6878      	ldr	r0, [r7, #4]
 8004434:	f003 fae4 	bl	8007a00 <HAL_I2C_Mem_Write>
	writeData = 0x02;
 8004438:	2302      	movs	r3, #2
 800443a:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, CONFIG, 1, &writeData, 1, i2c_timeout);// Set gyro sample rate to 1 kHz and DLPF to 92 Hz
 800443e:	2364      	movs	r3, #100	; 0x64
 8004440:	9302      	str	r3, [sp, #8]
 8004442:	2301      	movs	r3, #1
 8004444:	9301      	str	r3, [sp, #4]
 8004446:	f107 037b 	add.w	r3, r7, #123	; 0x7b
 800444a:	9300      	str	r3, [sp, #0]
 800444c:	2301      	movs	r3, #1
 800444e:	221a      	movs	r2, #26
 8004450:	21d0      	movs	r1, #208	; 0xd0
 8004452:	6878      	ldr	r0, [r7, #4]
 8004454:	f003 fad4 	bl	8007a00 <HAL_I2C_Mem_Write>
	writeData = FS<<3;
 8004458:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800445c:	00db      	lsls	r3, r3, #3
 800445e:	b2db      	uxtb	r3, r3
 8004460:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, GYRO_CONFIG, 1, &writeData, 1, i2c_timeout);// Set full scale range for the gyro to 250 dps
 8004464:	2364      	movs	r3, #100	; 0x64
 8004466:	9302      	str	r3, [sp, #8]
 8004468:	2301      	movs	r3, #1
 800446a:	9301      	str	r3, [sp, #4]
 800446c:	f107 037b 	add.w	r3, r7, #123	; 0x7b
 8004470:	9300      	str	r3, [sp, #0]
 8004472:	2301      	movs	r3, #1
 8004474:	221b      	movs	r2, #27
 8004476:	21d0      	movs	r1, #208	; 0xd0
 8004478:	6878      	ldr	r0, [r7, #4]
 800447a:	f003 fac1 	bl	8007a00 <HAL_I2C_Mem_Write>
	writeData = 0x02;
 800447e:	2302      	movs	r3, #2
 8004480:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ACCEL_CONFIG2, 1, &writeData, 1, i2c_timeout);// Set accelerometer rate to 1 kHz and bandwidth to 92 Hz
 8004484:	2364      	movs	r3, #100	; 0x64
 8004486:	9302      	str	r3, [sp, #8]
 8004488:	2301      	movs	r3, #1
 800448a:	9301      	str	r3, [sp, #4]
 800448c:	f107 037b 	add.w	r3, r7, #123	; 0x7b
 8004490:	9300      	str	r3, [sp, #0]
 8004492:	2301      	movs	r3, #1
 8004494:	221d      	movs	r2, #29
 8004496:	21d0      	movs	r1, #208	; 0xd0
 8004498:	6878      	ldr	r0, [r7, #4]
 800449a:	f003 fab1 	bl	8007a00 <HAL_I2C_Mem_Write>
	writeData = FS<<3;
 800449e:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80044a2:	00db      	lsls	r3, r3, #3
 80044a4:	b2db      	uxtb	r3, r3
 80044a6:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ACCEL_CONFIG, 1, &writeData, 1, i2c_timeout);// Set full scale range for the accelerometer to 2 g
 80044aa:	2364      	movs	r3, #100	; 0x64
 80044ac:	9302      	str	r3, [sp, #8]
 80044ae:	2301      	movs	r3, #1
 80044b0:	9301      	str	r3, [sp, #4]
 80044b2:	f107 037b 	add.w	r3, r7, #123	; 0x7b
 80044b6:	9300      	str	r3, [sp, #0]
 80044b8:	2301      	movs	r3, #1
 80044ba:	221c      	movs	r2, #28
 80044bc:	21d0      	movs	r1, #208	; 0xd0
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	f003 fa9e 	bl	8007a00 <HAL_I2C_Mem_Write>

	//get average current values of gyro and acclerometer
	for( int ii = 0; ii < 200; ii++) {
 80044c4:	2300      	movs	r3, #0
 80044c6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80044ca:	e066      	b.n	800459a <MPU9250SelfTest+0x1d2>

		HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, ACCEL_XOUT_H, 1, &rawTestData[0], 6, i2c_timeout);// Read the six raw data registers into data array
 80044cc:	2364      	movs	r3, #100	; 0x64
 80044ce:	9302      	str	r3, [sp, #8]
 80044d0:	2306      	movs	r3, #6
 80044d2:	9301      	str	r3, [sp, #4]
 80044d4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80044d8:	9300      	str	r3, [sp, #0]
 80044da:	2301      	movs	r3, #1
 80044dc:	223b      	movs	r2, #59	; 0x3b
 80044de:	21d0      	movs	r1, #208	; 0xd0
 80044e0:	6878      	ldr	r0, [r7, #4]
 80044e2:	f003 fb87 	bl	8007bf4 <HAL_I2C_Mem_Read>
		aAvg[0] += (int16_t)(((int16_t)rawTestData[0] << 8) | rawTestData[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
 80044e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044e8:	f897 2074 	ldrb.w	r2, [r7, #116]	; 0x74
 80044ec:	0212      	lsls	r2, r2, #8
 80044ee:	b211      	sxth	r1, r2
 80044f0:	f897 2075 	ldrb.w	r2, [r7, #117]	; 0x75
 80044f4:	b212      	sxth	r2, r2
 80044f6:	430a      	orrs	r2, r1
 80044f8:	b212      	sxth	r2, r2
 80044fa:	4413      	add	r3, r2
 80044fc:	657b      	str	r3, [r7, #84]	; 0x54
		aAvg[1] += (int16_t)(((int16_t)rawTestData[2] << 8) | rawTestData[3]) ;
 80044fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004500:	f897 2076 	ldrb.w	r2, [r7, #118]	; 0x76
 8004504:	0212      	lsls	r2, r2, #8
 8004506:	b211      	sxth	r1, r2
 8004508:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 800450c:	b212      	sxth	r2, r2
 800450e:	430a      	orrs	r2, r1
 8004510:	b212      	sxth	r2, r2
 8004512:	4413      	add	r3, r2
 8004514:	65bb      	str	r3, [r7, #88]	; 0x58
		aAvg[2] += (int16_t)(((int16_t)rawTestData[4] << 8) | rawTestData[5]) ;
 8004516:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004518:	f897 2078 	ldrb.w	r2, [r7, #120]	; 0x78
 800451c:	0212      	lsls	r2, r2, #8
 800451e:	b211      	sxth	r1, r2
 8004520:	f897 2079 	ldrb.w	r2, [r7, #121]	; 0x79
 8004524:	b212      	sxth	r2, r2
 8004526:	430a      	orrs	r2, r1
 8004528:	b212      	sxth	r2, r2
 800452a:	4413      	add	r3, r2
 800452c:	65fb      	str	r3, [r7, #92]	; 0x5c

		HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, GYRO_XOUT_H, 1, &rawTestData[0], 6, i2c_timeout);// Read the six raw data registers sequentially into data array
 800452e:	2364      	movs	r3, #100	; 0x64
 8004530:	9302      	str	r3, [sp, #8]
 8004532:	2306      	movs	r3, #6
 8004534:	9301      	str	r3, [sp, #4]
 8004536:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800453a:	9300      	str	r3, [sp, #0]
 800453c:	2301      	movs	r3, #1
 800453e:	2243      	movs	r2, #67	; 0x43
 8004540:	21d0      	movs	r1, #208	; 0xd0
 8004542:	6878      	ldr	r0, [r7, #4]
 8004544:	f003 fb56 	bl	8007bf4 <HAL_I2C_Mem_Read>
		gAvg[0] += (int16_t)(((int16_t)rawTestData[0] << 8) | rawTestData[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
 8004548:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800454a:	f897 2074 	ldrb.w	r2, [r7, #116]	; 0x74
 800454e:	0212      	lsls	r2, r2, #8
 8004550:	b211      	sxth	r1, r2
 8004552:	f897 2075 	ldrb.w	r2, [r7, #117]	; 0x75
 8004556:	b212      	sxth	r2, r2
 8004558:	430a      	orrs	r2, r1
 800455a:	b212      	sxth	r2, r2
 800455c:	4413      	add	r3, r2
 800455e:	663b      	str	r3, [r7, #96]	; 0x60
		gAvg[1] += (int16_t)(((int16_t)rawTestData[2] << 8) | rawTestData[3]) ;
 8004560:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004562:	f897 2076 	ldrb.w	r2, [r7, #118]	; 0x76
 8004566:	0212      	lsls	r2, r2, #8
 8004568:	b211      	sxth	r1, r2
 800456a:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 800456e:	b212      	sxth	r2, r2
 8004570:	430a      	orrs	r2, r1
 8004572:	b212      	sxth	r2, r2
 8004574:	4413      	add	r3, r2
 8004576:	667b      	str	r3, [r7, #100]	; 0x64
		gAvg[2] += (int16_t)(((int16_t)rawTestData[4] << 8) | rawTestData[5]) ;
 8004578:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800457a:	f897 2078 	ldrb.w	r2, [r7, #120]	; 0x78
 800457e:	0212      	lsls	r2, r2, #8
 8004580:	b211      	sxth	r1, r2
 8004582:	f897 2079 	ldrb.w	r2, [r7, #121]	; 0x79
 8004586:	b212      	sxth	r2, r2
 8004588:	430a      	orrs	r2, r1
 800458a:	b212      	sxth	r2, r2
 800458c:	4413      	add	r3, r2
 800458e:	66bb      	str	r3, [r7, #104]	; 0x68
	for( int ii = 0; ii < 200; ii++) {
 8004590:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004594:	3301      	adds	r3, #1
 8004596:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800459a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800459e:	2bc7      	cmp	r3, #199	; 0xc7
 80045a0:	dd94      	ble.n	80044cc <MPU9250SelfTest+0x104>
	}

	//Get average of 200 values and store as average current readings
	for (int ii =0; ii < 3; ii++) {
 80045a2:	2300      	movs	r3, #0
 80045a4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80045a8:	e02c      	b.n	8004604 <MPU9250SelfTest+0x23c>
		aAvg[ii] /= 200;
 80045aa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80045ae:	009b      	lsls	r3, r3, #2
 80045b0:	33b0      	adds	r3, #176	; 0xb0
 80045b2:	443b      	add	r3, r7
 80045b4:	f853 3c5c 	ldr.w	r3, [r3, #-92]
 80045b8:	4a29      	ldr	r2, [pc, #164]	; (8004660 <MPU9250SelfTest+0x298>)
 80045ba:	fb82 1203 	smull	r1, r2, r2, r3
 80045be:	1192      	asrs	r2, r2, #6
 80045c0:	17db      	asrs	r3, r3, #31
 80045c2:	1ad2      	subs	r2, r2, r3
 80045c4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80045c8:	009b      	lsls	r3, r3, #2
 80045ca:	33b0      	adds	r3, #176	; 0xb0
 80045cc:	443b      	add	r3, r7
 80045ce:	f843 2c5c 	str.w	r2, [r3, #-92]
		gAvg[ii] /= 200;
 80045d2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80045d6:	009b      	lsls	r3, r3, #2
 80045d8:	33b0      	adds	r3, #176	; 0xb0
 80045da:	443b      	add	r3, r7
 80045dc:	f853 3c50 	ldr.w	r3, [r3, #-80]
 80045e0:	4a1f      	ldr	r2, [pc, #124]	; (8004660 <MPU9250SelfTest+0x298>)
 80045e2:	fb82 1203 	smull	r1, r2, r2, r3
 80045e6:	1192      	asrs	r2, r2, #6
 80045e8:	17db      	asrs	r3, r3, #31
 80045ea:	1ad2      	subs	r2, r2, r3
 80045ec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80045f0:	009b      	lsls	r3, r3, #2
 80045f2:	33b0      	adds	r3, #176	; 0xb0
 80045f4:	443b      	add	r3, r7
 80045f6:	f843 2c50 	str.w	r2, [r3, #-80]
	for (int ii =0; ii < 3; ii++) {
 80045fa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80045fe:	3301      	adds	r3, #1
 8004600:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004604:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004608:	2b02      	cmp	r3, #2
 800460a:	ddce      	ble.n	80045aa <MPU9250SelfTest+0x1e2>
	}

	//Configure the accelerometer for self-test
	writeData = 0xE0;
 800460c:	23e0      	movs	r3, #224	; 0xe0
 800460e:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ACCEL_CONFIG, 1, &writeData, 1, i2c_timeout);// Enable self test on all three axes and set accelerometer range to +/- 2 g
 8004612:	2364      	movs	r3, #100	; 0x64
 8004614:	9302      	str	r3, [sp, #8]
 8004616:	2301      	movs	r3, #1
 8004618:	9301      	str	r3, [sp, #4]
 800461a:	f107 037b 	add.w	r3, r7, #123	; 0x7b
 800461e:	9300      	str	r3, [sp, #0]
 8004620:	2301      	movs	r3, #1
 8004622:	221c      	movs	r2, #28
 8004624:	21d0      	movs	r1, #208	; 0xd0
 8004626:	6878      	ldr	r0, [r7, #4]
 8004628:	f003 f9ea 	bl	8007a00 <HAL_I2C_Mem_Write>
	writeData = 0xE0;
 800462c:	23e0      	movs	r3, #224	; 0xe0
 800462e:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, GYRO_CONFIG, 1, &writeData, 1, i2c_timeout);// Enable self test on all three axes and set gyro range to +/- 250 degrees/s
 8004632:	2364      	movs	r3, #100	; 0x64
 8004634:	9302      	str	r3, [sp, #8]
 8004636:	2301      	movs	r3, #1
 8004638:	9301      	str	r3, [sp, #4]
 800463a:	f107 037b 	add.w	r3, r7, #123	; 0x7b
 800463e:	9300      	str	r3, [sp, #0]
 8004640:	2301      	movs	r3, #1
 8004642:	221b      	movs	r2, #27
 8004644:	21d0      	movs	r1, #208	; 0xd0
 8004646:	6878      	ldr	r0, [r7, #4]
 8004648:	f003 f9da 	bl	8007a00 <HAL_I2C_Mem_Write>
	HAL_Delay(25);  // Delay a while to let the device stabilize
 800464c:	2019      	movs	r0, #25
 800464e:	f002 f9f9 	bl	8006a44 <HAL_Delay>

	//get average self-test values of gyro and acclerometer
	for( int ii = 0; ii < 200; ii++) {
 8004652:	2300      	movs	r3, #0
 8004654:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004658:	e06b      	b.n	8004732 <MPU9250SelfTest+0x36a>
 800465a:	bf00      	nop
 800465c:	0800fc70 	.word	0x0800fc70
 8004660:	51eb851f 	.word	0x51eb851f

		HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, ACCEL_XOUT_H, 1, &rawTestData[0], 6, i2c_timeout);// Read the six raw data registers into data array
 8004664:	2364      	movs	r3, #100	; 0x64
 8004666:	9302      	str	r3, [sp, #8]
 8004668:	2306      	movs	r3, #6
 800466a:	9301      	str	r3, [sp, #4]
 800466c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004670:	9300      	str	r3, [sp, #0]
 8004672:	2301      	movs	r3, #1
 8004674:	223b      	movs	r2, #59	; 0x3b
 8004676:	21d0      	movs	r1, #208	; 0xd0
 8004678:	6878      	ldr	r0, [r7, #4]
 800467a:	f003 fabb 	bl	8007bf4 <HAL_I2C_Mem_Read>
		aSTAvg[0] += (int16_t)(((int16_t)rawTestData[0] << 8) | rawTestData[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
 800467e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004680:	f897 2074 	ldrb.w	r2, [r7, #116]	; 0x74
 8004684:	0212      	lsls	r2, r2, #8
 8004686:	b211      	sxth	r1, r2
 8004688:	f897 2075 	ldrb.w	r2, [r7, #117]	; 0x75
 800468c:	b212      	sxth	r2, r2
 800468e:	430a      	orrs	r2, r1
 8004690:	b212      	sxth	r2, r2
 8004692:	4413      	add	r3, r2
 8004694:	64bb      	str	r3, [r7, #72]	; 0x48
		aSTAvg[1] += (int16_t)(((int16_t)rawTestData[2] << 8) | rawTestData[3]) ;
 8004696:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004698:	f897 2076 	ldrb.w	r2, [r7, #118]	; 0x76
 800469c:	0212      	lsls	r2, r2, #8
 800469e:	b211      	sxth	r1, r2
 80046a0:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 80046a4:	b212      	sxth	r2, r2
 80046a6:	430a      	orrs	r2, r1
 80046a8:	b212      	sxth	r2, r2
 80046aa:	4413      	add	r3, r2
 80046ac:	64fb      	str	r3, [r7, #76]	; 0x4c
		aSTAvg[2] += (int16_t)(((int16_t)rawTestData[4] << 8) | rawTestData[5]) ;
 80046ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046b0:	f897 2078 	ldrb.w	r2, [r7, #120]	; 0x78
 80046b4:	0212      	lsls	r2, r2, #8
 80046b6:	b211      	sxth	r1, r2
 80046b8:	f897 2079 	ldrb.w	r2, [r7, #121]	; 0x79
 80046bc:	b212      	sxth	r2, r2
 80046be:	430a      	orrs	r2, r1
 80046c0:	b212      	sxth	r2, r2
 80046c2:	4413      	add	r3, r2
 80046c4:	653b      	str	r3, [r7, #80]	; 0x50

		HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, GYRO_XOUT_H, 1, &rawTestData[0], 6, i2c_timeout);// Read the six raw data registers sequentially into data array
 80046c6:	2364      	movs	r3, #100	; 0x64
 80046c8:	9302      	str	r3, [sp, #8]
 80046ca:	2306      	movs	r3, #6
 80046cc:	9301      	str	r3, [sp, #4]
 80046ce:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80046d2:	9300      	str	r3, [sp, #0]
 80046d4:	2301      	movs	r3, #1
 80046d6:	2243      	movs	r2, #67	; 0x43
 80046d8:	21d0      	movs	r1, #208	; 0xd0
 80046da:	6878      	ldr	r0, [r7, #4]
 80046dc:	f003 fa8a 	bl	8007bf4 <HAL_I2C_Mem_Read>
		gSTAvg[0] += (int16_t)(((int16_t)rawTestData[0] << 8) | rawTestData[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
 80046e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046e2:	f897 2074 	ldrb.w	r2, [r7, #116]	; 0x74
 80046e6:	0212      	lsls	r2, r2, #8
 80046e8:	b211      	sxth	r1, r2
 80046ea:	f897 2075 	ldrb.w	r2, [r7, #117]	; 0x75
 80046ee:	b212      	sxth	r2, r2
 80046f0:	430a      	orrs	r2, r1
 80046f2:	b212      	sxth	r2, r2
 80046f4:	4413      	add	r3, r2
 80046f6:	63fb      	str	r3, [r7, #60]	; 0x3c
		gSTAvg[1] += (int16_t)(((int16_t)rawTestData[2] << 8) | rawTestData[3]) ;
 80046f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046fa:	f897 2076 	ldrb.w	r2, [r7, #118]	; 0x76
 80046fe:	0212      	lsls	r2, r2, #8
 8004700:	b211      	sxth	r1, r2
 8004702:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 8004706:	b212      	sxth	r2, r2
 8004708:	430a      	orrs	r2, r1
 800470a:	b212      	sxth	r2, r2
 800470c:	4413      	add	r3, r2
 800470e:	643b      	str	r3, [r7, #64]	; 0x40
		gSTAvg[2] += (int16_t)(((int16_t)rawTestData[4] << 8) | rawTestData[5]) ;
 8004710:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004712:	f897 2078 	ldrb.w	r2, [r7, #120]	; 0x78
 8004716:	0212      	lsls	r2, r2, #8
 8004718:	b211      	sxth	r1, r2
 800471a:	f897 2079 	ldrb.w	r2, [r7, #121]	; 0x79
 800471e:	b212      	sxth	r2, r2
 8004720:	430a      	orrs	r2, r1
 8004722:	b212      	sxth	r2, r2
 8004724:	4413      	add	r3, r2
 8004726:	647b      	str	r3, [r7, #68]	; 0x44
	for( int ii = 0; ii < 200; ii++) {
 8004728:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800472c:	3301      	adds	r3, #1
 800472e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004732:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004736:	2bc7      	cmp	r3, #199	; 0xc7
 8004738:	dd94      	ble.n	8004664 <MPU9250SelfTest+0x29c>
	}

	//Get average of 200 values and store as average self-test readings
	for (int ii =0; ii < 3; ii++) {
 800473a:	2300      	movs	r3, #0
 800473c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004740:	e02c      	b.n	800479c <MPU9250SelfTest+0x3d4>
		aSTAvg[ii] /= 200;
 8004742:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004746:	009b      	lsls	r3, r3, #2
 8004748:	33b0      	adds	r3, #176	; 0xb0
 800474a:	443b      	add	r3, r7
 800474c:	f853 3c68 	ldr.w	r3, [r3, #-104]
 8004750:	4ae3      	ldr	r2, [pc, #908]	; (8004ae0 <MPU9250SelfTest+0x718>)
 8004752:	fb82 1203 	smull	r1, r2, r2, r3
 8004756:	1192      	asrs	r2, r2, #6
 8004758:	17db      	asrs	r3, r3, #31
 800475a:	1ad2      	subs	r2, r2, r3
 800475c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004760:	009b      	lsls	r3, r3, #2
 8004762:	33b0      	adds	r3, #176	; 0xb0
 8004764:	443b      	add	r3, r7
 8004766:	f843 2c68 	str.w	r2, [r3, #-104]
		gSTAvg[ii] /= 200;
 800476a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800476e:	009b      	lsls	r3, r3, #2
 8004770:	33b0      	adds	r3, #176	; 0xb0
 8004772:	443b      	add	r3, r7
 8004774:	f853 3c74 	ldr.w	r3, [r3, #-116]
 8004778:	4ad9      	ldr	r2, [pc, #868]	; (8004ae0 <MPU9250SelfTest+0x718>)
 800477a:	fb82 1203 	smull	r1, r2, r2, r3
 800477e:	1192      	asrs	r2, r2, #6
 8004780:	17db      	asrs	r3, r3, #31
 8004782:	1ad2      	subs	r2, r2, r3
 8004784:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004788:	009b      	lsls	r3, r3, #2
 800478a:	33b0      	adds	r3, #176	; 0xb0
 800478c:	443b      	add	r3, r7
 800478e:	f843 2c74 	str.w	r2, [r3, #-116]
	for (int ii =0; ii < 3; ii++) {
 8004792:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004796:	3301      	adds	r3, #1
 8004798:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800479c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80047a0:	2b02      	cmp	r3, #2
 80047a2:	ddce      	ble.n	8004742 <MPU9250SelfTest+0x37a>
	}

	//Configure the gyro and accelerometer for normal operation
	writeData = 0x00;
 80047a4:	2300      	movs	r3, #0
 80047a6:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ACCEL_CONFIG, 1, &writeData, 1, i2c_timeout);
 80047aa:	2364      	movs	r3, #100	; 0x64
 80047ac:	9302      	str	r3, [sp, #8]
 80047ae:	2301      	movs	r3, #1
 80047b0:	9301      	str	r3, [sp, #4]
 80047b2:	f107 037b 	add.w	r3, r7, #123	; 0x7b
 80047b6:	9300      	str	r3, [sp, #0]
 80047b8:	2301      	movs	r3, #1
 80047ba:	221c      	movs	r2, #28
 80047bc:	21d0      	movs	r1, #208	; 0xd0
 80047be:	6878      	ldr	r0, [r7, #4]
 80047c0:	f003 f91e 	bl	8007a00 <HAL_I2C_Mem_Write>
	writeData = 0x00;
 80047c4:	2300      	movs	r3, #0
 80047c6:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, GYRO_CONFIG, 1, &writeData, 1, i2c_timeout);
 80047ca:	2364      	movs	r3, #100	; 0x64
 80047cc:	9302      	str	r3, [sp, #8]
 80047ce:	2301      	movs	r3, #1
 80047d0:	9301      	str	r3, [sp, #4]
 80047d2:	f107 037b 	add.w	r3, r7, #123	; 0x7b
 80047d6:	9300      	str	r3, [sp, #0]
 80047d8:	2301      	movs	r3, #1
 80047da:	221b      	movs	r2, #27
 80047dc:	21d0      	movs	r1, #208	; 0xd0
 80047de:	6878      	ldr	r0, [r7, #4]
 80047e0:	f003 f90e 	bl	8007a00 <HAL_I2C_Mem_Write>
	HAL_Delay(25);  // Delay a while to let the device stabilize
 80047e4:	2019      	movs	r0, #25
 80047e6:	f002 f92d 	bl	8006a44 <HAL_Delay>

	//Retrieve accelerometer and gyro factory Self-Test Code from USR_Reg
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, SELF_TEST_X_ACCEL, 1, &selfTest[0], 1, i2c_timeout);// X-axis accel self-test results
 80047ea:	2364      	movs	r3, #100	; 0x64
 80047ec:	9302      	str	r3, [sp, #8]
 80047ee:	2301      	movs	r3, #1
 80047f0:	9301      	str	r3, [sp, #4]
 80047f2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80047f6:	9300      	str	r3, [sp, #0]
 80047f8:	2301      	movs	r3, #1
 80047fa:	220d      	movs	r2, #13
 80047fc:	21d0      	movs	r1, #208	; 0xd0
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	f003 f9f8 	bl	8007bf4 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, SELF_TEST_Y_ACCEL, 1, &selfTest[1], 1, i2c_timeout);// Y-axis accel self-test results
 8004804:	2364      	movs	r3, #100	; 0x64
 8004806:	9302      	str	r3, [sp, #8]
 8004808:	2301      	movs	r3, #1
 800480a:	9301      	str	r3, [sp, #4]
 800480c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004810:	3301      	adds	r3, #1
 8004812:	9300      	str	r3, [sp, #0]
 8004814:	2301      	movs	r3, #1
 8004816:	220e      	movs	r2, #14
 8004818:	21d0      	movs	r1, #208	; 0xd0
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	f003 f9ea 	bl	8007bf4 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, SELF_TEST_Z_ACCEL, 1, &selfTest[2], 1, i2c_timeout);// Z-axis accel self-test results
 8004820:	2364      	movs	r3, #100	; 0x64
 8004822:	9302      	str	r3, [sp, #8]
 8004824:	2301      	movs	r3, #1
 8004826:	9301      	str	r3, [sp, #4]
 8004828:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800482c:	3302      	adds	r3, #2
 800482e:	9300      	str	r3, [sp, #0]
 8004830:	2301      	movs	r3, #1
 8004832:	220f      	movs	r2, #15
 8004834:	21d0      	movs	r1, #208	; 0xd0
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	f003 f9dc 	bl	8007bf4 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, SELF_TEST_X_GYRO, 1, &selfTest[3], 1, i2c_timeout);// X-axis gyro self-test results
 800483c:	2364      	movs	r3, #100	; 0x64
 800483e:	9302      	str	r3, [sp, #8]
 8004840:	2301      	movs	r3, #1
 8004842:	9301      	str	r3, [sp, #4]
 8004844:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004848:	3303      	adds	r3, #3
 800484a:	9300      	str	r3, [sp, #0]
 800484c:	2301      	movs	r3, #1
 800484e:	2200      	movs	r2, #0
 8004850:	21d0      	movs	r1, #208	; 0xd0
 8004852:	6878      	ldr	r0, [r7, #4]
 8004854:	f003 f9ce 	bl	8007bf4 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, SELF_TEST_Y_GYRO, 1, &selfTest[4], 1, i2c_timeout);// Y-axis gyro self-test results
 8004858:	2364      	movs	r3, #100	; 0x64
 800485a:	9302      	str	r3, [sp, #8]
 800485c:	2301      	movs	r3, #1
 800485e:	9301      	str	r3, [sp, #4]
 8004860:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004864:	3304      	adds	r3, #4
 8004866:	9300      	str	r3, [sp, #0]
 8004868:	2301      	movs	r3, #1
 800486a:	2201      	movs	r2, #1
 800486c:	21d0      	movs	r1, #208	; 0xd0
 800486e:	6878      	ldr	r0, [r7, #4]
 8004870:	f003 f9c0 	bl	8007bf4 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, SELF_TEST_Z_GYRO, 1, &selfTest[5], 1, i2c_timeout);// Z-axis gyro self-test results
 8004874:	2364      	movs	r3, #100	; 0x64
 8004876:	9302      	str	r3, [sp, #8]
 8004878:	2301      	movs	r3, #1
 800487a:	9301      	str	r3, [sp, #4]
 800487c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004880:	3305      	adds	r3, #5
 8004882:	9300      	str	r3, [sp, #0]
 8004884:	2301      	movs	r3, #1
 8004886:	2202      	movs	r2, #2
 8004888:	21d0      	movs	r1, #208	; 0xd0
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	f003 f9b2 	bl	8007bf4 <HAL_I2C_Mem_Read>

	//Retrieve factory self-test value from self-test code reads
	factoryTrim[0] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[0] - 1.0) )); // FT[Xa] factory trim calculation
 8004890:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8004894:	f640 223c 	movw	r2, #2620	; 0xa3c
 8004898:	fa02 f303 	lsl.w	r3, r2, r3
 800489c:	ee07 3a90 	vmov	s15, r3
 80048a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80048a4:	ee17 0a90 	vmov	r0, s15
 80048a8:	f7fb fe6e 	bl	8000588 <__aeabi_f2d>
 80048ac:	4604      	mov	r4, r0
 80048ae:	460d      	mov	r5, r1
 80048b0:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 80048b4:	ee07 3a90 	vmov	s15, r3
 80048b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048bc:	ee17 0a90 	vmov	r0, s15
 80048c0:	f7fb fe62 	bl	8000588 <__aeabi_f2d>
 80048c4:	f04f 0200 	mov.w	r2, #0
 80048c8:	4b86      	ldr	r3, [pc, #536]	; (8004ae4 <MPU9250SelfTest+0x71c>)
 80048ca:	f7fb fcfd 	bl	80002c8 <__aeabi_dsub>
 80048ce:	4602      	mov	r2, r0
 80048d0:	460b      	mov	r3, r1
 80048d2:	ec43 2b17 	vmov	d7, r2, r3
 80048d6:	eeb0 1a47 	vmov.f32	s2, s14
 80048da:	eef0 1a67 	vmov.f32	s3, s15
 80048de:	ed9f 0b7e 	vldr	d0, [pc, #504]	; 8004ad8 <MPU9250SelfTest+0x710>
 80048e2:	f009 fe8b 	bl	800e5fc <pow>
 80048e6:	ec53 2b10 	vmov	r2, r3, d0
 80048ea:	4620      	mov	r0, r4
 80048ec:	4629      	mov	r1, r5
 80048ee:	f7fb fea3 	bl	8000638 <__aeabi_dmul>
 80048f2:	4602      	mov	r2, r0
 80048f4:	460b      	mov	r3, r1
 80048f6:	4610      	mov	r0, r2
 80048f8:	4619      	mov	r1, r3
 80048fa:	f7fc f995 	bl	8000c28 <__aeabi_d2f>
 80048fe:	4603      	mov	r3, r0
 8004900:	627b      	str	r3, [r7, #36]	; 0x24
	factoryTrim[1] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[1] - 1.0) )); // FT[Ya] factory trim calculation
 8004902:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8004906:	f640 223c 	movw	r2, #2620	; 0xa3c
 800490a:	fa02 f303 	lsl.w	r3, r2, r3
 800490e:	ee07 3a90 	vmov	s15, r3
 8004912:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004916:	ee17 0a90 	vmov	r0, s15
 800491a:	f7fb fe35 	bl	8000588 <__aeabi_f2d>
 800491e:	4604      	mov	r4, r0
 8004920:	460d      	mov	r5, r1
 8004922:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8004926:	ee07 3a90 	vmov	s15, r3
 800492a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800492e:	ee17 0a90 	vmov	r0, s15
 8004932:	f7fb fe29 	bl	8000588 <__aeabi_f2d>
 8004936:	f04f 0200 	mov.w	r2, #0
 800493a:	4b6a      	ldr	r3, [pc, #424]	; (8004ae4 <MPU9250SelfTest+0x71c>)
 800493c:	f7fb fcc4 	bl	80002c8 <__aeabi_dsub>
 8004940:	4602      	mov	r2, r0
 8004942:	460b      	mov	r3, r1
 8004944:	ec43 2b17 	vmov	d7, r2, r3
 8004948:	eeb0 1a47 	vmov.f32	s2, s14
 800494c:	eef0 1a67 	vmov.f32	s3, s15
 8004950:	ed9f 0b61 	vldr	d0, [pc, #388]	; 8004ad8 <MPU9250SelfTest+0x710>
 8004954:	f009 fe52 	bl	800e5fc <pow>
 8004958:	ec53 2b10 	vmov	r2, r3, d0
 800495c:	4620      	mov	r0, r4
 800495e:	4629      	mov	r1, r5
 8004960:	f7fb fe6a 	bl	8000638 <__aeabi_dmul>
 8004964:	4602      	mov	r2, r0
 8004966:	460b      	mov	r3, r1
 8004968:	4610      	mov	r0, r2
 800496a:	4619      	mov	r1, r3
 800496c:	f7fc f95c 	bl	8000c28 <__aeabi_d2f>
 8004970:	4603      	mov	r3, r0
 8004972:	62bb      	str	r3, [r7, #40]	; 0x28
	factoryTrim[2] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[2] - 1.0) )); // FT[Za] factory trim calculation
 8004974:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8004978:	f640 223c 	movw	r2, #2620	; 0xa3c
 800497c:	fa02 f303 	lsl.w	r3, r2, r3
 8004980:	ee07 3a90 	vmov	s15, r3
 8004984:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004988:	ee17 0a90 	vmov	r0, s15
 800498c:	f7fb fdfc 	bl	8000588 <__aeabi_f2d>
 8004990:	4604      	mov	r4, r0
 8004992:	460d      	mov	r5, r1
 8004994:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8004998:	ee07 3a90 	vmov	s15, r3
 800499c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049a0:	ee17 0a90 	vmov	r0, s15
 80049a4:	f7fb fdf0 	bl	8000588 <__aeabi_f2d>
 80049a8:	f04f 0200 	mov.w	r2, #0
 80049ac:	4b4d      	ldr	r3, [pc, #308]	; (8004ae4 <MPU9250SelfTest+0x71c>)
 80049ae:	f7fb fc8b 	bl	80002c8 <__aeabi_dsub>
 80049b2:	4602      	mov	r2, r0
 80049b4:	460b      	mov	r3, r1
 80049b6:	ec43 2b17 	vmov	d7, r2, r3
 80049ba:	eeb0 1a47 	vmov.f32	s2, s14
 80049be:	eef0 1a67 	vmov.f32	s3, s15
 80049c2:	ed9f 0b45 	vldr	d0, [pc, #276]	; 8004ad8 <MPU9250SelfTest+0x710>
 80049c6:	f009 fe19 	bl	800e5fc <pow>
 80049ca:	ec53 2b10 	vmov	r2, r3, d0
 80049ce:	4620      	mov	r0, r4
 80049d0:	4629      	mov	r1, r5
 80049d2:	f7fb fe31 	bl	8000638 <__aeabi_dmul>
 80049d6:	4602      	mov	r2, r0
 80049d8:	460b      	mov	r3, r1
 80049da:	4610      	mov	r0, r2
 80049dc:	4619      	mov	r1, r3
 80049de:	f7fc f923 	bl	8000c28 <__aeabi_d2f>
 80049e2:	4603      	mov	r3, r0
 80049e4:	62fb      	str	r3, [r7, #44]	; 0x2c
	factoryTrim[3] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[3] - 1.0) )); // FT[Xg] factory trim calculation
 80049e6:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80049ea:	f640 223c 	movw	r2, #2620	; 0xa3c
 80049ee:	fa02 f303 	lsl.w	r3, r2, r3
 80049f2:	ee07 3a90 	vmov	s15, r3
 80049f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80049fa:	ee17 0a90 	vmov	r0, s15
 80049fe:	f7fb fdc3 	bl	8000588 <__aeabi_f2d>
 8004a02:	4604      	mov	r4, r0
 8004a04:	460d      	mov	r5, r1
 8004a06:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004a0a:	ee07 3a90 	vmov	s15, r3
 8004a0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a12:	ee17 0a90 	vmov	r0, s15
 8004a16:	f7fb fdb7 	bl	8000588 <__aeabi_f2d>
 8004a1a:	f04f 0200 	mov.w	r2, #0
 8004a1e:	4b31      	ldr	r3, [pc, #196]	; (8004ae4 <MPU9250SelfTest+0x71c>)
 8004a20:	f7fb fc52 	bl	80002c8 <__aeabi_dsub>
 8004a24:	4602      	mov	r2, r0
 8004a26:	460b      	mov	r3, r1
 8004a28:	ec43 2b17 	vmov	d7, r2, r3
 8004a2c:	eeb0 1a47 	vmov.f32	s2, s14
 8004a30:	eef0 1a67 	vmov.f32	s3, s15
 8004a34:	ed9f 0b28 	vldr	d0, [pc, #160]	; 8004ad8 <MPU9250SelfTest+0x710>
 8004a38:	f009 fde0 	bl	800e5fc <pow>
 8004a3c:	ec53 2b10 	vmov	r2, r3, d0
 8004a40:	4620      	mov	r0, r4
 8004a42:	4629      	mov	r1, r5
 8004a44:	f7fb fdf8 	bl	8000638 <__aeabi_dmul>
 8004a48:	4602      	mov	r2, r0
 8004a4a:	460b      	mov	r3, r1
 8004a4c:	4610      	mov	r0, r2
 8004a4e:	4619      	mov	r1, r3
 8004a50:	f7fc f8ea 	bl	8000c28 <__aeabi_d2f>
 8004a54:	4603      	mov	r3, r0
 8004a56:	633b      	str	r3, [r7, #48]	; 0x30
	factoryTrim[4] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[4] - 1.0) )); // FT[Yg] factory trim calculation
 8004a58:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8004a5c:	f640 223c 	movw	r2, #2620	; 0xa3c
 8004a60:	fa02 f303 	lsl.w	r3, r2, r3
 8004a64:	ee07 3a90 	vmov	s15, r3
 8004a68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004a6c:	ee17 0a90 	vmov	r0, s15
 8004a70:	f7fb fd8a 	bl	8000588 <__aeabi_f2d>
 8004a74:	4604      	mov	r4, r0
 8004a76:	460d      	mov	r5, r1
 8004a78:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 8004a7c:	ee07 3a90 	vmov	s15, r3
 8004a80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a84:	ee17 0a90 	vmov	r0, s15
 8004a88:	f7fb fd7e 	bl	8000588 <__aeabi_f2d>
 8004a8c:	f04f 0200 	mov.w	r2, #0
 8004a90:	4b14      	ldr	r3, [pc, #80]	; (8004ae4 <MPU9250SelfTest+0x71c>)
 8004a92:	f7fb fc19 	bl	80002c8 <__aeabi_dsub>
 8004a96:	4602      	mov	r2, r0
 8004a98:	460b      	mov	r3, r1
 8004a9a:	ec43 2b17 	vmov	d7, r2, r3
 8004a9e:	eeb0 1a47 	vmov.f32	s2, s14
 8004aa2:	eef0 1a67 	vmov.f32	s3, s15
 8004aa6:	ed9f 0b0c 	vldr	d0, [pc, #48]	; 8004ad8 <MPU9250SelfTest+0x710>
 8004aaa:	f009 fda7 	bl	800e5fc <pow>
 8004aae:	ec53 2b10 	vmov	r2, r3, d0
 8004ab2:	4620      	mov	r0, r4
 8004ab4:	4629      	mov	r1, r5
 8004ab6:	f7fb fdbf 	bl	8000638 <__aeabi_dmul>
 8004aba:	4602      	mov	r2, r0
 8004abc:	460b      	mov	r3, r1
 8004abe:	4610      	mov	r0, r2
 8004ac0:	4619      	mov	r1, r3
 8004ac2:	f7fc f8b1 	bl	8000c28 <__aeabi_d2f>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	637b      	str	r3, [r7, #52]	; 0x34
	factoryTrim[5] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[5] - 1.0) )); // FT[Zg] factory trim calculation
 8004aca:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8004ace:	f640 223c 	movw	r2, #2620	; 0xa3c
 8004ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ad6:	e007      	b.n	8004ae8 <MPU9250SelfTest+0x720>
 8004ad8:	c28f5c29 	.word	0xc28f5c29
 8004adc:	3ff028f5 	.word	0x3ff028f5
 8004ae0:	51eb851f 	.word	0x51eb851f
 8004ae4:	3ff00000 	.word	0x3ff00000
 8004ae8:	ee07 3a90 	vmov	s15, r3
 8004aec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004af0:	ee17 0a90 	vmov	r0, s15
 8004af4:	f7fb fd48 	bl	8000588 <__aeabi_f2d>
 8004af8:	4604      	mov	r4, r0
 8004afa:	460d      	mov	r5, r1
 8004afc:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 8004b00:	ee07 3a90 	vmov	s15, r3
 8004b04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b08:	ee17 0a90 	vmov	r0, s15
 8004b0c:	f7fb fd3c 	bl	8000588 <__aeabi_f2d>
 8004b10:	f04f 0200 	mov.w	r2, #0
 8004b14:	4be0      	ldr	r3, [pc, #896]	; (8004e98 <MPU9250SelfTest+0xad0>)
 8004b16:	f7fb fbd7 	bl	80002c8 <__aeabi_dsub>
 8004b1a:	4602      	mov	r2, r0
 8004b1c:	460b      	mov	r3, r1
 8004b1e:	ec43 2b17 	vmov	d7, r2, r3
 8004b22:	eeb0 1a47 	vmov.f32	s2, s14
 8004b26:	eef0 1a67 	vmov.f32	s3, s15
 8004b2a:	ed9f 0bd9 	vldr	d0, [pc, #868]	; 8004e90 <MPU9250SelfTest+0xac8>
 8004b2e:	f009 fd65 	bl	800e5fc <pow>
 8004b32:	ec53 2b10 	vmov	r2, r3, d0
 8004b36:	4620      	mov	r0, r4
 8004b38:	4629      	mov	r1, r5
 8004b3a:	f7fb fd7d 	bl	8000638 <__aeabi_dmul>
 8004b3e:	4602      	mov	r2, r0
 8004b40:	460b      	mov	r3, r1
 8004b42:	4610      	mov	r0, r2
 8004b44:	4619      	mov	r1, r3
 8004b46:	f7fc f86f 	bl	8000c28 <__aeabi_d2f>
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	63bb      	str	r3, [r7, #56]	; 0x38

	uint32_t testResults[6];

	//Report results as a ratio of (STR - FT)/FT; the change from Factory Trim of the Self-Test Response
	//To get percent, must multiply by 100
	for (int i = 0; i < 3; i++) {
 8004b4e:	2300      	movs	r3, #0
 8004b50:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004b54:	e094      	b.n	8004c80 <MPU9250SelfTest+0x8b8>
		testResults[i]   = 100.0*((float)(aSTAvg[i] - aAvg[i]))/factoryTrim[i] - 100.;   // Report percent differences
 8004b56:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004b5a:	009b      	lsls	r3, r3, #2
 8004b5c:	33b0      	adds	r3, #176	; 0xb0
 8004b5e:	443b      	add	r3, r7
 8004b60:	f853 2c68 	ldr.w	r2, [r3, #-104]
 8004b64:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004b68:	009b      	lsls	r3, r3, #2
 8004b6a:	33b0      	adds	r3, #176	; 0xb0
 8004b6c:	443b      	add	r3, r7
 8004b6e:	f853 3c5c 	ldr.w	r3, [r3, #-92]
 8004b72:	1ad3      	subs	r3, r2, r3
 8004b74:	ee07 3a90 	vmov	s15, r3
 8004b78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004b7c:	ee17 0a90 	vmov	r0, s15
 8004b80:	f7fb fd02 	bl	8000588 <__aeabi_f2d>
 8004b84:	f04f 0200 	mov.w	r2, #0
 8004b88:	4bc4      	ldr	r3, [pc, #784]	; (8004e9c <MPU9250SelfTest+0xad4>)
 8004b8a:	f7fb fd55 	bl	8000638 <__aeabi_dmul>
 8004b8e:	4602      	mov	r2, r0
 8004b90:	460b      	mov	r3, r1
 8004b92:	4614      	mov	r4, r2
 8004b94:	461d      	mov	r5, r3
 8004b96:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004b9a:	009b      	lsls	r3, r3, #2
 8004b9c:	33b0      	adds	r3, #176	; 0xb0
 8004b9e:	443b      	add	r3, r7
 8004ba0:	3b8c      	subs	r3, #140	; 0x8c
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	f7fb fcef 	bl	8000588 <__aeabi_f2d>
 8004baa:	4602      	mov	r2, r0
 8004bac:	460b      	mov	r3, r1
 8004bae:	4620      	mov	r0, r4
 8004bb0:	4629      	mov	r1, r5
 8004bb2:	f7fb fe6b 	bl	800088c <__aeabi_ddiv>
 8004bb6:	4602      	mov	r2, r0
 8004bb8:	460b      	mov	r3, r1
 8004bba:	4610      	mov	r0, r2
 8004bbc:	4619      	mov	r1, r3
 8004bbe:	f04f 0200 	mov.w	r2, #0
 8004bc2:	4bb6      	ldr	r3, [pc, #728]	; (8004e9c <MPU9250SelfTest+0xad4>)
 8004bc4:	f7fb fb80 	bl	80002c8 <__aeabi_dsub>
 8004bc8:	4602      	mov	r2, r0
 8004bca:	460b      	mov	r3, r1
 8004bcc:	4610      	mov	r0, r2
 8004bce:	4619      	mov	r1, r3
 8004bd0:	f7fc f80a 	bl	8000be8 <__aeabi_d2uiz>
 8004bd4:	4602      	mov	r2, r0
 8004bd6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004bda:	009b      	lsls	r3, r3, #2
 8004bdc:	33b0      	adds	r3, #176	; 0xb0
 8004bde:	443b      	add	r3, r7
 8004be0:	f843 2ca4 	str.w	r2, [r3, #-164]
		testResults[i+3] = 100.0*((float)(gSTAvg[i] - gAvg[i]))/factoryTrim[i+3] - 100.; // Report percent differences
 8004be4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004be8:	009b      	lsls	r3, r3, #2
 8004bea:	33b0      	adds	r3, #176	; 0xb0
 8004bec:	443b      	add	r3, r7
 8004bee:	f853 2c74 	ldr.w	r2, [r3, #-116]
 8004bf2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004bf6:	009b      	lsls	r3, r3, #2
 8004bf8:	33b0      	adds	r3, #176	; 0xb0
 8004bfa:	443b      	add	r3, r7
 8004bfc:	f853 3c50 	ldr.w	r3, [r3, #-80]
 8004c00:	1ad3      	subs	r3, r2, r3
 8004c02:	ee07 3a90 	vmov	s15, r3
 8004c06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004c0a:	ee17 0a90 	vmov	r0, s15
 8004c0e:	f7fb fcbb 	bl	8000588 <__aeabi_f2d>
 8004c12:	f04f 0200 	mov.w	r2, #0
 8004c16:	4ba1      	ldr	r3, [pc, #644]	; (8004e9c <MPU9250SelfTest+0xad4>)
 8004c18:	f7fb fd0e 	bl	8000638 <__aeabi_dmul>
 8004c1c:	4602      	mov	r2, r0
 8004c1e:	460b      	mov	r3, r1
 8004c20:	4614      	mov	r4, r2
 8004c22:	461d      	mov	r5, r3
 8004c24:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004c28:	3303      	adds	r3, #3
 8004c2a:	009b      	lsls	r3, r3, #2
 8004c2c:	33b0      	adds	r3, #176	; 0xb0
 8004c2e:	443b      	add	r3, r7
 8004c30:	3b8c      	subs	r3, #140	; 0x8c
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4618      	mov	r0, r3
 8004c36:	f7fb fca7 	bl	8000588 <__aeabi_f2d>
 8004c3a:	4602      	mov	r2, r0
 8004c3c:	460b      	mov	r3, r1
 8004c3e:	4620      	mov	r0, r4
 8004c40:	4629      	mov	r1, r5
 8004c42:	f7fb fe23 	bl	800088c <__aeabi_ddiv>
 8004c46:	4602      	mov	r2, r0
 8004c48:	460b      	mov	r3, r1
 8004c4a:	4610      	mov	r0, r2
 8004c4c:	4619      	mov	r1, r3
 8004c4e:	f04f 0200 	mov.w	r2, #0
 8004c52:	4b92      	ldr	r3, [pc, #584]	; (8004e9c <MPU9250SelfTest+0xad4>)
 8004c54:	f7fb fb38 	bl	80002c8 <__aeabi_dsub>
 8004c58:	4602      	mov	r2, r0
 8004c5a:	460b      	mov	r3, r1
 8004c5c:	4610      	mov	r0, r2
 8004c5e:	4619      	mov	r1, r3
 8004c60:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004c64:	1cdc      	adds	r4, r3, #3
 8004c66:	f7fb ffbf 	bl	8000be8 <__aeabi_d2uiz>
 8004c6a:	4602      	mov	r2, r0
 8004c6c:	00a3      	lsls	r3, r4, #2
 8004c6e:	33b0      	adds	r3, #176	; 0xb0
 8004c70:	443b      	add	r3, r7
 8004c72:	f843 2ca4 	str.w	r2, [r3, #-164]
	for (int i = 0; i < 3; i++) {
 8004c76:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004c7a:	3301      	adds	r3, #1
 8004c7c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004c80:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004c84:	2b02      	cmp	r3, #2
 8004c86:	f77f af66 	ble.w	8004b56 <MPU9250SelfTest+0x78e>
	}

	if(SerialDebugA){
		float testResultAccelX = testResults[0];
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	ee07 3a90 	vmov	s15, r3
 8004c90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c94:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
		float testResultAccelY = testResults[1];
 8004c98:	693b      	ldr	r3, [r7, #16]
 8004c9a:	ee07 3a90 	vmov	s15, r3
 8004c9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ca2:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
		float testResultAccelZ = testResults[2];
 8004ca6:	697b      	ldr	r3, [r7, #20]
 8004ca8:	ee07 3a90 	vmov	s15, r3
 8004cac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cb0:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
		float testResultGyroX = testResults[3];
 8004cb4:	69bb      	ldr	r3, [r7, #24]
 8004cb6:	ee07 3a90 	vmov	s15, r3
 8004cba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cbe:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
		float testResultGyroY = testResults[4];
 8004cc2:	69fb      	ldr	r3, [r7, #28]
 8004cc4:	ee07 3a90 	vmov	s15, r3
 8004cc8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ccc:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
		float testResultGyroZ = testResults[5];
 8004cd0:	6a3b      	ldr	r3, [r7, #32]
 8004cd2:	ee07 3a90 	vmov	s15, r3
 8004cd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cda:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c

		printf("Accel Test X: %f\r\n", testResultAccelX); // @suppress("Float formatting support")
 8004cde:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8004ce2:	f7fb fc51 	bl	8000588 <__aeabi_f2d>
 8004ce6:	4602      	mov	r2, r0
 8004ce8:	460b      	mov	r3, r1
 8004cea:	486d      	ldr	r0, [pc, #436]	; (8004ea0 <MPU9250SelfTest+0xad8>)
 8004cec:	f006 fafc 	bl	800b2e8 <iprintf>
		printf("Accel Test Y: %f\r\n", testResultAccelY); // @suppress("Float formatting support")
 8004cf0:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8004cf4:	f7fb fc48 	bl	8000588 <__aeabi_f2d>
 8004cf8:	4602      	mov	r2, r0
 8004cfa:	460b      	mov	r3, r1
 8004cfc:	4869      	ldr	r0, [pc, #420]	; (8004ea4 <MPU9250SelfTest+0xadc>)
 8004cfe:	f006 faf3 	bl	800b2e8 <iprintf>
		printf("Accel Test Z: %f\r\n", testResultAccelZ); // @suppress("Float formatting support")
 8004d02:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8004d06:	f7fb fc3f 	bl	8000588 <__aeabi_f2d>
 8004d0a:	4602      	mov	r2, r0
 8004d0c:	460b      	mov	r3, r1
 8004d0e:	4866      	ldr	r0, [pc, #408]	; (8004ea8 <MPU9250SelfTest+0xae0>)
 8004d10:	f006 faea 	bl	800b2e8 <iprintf>
		printf("Gyro Test X: %f\r\n", testResultGyroX); // @suppress("Float formatting support")
 8004d14:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8004d18:	f7fb fc36 	bl	8000588 <__aeabi_f2d>
 8004d1c:	4602      	mov	r2, r0
 8004d1e:	460b      	mov	r3, r1
 8004d20:	4862      	ldr	r0, [pc, #392]	; (8004eac <MPU9250SelfTest+0xae4>)
 8004d22:	f006 fae1 	bl	800b2e8 <iprintf>
		printf("Gyro Test Y: %f\r\n", testResultGyroY); // @suppress("Float formatting support")
 8004d26:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8004d2a:	f7fb fc2d 	bl	8000588 <__aeabi_f2d>
 8004d2e:	4602      	mov	r2, r0
 8004d30:	460b      	mov	r3, r1
 8004d32:	485f      	ldr	r0, [pc, #380]	; (8004eb0 <MPU9250SelfTest+0xae8>)
 8004d34:	f006 fad8 	bl	800b2e8 <iprintf>
		printf("Gyro Test Z: %f\r\n", testResultGyroZ); // @suppress("Float formatting support")
 8004d38:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8004d3a:	f7fb fc25 	bl	8000588 <__aeabi_f2d>
 8004d3e:	4602      	mov	r2, r0
 8004d40:	460b      	mov	r3, r1
 8004d42:	485c      	ldr	r0, [pc, #368]	; (8004eb4 <MPU9250SelfTest+0xaec>)
 8004d44:	f006 fad0 	bl	800b2e8 <iprintf>
		printf("-------------------------\r\n");
 8004d48:	485b      	ldr	r0, [pc, #364]	; (8004eb8 <MPU9250SelfTest+0xaf0>)
 8004d4a:	f006 fb53 	bl	800b3f4 <puts>
	}

   for (int i = 0; i < 3; i++) {
 8004d4e:	2300      	movs	r3, #0
 8004d50:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004d54:	e092      	b.n	8004e7c <MPU9250SelfTest+0xab4>
     destination[i]   = 100.0*((float)(aSTAvg[i] - aAvg[i]))/factoryTrim[i] - 100.;   // Report percent differences
 8004d56:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004d5a:	009b      	lsls	r3, r3, #2
 8004d5c:	33b0      	adds	r3, #176	; 0xb0
 8004d5e:	443b      	add	r3, r7
 8004d60:	f853 2c68 	ldr.w	r2, [r3, #-104]
 8004d64:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004d68:	009b      	lsls	r3, r3, #2
 8004d6a:	33b0      	adds	r3, #176	; 0xb0
 8004d6c:	443b      	add	r3, r7
 8004d6e:	f853 3c5c 	ldr.w	r3, [r3, #-92]
 8004d72:	1ad3      	subs	r3, r2, r3
 8004d74:	ee07 3a90 	vmov	s15, r3
 8004d78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004d7c:	ee17 0a90 	vmov	r0, s15
 8004d80:	f7fb fc02 	bl	8000588 <__aeabi_f2d>
 8004d84:	f04f 0200 	mov.w	r2, #0
 8004d88:	4b44      	ldr	r3, [pc, #272]	; (8004e9c <MPU9250SelfTest+0xad4>)
 8004d8a:	f7fb fc55 	bl	8000638 <__aeabi_dmul>
 8004d8e:	4602      	mov	r2, r0
 8004d90:	460b      	mov	r3, r1
 8004d92:	4614      	mov	r4, r2
 8004d94:	461d      	mov	r5, r3
 8004d96:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004d9a:	009b      	lsls	r3, r3, #2
 8004d9c:	33b0      	adds	r3, #176	; 0xb0
 8004d9e:	443b      	add	r3, r7
 8004da0:	3b8c      	subs	r3, #140	; 0x8c
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4618      	mov	r0, r3
 8004da6:	f7fb fbef 	bl	8000588 <__aeabi_f2d>
 8004daa:	4602      	mov	r2, r0
 8004dac:	460b      	mov	r3, r1
 8004dae:	4620      	mov	r0, r4
 8004db0:	4629      	mov	r1, r5
 8004db2:	f7fb fd6b 	bl	800088c <__aeabi_ddiv>
 8004db6:	4602      	mov	r2, r0
 8004db8:	460b      	mov	r3, r1
 8004dba:	4610      	mov	r0, r2
 8004dbc:	4619      	mov	r1, r3
 8004dbe:	f04f 0200 	mov.w	r2, #0
 8004dc2:	4b36      	ldr	r3, [pc, #216]	; (8004e9c <MPU9250SelfTest+0xad4>)
 8004dc4:	f7fb fa80 	bl	80002c8 <__aeabi_dsub>
 8004dc8:	4602      	mov	r2, r0
 8004dca:	460b      	mov	r3, r1
 8004dcc:	4610      	mov	r0, r2
 8004dce:	4619      	mov	r1, r3
 8004dd0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004dd4:	009b      	lsls	r3, r3, #2
 8004dd6:	683a      	ldr	r2, [r7, #0]
 8004dd8:	18d4      	adds	r4, r2, r3
 8004dda:	f7fb ff25 	bl	8000c28 <__aeabi_d2f>
 8004dde:	4603      	mov	r3, r0
 8004de0:	6023      	str	r3, [r4, #0]
     destination[i+3] = 100.0*((float)(gSTAvg[i] - gAvg[i]))/factoryTrim[i+3] - 100.; // Report percent differences
 8004de2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004de6:	009b      	lsls	r3, r3, #2
 8004de8:	33b0      	adds	r3, #176	; 0xb0
 8004dea:	443b      	add	r3, r7
 8004dec:	f853 2c74 	ldr.w	r2, [r3, #-116]
 8004df0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004df4:	009b      	lsls	r3, r3, #2
 8004df6:	33b0      	adds	r3, #176	; 0xb0
 8004df8:	443b      	add	r3, r7
 8004dfa:	f853 3c50 	ldr.w	r3, [r3, #-80]
 8004dfe:	1ad3      	subs	r3, r2, r3
 8004e00:	ee07 3a90 	vmov	s15, r3
 8004e04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004e08:	ee17 0a90 	vmov	r0, s15
 8004e0c:	f7fb fbbc 	bl	8000588 <__aeabi_f2d>
 8004e10:	f04f 0200 	mov.w	r2, #0
 8004e14:	4b21      	ldr	r3, [pc, #132]	; (8004e9c <MPU9250SelfTest+0xad4>)
 8004e16:	f7fb fc0f 	bl	8000638 <__aeabi_dmul>
 8004e1a:	4602      	mov	r2, r0
 8004e1c:	460b      	mov	r3, r1
 8004e1e:	4614      	mov	r4, r2
 8004e20:	461d      	mov	r5, r3
 8004e22:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004e26:	3303      	adds	r3, #3
 8004e28:	009b      	lsls	r3, r3, #2
 8004e2a:	33b0      	adds	r3, #176	; 0xb0
 8004e2c:	443b      	add	r3, r7
 8004e2e:	3b8c      	subs	r3, #140	; 0x8c
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4618      	mov	r0, r3
 8004e34:	f7fb fba8 	bl	8000588 <__aeabi_f2d>
 8004e38:	4602      	mov	r2, r0
 8004e3a:	460b      	mov	r3, r1
 8004e3c:	4620      	mov	r0, r4
 8004e3e:	4629      	mov	r1, r5
 8004e40:	f7fb fd24 	bl	800088c <__aeabi_ddiv>
 8004e44:	4602      	mov	r2, r0
 8004e46:	460b      	mov	r3, r1
 8004e48:	4610      	mov	r0, r2
 8004e4a:	4619      	mov	r1, r3
 8004e4c:	f04f 0200 	mov.w	r2, #0
 8004e50:	4b12      	ldr	r3, [pc, #72]	; (8004e9c <MPU9250SelfTest+0xad4>)
 8004e52:	f7fb fa39 	bl	80002c8 <__aeabi_dsub>
 8004e56:	4602      	mov	r2, r0
 8004e58:	460b      	mov	r3, r1
 8004e5a:	4610      	mov	r0, r2
 8004e5c:	4619      	mov	r1, r3
 8004e5e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004e62:	3303      	adds	r3, #3
 8004e64:	009b      	lsls	r3, r3, #2
 8004e66:	683a      	ldr	r2, [r7, #0]
 8004e68:	18d4      	adds	r4, r2, r3
 8004e6a:	f7fb fedd 	bl	8000c28 <__aeabi_d2f>
 8004e6e:	4603      	mov	r3, r0
 8004e70:	6023      	str	r3, [r4, #0]
   for (int i = 0; i < 3; i++) {
 8004e72:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004e76:	3301      	adds	r3, #1
 8004e78:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004e7c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004e80:	2b02      	cmp	r3, #2
 8004e82:	f77f af68 	ble.w	8004d56 <MPU9250SelfTest+0x98e>
   }
}
 8004e86:	bf00      	nop
 8004e88:	bf00      	nop
 8004e8a:	37b0      	adds	r7, #176	; 0xb0
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	bdb0      	pop	{r4, r5, r7, pc}
 8004e90:	c28f5c29 	.word	0xc28f5c29
 8004e94:	3ff028f5 	.word	0x3ff028f5
 8004e98:	3ff00000 	.word	0x3ff00000
 8004e9c:	40590000 	.word	0x40590000
 8004ea0:	0800fbf8 	.word	0x0800fbf8
 8004ea4:	0800fc0c 	.word	0x0800fc0c
 8004ea8:	0800fc20 	.word	0x0800fc20
 8004eac:	0800fc34 	.word	0x0800fc34
 8004eb0:	0800fc48 	.word	0x0800fc48
 8004eb4:	0800fc5c 	.word	0x0800fc5c
 8004eb8:	0800facc 	.word	0x0800facc

08004ebc <QuaternionUpdate>:

void QuaternionUpdate(float ax, float ay, float az, float gx, float gy, float gz, float mx, float my, float mz){
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b0b2      	sub	sp, #200	; 0xc8
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 8004ec6:	edc7 0a08 	vstr	s1, [r7, #32]
 8004eca:	ed87 1a07 	vstr	s2, [r7, #28]
 8004ece:	edc7 1a06 	vstr	s3, [r7, #24]
 8004ed2:	ed87 2a05 	vstr	s4, [r7, #20]
 8004ed6:	edc7 2a04 	vstr	s5, [r7, #16]
 8004eda:	ed87 3a03 	vstr	s6, [r7, #12]
 8004ede:	edc7 3a02 	vstr	s7, [r7, #8]
 8004ee2:	ed87 4a01 	vstr	s8, [r7, #4]
    float q1 = q[0], q2 = q[1], q3 = q[2], q4 = q[3];   // short name local variable for readability
 8004ee6:	4b70      	ldr	r3, [pc, #448]	; (80050a8 <QuaternionUpdate+0x1ec>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004eee:	4b6e      	ldr	r3, [pc, #440]	; (80050a8 <QuaternionUpdate+0x1ec>)
 8004ef0:	685b      	ldr	r3, [r3, #4]
 8004ef2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004ef6:	4b6c      	ldr	r3, [pc, #432]	; (80050a8 <QuaternionUpdate+0x1ec>)
 8004ef8:	689b      	ldr	r3, [r3, #8]
 8004efa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004efe:	4b6a      	ldr	r3, [pc, #424]	; (80050a8 <QuaternionUpdate+0x1ec>)
 8004f00:	68db      	ldr	r3, [r3, #12]
 8004f02:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    float _2q1my;
    float _2q1mz;
    float _2q2mx;
    float _4bx;
    float _4bz;
    float _2q1 = 2.0f * q1;
 8004f06:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8004f0a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004f0e:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
    float _2q2 = 2.0f * q2;
 8004f12:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8004f16:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004f1a:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
    float _2q3 = 2.0f * q3;
 8004f1e:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8004f22:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004f26:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
    float _2q4 = 2.0f * q4;
 8004f2a:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8004f2e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004f32:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
    float _2q1q3 = 2.0f * q1 * q3;
 8004f36:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8004f3a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004f3e:	ed97 7a2f 	vldr	s14, [r7, #188]	; 0xbc
 8004f42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f46:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
    float _2q3q4 = 2.0f * q3 * q4;
 8004f4a:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8004f4e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004f52:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8004f56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f5a:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
    float q1q1 = q1 * q1;
 8004f5e:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8004f62:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004f66:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
    float q1q2 = q1 * q2;
 8004f6a:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 8004f6e:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8004f72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f76:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
    float q1q3 = q1 * q3;
 8004f7a:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 8004f7e:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8004f82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f86:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
    float q1q4 = q1 * q4;
 8004f8a:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 8004f8e:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8004f92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f96:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
    float q2q2 = q2 * q2;
 8004f9a:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8004f9e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004fa2:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
    float q2q3 = q2 * q3;
 8004fa6:	ed97 7a30 	vldr	s14, [r7, #192]	; 0xc0
 8004faa:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8004fae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fb2:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
    float q2q4 = q2 * q4;
 8004fb6:	ed97 7a30 	vldr	s14, [r7, #192]	; 0xc0
 8004fba:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8004fbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fc2:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
    float q3q3 = q3 * q3;
 8004fc6:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8004fca:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004fce:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
    float q3q4 = q3 * q4;
 8004fd2:	ed97 7a2f 	vldr	s14, [r7, #188]	; 0xbc
 8004fd6:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8004fda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fde:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
    float q4q4 = q4 * q4;
 8004fe2:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8004fe6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004fea:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78

    // Normalise accelerometer measurement
    norm = sqrtf(ax * ax + ay * ay + az * az);
 8004fee:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8004ff2:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8004ff6:	edd7 7a08 	vldr	s15, [r7, #32]
 8004ffa:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004ffe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005002:	edd7 7a07 	vldr	s15, [r7, #28]
 8005006:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800500a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800500e:	eeb0 0a67 	vmov.f32	s0, s15
 8005012:	f009 fb91 	bl	800e738 <sqrtf>
 8005016:	ed87 0a1d 	vstr	s0, [r7, #116]	; 0x74
    if (norm == 0.0f) return; // handle NaN
 800501a:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800501e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005022:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005026:	f000 85b2 	beq.w	8005b8e <QuaternionUpdate+0xcd2>
    norm = 1.0f/norm;
 800502a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800502e:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8005032:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005036:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
    ax *= norm;
 800503a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800503e:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8005042:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005046:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    ay *= norm;
 800504a:	ed97 7a08 	vldr	s14, [r7, #32]
 800504e:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8005052:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005056:	edc7 7a08 	vstr	s15, [r7, #32]
    az *= norm;
 800505a:	ed97 7a07 	vldr	s14, [r7, #28]
 800505e:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8005062:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005066:	edc7 7a07 	vstr	s15, [r7, #28]

    // Normalise magnetometer measurement
    norm = sqrtf(mx * mx + my * my + mz * mz);
 800506a:	edd7 7a03 	vldr	s15, [r7, #12]
 800506e:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8005072:	edd7 7a02 	vldr	s15, [r7, #8]
 8005076:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800507a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800507e:	edd7 7a01 	vldr	s15, [r7, #4]
 8005082:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005086:	ee77 7a27 	vadd.f32	s15, s14, s15
 800508a:	eeb0 0a67 	vmov.f32	s0, s15
 800508e:	f009 fb53 	bl	800e738 <sqrtf>
 8005092:	ed87 0a1d 	vstr	s0, [r7, #116]	; 0x74
    if (norm == 0.0f) return; // handle NaN
 8005096:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800509a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800509e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050a2:	f000 8576 	beq.w	8005b92 <QuaternionUpdate+0xcd6>
 80050a6:	e001      	b.n	80050ac <QuaternionUpdate+0x1f0>
 80050a8:	20000008 	.word	0x20000008
    norm = 1.0f/norm;
 80050ac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80050b0:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 80050b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80050b8:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
    mx *= norm;
 80050bc:	ed97 7a03 	vldr	s14, [r7, #12]
 80050c0:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80050c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050c8:	edc7 7a03 	vstr	s15, [r7, #12]
    my *= norm;
 80050cc:	ed97 7a02 	vldr	s14, [r7, #8]
 80050d0:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80050d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050d8:	edc7 7a02 	vstr	s15, [r7, #8]
    mz *= norm;
 80050dc:	ed97 7a01 	vldr	s14, [r7, #4]
 80050e0:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80050e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050e8:	edc7 7a01 	vstr	s15, [r7, #4]

    // Reference direction of Earth's magnetic field
    _2q1mx = 2.0f * q1 * mx;
 80050ec:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 80050f0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80050f4:	ed97 7a03 	vldr	s14, [r7, #12]
 80050f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050fc:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
    _2q1my = 2.0f * q1 * my;
 8005100:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8005104:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005108:	ed97 7a02 	vldr	s14, [r7, #8]
 800510c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005110:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
    _2q1mz = 2.0f * q1 * mz;
 8005114:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8005118:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800511c:	ed97 7a01 	vldr	s14, [r7, #4]
 8005120:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005124:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
    _2q2mx = 2.0f * q2 * mx;
 8005128:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 800512c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005130:	ed97 7a03 	vldr	s14, [r7, #12]
 8005134:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005138:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
    hx = mx * q1q1 - _2q1my * q4 + _2q1mz * q3 + mx * q2q2 + _2q2 * my * q3 + _2q2 * mz * q4 - mx * q3q3 - mx * q4q4;
 800513c:	ed97 7a03 	vldr	s14, [r7, #12]
 8005140:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8005144:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005148:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 800514c:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8005150:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005154:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005158:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 800515c:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8005160:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005164:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005168:	edd7 6a03 	vldr	s13, [r7, #12]
 800516c:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8005170:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005174:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005178:	edd7 6a2c 	vldr	s13, [r7, #176]	; 0xb0
 800517c:	edd7 7a02 	vldr	s15, [r7, #8]
 8005180:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005184:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8005188:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800518c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005190:	edd7 6a2c 	vldr	s13, [r7, #176]	; 0xb0
 8005194:	edd7 7a01 	vldr	s15, [r7, #4]
 8005198:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800519c:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80051a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80051a4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80051a8:	edd7 6a03 	vldr	s13, [r7, #12]
 80051ac:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80051b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80051b4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80051b8:	edd7 6a03 	vldr	s13, [r7, #12]
 80051bc:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80051c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80051c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80051c8:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    hy = _2q1mx * q4 + my * q1q1 - _2q1mz * q2 + _2q2mx * q3 - my * q2q2 + my * q3q3 + _2q3 * mz * q4 - my * q4q4;
 80051cc:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 80051d0:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80051d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80051d8:	edd7 6a02 	vldr	s13, [r7, #8]
 80051dc:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80051e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80051e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80051e8:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 80051ec:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 80051f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80051f4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80051f8:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 80051fc:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8005200:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005204:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005208:	edd7 6a02 	vldr	s13, [r7, #8]
 800520c:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8005210:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005214:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005218:	edd7 6a02 	vldr	s13, [r7, #8]
 800521c:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8005220:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005224:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005228:	edd7 6a2b 	vldr	s13, [r7, #172]	; 0xac
 800522c:	edd7 7a01 	vldr	s15, [r7, #4]
 8005230:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005234:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8005238:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800523c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005240:	edd7 6a02 	vldr	s13, [r7, #8]
 8005244:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8005248:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800524c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005250:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    _2bx = sqrtf(hx * hx + hy * hy);
 8005254:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8005258:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800525c:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8005260:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005264:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005268:	eeb0 0a67 	vmov.f32	s0, s15
 800526c:	f009 fa64 	bl	800e738 <sqrtf>
 8005270:	ed87 0a16 	vstr	s0, [r7, #88]	; 0x58
    _2bz = -_2q1mx * q3 + _2q1my * q2 + mz * q1q1 + _2q2mx * q4 - mz * q2q2 + _2q3 * my * q4 - mz * q3q3 + mz * q4q4;
 8005274:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8005278:	eeb1 7a67 	vneg.f32	s14, s15
 800527c:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8005280:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005284:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 8005288:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 800528c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005290:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005294:	edd7 6a01 	vldr	s13, [r7, #4]
 8005298:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800529c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80052a0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80052a4:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 80052a8:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80052ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80052b0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80052b4:	edd7 6a01 	vldr	s13, [r7, #4]
 80052b8:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80052bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80052c0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80052c4:	edd7 6a2b 	vldr	s13, [r7, #172]	; 0xac
 80052c8:	edd7 7a02 	vldr	s15, [r7, #8]
 80052cc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80052d0:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80052d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80052d8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80052dc:	edd7 6a01 	vldr	s13, [r7, #4]
 80052e0:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80052e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80052e8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80052ec:	edd7 6a01 	vldr	s13, [r7, #4]
 80052f0:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80052f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80052f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80052fc:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    _4bx = 2.0f * _2bx;
 8005300:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8005304:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005308:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    _4bz = 2.0f * _2bz;
 800530c:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8005310:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005314:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c

    // Gradient decent algorithm corrective step
    s1 = -_2q3 * (2.0f * q2q4 - _2q1q3 - ax) + _2q2 * (2.0f * q1q2 + _2q3q4 - ay) - _2bz * q3 * (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx) + (-_2bx * q4 + _2bz * q2) * (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my) + _2bx * q3 * (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
 8005318:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 800531c:	eeb1 7a67 	vneg.f32	s14, s15
 8005320:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8005324:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8005328:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800532c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005330:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8005334:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8005338:	ee27 7a27 	vmul.f32	s14, s14, s15
 800533c:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8005340:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8005344:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8005348:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800534c:	edd7 7a08 	vldr	s15, [r7, #32]
 8005350:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005354:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8005358:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800535c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005360:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 8005364:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8005368:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800536c:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8005370:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8005374:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005378:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 800537c:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005380:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8005384:	ee26 6a27 	vmul.f32	s12, s12, s15
 8005388:	edd7 5a21 	vldr	s11, [r7, #132]	; 0x84
 800538c:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8005390:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8005394:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8005398:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800539c:	ee36 6a27 	vadd.f32	s12, s12, s15
 80053a0:	edd7 7a03 	vldr	s15, [r7, #12]
 80053a4:	ee76 7a67 	vsub.f32	s15, s12, s15
 80053a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80053ac:	ee37 7a67 	vsub.f32	s14, s14, s15
 80053b0:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80053b4:	eef1 6a67 	vneg.f32	s13, s15
 80053b8:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80053bc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80053c0:	ed97 6a15 	vldr	s12, [r7, #84]	; 0x54
 80053c4:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 80053c8:	ee66 7a27 	vmul.f32	s15, s12, s15
 80053cc:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80053d0:	ed97 6a22 	vldr	s12, [r7, #136]	; 0x88
 80053d4:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 80053d8:	ee36 6a67 	vsub.f32	s12, s12, s15
 80053dc:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80053e0:	ee26 6a27 	vmul.f32	s12, s12, s15
 80053e4:	edd7 5a26 	vldr	s11, [r7, #152]	; 0x98
 80053e8:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 80053ec:	ee75 5aa7 	vadd.f32	s11, s11, s15
 80053f0:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80053f4:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80053f8:	ee36 6a27 	vadd.f32	s12, s12, s15
 80053fc:	edd7 7a02 	vldr	s15, [r7, #8]
 8005400:	ee76 7a67 	vsub.f32	s15, s12, s15
 8005404:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005408:	ee37 7a27 	vadd.f32	s14, s14, s15
 800540c:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8005410:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8005414:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005418:	ed97 6a25 	vldr	s12, [r7, #148]	; 0x94
 800541c:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8005420:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005424:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8005428:	ee26 6a27 	vmul.f32	s12, s12, s15
 800542c:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8005430:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8005434:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8005438:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800543c:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8005440:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8005444:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8005448:	ee36 6a27 	vadd.f32	s12, s12, s15
 800544c:	edd7 7a01 	vldr	s15, [r7, #4]
 8005450:	ee76 7a67 	vsub.f32	s15, s12, s15
 8005454:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005458:	ee77 7a27 	vadd.f32	s15, s14, s15
 800545c:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    s2 = _2q4 * (2.0f * q2q4 - _2q1q3 - ax) + _2q1 * (2.0f * q1q2 + _2q3q4 - ay) - 4.0f * q2 * (1.0f - 2.0f * q2q2 - 2.0f * q3q3 - az) + _2bz * q4 * (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx) + (_2bx * q3 + _2bz * q1) * (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my) + (_2bx * q4 - _4bz * q2) * (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
 8005460:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8005464:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8005468:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800546c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005470:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8005474:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005478:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800547c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005480:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8005484:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8005488:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800548c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005490:	edd7 7a08 	vldr	s15, [r7, #32]
 8005494:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005498:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 800549c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80054a0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80054a4:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 80054a8:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 80054ac:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80054b0:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80054b4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80054b8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80054bc:	ee36 6a67 	vsub.f32	s12, s12, s15
 80054c0:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80054c4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80054c8:	ee36 6a67 	vsub.f32	s12, s12, s15
 80054cc:	edd7 7a07 	vldr	s15, [r7, #28]
 80054d0:	ee76 7a67 	vsub.f32	s15, s12, s15
 80054d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80054d8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80054dc:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 80054e0:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80054e4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80054e8:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80054ec:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80054f0:	ee36 6a67 	vsub.f32	s12, s12, s15
 80054f4:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80054f8:	ee36 6a67 	vsub.f32	s12, s12, s15
 80054fc:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8005500:	ee26 6a27 	vmul.f32	s12, s12, s15
 8005504:	edd7 5a21 	vldr	s11, [r7, #132]	; 0x84
 8005508:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 800550c:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8005510:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8005514:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8005518:	ee36 6a27 	vadd.f32	s12, s12, s15
 800551c:	edd7 7a03 	vldr	s15, [r7, #12]
 8005520:	ee76 7a67 	vsub.f32	s15, s12, s15
 8005524:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005528:	ee37 7a27 	vadd.f32	s14, s14, s15
 800552c:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8005530:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8005534:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005538:	ed97 6a15 	vldr	s12, [r7, #84]	; 0x54
 800553c:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8005540:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005544:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005548:	ed97 6a22 	vldr	s12, [r7, #136]	; 0x88
 800554c:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8005550:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005554:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8005558:	ee26 6a27 	vmul.f32	s12, s12, s15
 800555c:	edd7 5a26 	vldr	s11, [r7, #152]	; 0x98
 8005560:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8005564:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8005568:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800556c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8005570:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005574:	edd7 7a02 	vldr	s15, [r7, #8]
 8005578:	ee76 7a67 	vsub.f32	s15, s12, s15
 800557c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005580:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005584:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8005588:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800558c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005590:	ed97 6a13 	vldr	s12, [r7, #76]	; 0x4c
 8005594:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8005598:	ee66 7a27 	vmul.f32	s15, s12, s15
 800559c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80055a0:	ed97 6a25 	vldr	s12, [r7, #148]	; 0x94
 80055a4:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80055a8:	ee36 6a27 	vadd.f32	s12, s12, s15
 80055ac:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80055b0:	ee26 6a27 	vmul.f32	s12, s12, s15
 80055b4:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 80055b8:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80055bc:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80055c0:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80055c4:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80055c8:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80055cc:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80055d0:	ee36 6a27 	vadd.f32	s12, s12, s15
 80055d4:	edd7 7a01 	vldr	s15, [r7, #4]
 80055d8:	ee76 7a67 	vsub.f32	s15, s12, s15
 80055dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80055e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80055e4:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    s3 = -_2q1 * (2.0f * q2q4 - _2q1q3 - ax) + _2q4 * (2.0f * q1q2 + _2q3q4 - ay) - 4.0f * q3 * (1.0f - 2.0f * q2q2 - 2.0f * q3q3 - az) + (-_4bx * q3 - _2bz * q1) * (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx) + (_2bx * q2 + _2bz * q4) * (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my) + (_2bx * q1 - _4bz * q3) * (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
 80055e8:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 80055ec:	eeb1 7a67 	vneg.f32	s14, s15
 80055f0:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80055f4:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80055f8:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80055fc:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005600:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8005604:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8005608:	ee27 7a27 	vmul.f32	s14, s14, s15
 800560c:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8005610:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8005614:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8005618:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800561c:	edd7 7a08 	vldr	s15, [r7, #32]
 8005620:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005624:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8005628:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800562c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005630:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8005634:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8005638:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800563c:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8005640:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005644:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8005648:	ee36 6a67 	vsub.f32	s12, s12, s15
 800564c:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8005650:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005654:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005658:	edd7 7a07 	vldr	s15, [r7, #28]
 800565c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8005660:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005664:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005668:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800566c:	eef1 6a67 	vneg.f32	s13, s15
 8005670:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8005674:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005678:	ed97 6a15 	vldr	s12, [r7, #84]	; 0x54
 800567c:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8005680:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005684:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005688:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800568c:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8005690:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005694:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8005698:	ee36 6a67 	vsub.f32	s12, s12, s15
 800569c:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80056a0:	ee26 6a27 	vmul.f32	s12, s12, s15
 80056a4:	edd7 5a21 	vldr	s11, [r7, #132]	; 0x84
 80056a8:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 80056ac:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80056b0:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80056b4:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80056b8:	ee36 6a27 	vadd.f32	s12, s12, s15
 80056bc:	edd7 7a03 	vldr	s15, [r7, #12]
 80056c0:	ee76 7a67 	vsub.f32	s15, s12, s15
 80056c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80056c8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80056cc:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 80056d0:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 80056d4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80056d8:	ed97 6a15 	vldr	s12, [r7, #84]	; 0x54
 80056dc:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80056e0:	ee66 7a27 	vmul.f32	s15, s12, s15
 80056e4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80056e8:	ed97 6a22 	vldr	s12, [r7, #136]	; 0x88
 80056ec:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 80056f0:	ee36 6a67 	vsub.f32	s12, s12, s15
 80056f4:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80056f8:	ee26 6a27 	vmul.f32	s12, s12, s15
 80056fc:	edd7 5a26 	vldr	s11, [r7, #152]	; 0x98
 8005700:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8005704:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8005708:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800570c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8005710:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005714:	edd7 7a02 	vldr	s15, [r7, #8]
 8005718:	ee76 7a67 	vsub.f32	s15, s12, s15
 800571c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005720:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005724:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8005728:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 800572c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005730:	ed97 6a13 	vldr	s12, [r7, #76]	; 0x4c
 8005734:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8005738:	ee66 7a27 	vmul.f32	s15, s12, s15
 800573c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005740:	ed97 6a25 	vldr	s12, [r7, #148]	; 0x94
 8005744:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8005748:	ee36 6a27 	vadd.f32	s12, s12, s15
 800574c:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8005750:	ee26 6a27 	vmul.f32	s12, s12, s15
 8005754:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8005758:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800575c:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8005760:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8005764:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8005768:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800576c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8005770:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005774:	edd7 7a01 	vldr	s15, [r7, #4]
 8005778:	ee76 7a67 	vsub.f32	s15, s12, s15
 800577c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005780:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005784:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    s4 = _2q2 * (2.0f * q2q4 - _2q1q3 - ax) + _2q3 * (2.0f * q1q2 + _2q3q4 - ay) + (-_4bx * q4 + _2bz * q2) * (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx) + (-_2bx * q1 + _2bz * q3) * (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my) + _2bx * q2 * (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
 8005788:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800578c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8005790:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8005794:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005798:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800579c:	ee37 7a67 	vsub.f32	s14, s14, s15
 80057a0:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 80057a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80057a8:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 80057ac:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80057b0:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80057b4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80057b8:	edd7 7a08 	vldr	s15, [r7, #32]
 80057bc:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80057c0:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 80057c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80057c8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80057cc:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80057d0:	eef1 6a67 	vneg.f32	s13, s15
 80057d4:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80057d8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80057dc:	ed97 6a15 	vldr	s12, [r7, #84]	; 0x54
 80057e0:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 80057e4:	ee66 7a27 	vmul.f32	s15, s12, s15
 80057e8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80057ec:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80057f0:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80057f4:	ee36 6a67 	vsub.f32	s12, s12, s15
 80057f8:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80057fc:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005800:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8005804:	ee26 6a27 	vmul.f32	s12, s12, s15
 8005808:	edd7 5a21 	vldr	s11, [r7, #132]	; 0x84
 800580c:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8005810:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8005814:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8005818:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800581c:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005820:	edd7 7a03 	vldr	s15, [r7, #12]
 8005824:	ee76 7a67 	vsub.f32	s15, s12, s15
 8005828:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800582c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005830:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8005834:	eef1 6a67 	vneg.f32	s13, s15
 8005838:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 800583c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005840:	ed97 6a15 	vldr	s12, [r7, #84]	; 0x54
 8005844:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8005848:	ee66 7a27 	vmul.f32	s15, s12, s15
 800584c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005850:	ed97 6a22 	vldr	s12, [r7, #136]	; 0x88
 8005854:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8005858:	ee36 6a67 	vsub.f32	s12, s12, s15
 800585c:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8005860:	ee26 6a27 	vmul.f32	s12, s12, s15
 8005864:	edd7 5a26 	vldr	s11, [r7, #152]	; 0x98
 8005868:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 800586c:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8005870:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8005874:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8005878:	ee36 6a27 	vadd.f32	s12, s12, s15
 800587c:	edd7 7a02 	vldr	s15, [r7, #8]
 8005880:	ee76 7a67 	vsub.f32	s15, s12, s15
 8005884:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005888:	ee37 7a27 	vadd.f32	s14, s14, s15
 800588c:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8005890:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8005894:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005898:	ed97 6a25 	vldr	s12, [r7, #148]	; 0x94
 800589c:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80058a0:	ee36 6a27 	vadd.f32	s12, s12, s15
 80058a4:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80058a8:	ee26 6a27 	vmul.f32	s12, s12, s15
 80058ac:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 80058b0:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80058b4:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80058b8:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80058bc:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80058c0:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80058c4:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80058c8:	ee36 6a27 	vadd.f32	s12, s12, s15
 80058cc:	edd7 7a01 	vldr	s15, [r7, #4]
 80058d0:	ee76 7a67 	vsub.f32	s15, s12, s15
 80058d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80058d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80058dc:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    norm = sqrtf(s1 * s1 + s2 * s2 + s3 * s3 + s4 * s4);    // normalise step magnitude
 80058e0:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80058e4:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80058e8:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80058ec:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80058f0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80058f4:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80058f8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80058fc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005900:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8005904:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005908:	ee77 7a27 	vadd.f32	s15, s14, s15
 800590c:	eeb0 0a67 	vmov.f32	s0, s15
 8005910:	f008 ff12 	bl	800e738 <sqrtf>
 8005914:	ed87 0a1d 	vstr	s0, [r7, #116]	; 0x74
    norm = 1.0f/norm;
 8005918:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800591c:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8005920:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005924:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
    s1 *= norm;
 8005928:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800592c:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8005930:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005934:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    s2 *= norm;
 8005938:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800593c:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8005940:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005944:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    s3 *= norm;
 8005948:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800594c:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8005950:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005954:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    s4 *= norm;
 8005958:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800595c:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8005960:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005964:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    // Compute rate of change of quaternion
    qDot1 = 0.5f * (-q2 * gx - q3 * gy - q4 * gz) - beta * s1;
 8005968:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 800596c:	eeb1 7a67 	vneg.f32	s14, s15
 8005970:	edd7 7a06 	vldr	s15, [r7, #24]
 8005974:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005978:	edd7 6a2f 	vldr	s13, [r7, #188]	; 0xbc
 800597c:	edd7 7a05 	vldr	s15, [r7, #20]
 8005980:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005984:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005988:	edd7 6a2e 	vldr	s13, [r7, #184]	; 0xb8
 800598c:	edd7 7a04 	vldr	s15, [r7, #16]
 8005990:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005994:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005998:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800599c:	ee27 7a87 	vmul.f32	s14, s15, s14
 80059a0:	4b7e      	ldr	r3, [pc, #504]	; (8005b9c <QuaternionUpdate+0xce0>)
 80059a2:	edd3 6a00 	vldr	s13, [r3]
 80059a6:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80059aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80059ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80059b2:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
    qDot2 = 0.5f * (q1 * gx + q3 * gz - q4 * gy) - beta * s2;
 80059b6:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 80059ba:	edd7 7a06 	vldr	s15, [r7, #24]
 80059be:	ee27 7a27 	vmul.f32	s14, s14, s15
 80059c2:	edd7 6a2f 	vldr	s13, [r7, #188]	; 0xbc
 80059c6:	edd7 7a04 	vldr	s15, [r7, #16]
 80059ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80059ce:	ee37 7a27 	vadd.f32	s14, s14, s15
 80059d2:	edd7 6a2e 	vldr	s13, [r7, #184]	; 0xb8
 80059d6:	edd7 7a05 	vldr	s15, [r7, #20]
 80059da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80059de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80059e2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80059e6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80059ea:	4b6c      	ldr	r3, [pc, #432]	; (8005b9c <QuaternionUpdate+0xce0>)
 80059ec:	edd3 6a00 	vldr	s13, [r3]
 80059f0:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80059f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80059f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80059fc:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
    qDot3 = 0.5f * (q1 * gy - q2 * gz + q4 * gx) - beta * s3;
 8005a00:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 8005a04:	edd7 7a05 	vldr	s15, [r7, #20]
 8005a08:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005a0c:	edd7 6a30 	vldr	s13, [r7, #192]	; 0xc0
 8005a10:	edd7 7a04 	vldr	s15, [r7, #16]
 8005a14:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005a18:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005a1c:	edd7 6a2e 	vldr	s13, [r7, #184]	; 0xb8
 8005a20:	edd7 7a06 	vldr	s15, [r7, #24]
 8005a24:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005a28:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005a2c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005a30:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005a34:	4b59      	ldr	r3, [pc, #356]	; (8005b9c <QuaternionUpdate+0xce0>)
 8005a36:	edd3 6a00 	vldr	s13, [r3]
 8005a3a:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8005a3e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005a42:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005a46:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    qDot4 = 0.5f * (q1 * gz + q2 * gy - q3 * gx) - beta * s4;
 8005a4a:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 8005a4e:	edd7 7a04 	vldr	s15, [r7, #16]
 8005a52:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005a56:	edd7 6a30 	vldr	s13, [r7, #192]	; 0xc0
 8005a5a:	edd7 7a05 	vldr	s15, [r7, #20]
 8005a5e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005a62:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005a66:	edd7 6a2f 	vldr	s13, [r7, #188]	; 0xbc
 8005a6a:	edd7 7a06 	vldr	s15, [r7, #24]
 8005a6e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005a72:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005a76:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005a7a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005a7e:	4b47      	ldr	r3, [pc, #284]	; (8005b9c <QuaternionUpdate+0xce0>)
 8005a80:	edd3 6a00 	vldr	s13, [r3]
 8005a84:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8005a88:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005a8c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005a90:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

    // Integrate to yield quaternion
    q1 += qDot1 * deltat;
 8005a94:	4b42      	ldr	r3, [pc, #264]	; (8005ba0 <QuaternionUpdate+0xce4>)
 8005a96:	ed93 7a00 	vldr	s14, [r3]
 8005a9a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8005a9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005aa2:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 8005aa6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005aaa:	edc7 7a31 	vstr	s15, [r7, #196]	; 0xc4
    q2 += qDot2 * deltat;
 8005aae:	4b3c      	ldr	r3, [pc, #240]	; (8005ba0 <QuaternionUpdate+0xce4>)
 8005ab0:	ed93 7a00 	vldr	s14, [r3]
 8005ab4:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8005ab8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005abc:	ed97 7a30 	vldr	s14, [r7, #192]	; 0xc0
 8005ac0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005ac4:	edc7 7a30 	vstr	s15, [r7, #192]	; 0xc0
    q3 += qDot3 * deltat;
 8005ac8:	4b35      	ldr	r3, [pc, #212]	; (8005ba0 <QuaternionUpdate+0xce4>)
 8005aca:	ed93 7a00 	vldr	s14, [r3]
 8005ace:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8005ad2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ad6:	ed97 7a2f 	vldr	s14, [r7, #188]	; 0xbc
 8005ada:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005ade:	edc7 7a2f 	vstr	s15, [r7, #188]	; 0xbc
    q4 += qDot4 * deltat;
 8005ae2:	4b2f      	ldr	r3, [pc, #188]	; (8005ba0 <QuaternionUpdate+0xce4>)
 8005ae4:	ed93 7a00 	vldr	s14, [r3]
 8005ae8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8005aec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005af0:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8005af4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005af8:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
    norm = sqrtf(q1 * q1 + q2 * q2 + q3 * q3 + q4 * q4);    // normalise quaternion
 8005afc:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8005b00:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8005b04:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8005b08:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005b0c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005b10:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8005b14:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005b18:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005b1c:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8005b20:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005b24:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005b28:	eeb0 0a67 	vmov.f32	s0, s15
 8005b2c:	f008 fe04 	bl	800e738 <sqrtf>
 8005b30:	ed87 0a1d 	vstr	s0, [r7, #116]	; 0x74
    norm = 1.0f/norm;
 8005b34:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005b38:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8005b3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b40:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
    q[0] = q1 * norm;
 8005b44:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 8005b48:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8005b4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b50:	4b14      	ldr	r3, [pc, #80]	; (8005ba4 <QuaternionUpdate+0xce8>)
 8005b52:	edc3 7a00 	vstr	s15, [r3]
    q[1] = q2 * norm;
 8005b56:	ed97 7a30 	vldr	s14, [r7, #192]	; 0xc0
 8005b5a:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8005b5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b62:	4b10      	ldr	r3, [pc, #64]	; (8005ba4 <QuaternionUpdate+0xce8>)
 8005b64:	edc3 7a01 	vstr	s15, [r3, #4]
    q[2] = q3 * norm;
 8005b68:	ed97 7a2f 	vldr	s14, [r7, #188]	; 0xbc
 8005b6c:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8005b70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b74:	4b0b      	ldr	r3, [pc, #44]	; (8005ba4 <QuaternionUpdate+0xce8>)
 8005b76:	edc3 7a02 	vstr	s15, [r3, #8]
    q[3] = q4 * norm;
 8005b7a:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8005b7e:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8005b82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b86:	4b07      	ldr	r3, [pc, #28]	; (8005ba4 <QuaternionUpdate+0xce8>)
 8005b88:	edc3 7a03 	vstr	s15, [r3, #12]
 8005b8c:	e002      	b.n	8005b94 <QuaternionUpdate+0xcd8>
    if (norm == 0.0f) return; // handle NaN
 8005b8e:	bf00      	nop
 8005b90:	e000      	b.n	8005b94 <QuaternionUpdate+0xcd8>
    if (norm == 0.0f) return; // handle NaN
 8005b92:	bf00      	nop

}
 8005b94:	37c8      	adds	r7, #200	; 0xc8
 8005b96:	46bd      	mov	sp, r7
 8005b98:	bd80      	pop	{r7, pc}
 8005b9a:	bf00      	nop
 8005b9c:	20000004 	.word	0x20000004
 8005ba0:	2000065c 	.word	0x2000065c
 8005ba4:	20000008 	.word	0x20000008

08005ba8 <MS5803_read>:
 * @param handle The I2C handle being used
 * @param bufp The buffer to be read into
 * @param len The length of the buffer in 8-bit increments
 * @retval HAL Status
 */
HAL_StatusTypeDef MS5803_read(void *handle, uint8_t *bufp, uint16_t len) {
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b086      	sub	sp, #24
 8005bac:	af02      	add	r7, sp, #8
 8005bae:	60f8      	str	r0, [r7, #12]
 8005bb0:	60b9      	str	r1, [r7, #8]
 8005bb2:	4613      	mov	r3, r2
 8005bb4:	80fb      	strh	r3, [r7, #6]
	return HAL_I2C_Master_Receive(handle, MS5803_ADDR, bufp, len, 1000);
 8005bb6:	88fb      	ldrh	r3, [r7, #6]
 8005bb8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005bbc:	9200      	str	r2, [sp, #0]
 8005bbe:	68ba      	ldr	r2, [r7, #8]
 8005bc0:	21ec      	movs	r1, #236	; 0xec
 8005bc2:	68f8      	ldr	r0, [r7, #12]
 8005bc4:	f001 fcf6 	bl	80075b4 <HAL_I2C_Master_Receive>
 8005bc8:	4603      	mov	r3, r0
}
 8005bca:	4618      	mov	r0, r3
 8005bcc:	3710      	adds	r7, #16
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bd80      	pop	{r7, pc}

08005bd2 <MS5803_write>:
 * @param handle The I2C handle being used
 * @param bufp The buffer to read from
 * @param len The length of the buffer in 8-bit increments
 * @retval HAL Status
 */
HAL_StatusTypeDef MS5803_write(void *handle, uint8_t *bufp, uint16_t len) {
 8005bd2:	b580      	push	{r7, lr}
 8005bd4:	b086      	sub	sp, #24
 8005bd6:	af02      	add	r7, sp, #8
 8005bd8:	60f8      	str	r0, [r7, #12]
 8005bda:	60b9      	str	r1, [r7, #8]
 8005bdc:	4613      	mov	r3, r2
 8005bde:	80fb      	strh	r3, [r7, #6]
	return HAL_I2C_Master_Transmit(handle, MS5803_ADDR, bufp, len, 1000);
 8005be0:	88fb      	ldrh	r3, [r7, #6]
 8005be2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005be6:	9200      	str	r2, [sp, #0]
 8005be8:	68ba      	ldr	r2, [r7, #8]
 8005bea:	21ec      	movs	r1, #236	; 0xec
 8005bec:	68f8      	ldr	r0, [r7, #12]
 8005bee:	f001 fbe3 	bl	80073b8 <HAL_I2C_Master_Transmit>
 8005bf2:	4603      	mov	r3, r0
}
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	3710      	adds	r7, #16
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	bd80      	pop	{r7, pc}

08005bfc <MS5803_reset>:
/**
 * @brief Resets the MS5803
 * @param handle The I2C Handle being used
 * @retval HAL Status
 */
HAL_StatusTypeDef MS5803_reset(void *handle) {
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b086      	sub	sp, #24
 8005c00:	af02      	add	r7, sp, #8
 8005c02:	6078      	str	r0, [r7, #4]
	uint8_t buf;
	buf = MS5803_RESET;
 8005c04:	231e      	movs	r3, #30
 8005c06:	73bb      	strb	r3, [r7, #14]
	HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit(handle, MS5803_ADDR, &buf, 1, 100);
 8005c08:	f107 020e 	add.w	r2, r7, #14
 8005c0c:	2364      	movs	r3, #100	; 0x64
 8005c0e:	9300      	str	r3, [sp, #0]
 8005c10:	2301      	movs	r3, #1
 8005c12:	21ec      	movs	r1, #236	; 0xec
 8005c14:	6878      	ldr	r0, [r7, #4]
 8005c16:	f001 fbcf 	bl	80073b8 <HAL_I2C_Master_Transmit>
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(3);
 8005c1e:	2003      	movs	r0, #3
 8005c20:	f000 ff10 	bl	8006a44 <HAL_Delay>

	return ret;
 8005c24:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c26:	4618      	mov	r0, r3
 8005c28:	3710      	adds	r7, #16
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	bd80      	pop	{r7, pc}
	...

08005c30 <MS5803_Init>:
 * @param handle The I2C Handle being used
 * @param coeff The pointer to the coefficient being read in to
 * @param value The coefficient number
 * @return HAL Status
 */
void MS5803_Init(void *handle, uint8_t i) {
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b086      	sub	sp, #24
 8005c34:	af02      	add	r7, sp, #8
 8005c36:	6078      	str	r0, [r7, #4]
 8005c38:	460b      	mov	r3, r1
 8005c3a:	70fb      	strb	r3, [r7, #3]
	uint8_t buf;
	for(int i = 1; i <= 6; i++) {
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	60fb      	str	r3, [r7, #12]
 8005c40:	e026      	b.n	8005c90 <MS5803_Init+0x60>
		buf = MS5803_PROM + (i << 1); //coefficient to read
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	b2db      	uxtb	r3, r3
 8005c46:	005b      	lsls	r3, r3, #1
 8005c48:	b2db      	uxtb	r3, r3
 8005c4a:	3b60      	subs	r3, #96	; 0x60
 8005c4c:	b2db      	uxtb	r3, r3
 8005c4e:	72fb      	strb	r3, [r7, #11]
		MS5803_write(handle, &buf, 1); //tell MS5803 that we want it
 8005c50:	f107 030b 	add.w	r3, r7, #11
 8005c54:	2201      	movs	r2, #1
 8005c56:	4619      	mov	r1, r3
 8005c58:	6878      	ldr	r0, [r7, #4]
 8005c5a:	f7ff ffba 	bl	8005bd2 <MS5803_write>

		uint8_t c[2];
		HAL_I2C_Master_Receive(handle, MS5803_ADDR, c, 2, 100);
 8005c5e:	f107 0208 	add.w	r2, r7, #8
 8005c62:	2364      	movs	r3, #100	; 0x64
 8005c64:	9300      	str	r3, [sp, #0]
 8005c66:	2302      	movs	r3, #2
 8005c68:	21ec      	movs	r1, #236	; 0xec
 8005c6a:	6878      	ldr	r0, [r7, #4]
 8005c6c:	f001 fca2 	bl	80075b4 <HAL_I2C_Master_Receive>
		//MS5803_read(handle, &c, 2); //read the coefficient
		MS5803_coefficient[i-1] = (c[0]<<8)|c[1]; //turn the two 8-bit values into one coherent value.
 8005c70:	7a3b      	ldrb	r3, [r7, #8]
 8005c72:	021b      	lsls	r3, r3, #8
 8005c74:	b21a      	sxth	r2, r3
 8005c76:	7a7b      	ldrb	r3, [r7, #9]
 8005c78:	b21b      	sxth	r3, r3
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	b21a      	sxth	r2, r3
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	3b01      	subs	r3, #1
 8005c82:	b291      	uxth	r1, r2
 8005c84:	4a06      	ldr	r2, [pc, #24]	; (8005ca0 <MS5803_Init+0x70>)
 8005c86:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i = 1; i <= 6; i++) {
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	3301      	adds	r3, #1
 8005c8e:	60fb      	str	r3, [r7, #12]
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	2b06      	cmp	r3, #6
 8005c94:	ddd5      	ble.n	8005c42 <MS5803_Init+0x12>
	}

}
 8005c96:	bf00      	nop
 8005c98:	bf00      	nop
 8005c9a:	3710      	adds	r7, #16
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	bd80      	pop	{r7, pc}
 8005ca0:	200006b0 	.word	0x200006b0

08005ca4 <MS5803_ADC>:
 * @param handle The I2C Handle being used
 * @param type The measurement type, chosen from measurement enum
 * @param prec The precision to use, chosen from precision enum
 * @retval Raw 24-bit data from the ADC
 */
uint32_t MS5803_ADC(void *handle, measurement type, precision prec) {
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b084      	sub	sp, #16
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
 8005cac:	460b      	mov	r3, r1
 8005cae:	70fb      	strb	r3, [r7, #3]
 8005cb0:	4613      	mov	r3, r2
 8005cb2:	70bb      	strb	r3, [r7, #2]
	uint32_t result;
	uint8_t buf[4];
	buf[0] = MS5803_ADC_CONV + type + prec; //tell the ADC to convert along with the precision and type
 8005cb4:	78fa      	ldrb	r2, [r7, #3]
 8005cb6:	78bb      	ldrb	r3, [r7, #2]
 8005cb8:	4413      	add	r3, r2
 8005cba:	b2db      	uxtb	r3, r3
 8005cbc:	3340      	adds	r3, #64	; 0x40
 8005cbe:	b2db      	uxtb	r3, r3
 8005cc0:	723b      	strb	r3, [r7, #8]
	MS5803_write(handle, buf, 1);
 8005cc2:	f107 0308 	add.w	r3, r7, #8
 8005cc6:	2201      	movs	r2, #1
 8005cc8:	4619      	mov	r1, r3
 8005cca:	6878      	ldr	r0, [r7, #4]
 8005ccc:	f7ff ff81 	bl	8005bd2 <MS5803_write>
	HAL_Delay(1);
 8005cd0:	2001      	movs	r0, #1
 8005cd2:	f000 feb7 	bl	8006a44 <HAL_Delay>
	switch(prec) {
 8005cd6:	78bb      	ldrb	r3, [r7, #2]
 8005cd8:	2b08      	cmp	r3, #8
 8005cda:	d824      	bhi.n	8005d26 <MS5803_ADC+0x82>
 8005cdc:	a201      	add	r2, pc, #4	; (adr r2, 8005ce4 <MS5803_ADC+0x40>)
 8005cde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ce2:	bf00      	nop
 8005ce4:	08005d09 	.word	0x08005d09
 8005ce8:	08005d27 	.word	0x08005d27
 8005cec:	08005d0f 	.word	0x08005d0f
 8005cf0:	08005d27 	.word	0x08005d27
 8005cf4:	08005d15 	.word	0x08005d15
 8005cf8:	08005d27 	.word	0x08005d27
 8005cfc:	08005d1b 	.word	0x08005d1b
 8005d00:	08005d27 	.word	0x08005d27
 8005d04:	08005d21 	.word	0x08005d21
	case ADC_256: HAL_Delay(1);
 8005d08:	2001      	movs	r0, #1
 8005d0a:	f000 fe9b 	bl	8006a44 <HAL_Delay>
	case ADC_512: HAL_Delay(3);
 8005d0e:	2003      	movs	r0, #3
 8005d10:	f000 fe98 	bl	8006a44 <HAL_Delay>
	case ADC_1024: HAL_Delay(4);
 8005d14:	2004      	movs	r0, #4
 8005d16:	f000 fe95 	bl	8006a44 <HAL_Delay>
	case ADC_2048: HAL_Delay(6);
 8005d1a:	2006      	movs	r0, #6
 8005d1c:	f000 fe92 	bl	8006a44 <HAL_Delay>
	case ADC_4096: HAL_Delay(10); //Delay longer if higher precision, as conversion takes longer.
 8005d20:	200a      	movs	r0, #10
 8005d22:	f000 fe8f 	bl	8006a44 <HAL_Delay>
	}
	buf[0] = MS5803_ADC_READ; //Tell the MS5803 that we want to read the ADC
 8005d26:	2300      	movs	r3, #0
 8005d28:	723b      	strb	r3, [r7, #8]
	MS5803_write(handle, buf, 1);
 8005d2a:	f107 0308 	add.w	r3, r7, #8
 8005d2e:	2201      	movs	r2, #1
 8005d30:	4619      	mov	r1, r3
 8005d32:	6878      	ldr	r0, [r7, #4]
 8005d34:	f7ff ff4d 	bl	8005bd2 <MS5803_write>

	//uint8_t c[3];
	MS5803_read(handle, buf, 3); //Read out the ADC
 8005d38:	f107 0308 	add.w	r3, r7, #8
 8005d3c:	2203      	movs	r2, #3
 8005d3e:	4619      	mov	r1, r3
 8005d40:	6878      	ldr	r0, [r7, #4]
 8005d42:	f7ff ff31 	bl	8005ba8 <MS5803_read>
	result = (buf[0] << 16) | (buf[1] << 8) | buf[2]; //Convert the three 8-bit values into one value.
 8005d46:	7a3b      	ldrb	r3, [r7, #8]
 8005d48:	041a      	lsls	r2, r3, #16
 8005d4a:	7a7b      	ldrb	r3, [r7, #9]
 8005d4c:	021b      	lsls	r3, r3, #8
 8005d4e:	4313      	orrs	r3, r2
 8005d50:	7aba      	ldrb	r2, [r7, #10]
 8005d52:	4313      	orrs	r3, r2
 8005d54:	60fb      	str	r3, [r7, #12]
	return result;
 8005d56:	68fb      	ldr	r3, [r7, #12]
}
 8005d58:	4618      	mov	r0, r3
 8005d5a:	3710      	adds	r7, #16
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	bd80      	pop	{r7, pc}

08005d60 <MS5803_get_values>:
 * @param handle The I2C Handle being used
 * @param prec The precision to be used
 * @param temperature The pointer to the temperature variable being read in to.
 * @param pressure The pointer to the pressure variable being read in to.
 */
void MS5803_get_values(void *handle, precision prec, float *temperature, float *pressure) {
 8005d60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d64:	b0d8      	sub	sp, #352	; 0x160
 8005d66:	af00      	add	r7, sp, #0
 8005d68:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c
 8005d6c:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
 8005d70:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005d74:	460b      	mov	r3, r1
 8005d76:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
	uint32_t temperature_raw = MS5803_ADC(handle, TEMPERATURE, prec);
 8005d7a:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8005d7e:	461a      	mov	r2, r3
 8005d80:	2110      	movs	r1, #16
 8005d82:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 8005d86:	f7ff ff8d 	bl	8005ca4 <MS5803_ADC>
 8005d8a:	f8c7 0144 	str.w	r0, [r7, #324]	; 0x144
	uint32_t pressure_raw = MS5803_ADC(handle, PRESSURE, prec); //get temperature and pressure raw values
 8005d8e:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8005d92:	461a      	mov	r2, r3
 8005d94:	2100      	movs	r1, #0
 8005d96:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 8005d9a:	f7ff ff83 	bl	8005ca4 <MS5803_ADC>
 8005d9e:	f8c7 0140 	str.w	r0, [r7, #320]	; 0x140
	int32_t temp_calc;
	int32_t pressure_calc;

	int32_t dT;

	dT = temperature_raw - ((int32_t)MS5803_coefficient[4] << 8);
 8005da2:	4b78      	ldr	r3, [pc, #480]	; (8005f84 <MS5803_get_values+0x224>)
 8005da4:	891b      	ldrh	r3, [r3, #8]
 8005da6:	021b      	lsls	r3, r3, #8
 8005da8:	461a      	mov	r2, r3
 8005daa:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8005dae:	1a9b      	subs	r3, r3, r2
 8005db0:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
	temp_calc = (((int64_t)dT * MS5803_coefficient[5]) >> 23) + 2000;
 8005db4:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8005db8:	17da      	asrs	r2, r3, #31
 8005dba:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005dbe:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005dc2:	4b70      	ldr	r3, [pc, #448]	; (8005f84 <MS5803_get_values+0x224>)
 8005dc4:	895b      	ldrh	r3, [r3, #10]
 8005dc6:	b29b      	uxth	r3, r3
 8005dc8:	2200      	movs	r2, #0
 8005dca:	469a      	mov	sl, r3
 8005dcc:	4693      	mov	fp, r2
 8005dce:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 8005dd2:	460b      	mov	r3, r1
 8005dd4:	fb0a f203 	mul.w	r2, sl, r3
 8005dd8:	4603      	mov	r3, r0
 8005dda:	fb03 f30b 	mul.w	r3, r3, fp
 8005dde:	4413      	add	r3, r2
 8005de0:	4602      	mov	r2, r0
 8005de2:	fba2 450a 	umull	r4, r5, r2, sl
 8005de6:	442b      	add	r3, r5
 8005de8:	461d      	mov	r5, r3
 8005dea:	f04f 0200 	mov.w	r2, #0
 8005dee:	f04f 0300 	mov.w	r3, #0
 8005df2:	0de2      	lsrs	r2, r4, #23
 8005df4:	ea42 2245 	orr.w	r2, r2, r5, lsl #9
 8005df8:	15eb      	asrs	r3, r5, #23
 8005dfa:	4613      	mov	r3, r2
 8005dfc:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8005e00:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
	//*temperature = temp/100.f; //determine temperature according to datasheet

	int64_t T2, OFF2, SENS2, OFF, SENS;

	if (temp_calc < 2000)
 8005e04:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005e08:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8005e0c:	f280 80be 	bge.w	8005f8c <MS5803_get_values+0x22c>
		// If temp_calc is below 20.0C
		{
			T2 = 3 * (((int64_t)dT * dT) >> 33);
 8005e10:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8005e14:	17da      	asrs	r2, r3, #31
 8005e16:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005e1a:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 8005e1e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8005e22:	17da      	asrs	r2, r3, #31
 8005e24:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005e28:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005e2c:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 8005e30:	462b      	mov	r3, r5
 8005e32:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 8005e36:	4642      	mov	r2, r8
 8005e38:	fb02 f203 	mul.w	r2, r2, r3
 8005e3c:	464b      	mov	r3, r9
 8005e3e:	4621      	mov	r1, r4
 8005e40:	fb01 f303 	mul.w	r3, r1, r3
 8005e44:	4413      	add	r3, r2
 8005e46:	4622      	mov	r2, r4
 8005e48:	4641      	mov	r1, r8
 8005e4a:	fba2 1201 	umull	r1, r2, r2, r1
 8005e4e:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8005e52:	460a      	mov	r2, r1
 8005e54:	f8c7 2108 	str.w	r2, [r7, #264]	; 0x108
 8005e58:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8005e5c:	4413      	add	r3, r2
 8005e5e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005e62:	f04f 0000 	mov.w	r0, #0
 8005e66:	f04f 0100 	mov.w	r1, #0
 8005e6a:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 8005e6e:	462b      	mov	r3, r5
 8005e70:	1058      	asrs	r0, r3, #1
 8005e72:	462b      	mov	r3, r5
 8005e74:	17d9      	asrs	r1, r3, #31
 8005e76:	4602      	mov	r2, r0
 8005e78:	460b      	mov	r3, r1
 8005e7a:	1894      	adds	r4, r2, r2
 8005e7c:	663c      	str	r4, [r7, #96]	; 0x60
 8005e7e:	415b      	adcs	r3, r3
 8005e80:	667b      	str	r3, [r7, #100]	; 0x64
 8005e82:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8005e86:	1814      	adds	r4, r2, r0
 8005e88:	65bc      	str	r4, [r7, #88]	; 0x58
 8005e8a:	414b      	adcs	r3, r1
 8005e8c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005e8e:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8005e92:	e9c7 3456 	strd	r3, r4, [r7, #344]	; 0x158
			OFF2 = 3 * ((temp_calc - 2000) * (temp_calc - 2000)) / 2;
 8005e96:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005e9a:	f5a3 62fa 	sub.w	r2, r3, #2000	; 0x7d0
 8005e9e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005ea2:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
 8005ea6:	fb03 f202 	mul.w	r2, r3, r2
 8005eaa:	4613      	mov	r3, r2
 8005eac:	005b      	lsls	r3, r3, #1
 8005eae:	441a      	add	r2, r3
 8005eb0:	0fd3      	lsrs	r3, r2, #31
 8005eb2:	4413      	add	r3, r2
 8005eb4:	105b      	asrs	r3, r3, #1
 8005eb6:	17da      	asrs	r2, r3, #31
 8005eb8:	653b      	str	r3, [r7, #80]	; 0x50
 8005eba:	657a      	str	r2, [r7, #84]	; 0x54
 8005ebc:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8005ec0:	e9c7 3454 	strd	r3, r4, [r7, #336]	; 0x150
			SENS2 = 5 * ((temp_calc - 2000) * (temp_calc - 2000)) / 8;
 8005ec4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005ec8:	f5a3 62fa 	sub.w	r2, r3, #2000	; 0x7d0
 8005ecc:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005ed0:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
 8005ed4:	fb03 f202 	mul.w	r2, r3, r2
 8005ed8:	4613      	mov	r3, r2
 8005eda:	009b      	lsls	r3, r3, #2
 8005edc:	4413      	add	r3, r2
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	da00      	bge.n	8005ee4 <MS5803_get_values+0x184>
 8005ee2:	3307      	adds	r3, #7
 8005ee4:	10db      	asrs	r3, r3, #3
 8005ee6:	17da      	asrs	r2, r3, #31
 8005ee8:	64bb      	str	r3, [r7, #72]	; 0x48
 8005eea:	64fa      	str	r2, [r7, #76]	; 0x4c
 8005eec:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8005ef0:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148

			if (temp_calc < -1500)
 8005ef4:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8005ef8:	4b23      	ldr	r3, [pc, #140]	; (8005f88 <MS5803_get_values+0x228>)
 8005efa:	429a      	cmp	r2, r3
 8005efc:	f280 80a9 	bge.w	8006052 <MS5803_get_values+0x2f2>
			// If temp_calc is below -15.0C
			{
				OFF2 = OFF2 + 7 * ((temp_calc + 1500) * (temp_calc + 1500));
 8005f00:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005f04:	f203 52dc 	addw	r2, r3, #1500	; 0x5dc
 8005f08:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005f0c:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 8005f10:	fb03 f202 	mul.w	r2, r3, r2
 8005f14:	4613      	mov	r3, r2
 8005f16:	00db      	lsls	r3, r3, #3
 8005f18:	1a9b      	subs	r3, r3, r2
 8005f1a:	17da      	asrs	r2, r3, #31
 8005f1c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005f20:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005f24:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 8005f28:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8005f2c:	4621      	mov	r1, r4
 8005f2e:	1851      	adds	r1, r2, r1
 8005f30:	6439      	str	r1, [r7, #64]	; 0x40
 8005f32:	4629      	mov	r1, r5
 8005f34:	eb43 0101 	adc.w	r1, r3, r1
 8005f38:	6479      	str	r1, [r7, #68]	; 0x44
 8005f3a:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8005f3e:	e9c7 3454 	strd	r3, r4, [r7, #336]	; 0x150
				SENS2 = SENS2 + 4 * ((temp_calc + 1500) * (temp_calc + 1500));
 8005f42:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005f46:	f203 52dc 	addw	r2, r3, #1500	; 0x5dc
 8005f4a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005f4e:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 8005f52:	fb02 f303 	mul.w	r3, r2, r3
 8005f56:	009b      	lsls	r3, r3, #2
 8005f58:	17da      	asrs	r2, r3, #31
 8005f5a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005f5e:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8005f62:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8005f66:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 8005f6a:	4621      	mov	r1, r4
 8005f6c:	1851      	adds	r1, r2, r1
 8005f6e:	63b9      	str	r1, [r7, #56]	; 0x38
 8005f70:	4629      	mov	r1, r5
 8005f72:	eb43 0101 	adc.w	r1, r3, r1
 8005f76:	63f9      	str	r1, [r7, #60]	; 0x3c
 8005f78:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8005f7c:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
 8005f80:	e067      	b.n	8006052 <MS5803_get_values+0x2f2>
 8005f82:	bf00      	nop
 8005f84:	200006b0 	.word	0x200006b0
 8005f88:	fffffa24 	.word	0xfffffa24
			}
		}
		else
		// If temp_calc is above 20.0C
		{
			T2 = 7 * ((uint64_t)dT * dT) / pow(2, 37);
 8005f8c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8005f90:	17da      	asrs	r2, r3, #31
 8005f92:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005f96:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005f9a:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8005f9e:	17da      	asrs	r2, r3, #31
 8005fa0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005fa4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005fa8:	e9d7 4530 	ldrd	r4, r5, [r7, #192]	; 0xc0
 8005fac:	462b      	mov	r3, r5
 8005fae:	e9d7 ab2e 	ldrd	sl, fp, [r7, #184]	; 0xb8
 8005fb2:	4652      	mov	r2, sl
 8005fb4:	fb02 f203 	mul.w	r2, r2, r3
 8005fb8:	465b      	mov	r3, fp
 8005fba:	4621      	mov	r1, r4
 8005fbc:	fb01 f303 	mul.w	r3, r1, r3
 8005fc0:	4413      	add	r3, r2
 8005fc2:	4622      	mov	r2, r4
 8005fc4:	4651      	mov	r1, sl
 8005fc6:	fba2 8901 	umull	r8, r9, r2, r1
 8005fca:	444b      	add	r3, r9
 8005fcc:	4699      	mov	r9, r3
 8005fce:	4642      	mov	r2, r8
 8005fd0:	464b      	mov	r3, r9
 8005fd2:	f04f 0000 	mov.w	r0, #0
 8005fd6:	f04f 0100 	mov.w	r1, #0
 8005fda:	00d9      	lsls	r1, r3, #3
 8005fdc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005fe0:	00d0      	lsls	r0, r2, #3
 8005fe2:	4602      	mov	r2, r0
 8005fe4:	460b      	mov	r3, r1
 8005fe6:	ebb2 0108 	subs.w	r1, r2, r8
 8005fea:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 8005fee:	eb63 0309 	sbc.w	r3, r3, r9
 8005ff2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005ff6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005ffa:	f7fa fae7 	bl	80005cc <__aeabi_ul2d>
 8005ffe:	f04f 0200 	mov.w	r2, #0
 8006002:	4bbf      	ldr	r3, [pc, #764]	; (8006300 <MS5803_get_values+0x5a0>)
 8006004:	f7fa fc42 	bl	800088c <__aeabi_ddiv>
 8006008:	4602      	mov	r2, r0
 800600a:	460b      	mov	r3, r1
 800600c:	4610      	mov	r0, r2
 800600e:	4619      	mov	r1, r3
 8006010:	f7fa fe72 	bl	8000cf8 <__aeabi_d2lz>
 8006014:	4602      	mov	r2, r0
 8006016:	460b      	mov	r3, r1
 8006018:	e9c7 2356 	strd	r2, r3, [r7, #344]	; 0x158
			OFF2 = ((temp_calc - 2000) * (temp_calc - 2000)) / 16;
 800601c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006020:	f5a3 62fa 	sub.w	r2, r3, #2000	; 0x7d0
 8006024:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006028:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
 800602c:	fb02 f303 	mul.w	r3, r2, r3
 8006030:	2b00      	cmp	r3, #0
 8006032:	da00      	bge.n	8006036 <MS5803_get_values+0x2d6>
 8006034:	330f      	adds	r3, #15
 8006036:	111b      	asrs	r3, r3, #4
 8006038:	17da      	asrs	r2, r3, #31
 800603a:	633b      	str	r3, [r7, #48]	; 0x30
 800603c:	637a      	str	r2, [r7, #52]	; 0x34
 800603e:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8006042:	e9c7 3454 	strd	r3, r4, [r7, #336]	; 0x150
			SENS2 = 0;
 8006046:	f04f 0200 	mov.w	r2, #0
 800604a:	f04f 0300 	mov.w	r3, #0
 800604e:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
		}

		// Now bring it all together to apply offsets

		OFF = ((int64_t)MS5803_coefficient[1] << 16) + (((MS5803_coefficient[3] * (int64_t)dT)) >> 7);
 8006052:	4bac      	ldr	r3, [pc, #688]	; (8006304 <MS5803_get_values+0x5a4>)
 8006054:	885b      	ldrh	r3, [r3, #2]
 8006056:	b29b      	uxth	r3, r3
 8006058:	2200      	movs	r2, #0
 800605a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800605e:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006062:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006066:	460b      	mov	r3, r1
 8006068:	0c1b      	lsrs	r3, r3, #16
 800606a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800606e:	460b      	mov	r3, r1
 8006070:	041b      	lsls	r3, r3, #16
 8006072:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006076:	4ba3      	ldr	r3, [pc, #652]	; (8006304 <MS5803_get_values+0x5a4>)
 8006078:	88db      	ldrh	r3, [r3, #6]
 800607a:	b29b      	uxth	r3, r3
 800607c:	2200      	movs	r2, #0
 800607e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006082:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8006086:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800608a:	17da      	asrs	r2, r3, #31
 800608c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006090:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006094:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 8006098:	462b      	mov	r3, r5
 800609a:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
 800609e:	4642      	mov	r2, r8
 80060a0:	fb02 f203 	mul.w	r2, r2, r3
 80060a4:	464b      	mov	r3, r9
 80060a6:	4621      	mov	r1, r4
 80060a8:	fb01 f303 	mul.w	r3, r1, r3
 80060ac:	4413      	add	r3, r2
 80060ae:	4622      	mov	r2, r4
 80060b0:	4641      	mov	r1, r8
 80060b2:	fba2 1201 	umull	r1, r2, r2, r1
 80060b6:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 80060ba:	460a      	mov	r2, r1
 80060bc:	f8c7 2100 	str.w	r2, [r7, #256]	; 0x100
 80060c0:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 80060c4:	4413      	add	r3, r2
 80060c6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80060ca:	f04f 0200 	mov.w	r2, #0
 80060ce:	f04f 0300 	mov.w	r3, #0
 80060d2:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 80060d6:	4621      	mov	r1, r4
 80060d8:	09ca      	lsrs	r2, r1, #7
 80060da:	4629      	mov	r1, r5
 80060dc:	ea42 6241 	orr.w	r2, r2, r1, lsl #25
 80060e0:	4629      	mov	r1, r5
 80060e2:	11cb      	asrs	r3, r1, #7
 80060e4:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	; 0xa0
 80060e8:	4621      	mov	r1, r4
 80060ea:	1889      	adds	r1, r1, r2
 80060ec:	62b9      	str	r1, [r7, #40]	; 0x28
 80060ee:	4629      	mov	r1, r5
 80060f0:	eb43 0101 	adc.w	r1, r3, r1
 80060f4:	62f9      	str	r1, [r7, #44]	; 0x2c
 80060f6:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 80060fa:	e9c7 344c 	strd	r3, r4, [r7, #304]	; 0x130
		SENS = ((int64_t)MS5803_coefficient[0] << 15) + (((MS5803_coefficient[2] * (int64_t)dT)) >> 8);
 80060fe:	4b81      	ldr	r3, [pc, #516]	; (8006304 <MS5803_get_values+0x5a4>)
 8006100:	881b      	ldrh	r3, [r3, #0]
 8006102:	b29b      	uxth	r3, r3
 8006104:	2200      	movs	r2, #0
 8006106:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800610a:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800610e:	f04f 0000 	mov.w	r0, #0
 8006112:	f04f 0100 	mov.w	r1, #0
 8006116:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 800611a:	462b      	mov	r3, r5
 800611c:	03d9      	lsls	r1, r3, #15
 800611e:	4623      	mov	r3, r4
 8006120:	ea41 4153 	orr.w	r1, r1, r3, lsr #17
 8006124:	4623      	mov	r3, r4
 8006126:	03d8      	lsls	r0, r3, #15
 8006128:	4b76      	ldr	r3, [pc, #472]	; (8006304 <MS5803_get_values+0x5a4>)
 800612a:	889b      	ldrh	r3, [r3, #4]
 800612c:	b29b      	uxth	r3, r3
 800612e:	2200      	movs	r2, #0
 8006130:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006134:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8006138:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800613c:	17da      	asrs	r2, r3, #31
 800613e:	67bb      	str	r3, [r7, #120]	; 0x78
 8006140:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006142:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	; 0x80
 8006146:	464b      	mov	r3, r9
 8006148:	e9d7 ab1e 	ldrd	sl, fp, [r7, #120]	; 0x78
 800614c:	4652      	mov	r2, sl
 800614e:	fb02 f203 	mul.w	r2, r2, r3
 8006152:	465b      	mov	r3, fp
 8006154:	4644      	mov	r4, r8
 8006156:	fb04 f303 	mul.w	r3, r4, r3
 800615a:	4413      	add	r3, r2
 800615c:	4642      	mov	r2, r8
 800615e:	4654      	mov	r4, sl
 8006160:	fba2 4204 	umull	r4, r2, r2, r4
 8006164:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 8006168:	4622      	mov	r2, r4
 800616a:	f8c7 20f8 	str.w	r2, [r7, #248]	; 0xf8
 800616e:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8006172:	4413      	add	r3, r2
 8006174:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006178:	f04f 0200 	mov.w	r2, #0
 800617c:	f04f 0300 	mov.w	r3, #0
 8006180:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	; 0xf8
 8006184:	4644      	mov	r4, r8
 8006186:	0a22      	lsrs	r2, r4, #8
 8006188:	464c      	mov	r4, r9
 800618a:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
 800618e:	464c      	mov	r4, r9
 8006190:	1223      	asrs	r3, r4, #8
 8006192:	1884      	adds	r4, r0, r2
 8006194:	623c      	str	r4, [r7, #32]
 8006196:	eb41 0303 	adc.w	r3, r1, r3
 800619a:	627b      	str	r3, [r7, #36]	; 0x24
 800619c:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80061a0:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128

		temp_calc = temp_calc - T2;
 80061a4:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 80061a8:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80061ac:	1ad3      	subs	r3, r2, r3
 80061ae:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
		OFF = OFF - OFF2;
 80061b2:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	; 0x130
 80061b6:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 80061ba:	1a84      	subs	r4, r0, r2
 80061bc:	61bc      	str	r4, [r7, #24]
 80061be:	eb61 0303 	sbc.w	r3, r1, r3
 80061c2:	61fb      	str	r3, [r7, #28]
 80061c4:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80061c8:	e9c7 344c 	strd	r3, r4, [r7, #304]	; 0x130
		SENS = SENS - SENS2;
 80061cc:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 80061d0:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 80061d4:	1a84      	subs	r4, r0, r2
 80061d6:	613c      	str	r4, [r7, #16]
 80061d8:	eb61 0303 	sbc.w	r3, r1, r3
 80061dc:	617b      	str	r3, [r7, #20]
 80061de:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80061e2:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128

		// Now lets calculate the pressure

		pressure_calc = (((SENS * pressure_raw) / 2097152) - OFF) / 32768;
 80061e6:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80061ea:	2200      	movs	r2, #0
 80061ec:	673b      	str	r3, [r7, #112]	; 0x70
 80061ee:	677a      	str	r2, [r7, #116]	; 0x74
 80061f0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80061f4:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	; 0x70
 80061f8:	462a      	mov	r2, r5
 80061fa:	fb02 f203 	mul.w	r2, r2, r3
 80061fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006202:	4621      	mov	r1, r4
 8006204:	fb01 f303 	mul.w	r3, r1, r3
 8006208:	4413      	add	r3, r2
 800620a:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800620e:	4621      	mov	r1, r4
 8006210:	fba2 1201 	umull	r1, r2, r2, r1
 8006214:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8006218:	460a      	mov	r2, r1
 800621a:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 800621e:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8006222:	4413      	add	r3, r2
 8006224:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006228:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 800622c:	2b00      	cmp	r3, #0
 800622e:	da07      	bge.n	8006240 <MS5803_get_values+0x4e0>
 8006230:	4935      	ldr	r1, [pc, #212]	; (8006308 <MS5803_get_values+0x5a8>)
 8006232:	1851      	adds	r1, r2, r1
 8006234:	60b9      	str	r1, [r7, #8]
 8006236:	f143 0300 	adc.w	r3, r3, #0
 800623a:	60fb      	str	r3, [r7, #12]
 800623c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006240:	f04f 0000 	mov.w	r0, #0
 8006244:	f04f 0100 	mov.w	r1, #0
 8006248:	0d50      	lsrs	r0, r2, #21
 800624a:	ea40 20c3 	orr.w	r0, r0, r3, lsl #11
 800624e:	1559      	asrs	r1, r3, #21
 8006250:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 8006254:	1a84      	subs	r4, r0, r2
 8006256:	66bc      	str	r4, [r7, #104]	; 0x68
 8006258:	eb61 0303 	sbc.w	r3, r1, r3
 800625c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800625e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8006262:	2b00      	cmp	r3, #0
 8006264:	da08      	bge.n	8006278 <MS5803_get_values+0x518>
 8006266:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800626a:	1851      	adds	r1, r2, r1
 800626c:	6039      	str	r1, [r7, #0]
 800626e:	f143 0300 	adc.w	r3, r3, #0
 8006272:	607b      	str	r3, [r7, #4]
 8006274:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006278:	f04f 0000 	mov.w	r0, #0
 800627c:	f04f 0100 	mov.w	r1, #0
 8006280:	0bd0      	lsrs	r0, r2, #15
 8006282:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
 8006286:	13d9      	asrs	r1, r3, #15
 8006288:	4602      	mov	r2, r0
 800628a:	460b      	mov	r3, r1
 800628c:	4613      	mov	r3, r2
 800628e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
//	int64_t OFF = (MS5803_coefficient[1]*65536)+add;
//	int64_t SENS = (MS5803_coefficient[0] * 32768) + (MS5803_coefficient[2]*dT/256);
//	int64_t mult = pressure_raw*SENS/2097152;
//	int32_t pres = (mult-OFF)/32768;

	*pressure = Kalman_getPressure(&KalmanX, (pressure_calc / 10.0f), 0.5, 0.5); //determine pressure according to datasheet
 8006292:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006296:	ee07 3a90 	vmov	s15, r3
 800629a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800629e:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80062a2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80062a6:	ed9f 2b14 	vldr	d2, [pc, #80]	; 80062f8 <MS5803_get_values+0x598>
 80062aa:	ed9f 1b13 	vldr	d1, [pc, #76]	; 80062f8 <MS5803_get_values+0x598>
 80062ae:	eeb0 0a47 	vmov.f32	s0, s14
 80062b2:	4816      	ldr	r0, [pc, #88]	; (800630c <MS5803_get_values+0x5ac>)
 80062b4:	f7fa fec0 	bl	8001038 <Kalman_getPressure>
 80062b8:	ec53 2b10 	vmov	r2, r3, d0
 80062bc:	4610      	mov	r0, r2
 80062be:	4619      	mov	r1, r3
 80062c0:	f7fa fcb2 	bl	8000c28 <__aeabi_d2f>
 80062c4:	4602      	mov	r2, r0
 80062c6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80062ca:	601a      	str	r2, [r3, #0]
	*temperature = temp_calc/ 100.0f;
 80062cc:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80062d0:	ee07 3a90 	vmov	s15, r3
 80062d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80062d8:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8006310 <MS5803_get_values+0x5b0>
 80062dc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80062e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062e4:	edc3 7a00 	vstr	s15, [r3]
}
 80062e8:	bf00      	nop
 80062ea:	f507 77b0 	add.w	r7, r7, #352	; 0x160
 80062ee:	46bd      	mov	sp, r7
 80062f0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80062f4:	f3af 8000 	nop.w
 80062f8:	00000000 	.word	0x00000000
 80062fc:	3fe00000 	.word	0x3fe00000
 8006300:	42400000 	.word	0x42400000
 8006304:	200006b0 	.word	0x200006b0
 8006308:	001fffff 	.word	0x001fffff
 800630c:	20000018 	.word	0x20000018
 8006310:	42c80000 	.word	0x42c80000

08006314 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b082      	sub	sp, #8
 8006318:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800631a:	2300      	movs	r3, #0
 800631c:	607b      	str	r3, [r7, #4]
 800631e:	4b10      	ldr	r3, [pc, #64]	; (8006360 <HAL_MspInit+0x4c>)
 8006320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006322:	4a0f      	ldr	r2, [pc, #60]	; (8006360 <HAL_MspInit+0x4c>)
 8006324:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006328:	6453      	str	r3, [r2, #68]	; 0x44
 800632a:	4b0d      	ldr	r3, [pc, #52]	; (8006360 <HAL_MspInit+0x4c>)
 800632c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800632e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006332:	607b      	str	r3, [r7, #4]
 8006334:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006336:	2300      	movs	r3, #0
 8006338:	603b      	str	r3, [r7, #0]
 800633a:	4b09      	ldr	r3, [pc, #36]	; (8006360 <HAL_MspInit+0x4c>)
 800633c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800633e:	4a08      	ldr	r2, [pc, #32]	; (8006360 <HAL_MspInit+0x4c>)
 8006340:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006344:	6413      	str	r3, [r2, #64]	; 0x40
 8006346:	4b06      	ldr	r3, [pc, #24]	; (8006360 <HAL_MspInit+0x4c>)
 8006348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800634a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800634e:	603b      	str	r3, [r7, #0]
 8006350:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8006352:	2007      	movs	r0, #7
 8006354:	f000 fc6a 	bl	8006c2c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006358:	bf00      	nop
 800635a:	3708      	adds	r7, #8
 800635c:	46bd      	mov	sp, r7
 800635e:	bd80      	pop	{r7, pc}
 8006360:	40023800 	.word	0x40023800

08006364 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b08a      	sub	sp, #40	; 0x28
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800636c:	f107 0314 	add.w	r3, r7, #20
 8006370:	2200      	movs	r2, #0
 8006372:	601a      	str	r2, [r3, #0]
 8006374:	605a      	str	r2, [r3, #4]
 8006376:	609a      	str	r2, [r3, #8]
 8006378:	60da      	str	r2, [r3, #12]
 800637a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	4a19      	ldr	r2, [pc, #100]	; (80063e8 <HAL_I2C_MspInit+0x84>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d12c      	bne.n	80063e0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006386:	2300      	movs	r3, #0
 8006388:	613b      	str	r3, [r7, #16]
 800638a:	4b18      	ldr	r3, [pc, #96]	; (80063ec <HAL_I2C_MspInit+0x88>)
 800638c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800638e:	4a17      	ldr	r2, [pc, #92]	; (80063ec <HAL_I2C_MspInit+0x88>)
 8006390:	f043 0302 	orr.w	r3, r3, #2
 8006394:	6313      	str	r3, [r2, #48]	; 0x30
 8006396:	4b15      	ldr	r3, [pc, #84]	; (80063ec <HAL_I2C_MspInit+0x88>)
 8006398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800639a:	f003 0302 	and.w	r3, r3, #2
 800639e:	613b      	str	r3, [r7, #16]
 80063a0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80063a2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80063a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80063a8:	2312      	movs	r3, #18
 80063aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80063ac:	2300      	movs	r3, #0
 80063ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80063b0:	2303      	movs	r3, #3
 80063b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80063b4:	2304      	movs	r3, #4
 80063b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80063b8:	f107 0314 	add.w	r3, r7, #20
 80063bc:	4619      	mov	r1, r3
 80063be:	480c      	ldr	r0, [pc, #48]	; (80063f0 <HAL_I2C_MspInit+0x8c>)
 80063c0:	f000 fd08 	bl	8006dd4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80063c4:	2300      	movs	r3, #0
 80063c6:	60fb      	str	r3, [r7, #12]
 80063c8:	4b08      	ldr	r3, [pc, #32]	; (80063ec <HAL_I2C_MspInit+0x88>)
 80063ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063cc:	4a07      	ldr	r2, [pc, #28]	; (80063ec <HAL_I2C_MspInit+0x88>)
 80063ce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80063d2:	6413      	str	r3, [r2, #64]	; 0x40
 80063d4:	4b05      	ldr	r3, [pc, #20]	; (80063ec <HAL_I2C_MspInit+0x88>)
 80063d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80063dc:	60fb      	str	r3, [r7, #12]
 80063de:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80063e0:	bf00      	nop
 80063e2:	3728      	adds	r7, #40	; 0x28
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bd80      	pop	{r7, pc}
 80063e8:	40005400 	.word	0x40005400
 80063ec:	40023800 	.word	0x40023800
 80063f0:	40020400 	.word	0x40020400

080063f4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b08a      	sub	sp, #40	; 0x28
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80063fc:	f107 0314 	add.w	r3, r7, #20
 8006400:	2200      	movs	r2, #0
 8006402:	601a      	str	r2, [r3, #0]
 8006404:	605a      	str	r2, [r3, #4]
 8006406:	609a      	str	r2, [r3, #8]
 8006408:	60da      	str	r2, [r3, #12]
 800640a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	4a28      	ldr	r2, [pc, #160]	; (80064b4 <HAL_SPI_MspInit+0xc0>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d14a      	bne.n	80064ac <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8006416:	2300      	movs	r3, #0
 8006418:	613b      	str	r3, [r7, #16]
 800641a:	4b27      	ldr	r3, [pc, #156]	; (80064b8 <HAL_SPI_MspInit+0xc4>)
 800641c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800641e:	4a26      	ldr	r2, [pc, #152]	; (80064b8 <HAL_SPI_MspInit+0xc4>)
 8006420:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006424:	6413      	str	r3, [r2, #64]	; 0x40
 8006426:	4b24      	ldr	r3, [pc, #144]	; (80064b8 <HAL_SPI_MspInit+0xc4>)
 8006428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800642a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800642e:	613b      	str	r3, [r7, #16]
 8006430:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006432:	2300      	movs	r3, #0
 8006434:	60fb      	str	r3, [r7, #12]
 8006436:	4b20      	ldr	r3, [pc, #128]	; (80064b8 <HAL_SPI_MspInit+0xc4>)
 8006438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800643a:	4a1f      	ldr	r2, [pc, #124]	; (80064b8 <HAL_SPI_MspInit+0xc4>)
 800643c:	f043 0304 	orr.w	r3, r3, #4
 8006440:	6313      	str	r3, [r2, #48]	; 0x30
 8006442:	4b1d      	ldr	r3, [pc, #116]	; (80064b8 <HAL_SPI_MspInit+0xc4>)
 8006444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006446:	f003 0304 	and.w	r3, r3, #4
 800644a:	60fb      	str	r3, [r7, #12]
 800644c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800644e:	2300      	movs	r3, #0
 8006450:	60bb      	str	r3, [r7, #8]
 8006452:	4b19      	ldr	r3, [pc, #100]	; (80064b8 <HAL_SPI_MspInit+0xc4>)
 8006454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006456:	4a18      	ldr	r2, [pc, #96]	; (80064b8 <HAL_SPI_MspInit+0xc4>)
 8006458:	f043 0302 	orr.w	r3, r3, #2
 800645c:	6313      	str	r3, [r2, #48]	; 0x30
 800645e:	4b16      	ldr	r3, [pc, #88]	; (80064b8 <HAL_SPI_MspInit+0xc4>)
 8006460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006462:	f003 0302 	and.w	r3, r3, #2
 8006466:	60bb      	str	r3, [r7, #8]
 8006468:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC1     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800646a:	2302      	movs	r3, #2
 800646c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800646e:	2302      	movs	r3, #2
 8006470:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006472:	2300      	movs	r3, #0
 8006474:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006476:	2303      	movs	r3, #3
 8006478:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 800647a:	2307      	movs	r3, #7
 800647c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800647e:	f107 0314 	add.w	r3, r7, #20
 8006482:	4619      	mov	r1, r3
 8006484:	480d      	ldr	r0, [pc, #52]	; (80064bc <HAL_SPI_MspInit+0xc8>)
 8006486:	f000 fca5 	bl	8006dd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800648a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800648e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006490:	2302      	movs	r3, #2
 8006492:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006494:	2300      	movs	r3, #0
 8006496:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006498:	2303      	movs	r3, #3
 800649a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800649c:	2305      	movs	r3, #5
 800649e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80064a0:	f107 0314 	add.w	r3, r7, #20
 80064a4:	4619      	mov	r1, r3
 80064a6:	4806      	ldr	r0, [pc, #24]	; (80064c0 <HAL_SPI_MspInit+0xcc>)
 80064a8:	f000 fc94 	bl	8006dd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80064ac:	bf00      	nop
 80064ae:	3728      	adds	r7, #40	; 0x28
 80064b0:	46bd      	mov	sp, r7
 80064b2:	bd80      	pop	{r7, pc}
 80064b4:	40003800 	.word	0x40003800
 80064b8:	40023800 	.word	0x40023800
 80064bc:	40020800 	.word	0x40020800
 80064c0:	40020400 	.word	0x40020400

080064c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b084      	sub	sp, #16
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	4a0e      	ldr	r2, [pc, #56]	; (800650c <HAL_TIM_Base_MspInit+0x48>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d115      	bne.n	8006502 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 80064d6:	2300      	movs	r3, #0
 80064d8:	60fb      	str	r3, [r7, #12]
 80064da:	4b0d      	ldr	r3, [pc, #52]	; (8006510 <HAL_TIM_Base_MspInit+0x4c>)
 80064dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064de:	4a0c      	ldr	r2, [pc, #48]	; (8006510 <HAL_TIM_Base_MspInit+0x4c>)
 80064e0:	f043 0320 	orr.w	r3, r3, #32
 80064e4:	6413      	str	r3, [r2, #64]	; 0x40
 80064e6:	4b0a      	ldr	r3, [pc, #40]	; (8006510 <HAL_TIM_Base_MspInit+0x4c>)
 80064e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ea:	f003 0320 	and.w	r3, r3, #32
 80064ee:	60fb      	str	r3, [r7, #12]
 80064f0:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80064f2:	2200      	movs	r2, #0
 80064f4:	2100      	movs	r1, #0
 80064f6:	2037      	movs	r0, #55	; 0x37
 80064f8:	f000 fba3 	bl	8006c42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80064fc:	2037      	movs	r0, #55	; 0x37
 80064fe:	f000 fbbc 	bl	8006c7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8006502:	bf00      	nop
 8006504:	3710      	adds	r7, #16
 8006506:	46bd      	mov	sp, r7
 8006508:	bd80      	pop	{r7, pc}
 800650a:	bf00      	nop
 800650c:	40001400 	.word	0x40001400
 8006510:	40023800 	.word	0x40023800

08006514 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006514:	b580      	push	{r7, lr}
 8006516:	b08e      	sub	sp, #56	; 0x38
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800651c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006520:	2200      	movs	r2, #0
 8006522:	601a      	str	r2, [r3, #0]
 8006524:	605a      	str	r2, [r3, #4]
 8006526:	609a      	str	r2, [r3, #8]
 8006528:	60da      	str	r2, [r3, #12]
 800652a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	4a54      	ldr	r2, [pc, #336]	; (8006684 <HAL_UART_MspInit+0x170>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d135      	bne.n	80065a2 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8006536:	2300      	movs	r3, #0
 8006538:	623b      	str	r3, [r7, #32]
 800653a:	4b53      	ldr	r3, [pc, #332]	; (8006688 <HAL_UART_MspInit+0x174>)
 800653c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800653e:	4a52      	ldr	r2, [pc, #328]	; (8006688 <HAL_UART_MspInit+0x174>)
 8006540:	f043 0310 	orr.w	r3, r3, #16
 8006544:	6453      	str	r3, [r2, #68]	; 0x44
 8006546:	4b50      	ldr	r3, [pc, #320]	; (8006688 <HAL_UART_MspInit+0x174>)
 8006548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800654a:	f003 0310 	and.w	r3, r3, #16
 800654e:	623b      	str	r3, [r7, #32]
 8006550:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006552:	2300      	movs	r3, #0
 8006554:	61fb      	str	r3, [r7, #28]
 8006556:	4b4c      	ldr	r3, [pc, #304]	; (8006688 <HAL_UART_MspInit+0x174>)
 8006558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800655a:	4a4b      	ldr	r2, [pc, #300]	; (8006688 <HAL_UART_MspInit+0x174>)
 800655c:	f043 0301 	orr.w	r3, r3, #1
 8006560:	6313      	str	r3, [r2, #48]	; 0x30
 8006562:	4b49      	ldr	r3, [pc, #292]	; (8006688 <HAL_UART_MspInit+0x174>)
 8006564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006566:	f003 0301 	and.w	r3, r3, #1
 800656a:	61fb      	str	r3, [r7, #28]
 800656c:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800656e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8006572:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006574:	2302      	movs	r3, #2
 8006576:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006578:	2300      	movs	r3, #0
 800657a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800657c:	2303      	movs	r3, #3
 800657e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006580:	2307      	movs	r3, #7
 8006582:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006584:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006588:	4619      	mov	r1, r3
 800658a:	4840      	ldr	r0, [pc, #256]	; (800668c <HAL_UART_MspInit+0x178>)
 800658c:	f000 fc22 	bl	8006dd4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8006590:	2200      	movs	r2, #0
 8006592:	2100      	movs	r1, #0
 8006594:	2025      	movs	r0, #37	; 0x25
 8006596:	f000 fb54 	bl	8006c42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800659a:	2025      	movs	r0, #37	; 0x25
 800659c:	f000 fb6d 	bl	8006c7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80065a0:	e06b      	b.n	800667a <HAL_UART_MspInit+0x166>
  else if(huart->Instance==USART2)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	4a3a      	ldr	r2, [pc, #232]	; (8006690 <HAL_UART_MspInit+0x17c>)
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d12c      	bne.n	8006606 <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART2_CLK_ENABLE();
 80065ac:	2300      	movs	r3, #0
 80065ae:	61bb      	str	r3, [r7, #24]
 80065b0:	4b35      	ldr	r3, [pc, #212]	; (8006688 <HAL_UART_MspInit+0x174>)
 80065b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065b4:	4a34      	ldr	r2, [pc, #208]	; (8006688 <HAL_UART_MspInit+0x174>)
 80065b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80065ba:	6413      	str	r3, [r2, #64]	; 0x40
 80065bc:	4b32      	ldr	r3, [pc, #200]	; (8006688 <HAL_UART_MspInit+0x174>)
 80065be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065c4:	61bb      	str	r3, [r7, #24]
 80065c6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80065c8:	2300      	movs	r3, #0
 80065ca:	617b      	str	r3, [r7, #20]
 80065cc:	4b2e      	ldr	r3, [pc, #184]	; (8006688 <HAL_UART_MspInit+0x174>)
 80065ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065d0:	4a2d      	ldr	r2, [pc, #180]	; (8006688 <HAL_UART_MspInit+0x174>)
 80065d2:	f043 0301 	orr.w	r3, r3, #1
 80065d6:	6313      	str	r3, [r2, #48]	; 0x30
 80065d8:	4b2b      	ldr	r3, [pc, #172]	; (8006688 <HAL_UART_MspInit+0x174>)
 80065da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065dc:	f003 0301 	and.w	r3, r3, #1
 80065e0:	617b      	str	r3, [r7, #20]
 80065e2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80065e4:	230c      	movs	r3, #12
 80065e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80065e8:	2302      	movs	r3, #2
 80065ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065ec:	2300      	movs	r3, #0
 80065ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80065f0:	2303      	movs	r3, #3
 80065f2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80065f4:	2307      	movs	r3, #7
 80065f6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80065f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80065fc:	4619      	mov	r1, r3
 80065fe:	4823      	ldr	r0, [pc, #140]	; (800668c <HAL_UART_MspInit+0x178>)
 8006600:	f000 fbe8 	bl	8006dd4 <HAL_GPIO_Init>
}
 8006604:	e039      	b.n	800667a <HAL_UART_MspInit+0x166>
  else if(huart->Instance==USART3)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	4a22      	ldr	r2, [pc, #136]	; (8006694 <HAL_UART_MspInit+0x180>)
 800660c:	4293      	cmp	r3, r2
 800660e:	d134      	bne.n	800667a <HAL_UART_MspInit+0x166>
    __HAL_RCC_USART3_CLK_ENABLE();
 8006610:	2300      	movs	r3, #0
 8006612:	613b      	str	r3, [r7, #16]
 8006614:	4b1c      	ldr	r3, [pc, #112]	; (8006688 <HAL_UART_MspInit+0x174>)
 8006616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006618:	4a1b      	ldr	r2, [pc, #108]	; (8006688 <HAL_UART_MspInit+0x174>)
 800661a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800661e:	6413      	str	r3, [r2, #64]	; 0x40
 8006620:	4b19      	ldr	r3, [pc, #100]	; (8006688 <HAL_UART_MspInit+0x174>)
 8006622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006624:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006628:	613b      	str	r3, [r7, #16]
 800662a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800662c:	2300      	movs	r3, #0
 800662e:	60fb      	str	r3, [r7, #12]
 8006630:	4b15      	ldr	r3, [pc, #84]	; (8006688 <HAL_UART_MspInit+0x174>)
 8006632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006634:	4a14      	ldr	r2, [pc, #80]	; (8006688 <HAL_UART_MspInit+0x174>)
 8006636:	f043 0304 	orr.w	r3, r3, #4
 800663a:	6313      	str	r3, [r2, #48]	; 0x30
 800663c:	4b12      	ldr	r3, [pc, #72]	; (8006688 <HAL_UART_MspInit+0x174>)
 800663e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006640:	f003 0304 	and.w	r3, r3, #4
 8006644:	60fb      	str	r3, [r7, #12]
 8006646:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8006648:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800664c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800664e:	2302      	movs	r3, #2
 8006650:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006652:	2300      	movs	r3, #0
 8006654:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006656:	2303      	movs	r3, #3
 8006658:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800665a:	2307      	movs	r3, #7
 800665c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800665e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006662:	4619      	mov	r1, r3
 8006664:	480c      	ldr	r0, [pc, #48]	; (8006698 <HAL_UART_MspInit+0x184>)
 8006666:	f000 fbb5 	bl	8006dd4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800666a:	2200      	movs	r2, #0
 800666c:	2100      	movs	r1, #0
 800666e:	2027      	movs	r0, #39	; 0x27
 8006670:	f000 fae7 	bl	8006c42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8006674:	2027      	movs	r0, #39	; 0x27
 8006676:	f000 fb00 	bl	8006c7a <HAL_NVIC_EnableIRQ>
}
 800667a:	bf00      	nop
 800667c:	3738      	adds	r7, #56	; 0x38
 800667e:	46bd      	mov	sp, r7
 8006680:	bd80      	pop	{r7, pc}
 8006682:	bf00      	nop
 8006684:	40011000 	.word	0x40011000
 8006688:	40023800 	.word	0x40023800
 800668c:	40020000 	.word	0x40020000
 8006690:	40004400 	.word	0x40004400
 8006694:	40004800 	.word	0x40004800
 8006698:	40020800 	.word	0x40020800

0800669c <SDTimer_Handler>:
extern uint16_t Timer1,Timer2;



void SDTimer_Handler(void)
{
 800669c:	b480      	push	{r7}
 800669e:	af00      	add	r7, sp, #0
	if(Timer1>0)
 80066a0:	4b0c      	ldr	r3, [pc, #48]	; (80066d4 <SDTimer_Handler+0x38>)
 80066a2:	881b      	ldrh	r3, [r3, #0]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d005      	beq.n	80066b4 <SDTimer_Handler+0x18>
	{
		Timer1--;
 80066a8:	4b0a      	ldr	r3, [pc, #40]	; (80066d4 <SDTimer_Handler+0x38>)
 80066aa:	881b      	ldrh	r3, [r3, #0]
 80066ac:	3b01      	subs	r3, #1
 80066ae:	b29a      	uxth	r2, r3
 80066b0:	4b08      	ldr	r3, [pc, #32]	; (80066d4 <SDTimer_Handler+0x38>)
 80066b2:	801a      	strh	r2, [r3, #0]
	}
	if(Timer2>0)
 80066b4:	4b08      	ldr	r3, [pc, #32]	; (80066d8 <SDTimer_Handler+0x3c>)
 80066b6:	881b      	ldrh	r3, [r3, #0]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d005      	beq.n	80066c8 <SDTimer_Handler+0x2c>
		Timer2--;
 80066bc:	4b06      	ldr	r3, [pc, #24]	; (80066d8 <SDTimer_Handler+0x3c>)
 80066be:	881b      	ldrh	r3, [r3, #0]
 80066c0:	3b01      	subs	r3, #1
 80066c2:	b29a      	uxth	r2, r3
 80066c4:	4b04      	ldr	r3, [pc, #16]	; (80066d8 <SDTimer_Handler+0x3c>)
 80066c6:	801a      	strh	r2, [r3, #0]
}
 80066c8:	bf00      	nop
 80066ca:	46bd      	mov	sp, r7
 80066cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d0:	4770      	bx	lr
 80066d2:	bf00      	nop
 80066d4:	20000254 	.word	0x20000254
 80066d8:	20000256 	.word	0x20000256

080066dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80066dc:	b480      	push	{r7}
 80066de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80066e0:	e7fe      	b.n	80066e0 <NMI_Handler+0x4>

080066e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80066e2:	b480      	push	{r7}
 80066e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80066e6:	e7fe      	b.n	80066e6 <HardFault_Handler+0x4>

080066e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80066e8:	b480      	push	{r7}
 80066ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80066ec:	e7fe      	b.n	80066ec <MemManage_Handler+0x4>

080066ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80066ee:	b480      	push	{r7}
 80066f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80066f2:	e7fe      	b.n	80066f2 <BusFault_Handler+0x4>

080066f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80066f4:	b480      	push	{r7}
 80066f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80066f8:	e7fe      	b.n	80066f8 <UsageFault_Handler+0x4>

080066fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80066fa:	b480      	push	{r7}
 80066fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80066fe:	bf00      	nop
 8006700:	46bd      	mov	sp, r7
 8006702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006706:	4770      	bx	lr

08006708 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006708:	b480      	push	{r7}
 800670a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800670c:	bf00      	nop
 800670e:	46bd      	mov	sp, r7
 8006710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006714:	4770      	bx	lr

08006716 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006716:	b480      	push	{r7}
 8006718:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800671a:	bf00      	nop
 800671c:	46bd      	mov	sp, r7
 800671e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006722:	4770      	bx	lr

08006724 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	FatFsCnt++;
 8006728:	4b0a      	ldr	r3, [pc, #40]	; (8006754 <SysTick_Handler+0x30>)
 800672a:	881b      	ldrh	r3, [r3, #0]
 800672c:	b29b      	uxth	r3, r3
 800672e:	3301      	adds	r3, #1
 8006730:	b29a      	uxth	r2, r3
 8006732:	4b08      	ldr	r3, [pc, #32]	; (8006754 <SysTick_Handler+0x30>)
 8006734:	801a      	strh	r2, [r3, #0]
	if(FatFsCnt>=10)
 8006736:	4b07      	ldr	r3, [pc, #28]	; (8006754 <SysTick_Handler+0x30>)
 8006738:	881b      	ldrh	r3, [r3, #0]
 800673a:	b29b      	uxth	r3, r3
 800673c:	2b09      	cmp	r3, #9
 800673e:	d904      	bls.n	800674a <SysTick_Handler+0x26>
	{
		FatFsCnt = 0;
 8006740:	4b04      	ldr	r3, [pc, #16]	; (8006754 <SysTick_Handler+0x30>)
 8006742:	2200      	movs	r2, #0
 8006744:	801a      	strh	r2, [r3, #0]
		SDTimer_Handler();
 8006746:	f7ff ffa9 	bl	800669c <SDTimer_Handler>
	}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800674a:	f000 f95b 	bl	8006a04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800674e:	bf00      	nop
 8006750:	bd80      	pop	{r7, pc}
 8006752:	bf00      	nop
 8006754:	200006bc 	.word	0x200006bc

08006758 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800675c:	4802      	ldr	r0, [pc, #8]	; (8006768 <USART1_IRQHandler+0x10>)
 800675e:	f003 fc0b 	bl	8009f78 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8006762:	bf00      	nop
 8006764:	bd80      	pop	{r7, pc}
 8006766:	bf00      	nop
 8006768:	2000034c 	.word	0x2000034c

0800676c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800676c:	b580      	push	{r7, lr}
 800676e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8006770:	4802      	ldr	r0, [pc, #8]	; (800677c <USART3_IRQHandler+0x10>)
 8006772:	f003 fc01 	bl	8009f78 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8006776:	bf00      	nop
 8006778:	bd80      	pop	{r7, pc}
 800677a:	bf00      	nop
 800677c:	200003d4 	.word	0x200003d4

08006780 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8006784:	4802      	ldr	r0, [pc, #8]	; (8006790 <TIM7_IRQHandler+0x10>)
 8006786:	f003 f887 	bl	8009898 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800678a:	bf00      	nop
 800678c:	bd80      	pop	{r7, pc}
 800678e:	bf00      	nop
 8006790:	20000304 	.word	0x20000304

08006794 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8006794:	b480      	push	{r7}
 8006796:	af00      	add	r7, sp, #0
  return 1;
 8006798:	2301      	movs	r3, #1
}
 800679a:	4618      	mov	r0, r3
 800679c:	46bd      	mov	sp, r7
 800679e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a2:	4770      	bx	lr

080067a4 <_kill>:

int _kill(int pid, int sig)
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b082      	sub	sp, #8
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
 80067ac:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80067ae:	f004 fb4b 	bl	800ae48 <__errno>
 80067b2:	4603      	mov	r3, r0
 80067b4:	2216      	movs	r2, #22
 80067b6:	601a      	str	r2, [r3, #0]
  return -1;
 80067b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80067bc:	4618      	mov	r0, r3
 80067be:	3708      	adds	r7, #8
 80067c0:	46bd      	mov	sp, r7
 80067c2:	bd80      	pop	{r7, pc}

080067c4 <_exit>:

void _exit (int status)
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b082      	sub	sp, #8
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80067cc:	f04f 31ff 	mov.w	r1, #4294967295
 80067d0:	6878      	ldr	r0, [r7, #4]
 80067d2:	f7ff ffe7 	bl	80067a4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80067d6:	e7fe      	b.n	80067d6 <_exit+0x12>

080067d8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b086      	sub	sp, #24
 80067dc:	af00      	add	r7, sp, #0
 80067de:	60f8      	str	r0, [r7, #12]
 80067e0:	60b9      	str	r1, [r7, #8]
 80067e2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80067e4:	2300      	movs	r3, #0
 80067e6:	617b      	str	r3, [r7, #20]
 80067e8:	e00a      	b.n	8006800 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80067ea:	f3af 8000 	nop.w
 80067ee:	4601      	mov	r1, r0
 80067f0:	68bb      	ldr	r3, [r7, #8]
 80067f2:	1c5a      	adds	r2, r3, #1
 80067f4:	60ba      	str	r2, [r7, #8]
 80067f6:	b2ca      	uxtb	r2, r1
 80067f8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80067fa:	697b      	ldr	r3, [r7, #20]
 80067fc:	3301      	adds	r3, #1
 80067fe:	617b      	str	r3, [r7, #20]
 8006800:	697a      	ldr	r2, [r7, #20]
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	429a      	cmp	r2, r3
 8006806:	dbf0      	blt.n	80067ea <_read+0x12>
  }

  return len;
 8006808:	687b      	ldr	r3, [r7, #4]
}
 800680a:	4618      	mov	r0, r3
 800680c:	3718      	adds	r7, #24
 800680e:	46bd      	mov	sp, r7
 8006810:	bd80      	pop	{r7, pc}

08006812 <_close>:
  }
  return len;
}

int _close(int file)
{
 8006812:	b480      	push	{r7}
 8006814:	b083      	sub	sp, #12
 8006816:	af00      	add	r7, sp, #0
 8006818:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800681a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800681e:	4618      	mov	r0, r3
 8006820:	370c      	adds	r7, #12
 8006822:	46bd      	mov	sp, r7
 8006824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006828:	4770      	bx	lr

0800682a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800682a:	b480      	push	{r7}
 800682c:	b083      	sub	sp, #12
 800682e:	af00      	add	r7, sp, #0
 8006830:	6078      	str	r0, [r7, #4]
 8006832:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800683a:	605a      	str	r2, [r3, #4]
  return 0;
 800683c:	2300      	movs	r3, #0
}
 800683e:	4618      	mov	r0, r3
 8006840:	370c      	adds	r7, #12
 8006842:	46bd      	mov	sp, r7
 8006844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006848:	4770      	bx	lr

0800684a <_isatty>:

int _isatty(int file)
{
 800684a:	b480      	push	{r7}
 800684c:	b083      	sub	sp, #12
 800684e:	af00      	add	r7, sp, #0
 8006850:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8006852:	2301      	movs	r3, #1
}
 8006854:	4618      	mov	r0, r3
 8006856:	370c      	adds	r7, #12
 8006858:	46bd      	mov	sp, r7
 800685a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685e:	4770      	bx	lr

08006860 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006860:	b480      	push	{r7}
 8006862:	b085      	sub	sp, #20
 8006864:	af00      	add	r7, sp, #0
 8006866:	60f8      	str	r0, [r7, #12]
 8006868:	60b9      	str	r1, [r7, #8]
 800686a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800686c:	2300      	movs	r3, #0
}
 800686e:	4618      	mov	r0, r3
 8006870:	3714      	adds	r7, #20
 8006872:	46bd      	mov	sp, r7
 8006874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006878:	4770      	bx	lr
	...

0800687c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800687c:	b580      	push	{r7, lr}
 800687e:	b086      	sub	sp, #24
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006884:	4a14      	ldr	r2, [pc, #80]	; (80068d8 <_sbrk+0x5c>)
 8006886:	4b15      	ldr	r3, [pc, #84]	; (80068dc <_sbrk+0x60>)
 8006888:	1ad3      	subs	r3, r2, r3
 800688a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800688c:	697b      	ldr	r3, [r7, #20]
 800688e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006890:	4b13      	ldr	r3, [pc, #76]	; (80068e0 <_sbrk+0x64>)
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d102      	bne.n	800689e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006898:	4b11      	ldr	r3, [pc, #68]	; (80068e0 <_sbrk+0x64>)
 800689a:	4a12      	ldr	r2, [pc, #72]	; (80068e4 <_sbrk+0x68>)
 800689c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800689e:	4b10      	ldr	r3, [pc, #64]	; (80068e0 <_sbrk+0x64>)
 80068a0:	681a      	ldr	r2, [r3, #0]
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	4413      	add	r3, r2
 80068a6:	693a      	ldr	r2, [r7, #16]
 80068a8:	429a      	cmp	r2, r3
 80068aa:	d207      	bcs.n	80068bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80068ac:	f004 facc 	bl	800ae48 <__errno>
 80068b0:	4603      	mov	r3, r0
 80068b2:	220c      	movs	r2, #12
 80068b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80068b6:	f04f 33ff 	mov.w	r3, #4294967295
 80068ba:	e009      	b.n	80068d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80068bc:	4b08      	ldr	r3, [pc, #32]	; (80068e0 <_sbrk+0x64>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80068c2:	4b07      	ldr	r3, [pc, #28]	; (80068e0 <_sbrk+0x64>)
 80068c4:	681a      	ldr	r2, [r3, #0]
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	4413      	add	r3, r2
 80068ca:	4a05      	ldr	r2, [pc, #20]	; (80068e0 <_sbrk+0x64>)
 80068cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80068ce:	68fb      	ldr	r3, [r7, #12]
}
 80068d0:	4618      	mov	r0, r3
 80068d2:	3718      	adds	r7, #24
 80068d4:	46bd      	mov	sp, r7
 80068d6:	bd80      	pop	{r7, pc}
 80068d8:	20020000 	.word	0x20020000
 80068dc:	00000400 	.word	0x00000400
 80068e0:	200006c0 	.word	0x200006c0
 80068e4:	200006d8 	.word	0x200006d8

080068e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80068e8:	b480      	push	{r7}
 80068ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80068ec:	4b06      	ldr	r3, [pc, #24]	; (8006908 <SystemInit+0x20>)
 80068ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068f2:	4a05      	ldr	r2, [pc, #20]	; (8006908 <SystemInit+0x20>)
 80068f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80068f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80068fc:	bf00      	nop
 80068fe:	46bd      	mov	sp, r7
 8006900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006904:	4770      	bx	lr
 8006906:	bf00      	nop
 8006908:	e000ed00 	.word	0xe000ed00

0800690c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800690c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006944 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8006910:	480d      	ldr	r0, [pc, #52]	; (8006948 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8006912:	490e      	ldr	r1, [pc, #56]	; (800694c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8006914:	4a0e      	ldr	r2, [pc, #56]	; (8006950 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8006916:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006918:	e002      	b.n	8006920 <LoopCopyDataInit>

0800691a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800691a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800691c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800691e:	3304      	adds	r3, #4

08006920 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006920:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006922:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006924:	d3f9      	bcc.n	800691a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006926:	4a0b      	ldr	r2, [pc, #44]	; (8006954 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8006928:	4c0b      	ldr	r4, [pc, #44]	; (8006958 <LoopFillZerobss+0x26>)
  movs r3, #0
 800692a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800692c:	e001      	b.n	8006932 <LoopFillZerobss>

0800692e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800692e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006930:	3204      	adds	r2, #4

08006932 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006932:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006934:	d3fb      	bcc.n	800692e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8006936:	f7ff ffd7 	bl	80068e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800693a:	f004 fa8b 	bl	800ae54 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800693e:	f7fb fbaf 	bl	80020a0 <main>
  bx  lr    
 8006942:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8006944:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8006948:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800694c:	20000238 	.word	0x20000238
  ldr r2, =_sidata
 8006950:	08010148 	.word	0x08010148
  ldr r2, =_sbss
 8006954:	20000238 	.word	0x20000238
  ldr r4, =_ebss
 8006958:	200006d8 	.word	0x200006d8

0800695c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800695c:	e7fe      	b.n	800695c <ADC_IRQHandler>
	...

08006960 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006960:	b580      	push	{r7, lr}
 8006962:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006964:	4b0e      	ldr	r3, [pc, #56]	; (80069a0 <HAL_Init+0x40>)
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	4a0d      	ldr	r2, [pc, #52]	; (80069a0 <HAL_Init+0x40>)
 800696a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800696e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006970:	4b0b      	ldr	r3, [pc, #44]	; (80069a0 <HAL_Init+0x40>)
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	4a0a      	ldr	r2, [pc, #40]	; (80069a0 <HAL_Init+0x40>)
 8006976:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800697a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800697c:	4b08      	ldr	r3, [pc, #32]	; (80069a0 <HAL_Init+0x40>)
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	4a07      	ldr	r2, [pc, #28]	; (80069a0 <HAL_Init+0x40>)
 8006982:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006986:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006988:	2003      	movs	r0, #3
 800698a:	f000 f94f 	bl	8006c2c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800698e:	2000      	movs	r0, #0
 8006990:	f000 f808 	bl	80069a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006994:	f7ff fcbe 	bl	8006314 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006998:	2300      	movs	r3, #0
}
 800699a:	4618      	mov	r0, r3
 800699c:	bd80      	pop	{r7, pc}
 800699e:	bf00      	nop
 80069a0:	40023c00 	.word	0x40023c00

080069a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b082      	sub	sp, #8
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80069ac:	4b12      	ldr	r3, [pc, #72]	; (80069f8 <HAL_InitTick+0x54>)
 80069ae:	681a      	ldr	r2, [r3, #0]
 80069b0:	4b12      	ldr	r3, [pc, #72]	; (80069fc <HAL_InitTick+0x58>)
 80069b2:	781b      	ldrb	r3, [r3, #0]
 80069b4:	4619      	mov	r1, r3
 80069b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80069ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80069be:	fbb2 f3f3 	udiv	r3, r2, r3
 80069c2:	4618      	mov	r0, r3
 80069c4:	f000 f967 	bl	8006c96 <HAL_SYSTICK_Config>
 80069c8:	4603      	mov	r3, r0
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d001      	beq.n	80069d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80069ce:	2301      	movs	r3, #1
 80069d0:	e00e      	b.n	80069f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2b0f      	cmp	r3, #15
 80069d6:	d80a      	bhi.n	80069ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80069d8:	2200      	movs	r2, #0
 80069da:	6879      	ldr	r1, [r7, #4]
 80069dc:	f04f 30ff 	mov.w	r0, #4294967295
 80069e0:	f000 f92f 	bl	8006c42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80069e4:	4a06      	ldr	r2, [pc, #24]	; (8006a00 <HAL_InitTick+0x5c>)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80069ea:	2300      	movs	r3, #0
 80069ec:	e000      	b.n	80069f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80069ee:	2301      	movs	r3, #1
}
 80069f0:	4618      	mov	r0, r3
 80069f2:	3708      	adds	r7, #8
 80069f4:	46bd      	mov	sp, r7
 80069f6:	bd80      	pop	{r7, pc}
 80069f8:	20000058 	.word	0x20000058
 80069fc:	20000060 	.word	0x20000060
 8006a00:	2000005c 	.word	0x2000005c

08006a04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006a04:	b480      	push	{r7}
 8006a06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006a08:	4b06      	ldr	r3, [pc, #24]	; (8006a24 <HAL_IncTick+0x20>)
 8006a0a:	781b      	ldrb	r3, [r3, #0]
 8006a0c:	461a      	mov	r2, r3
 8006a0e:	4b06      	ldr	r3, [pc, #24]	; (8006a28 <HAL_IncTick+0x24>)
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	4413      	add	r3, r2
 8006a14:	4a04      	ldr	r2, [pc, #16]	; (8006a28 <HAL_IncTick+0x24>)
 8006a16:	6013      	str	r3, [r2, #0]
}
 8006a18:	bf00      	nop
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a20:	4770      	bx	lr
 8006a22:	bf00      	nop
 8006a24:	20000060 	.word	0x20000060
 8006a28:	200006c4 	.word	0x200006c4

08006a2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006a2c:	b480      	push	{r7}
 8006a2e:	af00      	add	r7, sp, #0
  return uwTick;
 8006a30:	4b03      	ldr	r3, [pc, #12]	; (8006a40 <HAL_GetTick+0x14>)
 8006a32:	681b      	ldr	r3, [r3, #0]
}
 8006a34:	4618      	mov	r0, r3
 8006a36:	46bd      	mov	sp, r7
 8006a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3c:	4770      	bx	lr
 8006a3e:	bf00      	nop
 8006a40:	200006c4 	.word	0x200006c4

08006a44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b084      	sub	sp, #16
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006a4c:	f7ff ffee 	bl	8006a2c <HAL_GetTick>
 8006a50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a5c:	d005      	beq.n	8006a6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006a5e:	4b0a      	ldr	r3, [pc, #40]	; (8006a88 <HAL_Delay+0x44>)
 8006a60:	781b      	ldrb	r3, [r3, #0]
 8006a62:	461a      	mov	r2, r3
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	4413      	add	r3, r2
 8006a68:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006a6a:	bf00      	nop
 8006a6c:	f7ff ffde 	bl	8006a2c <HAL_GetTick>
 8006a70:	4602      	mov	r2, r0
 8006a72:	68bb      	ldr	r3, [r7, #8]
 8006a74:	1ad3      	subs	r3, r2, r3
 8006a76:	68fa      	ldr	r2, [r7, #12]
 8006a78:	429a      	cmp	r2, r3
 8006a7a:	d8f7      	bhi.n	8006a6c <HAL_Delay+0x28>
  {
  }
}
 8006a7c:	bf00      	nop
 8006a7e:	bf00      	nop
 8006a80:	3710      	adds	r7, #16
 8006a82:	46bd      	mov	sp, r7
 8006a84:	bd80      	pop	{r7, pc}
 8006a86:	bf00      	nop
 8006a88:	20000060 	.word	0x20000060

08006a8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006a8c:	b480      	push	{r7}
 8006a8e:	b085      	sub	sp, #20
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	f003 0307 	and.w	r3, r3, #7
 8006a9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006a9c:	4b0c      	ldr	r3, [pc, #48]	; (8006ad0 <__NVIC_SetPriorityGrouping+0x44>)
 8006a9e:	68db      	ldr	r3, [r3, #12]
 8006aa0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006aa2:	68ba      	ldr	r2, [r7, #8]
 8006aa4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006aa8:	4013      	ands	r3, r2
 8006aaa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006ab0:	68bb      	ldr	r3, [r7, #8]
 8006ab2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006ab4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006ab8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006abc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006abe:	4a04      	ldr	r2, [pc, #16]	; (8006ad0 <__NVIC_SetPriorityGrouping+0x44>)
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	60d3      	str	r3, [r2, #12]
}
 8006ac4:	bf00      	nop
 8006ac6:	3714      	adds	r7, #20
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ace:	4770      	bx	lr
 8006ad0:	e000ed00 	.word	0xe000ed00

08006ad4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006ad4:	b480      	push	{r7}
 8006ad6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006ad8:	4b04      	ldr	r3, [pc, #16]	; (8006aec <__NVIC_GetPriorityGrouping+0x18>)
 8006ada:	68db      	ldr	r3, [r3, #12]
 8006adc:	0a1b      	lsrs	r3, r3, #8
 8006ade:	f003 0307 	and.w	r3, r3, #7
}
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aea:	4770      	bx	lr
 8006aec:	e000ed00 	.word	0xe000ed00

08006af0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006af0:	b480      	push	{r7}
 8006af2:	b083      	sub	sp, #12
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	4603      	mov	r3, r0
 8006af8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006afa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	db0b      	blt.n	8006b1a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006b02:	79fb      	ldrb	r3, [r7, #7]
 8006b04:	f003 021f 	and.w	r2, r3, #31
 8006b08:	4907      	ldr	r1, [pc, #28]	; (8006b28 <__NVIC_EnableIRQ+0x38>)
 8006b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b0e:	095b      	lsrs	r3, r3, #5
 8006b10:	2001      	movs	r0, #1
 8006b12:	fa00 f202 	lsl.w	r2, r0, r2
 8006b16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006b1a:	bf00      	nop
 8006b1c:	370c      	adds	r7, #12
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b24:	4770      	bx	lr
 8006b26:	bf00      	nop
 8006b28:	e000e100 	.word	0xe000e100

08006b2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006b2c:	b480      	push	{r7}
 8006b2e:	b083      	sub	sp, #12
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	4603      	mov	r3, r0
 8006b34:	6039      	str	r1, [r7, #0]
 8006b36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006b38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	db0a      	blt.n	8006b56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	b2da      	uxtb	r2, r3
 8006b44:	490c      	ldr	r1, [pc, #48]	; (8006b78 <__NVIC_SetPriority+0x4c>)
 8006b46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b4a:	0112      	lsls	r2, r2, #4
 8006b4c:	b2d2      	uxtb	r2, r2
 8006b4e:	440b      	add	r3, r1
 8006b50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006b54:	e00a      	b.n	8006b6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	b2da      	uxtb	r2, r3
 8006b5a:	4908      	ldr	r1, [pc, #32]	; (8006b7c <__NVIC_SetPriority+0x50>)
 8006b5c:	79fb      	ldrb	r3, [r7, #7]
 8006b5e:	f003 030f 	and.w	r3, r3, #15
 8006b62:	3b04      	subs	r3, #4
 8006b64:	0112      	lsls	r2, r2, #4
 8006b66:	b2d2      	uxtb	r2, r2
 8006b68:	440b      	add	r3, r1
 8006b6a:	761a      	strb	r2, [r3, #24]
}
 8006b6c:	bf00      	nop
 8006b6e:	370c      	adds	r7, #12
 8006b70:	46bd      	mov	sp, r7
 8006b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b76:	4770      	bx	lr
 8006b78:	e000e100 	.word	0xe000e100
 8006b7c:	e000ed00 	.word	0xe000ed00

08006b80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006b80:	b480      	push	{r7}
 8006b82:	b089      	sub	sp, #36	; 0x24
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	60f8      	str	r0, [r7, #12]
 8006b88:	60b9      	str	r1, [r7, #8]
 8006b8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	f003 0307 	and.w	r3, r3, #7
 8006b92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006b94:	69fb      	ldr	r3, [r7, #28]
 8006b96:	f1c3 0307 	rsb	r3, r3, #7
 8006b9a:	2b04      	cmp	r3, #4
 8006b9c:	bf28      	it	cs
 8006b9e:	2304      	movcs	r3, #4
 8006ba0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006ba2:	69fb      	ldr	r3, [r7, #28]
 8006ba4:	3304      	adds	r3, #4
 8006ba6:	2b06      	cmp	r3, #6
 8006ba8:	d902      	bls.n	8006bb0 <NVIC_EncodePriority+0x30>
 8006baa:	69fb      	ldr	r3, [r7, #28]
 8006bac:	3b03      	subs	r3, #3
 8006bae:	e000      	b.n	8006bb2 <NVIC_EncodePriority+0x32>
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006bb4:	f04f 32ff 	mov.w	r2, #4294967295
 8006bb8:	69bb      	ldr	r3, [r7, #24]
 8006bba:	fa02 f303 	lsl.w	r3, r2, r3
 8006bbe:	43da      	mvns	r2, r3
 8006bc0:	68bb      	ldr	r3, [r7, #8]
 8006bc2:	401a      	ands	r2, r3
 8006bc4:	697b      	ldr	r3, [r7, #20]
 8006bc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006bc8:	f04f 31ff 	mov.w	r1, #4294967295
 8006bcc:	697b      	ldr	r3, [r7, #20]
 8006bce:	fa01 f303 	lsl.w	r3, r1, r3
 8006bd2:	43d9      	mvns	r1, r3
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006bd8:	4313      	orrs	r3, r2
         );
}
 8006bda:	4618      	mov	r0, r3
 8006bdc:	3724      	adds	r7, #36	; 0x24
 8006bde:	46bd      	mov	sp, r7
 8006be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be4:	4770      	bx	lr
	...

08006be8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b082      	sub	sp, #8
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	3b01      	subs	r3, #1
 8006bf4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006bf8:	d301      	bcc.n	8006bfe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	e00f      	b.n	8006c1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006bfe:	4a0a      	ldr	r2, [pc, #40]	; (8006c28 <SysTick_Config+0x40>)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	3b01      	subs	r3, #1
 8006c04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006c06:	210f      	movs	r1, #15
 8006c08:	f04f 30ff 	mov.w	r0, #4294967295
 8006c0c:	f7ff ff8e 	bl	8006b2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006c10:	4b05      	ldr	r3, [pc, #20]	; (8006c28 <SysTick_Config+0x40>)
 8006c12:	2200      	movs	r2, #0
 8006c14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006c16:	4b04      	ldr	r3, [pc, #16]	; (8006c28 <SysTick_Config+0x40>)
 8006c18:	2207      	movs	r2, #7
 8006c1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006c1c:	2300      	movs	r3, #0
}
 8006c1e:	4618      	mov	r0, r3
 8006c20:	3708      	adds	r7, #8
 8006c22:	46bd      	mov	sp, r7
 8006c24:	bd80      	pop	{r7, pc}
 8006c26:	bf00      	nop
 8006c28:	e000e010 	.word	0xe000e010

08006c2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b082      	sub	sp, #8
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006c34:	6878      	ldr	r0, [r7, #4]
 8006c36:	f7ff ff29 	bl	8006a8c <__NVIC_SetPriorityGrouping>
}
 8006c3a:	bf00      	nop
 8006c3c:	3708      	adds	r7, #8
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	bd80      	pop	{r7, pc}

08006c42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006c42:	b580      	push	{r7, lr}
 8006c44:	b086      	sub	sp, #24
 8006c46:	af00      	add	r7, sp, #0
 8006c48:	4603      	mov	r3, r0
 8006c4a:	60b9      	str	r1, [r7, #8]
 8006c4c:	607a      	str	r2, [r7, #4]
 8006c4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006c50:	2300      	movs	r3, #0
 8006c52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006c54:	f7ff ff3e 	bl	8006ad4 <__NVIC_GetPriorityGrouping>
 8006c58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006c5a:	687a      	ldr	r2, [r7, #4]
 8006c5c:	68b9      	ldr	r1, [r7, #8]
 8006c5e:	6978      	ldr	r0, [r7, #20]
 8006c60:	f7ff ff8e 	bl	8006b80 <NVIC_EncodePriority>
 8006c64:	4602      	mov	r2, r0
 8006c66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c6a:	4611      	mov	r1, r2
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	f7ff ff5d 	bl	8006b2c <__NVIC_SetPriority>
}
 8006c72:	bf00      	nop
 8006c74:	3718      	adds	r7, #24
 8006c76:	46bd      	mov	sp, r7
 8006c78:	bd80      	pop	{r7, pc}

08006c7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006c7a:	b580      	push	{r7, lr}
 8006c7c:	b082      	sub	sp, #8
 8006c7e:	af00      	add	r7, sp, #0
 8006c80:	4603      	mov	r3, r0
 8006c82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006c84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c88:	4618      	mov	r0, r3
 8006c8a:	f7ff ff31 	bl	8006af0 <__NVIC_EnableIRQ>
}
 8006c8e:	bf00      	nop
 8006c90:	3708      	adds	r7, #8
 8006c92:	46bd      	mov	sp, r7
 8006c94:	bd80      	pop	{r7, pc}

08006c96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006c96:	b580      	push	{r7, lr}
 8006c98:	b082      	sub	sp, #8
 8006c9a:	af00      	add	r7, sp, #0
 8006c9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006c9e:	6878      	ldr	r0, [r7, #4]
 8006ca0:	f7ff ffa2 	bl	8006be8 <SysTick_Config>
 8006ca4:	4603      	mov	r3, r0
}
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	3708      	adds	r7, #8
 8006caa:	46bd      	mov	sp, r7
 8006cac:	bd80      	pop	{r7, pc}

08006cae <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006cae:	b580      	push	{r7, lr}
 8006cb0:	b084      	sub	sp, #16
 8006cb2:	af00      	add	r7, sp, #0
 8006cb4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cba:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8006cbc:	f7ff feb6 	bl	8006a2c <HAL_GetTick>
 8006cc0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006cc8:	b2db      	uxtb	r3, r3
 8006cca:	2b02      	cmp	r3, #2
 8006ccc:	d008      	beq.n	8006ce0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2280      	movs	r2, #128	; 0x80
 8006cd2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8006cdc:	2301      	movs	r3, #1
 8006cde:	e052      	b.n	8006d86 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	681a      	ldr	r2, [r3, #0]
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f022 0216 	bic.w	r2, r2, #22
 8006cee:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	695a      	ldr	r2, [r3, #20]
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006cfe:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d103      	bne.n	8006d10 <HAL_DMA_Abort+0x62>
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d007      	beq.n	8006d20 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	681a      	ldr	r2, [r3, #0]
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f022 0208 	bic.w	r2, r2, #8
 8006d1e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	681a      	ldr	r2, [r3, #0]
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f022 0201 	bic.w	r2, r2, #1
 8006d2e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006d30:	e013      	b.n	8006d5a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006d32:	f7ff fe7b 	bl	8006a2c <HAL_GetTick>
 8006d36:	4602      	mov	r2, r0
 8006d38:	68bb      	ldr	r3, [r7, #8]
 8006d3a:	1ad3      	subs	r3, r2, r3
 8006d3c:	2b05      	cmp	r3, #5
 8006d3e:	d90c      	bls.n	8006d5a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2220      	movs	r2, #32
 8006d44:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2203      	movs	r2, #3
 8006d4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2200      	movs	r2, #0
 8006d52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8006d56:	2303      	movs	r3, #3
 8006d58:	e015      	b.n	8006d86 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f003 0301 	and.w	r3, r3, #1
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d1e4      	bne.n	8006d32 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d6c:	223f      	movs	r2, #63	; 0x3f
 8006d6e:	409a      	lsls	r2, r3
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2201      	movs	r2, #1
 8006d78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2200      	movs	r2, #0
 8006d80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8006d84:	2300      	movs	r3, #0
}
 8006d86:	4618      	mov	r0, r3
 8006d88:	3710      	adds	r7, #16
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	bd80      	pop	{r7, pc}

08006d8e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006d8e:	b480      	push	{r7}
 8006d90:	b083      	sub	sp, #12
 8006d92:	af00      	add	r7, sp, #0
 8006d94:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006d9c:	b2db      	uxtb	r3, r3
 8006d9e:	2b02      	cmp	r3, #2
 8006da0:	d004      	beq.n	8006dac <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	2280      	movs	r2, #128	; 0x80
 8006da6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006da8:	2301      	movs	r3, #1
 8006daa:	e00c      	b.n	8006dc6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2205      	movs	r2, #5
 8006db0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	681a      	ldr	r2, [r3, #0]
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f022 0201 	bic.w	r2, r2, #1
 8006dc2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006dc4:	2300      	movs	r3, #0
}
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	370c      	adds	r7, #12
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd0:	4770      	bx	lr
	...

08006dd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006dd4:	b480      	push	{r7}
 8006dd6:	b089      	sub	sp, #36	; 0x24
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
 8006ddc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006dde:	2300      	movs	r3, #0
 8006de0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006de2:	2300      	movs	r3, #0
 8006de4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006de6:	2300      	movs	r3, #0
 8006de8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006dea:	2300      	movs	r3, #0
 8006dec:	61fb      	str	r3, [r7, #28]
 8006dee:	e165      	b.n	80070bc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006df0:	2201      	movs	r2, #1
 8006df2:	69fb      	ldr	r3, [r7, #28]
 8006df4:	fa02 f303 	lsl.w	r3, r2, r3
 8006df8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	697a      	ldr	r2, [r7, #20]
 8006e00:	4013      	ands	r3, r2
 8006e02:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006e04:	693a      	ldr	r2, [r7, #16]
 8006e06:	697b      	ldr	r3, [r7, #20]
 8006e08:	429a      	cmp	r2, r3
 8006e0a:	f040 8154 	bne.w	80070b6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	685b      	ldr	r3, [r3, #4]
 8006e12:	f003 0303 	and.w	r3, r3, #3
 8006e16:	2b01      	cmp	r3, #1
 8006e18:	d005      	beq.n	8006e26 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	685b      	ldr	r3, [r3, #4]
 8006e1e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006e22:	2b02      	cmp	r3, #2
 8006e24:	d130      	bne.n	8006e88 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	689b      	ldr	r3, [r3, #8]
 8006e2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006e2c:	69fb      	ldr	r3, [r7, #28]
 8006e2e:	005b      	lsls	r3, r3, #1
 8006e30:	2203      	movs	r2, #3
 8006e32:	fa02 f303 	lsl.w	r3, r2, r3
 8006e36:	43db      	mvns	r3, r3
 8006e38:	69ba      	ldr	r2, [r7, #24]
 8006e3a:	4013      	ands	r3, r2
 8006e3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006e3e:	683b      	ldr	r3, [r7, #0]
 8006e40:	68da      	ldr	r2, [r3, #12]
 8006e42:	69fb      	ldr	r3, [r7, #28]
 8006e44:	005b      	lsls	r3, r3, #1
 8006e46:	fa02 f303 	lsl.w	r3, r2, r3
 8006e4a:	69ba      	ldr	r2, [r7, #24]
 8006e4c:	4313      	orrs	r3, r2
 8006e4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	69ba      	ldr	r2, [r7, #24]
 8006e54:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	685b      	ldr	r3, [r3, #4]
 8006e5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006e5c:	2201      	movs	r2, #1
 8006e5e:	69fb      	ldr	r3, [r7, #28]
 8006e60:	fa02 f303 	lsl.w	r3, r2, r3
 8006e64:	43db      	mvns	r3, r3
 8006e66:	69ba      	ldr	r2, [r7, #24]
 8006e68:	4013      	ands	r3, r2
 8006e6a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	685b      	ldr	r3, [r3, #4]
 8006e70:	091b      	lsrs	r3, r3, #4
 8006e72:	f003 0201 	and.w	r2, r3, #1
 8006e76:	69fb      	ldr	r3, [r7, #28]
 8006e78:	fa02 f303 	lsl.w	r3, r2, r3
 8006e7c:	69ba      	ldr	r2, [r7, #24]
 8006e7e:	4313      	orrs	r3, r2
 8006e80:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	69ba      	ldr	r2, [r7, #24]
 8006e86:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	685b      	ldr	r3, [r3, #4]
 8006e8c:	f003 0303 	and.w	r3, r3, #3
 8006e90:	2b03      	cmp	r3, #3
 8006e92:	d017      	beq.n	8006ec4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	68db      	ldr	r3, [r3, #12]
 8006e98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006e9a:	69fb      	ldr	r3, [r7, #28]
 8006e9c:	005b      	lsls	r3, r3, #1
 8006e9e:	2203      	movs	r2, #3
 8006ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8006ea4:	43db      	mvns	r3, r3
 8006ea6:	69ba      	ldr	r2, [r7, #24]
 8006ea8:	4013      	ands	r3, r2
 8006eaa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	689a      	ldr	r2, [r3, #8]
 8006eb0:	69fb      	ldr	r3, [r7, #28]
 8006eb2:	005b      	lsls	r3, r3, #1
 8006eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8006eb8:	69ba      	ldr	r2, [r7, #24]
 8006eba:	4313      	orrs	r3, r2
 8006ebc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	69ba      	ldr	r2, [r7, #24]
 8006ec2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	685b      	ldr	r3, [r3, #4]
 8006ec8:	f003 0303 	and.w	r3, r3, #3
 8006ecc:	2b02      	cmp	r3, #2
 8006ece:	d123      	bne.n	8006f18 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006ed0:	69fb      	ldr	r3, [r7, #28]
 8006ed2:	08da      	lsrs	r2, r3, #3
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	3208      	adds	r2, #8
 8006ed8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006edc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006ede:	69fb      	ldr	r3, [r7, #28]
 8006ee0:	f003 0307 	and.w	r3, r3, #7
 8006ee4:	009b      	lsls	r3, r3, #2
 8006ee6:	220f      	movs	r2, #15
 8006ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8006eec:	43db      	mvns	r3, r3
 8006eee:	69ba      	ldr	r2, [r7, #24]
 8006ef0:	4013      	ands	r3, r2
 8006ef2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	691a      	ldr	r2, [r3, #16]
 8006ef8:	69fb      	ldr	r3, [r7, #28]
 8006efa:	f003 0307 	and.w	r3, r3, #7
 8006efe:	009b      	lsls	r3, r3, #2
 8006f00:	fa02 f303 	lsl.w	r3, r2, r3
 8006f04:	69ba      	ldr	r2, [r7, #24]
 8006f06:	4313      	orrs	r3, r2
 8006f08:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006f0a:	69fb      	ldr	r3, [r7, #28]
 8006f0c:	08da      	lsrs	r2, r3, #3
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	3208      	adds	r2, #8
 8006f12:	69b9      	ldr	r1, [r7, #24]
 8006f14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006f1e:	69fb      	ldr	r3, [r7, #28]
 8006f20:	005b      	lsls	r3, r3, #1
 8006f22:	2203      	movs	r2, #3
 8006f24:	fa02 f303 	lsl.w	r3, r2, r3
 8006f28:	43db      	mvns	r3, r3
 8006f2a:	69ba      	ldr	r2, [r7, #24]
 8006f2c:	4013      	ands	r3, r2
 8006f2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	685b      	ldr	r3, [r3, #4]
 8006f34:	f003 0203 	and.w	r2, r3, #3
 8006f38:	69fb      	ldr	r3, [r7, #28]
 8006f3a:	005b      	lsls	r3, r3, #1
 8006f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8006f40:	69ba      	ldr	r2, [r7, #24]
 8006f42:	4313      	orrs	r3, r2
 8006f44:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	69ba      	ldr	r2, [r7, #24]
 8006f4a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	685b      	ldr	r3, [r3, #4]
 8006f50:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	f000 80ae 	beq.w	80070b6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	60fb      	str	r3, [r7, #12]
 8006f5e:	4b5d      	ldr	r3, [pc, #372]	; (80070d4 <HAL_GPIO_Init+0x300>)
 8006f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f62:	4a5c      	ldr	r2, [pc, #368]	; (80070d4 <HAL_GPIO_Init+0x300>)
 8006f64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006f68:	6453      	str	r3, [r2, #68]	; 0x44
 8006f6a:	4b5a      	ldr	r3, [pc, #360]	; (80070d4 <HAL_GPIO_Init+0x300>)
 8006f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006f72:	60fb      	str	r3, [r7, #12]
 8006f74:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006f76:	4a58      	ldr	r2, [pc, #352]	; (80070d8 <HAL_GPIO_Init+0x304>)
 8006f78:	69fb      	ldr	r3, [r7, #28]
 8006f7a:	089b      	lsrs	r3, r3, #2
 8006f7c:	3302      	adds	r3, #2
 8006f7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006f84:	69fb      	ldr	r3, [r7, #28]
 8006f86:	f003 0303 	and.w	r3, r3, #3
 8006f8a:	009b      	lsls	r3, r3, #2
 8006f8c:	220f      	movs	r2, #15
 8006f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8006f92:	43db      	mvns	r3, r3
 8006f94:	69ba      	ldr	r2, [r7, #24]
 8006f96:	4013      	ands	r3, r2
 8006f98:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	4a4f      	ldr	r2, [pc, #316]	; (80070dc <HAL_GPIO_Init+0x308>)
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d025      	beq.n	8006fee <HAL_GPIO_Init+0x21a>
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	4a4e      	ldr	r2, [pc, #312]	; (80070e0 <HAL_GPIO_Init+0x30c>)
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d01f      	beq.n	8006fea <HAL_GPIO_Init+0x216>
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	4a4d      	ldr	r2, [pc, #308]	; (80070e4 <HAL_GPIO_Init+0x310>)
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d019      	beq.n	8006fe6 <HAL_GPIO_Init+0x212>
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	4a4c      	ldr	r2, [pc, #304]	; (80070e8 <HAL_GPIO_Init+0x314>)
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	d013      	beq.n	8006fe2 <HAL_GPIO_Init+0x20e>
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	4a4b      	ldr	r2, [pc, #300]	; (80070ec <HAL_GPIO_Init+0x318>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d00d      	beq.n	8006fde <HAL_GPIO_Init+0x20a>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	4a4a      	ldr	r2, [pc, #296]	; (80070f0 <HAL_GPIO_Init+0x31c>)
 8006fc6:	4293      	cmp	r3, r2
 8006fc8:	d007      	beq.n	8006fda <HAL_GPIO_Init+0x206>
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	4a49      	ldr	r2, [pc, #292]	; (80070f4 <HAL_GPIO_Init+0x320>)
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	d101      	bne.n	8006fd6 <HAL_GPIO_Init+0x202>
 8006fd2:	2306      	movs	r3, #6
 8006fd4:	e00c      	b.n	8006ff0 <HAL_GPIO_Init+0x21c>
 8006fd6:	2307      	movs	r3, #7
 8006fd8:	e00a      	b.n	8006ff0 <HAL_GPIO_Init+0x21c>
 8006fda:	2305      	movs	r3, #5
 8006fdc:	e008      	b.n	8006ff0 <HAL_GPIO_Init+0x21c>
 8006fde:	2304      	movs	r3, #4
 8006fe0:	e006      	b.n	8006ff0 <HAL_GPIO_Init+0x21c>
 8006fe2:	2303      	movs	r3, #3
 8006fe4:	e004      	b.n	8006ff0 <HAL_GPIO_Init+0x21c>
 8006fe6:	2302      	movs	r3, #2
 8006fe8:	e002      	b.n	8006ff0 <HAL_GPIO_Init+0x21c>
 8006fea:	2301      	movs	r3, #1
 8006fec:	e000      	b.n	8006ff0 <HAL_GPIO_Init+0x21c>
 8006fee:	2300      	movs	r3, #0
 8006ff0:	69fa      	ldr	r2, [r7, #28]
 8006ff2:	f002 0203 	and.w	r2, r2, #3
 8006ff6:	0092      	lsls	r2, r2, #2
 8006ff8:	4093      	lsls	r3, r2
 8006ffa:	69ba      	ldr	r2, [r7, #24]
 8006ffc:	4313      	orrs	r3, r2
 8006ffe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007000:	4935      	ldr	r1, [pc, #212]	; (80070d8 <HAL_GPIO_Init+0x304>)
 8007002:	69fb      	ldr	r3, [r7, #28]
 8007004:	089b      	lsrs	r3, r3, #2
 8007006:	3302      	adds	r3, #2
 8007008:	69ba      	ldr	r2, [r7, #24]
 800700a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800700e:	4b3a      	ldr	r3, [pc, #232]	; (80070f8 <HAL_GPIO_Init+0x324>)
 8007010:	689b      	ldr	r3, [r3, #8]
 8007012:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007014:	693b      	ldr	r3, [r7, #16]
 8007016:	43db      	mvns	r3, r3
 8007018:	69ba      	ldr	r2, [r7, #24]
 800701a:	4013      	ands	r3, r2
 800701c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	685b      	ldr	r3, [r3, #4]
 8007022:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007026:	2b00      	cmp	r3, #0
 8007028:	d003      	beq.n	8007032 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800702a:	69ba      	ldr	r2, [r7, #24]
 800702c:	693b      	ldr	r3, [r7, #16]
 800702e:	4313      	orrs	r3, r2
 8007030:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007032:	4a31      	ldr	r2, [pc, #196]	; (80070f8 <HAL_GPIO_Init+0x324>)
 8007034:	69bb      	ldr	r3, [r7, #24]
 8007036:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007038:	4b2f      	ldr	r3, [pc, #188]	; (80070f8 <HAL_GPIO_Init+0x324>)
 800703a:	68db      	ldr	r3, [r3, #12]
 800703c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800703e:	693b      	ldr	r3, [r7, #16]
 8007040:	43db      	mvns	r3, r3
 8007042:	69ba      	ldr	r2, [r7, #24]
 8007044:	4013      	ands	r3, r2
 8007046:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	685b      	ldr	r3, [r3, #4]
 800704c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007050:	2b00      	cmp	r3, #0
 8007052:	d003      	beq.n	800705c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8007054:	69ba      	ldr	r2, [r7, #24]
 8007056:	693b      	ldr	r3, [r7, #16]
 8007058:	4313      	orrs	r3, r2
 800705a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800705c:	4a26      	ldr	r2, [pc, #152]	; (80070f8 <HAL_GPIO_Init+0x324>)
 800705e:	69bb      	ldr	r3, [r7, #24]
 8007060:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8007062:	4b25      	ldr	r3, [pc, #148]	; (80070f8 <HAL_GPIO_Init+0x324>)
 8007064:	685b      	ldr	r3, [r3, #4]
 8007066:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007068:	693b      	ldr	r3, [r7, #16]
 800706a:	43db      	mvns	r3, r3
 800706c:	69ba      	ldr	r2, [r7, #24]
 800706e:	4013      	ands	r3, r2
 8007070:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	685b      	ldr	r3, [r3, #4]
 8007076:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800707a:	2b00      	cmp	r3, #0
 800707c:	d003      	beq.n	8007086 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800707e:	69ba      	ldr	r2, [r7, #24]
 8007080:	693b      	ldr	r3, [r7, #16]
 8007082:	4313      	orrs	r3, r2
 8007084:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007086:	4a1c      	ldr	r2, [pc, #112]	; (80070f8 <HAL_GPIO_Init+0x324>)
 8007088:	69bb      	ldr	r3, [r7, #24]
 800708a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800708c:	4b1a      	ldr	r3, [pc, #104]	; (80070f8 <HAL_GPIO_Init+0x324>)
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007092:	693b      	ldr	r3, [r7, #16]
 8007094:	43db      	mvns	r3, r3
 8007096:	69ba      	ldr	r2, [r7, #24]
 8007098:	4013      	ands	r3, r2
 800709a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	685b      	ldr	r3, [r3, #4]
 80070a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d003      	beq.n	80070b0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80070a8:	69ba      	ldr	r2, [r7, #24]
 80070aa:	693b      	ldr	r3, [r7, #16]
 80070ac:	4313      	orrs	r3, r2
 80070ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80070b0:	4a11      	ldr	r2, [pc, #68]	; (80070f8 <HAL_GPIO_Init+0x324>)
 80070b2:	69bb      	ldr	r3, [r7, #24]
 80070b4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80070b6:	69fb      	ldr	r3, [r7, #28]
 80070b8:	3301      	adds	r3, #1
 80070ba:	61fb      	str	r3, [r7, #28]
 80070bc:	69fb      	ldr	r3, [r7, #28]
 80070be:	2b0f      	cmp	r3, #15
 80070c0:	f67f ae96 	bls.w	8006df0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80070c4:	bf00      	nop
 80070c6:	bf00      	nop
 80070c8:	3724      	adds	r7, #36	; 0x24
 80070ca:	46bd      	mov	sp, r7
 80070cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d0:	4770      	bx	lr
 80070d2:	bf00      	nop
 80070d4:	40023800 	.word	0x40023800
 80070d8:	40013800 	.word	0x40013800
 80070dc:	40020000 	.word	0x40020000
 80070e0:	40020400 	.word	0x40020400
 80070e4:	40020800 	.word	0x40020800
 80070e8:	40020c00 	.word	0x40020c00
 80070ec:	40021000 	.word	0x40021000
 80070f0:	40021400 	.word	0x40021400
 80070f4:	40021800 	.word	0x40021800
 80070f8:	40013c00 	.word	0x40013c00

080070fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80070fc:	b480      	push	{r7}
 80070fe:	b083      	sub	sp, #12
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
 8007104:	460b      	mov	r3, r1
 8007106:	807b      	strh	r3, [r7, #2]
 8007108:	4613      	mov	r3, r2
 800710a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800710c:	787b      	ldrb	r3, [r7, #1]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d003      	beq.n	800711a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007112:	887a      	ldrh	r2, [r7, #2]
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007118:	e003      	b.n	8007122 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800711a:	887b      	ldrh	r3, [r7, #2]
 800711c:	041a      	lsls	r2, r3, #16
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	619a      	str	r2, [r3, #24]
}
 8007122:	bf00      	nop
 8007124:	370c      	adds	r7, #12
 8007126:	46bd      	mov	sp, r7
 8007128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712c:	4770      	bx	lr
	...

08007130 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b084      	sub	sp, #16
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d101      	bne.n	8007142 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800713e:	2301      	movs	r3, #1
 8007140:	e12b      	b.n	800739a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007148:	b2db      	uxtb	r3, r3
 800714a:	2b00      	cmp	r3, #0
 800714c:	d106      	bne.n	800715c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	2200      	movs	r2, #0
 8007152:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8007156:	6878      	ldr	r0, [r7, #4]
 8007158:	f7ff f904 	bl	8006364 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2224      	movs	r2, #36	; 0x24
 8007160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	681a      	ldr	r2, [r3, #0]
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f022 0201 	bic.w	r2, r2, #1
 8007172:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	681a      	ldr	r2, [r3, #0]
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007182:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	681a      	ldr	r2, [r3, #0]
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007192:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007194:	f001 fd42 	bl	8008c1c <HAL_RCC_GetPCLK1Freq>
 8007198:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	685b      	ldr	r3, [r3, #4]
 800719e:	4a81      	ldr	r2, [pc, #516]	; (80073a4 <HAL_I2C_Init+0x274>)
 80071a0:	4293      	cmp	r3, r2
 80071a2:	d807      	bhi.n	80071b4 <HAL_I2C_Init+0x84>
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	4a80      	ldr	r2, [pc, #512]	; (80073a8 <HAL_I2C_Init+0x278>)
 80071a8:	4293      	cmp	r3, r2
 80071aa:	bf94      	ite	ls
 80071ac:	2301      	movls	r3, #1
 80071ae:	2300      	movhi	r3, #0
 80071b0:	b2db      	uxtb	r3, r3
 80071b2:	e006      	b.n	80071c2 <HAL_I2C_Init+0x92>
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	4a7d      	ldr	r2, [pc, #500]	; (80073ac <HAL_I2C_Init+0x27c>)
 80071b8:	4293      	cmp	r3, r2
 80071ba:	bf94      	ite	ls
 80071bc:	2301      	movls	r3, #1
 80071be:	2300      	movhi	r3, #0
 80071c0:	b2db      	uxtb	r3, r3
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d001      	beq.n	80071ca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80071c6:	2301      	movs	r3, #1
 80071c8:	e0e7      	b.n	800739a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	4a78      	ldr	r2, [pc, #480]	; (80073b0 <HAL_I2C_Init+0x280>)
 80071ce:	fba2 2303 	umull	r2, r3, r2, r3
 80071d2:	0c9b      	lsrs	r3, r3, #18
 80071d4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	685b      	ldr	r3, [r3, #4]
 80071dc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	68ba      	ldr	r2, [r7, #8]
 80071e6:	430a      	orrs	r2, r1
 80071e8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	6a1b      	ldr	r3, [r3, #32]
 80071f0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	685b      	ldr	r3, [r3, #4]
 80071f8:	4a6a      	ldr	r2, [pc, #424]	; (80073a4 <HAL_I2C_Init+0x274>)
 80071fa:	4293      	cmp	r3, r2
 80071fc:	d802      	bhi.n	8007204 <HAL_I2C_Init+0xd4>
 80071fe:	68bb      	ldr	r3, [r7, #8]
 8007200:	3301      	adds	r3, #1
 8007202:	e009      	b.n	8007218 <HAL_I2C_Init+0xe8>
 8007204:	68bb      	ldr	r3, [r7, #8]
 8007206:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800720a:	fb02 f303 	mul.w	r3, r2, r3
 800720e:	4a69      	ldr	r2, [pc, #420]	; (80073b4 <HAL_I2C_Init+0x284>)
 8007210:	fba2 2303 	umull	r2, r3, r2, r3
 8007214:	099b      	lsrs	r3, r3, #6
 8007216:	3301      	adds	r3, #1
 8007218:	687a      	ldr	r2, [r7, #4]
 800721a:	6812      	ldr	r2, [r2, #0]
 800721c:	430b      	orrs	r3, r1
 800721e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	69db      	ldr	r3, [r3, #28]
 8007226:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800722a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	685b      	ldr	r3, [r3, #4]
 8007232:	495c      	ldr	r1, [pc, #368]	; (80073a4 <HAL_I2C_Init+0x274>)
 8007234:	428b      	cmp	r3, r1
 8007236:	d819      	bhi.n	800726c <HAL_I2C_Init+0x13c>
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	1e59      	subs	r1, r3, #1
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	685b      	ldr	r3, [r3, #4]
 8007240:	005b      	lsls	r3, r3, #1
 8007242:	fbb1 f3f3 	udiv	r3, r1, r3
 8007246:	1c59      	adds	r1, r3, #1
 8007248:	f640 73fc 	movw	r3, #4092	; 0xffc
 800724c:	400b      	ands	r3, r1
 800724e:	2b00      	cmp	r3, #0
 8007250:	d00a      	beq.n	8007268 <HAL_I2C_Init+0x138>
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	1e59      	subs	r1, r3, #1
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	685b      	ldr	r3, [r3, #4]
 800725a:	005b      	lsls	r3, r3, #1
 800725c:	fbb1 f3f3 	udiv	r3, r1, r3
 8007260:	3301      	adds	r3, #1
 8007262:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007266:	e051      	b.n	800730c <HAL_I2C_Init+0x1dc>
 8007268:	2304      	movs	r3, #4
 800726a:	e04f      	b.n	800730c <HAL_I2C_Init+0x1dc>
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	689b      	ldr	r3, [r3, #8]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d111      	bne.n	8007298 <HAL_I2C_Init+0x168>
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	1e58      	subs	r0, r3, #1
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	6859      	ldr	r1, [r3, #4]
 800727c:	460b      	mov	r3, r1
 800727e:	005b      	lsls	r3, r3, #1
 8007280:	440b      	add	r3, r1
 8007282:	fbb0 f3f3 	udiv	r3, r0, r3
 8007286:	3301      	adds	r3, #1
 8007288:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800728c:	2b00      	cmp	r3, #0
 800728e:	bf0c      	ite	eq
 8007290:	2301      	moveq	r3, #1
 8007292:	2300      	movne	r3, #0
 8007294:	b2db      	uxtb	r3, r3
 8007296:	e012      	b.n	80072be <HAL_I2C_Init+0x18e>
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	1e58      	subs	r0, r3, #1
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	6859      	ldr	r1, [r3, #4]
 80072a0:	460b      	mov	r3, r1
 80072a2:	009b      	lsls	r3, r3, #2
 80072a4:	440b      	add	r3, r1
 80072a6:	0099      	lsls	r1, r3, #2
 80072a8:	440b      	add	r3, r1
 80072aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80072ae:	3301      	adds	r3, #1
 80072b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	bf0c      	ite	eq
 80072b8:	2301      	moveq	r3, #1
 80072ba:	2300      	movne	r3, #0
 80072bc:	b2db      	uxtb	r3, r3
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d001      	beq.n	80072c6 <HAL_I2C_Init+0x196>
 80072c2:	2301      	movs	r3, #1
 80072c4:	e022      	b.n	800730c <HAL_I2C_Init+0x1dc>
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	689b      	ldr	r3, [r3, #8]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d10e      	bne.n	80072ec <HAL_I2C_Init+0x1bc>
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	1e58      	subs	r0, r3, #1
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6859      	ldr	r1, [r3, #4]
 80072d6:	460b      	mov	r3, r1
 80072d8:	005b      	lsls	r3, r3, #1
 80072da:	440b      	add	r3, r1
 80072dc:	fbb0 f3f3 	udiv	r3, r0, r3
 80072e0:	3301      	adds	r3, #1
 80072e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80072e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80072ea:	e00f      	b.n	800730c <HAL_I2C_Init+0x1dc>
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	1e58      	subs	r0, r3, #1
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	6859      	ldr	r1, [r3, #4]
 80072f4:	460b      	mov	r3, r1
 80072f6:	009b      	lsls	r3, r3, #2
 80072f8:	440b      	add	r3, r1
 80072fa:	0099      	lsls	r1, r3, #2
 80072fc:	440b      	add	r3, r1
 80072fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8007302:	3301      	adds	r3, #1
 8007304:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007308:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800730c:	6879      	ldr	r1, [r7, #4]
 800730e:	6809      	ldr	r1, [r1, #0]
 8007310:	4313      	orrs	r3, r2
 8007312:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	69da      	ldr	r2, [r3, #28]
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	6a1b      	ldr	r3, [r3, #32]
 8007326:	431a      	orrs	r2, r3
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	430a      	orrs	r2, r1
 800732e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	689b      	ldr	r3, [r3, #8]
 8007336:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800733a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800733e:	687a      	ldr	r2, [r7, #4]
 8007340:	6911      	ldr	r1, [r2, #16]
 8007342:	687a      	ldr	r2, [r7, #4]
 8007344:	68d2      	ldr	r2, [r2, #12]
 8007346:	4311      	orrs	r1, r2
 8007348:	687a      	ldr	r2, [r7, #4]
 800734a:	6812      	ldr	r2, [r2, #0]
 800734c:	430b      	orrs	r3, r1
 800734e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	68db      	ldr	r3, [r3, #12]
 8007356:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	695a      	ldr	r2, [r3, #20]
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	699b      	ldr	r3, [r3, #24]
 8007362:	431a      	orrs	r2, r3
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	430a      	orrs	r2, r1
 800736a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	681a      	ldr	r2, [r3, #0]
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f042 0201 	orr.w	r2, r2, #1
 800737a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2200      	movs	r2, #0
 8007380:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2220      	movs	r2, #32
 8007386:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	2200      	movs	r2, #0
 800738e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2200      	movs	r2, #0
 8007394:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007398:	2300      	movs	r3, #0
}
 800739a:	4618      	mov	r0, r3
 800739c:	3710      	adds	r7, #16
 800739e:	46bd      	mov	sp, r7
 80073a0:	bd80      	pop	{r7, pc}
 80073a2:	bf00      	nop
 80073a4:	000186a0 	.word	0x000186a0
 80073a8:	001e847f 	.word	0x001e847f
 80073ac:	003d08ff 	.word	0x003d08ff
 80073b0:	431bde83 	.word	0x431bde83
 80073b4:	10624dd3 	.word	0x10624dd3

080073b8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	b088      	sub	sp, #32
 80073bc:	af02      	add	r7, sp, #8
 80073be:	60f8      	str	r0, [r7, #12]
 80073c0:	607a      	str	r2, [r7, #4]
 80073c2:	461a      	mov	r2, r3
 80073c4:	460b      	mov	r3, r1
 80073c6:	817b      	strh	r3, [r7, #10]
 80073c8:	4613      	mov	r3, r2
 80073ca:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80073cc:	f7ff fb2e 	bl	8006a2c <HAL_GetTick>
 80073d0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073d8:	b2db      	uxtb	r3, r3
 80073da:	2b20      	cmp	r3, #32
 80073dc:	f040 80e0 	bne.w	80075a0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80073e0:	697b      	ldr	r3, [r7, #20]
 80073e2:	9300      	str	r3, [sp, #0]
 80073e4:	2319      	movs	r3, #25
 80073e6:	2201      	movs	r2, #1
 80073e8:	4970      	ldr	r1, [pc, #448]	; (80075ac <HAL_I2C_Master_Transmit+0x1f4>)
 80073ea:	68f8      	ldr	r0, [r7, #12]
 80073ec:	f001 f8f6 	bl	80085dc <I2C_WaitOnFlagUntilTimeout>
 80073f0:	4603      	mov	r3, r0
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d001      	beq.n	80073fa <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80073f6:	2302      	movs	r3, #2
 80073f8:	e0d3      	b.n	80075a2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007400:	2b01      	cmp	r3, #1
 8007402:	d101      	bne.n	8007408 <HAL_I2C_Master_Transmit+0x50>
 8007404:	2302      	movs	r3, #2
 8007406:	e0cc      	b.n	80075a2 <HAL_I2C_Master_Transmit+0x1ea>
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	2201      	movs	r2, #1
 800740c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	f003 0301 	and.w	r3, r3, #1
 800741a:	2b01      	cmp	r3, #1
 800741c:	d007      	beq.n	800742e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	681a      	ldr	r2, [r3, #0]
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f042 0201 	orr.w	r2, r2, #1
 800742c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	681a      	ldr	r2, [r3, #0]
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800743c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	2221      	movs	r2, #33	; 0x21
 8007442:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	2210      	movs	r2, #16
 800744a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	2200      	movs	r2, #0
 8007452:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	687a      	ldr	r2, [r7, #4]
 8007458:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	893a      	ldrh	r2, [r7, #8]
 800745e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007464:	b29a      	uxth	r2, r3
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	4a50      	ldr	r2, [pc, #320]	; (80075b0 <HAL_I2C_Master_Transmit+0x1f8>)
 800746e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8007470:	8979      	ldrh	r1, [r7, #10]
 8007472:	697b      	ldr	r3, [r7, #20]
 8007474:	6a3a      	ldr	r2, [r7, #32]
 8007476:	68f8      	ldr	r0, [r7, #12]
 8007478:	f000 fde2 	bl	8008040 <I2C_MasterRequestWrite>
 800747c:	4603      	mov	r3, r0
 800747e:	2b00      	cmp	r3, #0
 8007480:	d001      	beq.n	8007486 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8007482:	2301      	movs	r3, #1
 8007484:	e08d      	b.n	80075a2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007486:	2300      	movs	r3, #0
 8007488:	613b      	str	r3, [r7, #16]
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	695b      	ldr	r3, [r3, #20]
 8007490:	613b      	str	r3, [r7, #16]
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	699b      	ldr	r3, [r3, #24]
 8007498:	613b      	str	r3, [r7, #16]
 800749a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800749c:	e066      	b.n	800756c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800749e:	697a      	ldr	r2, [r7, #20]
 80074a0:	6a39      	ldr	r1, [r7, #32]
 80074a2:	68f8      	ldr	r0, [r7, #12]
 80074a4:	f001 f970 	bl	8008788 <I2C_WaitOnTXEFlagUntilTimeout>
 80074a8:	4603      	mov	r3, r0
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d00d      	beq.n	80074ca <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074b2:	2b04      	cmp	r3, #4
 80074b4:	d107      	bne.n	80074c6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	681a      	ldr	r2, [r3, #0]
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80074c4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80074c6:	2301      	movs	r3, #1
 80074c8:	e06b      	b.n	80075a2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074ce:	781a      	ldrb	r2, [r3, #0]
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074da:	1c5a      	adds	r2, r3, #1
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074e4:	b29b      	uxth	r3, r3
 80074e6:	3b01      	subs	r3, #1
 80074e8:	b29a      	uxth	r2, r3
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074f2:	3b01      	subs	r3, #1
 80074f4:	b29a      	uxth	r2, r3
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	695b      	ldr	r3, [r3, #20]
 8007500:	f003 0304 	and.w	r3, r3, #4
 8007504:	2b04      	cmp	r3, #4
 8007506:	d11b      	bne.n	8007540 <HAL_I2C_Master_Transmit+0x188>
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800750c:	2b00      	cmp	r3, #0
 800750e:	d017      	beq.n	8007540 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007514:	781a      	ldrb	r2, [r3, #0]
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007520:	1c5a      	adds	r2, r3, #1
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800752a:	b29b      	uxth	r3, r3
 800752c:	3b01      	subs	r3, #1
 800752e:	b29a      	uxth	r2, r3
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007538:	3b01      	subs	r3, #1
 800753a:	b29a      	uxth	r2, r3
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007540:	697a      	ldr	r2, [r7, #20]
 8007542:	6a39      	ldr	r1, [r7, #32]
 8007544:	68f8      	ldr	r0, [r7, #12]
 8007546:	f001 f960 	bl	800880a <I2C_WaitOnBTFFlagUntilTimeout>
 800754a:	4603      	mov	r3, r0
 800754c:	2b00      	cmp	r3, #0
 800754e:	d00d      	beq.n	800756c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007554:	2b04      	cmp	r3, #4
 8007556:	d107      	bne.n	8007568 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	681a      	ldr	r2, [r3, #0]
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007566:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007568:	2301      	movs	r3, #1
 800756a:	e01a      	b.n	80075a2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007570:	2b00      	cmp	r3, #0
 8007572:	d194      	bne.n	800749e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	681a      	ldr	r2, [r3, #0]
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007582:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	2220      	movs	r2, #32
 8007588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	2200      	movs	r2, #0
 8007590:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	2200      	movs	r2, #0
 8007598:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800759c:	2300      	movs	r3, #0
 800759e:	e000      	b.n	80075a2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80075a0:	2302      	movs	r3, #2
  }
}
 80075a2:	4618      	mov	r0, r3
 80075a4:	3718      	adds	r7, #24
 80075a6:	46bd      	mov	sp, r7
 80075a8:	bd80      	pop	{r7, pc}
 80075aa:	bf00      	nop
 80075ac:	00100002 	.word	0x00100002
 80075b0:	ffff0000 	.word	0xffff0000

080075b4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b08c      	sub	sp, #48	; 0x30
 80075b8:	af02      	add	r7, sp, #8
 80075ba:	60f8      	str	r0, [r7, #12]
 80075bc:	607a      	str	r2, [r7, #4]
 80075be:	461a      	mov	r2, r3
 80075c0:	460b      	mov	r3, r1
 80075c2:	817b      	strh	r3, [r7, #10]
 80075c4:	4613      	mov	r3, r2
 80075c6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80075c8:	f7ff fa30 	bl	8006a2c <HAL_GetTick>
 80075cc:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075d4:	b2db      	uxtb	r3, r3
 80075d6:	2b20      	cmp	r3, #32
 80075d8:	f040 820b 	bne.w	80079f2 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80075dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075de:	9300      	str	r3, [sp, #0]
 80075e0:	2319      	movs	r3, #25
 80075e2:	2201      	movs	r2, #1
 80075e4:	497c      	ldr	r1, [pc, #496]	; (80077d8 <HAL_I2C_Master_Receive+0x224>)
 80075e6:	68f8      	ldr	r0, [r7, #12]
 80075e8:	f000 fff8 	bl	80085dc <I2C_WaitOnFlagUntilTimeout>
 80075ec:	4603      	mov	r3, r0
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d001      	beq.n	80075f6 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80075f2:	2302      	movs	r3, #2
 80075f4:	e1fe      	b.n	80079f4 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80075fc:	2b01      	cmp	r3, #1
 80075fe:	d101      	bne.n	8007604 <HAL_I2C_Master_Receive+0x50>
 8007600:	2302      	movs	r3, #2
 8007602:	e1f7      	b.n	80079f4 <HAL_I2C_Master_Receive+0x440>
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	2201      	movs	r2, #1
 8007608:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f003 0301 	and.w	r3, r3, #1
 8007616:	2b01      	cmp	r3, #1
 8007618:	d007      	beq.n	800762a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	681a      	ldr	r2, [r3, #0]
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	f042 0201 	orr.w	r2, r2, #1
 8007628:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	681a      	ldr	r2, [r3, #0]
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007638:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	2222      	movs	r2, #34	; 0x22
 800763e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	2210      	movs	r2, #16
 8007646:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	2200      	movs	r2, #0
 800764e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	687a      	ldr	r2, [r7, #4]
 8007654:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	893a      	ldrh	r2, [r7, #8]
 800765a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007660:	b29a      	uxth	r2, r3
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	4a5c      	ldr	r2, [pc, #368]	; (80077dc <HAL_I2C_Master_Receive+0x228>)
 800766a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800766c:	8979      	ldrh	r1, [r7, #10]
 800766e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007670:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007672:	68f8      	ldr	r0, [r7, #12]
 8007674:	f000 fd66 	bl	8008144 <I2C_MasterRequestRead>
 8007678:	4603      	mov	r3, r0
 800767a:	2b00      	cmp	r3, #0
 800767c:	d001      	beq.n	8007682 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800767e:	2301      	movs	r3, #1
 8007680:	e1b8      	b.n	80079f4 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007686:	2b00      	cmp	r3, #0
 8007688:	d113      	bne.n	80076b2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800768a:	2300      	movs	r3, #0
 800768c:	623b      	str	r3, [r7, #32]
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	695b      	ldr	r3, [r3, #20]
 8007694:	623b      	str	r3, [r7, #32]
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	699b      	ldr	r3, [r3, #24]
 800769c:	623b      	str	r3, [r7, #32]
 800769e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	681a      	ldr	r2, [r3, #0]
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80076ae:	601a      	str	r2, [r3, #0]
 80076b0:	e18c      	b.n	80079cc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80076b6:	2b01      	cmp	r3, #1
 80076b8:	d11b      	bne.n	80076f2 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	681a      	ldr	r2, [r3, #0]
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80076c8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80076ca:	2300      	movs	r3, #0
 80076cc:	61fb      	str	r3, [r7, #28]
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	695b      	ldr	r3, [r3, #20]
 80076d4:	61fb      	str	r3, [r7, #28]
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	699b      	ldr	r3, [r3, #24]
 80076dc:	61fb      	str	r3, [r7, #28]
 80076de:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	681a      	ldr	r2, [r3, #0]
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80076ee:	601a      	str	r2, [r3, #0]
 80076f0:	e16c      	b.n	80079cc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80076f6:	2b02      	cmp	r3, #2
 80076f8:	d11b      	bne.n	8007732 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	681a      	ldr	r2, [r3, #0]
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007708:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	681a      	ldr	r2, [r3, #0]
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007718:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800771a:	2300      	movs	r3, #0
 800771c:	61bb      	str	r3, [r7, #24]
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	695b      	ldr	r3, [r3, #20]
 8007724:	61bb      	str	r3, [r7, #24]
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	699b      	ldr	r3, [r3, #24]
 800772c:	61bb      	str	r3, [r7, #24]
 800772e:	69bb      	ldr	r3, [r7, #24]
 8007730:	e14c      	b.n	80079cc <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	681a      	ldr	r2, [r3, #0]
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007740:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007742:	2300      	movs	r3, #0
 8007744:	617b      	str	r3, [r7, #20]
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	695b      	ldr	r3, [r3, #20]
 800774c:	617b      	str	r3, [r7, #20]
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	699b      	ldr	r3, [r3, #24]
 8007754:	617b      	str	r3, [r7, #20]
 8007756:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8007758:	e138      	b.n	80079cc <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800775e:	2b03      	cmp	r3, #3
 8007760:	f200 80f1 	bhi.w	8007946 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007768:	2b01      	cmp	r3, #1
 800776a:	d123      	bne.n	80077b4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800776c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800776e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007770:	68f8      	ldr	r0, [r7, #12]
 8007772:	f001 f88b 	bl	800888c <I2C_WaitOnRXNEFlagUntilTimeout>
 8007776:	4603      	mov	r3, r0
 8007778:	2b00      	cmp	r3, #0
 800777a:	d001      	beq.n	8007780 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800777c:	2301      	movs	r3, #1
 800777e:	e139      	b.n	80079f4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	691a      	ldr	r2, [r3, #16]
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800778a:	b2d2      	uxtb	r2, r2
 800778c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007792:	1c5a      	adds	r2, r3, #1
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800779c:	3b01      	subs	r3, #1
 800779e:	b29a      	uxth	r2, r3
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077a8:	b29b      	uxth	r3, r3
 80077aa:	3b01      	subs	r3, #1
 80077ac:	b29a      	uxth	r2, r3
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80077b2:	e10b      	b.n	80079cc <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077b8:	2b02      	cmp	r3, #2
 80077ba:	d14e      	bne.n	800785a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80077bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077be:	9300      	str	r3, [sp, #0]
 80077c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077c2:	2200      	movs	r2, #0
 80077c4:	4906      	ldr	r1, [pc, #24]	; (80077e0 <HAL_I2C_Master_Receive+0x22c>)
 80077c6:	68f8      	ldr	r0, [r7, #12]
 80077c8:	f000 ff08 	bl	80085dc <I2C_WaitOnFlagUntilTimeout>
 80077cc:	4603      	mov	r3, r0
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d008      	beq.n	80077e4 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80077d2:	2301      	movs	r3, #1
 80077d4:	e10e      	b.n	80079f4 <HAL_I2C_Master_Receive+0x440>
 80077d6:	bf00      	nop
 80077d8:	00100002 	.word	0x00100002
 80077dc:	ffff0000 	.word	0xffff0000
 80077e0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	681a      	ldr	r2, [r3, #0]
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80077f2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	691a      	ldr	r2, [r3, #16]
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077fe:	b2d2      	uxtb	r2, r2
 8007800:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007806:	1c5a      	adds	r2, r3, #1
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007810:	3b01      	subs	r3, #1
 8007812:	b29a      	uxth	r2, r3
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800781c:	b29b      	uxth	r3, r3
 800781e:	3b01      	subs	r3, #1
 8007820:	b29a      	uxth	r2, r3
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	691a      	ldr	r2, [r3, #16]
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007830:	b2d2      	uxtb	r2, r2
 8007832:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007838:	1c5a      	adds	r2, r3, #1
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007842:	3b01      	subs	r3, #1
 8007844:	b29a      	uxth	r2, r3
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800784e:	b29b      	uxth	r3, r3
 8007850:	3b01      	subs	r3, #1
 8007852:	b29a      	uxth	r2, r3
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007858:	e0b8      	b.n	80079cc <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800785a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800785c:	9300      	str	r3, [sp, #0]
 800785e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007860:	2200      	movs	r2, #0
 8007862:	4966      	ldr	r1, [pc, #408]	; (80079fc <HAL_I2C_Master_Receive+0x448>)
 8007864:	68f8      	ldr	r0, [r7, #12]
 8007866:	f000 feb9 	bl	80085dc <I2C_WaitOnFlagUntilTimeout>
 800786a:	4603      	mov	r3, r0
 800786c:	2b00      	cmp	r3, #0
 800786e:	d001      	beq.n	8007874 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8007870:	2301      	movs	r3, #1
 8007872:	e0bf      	b.n	80079f4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	681a      	ldr	r2, [r3, #0]
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007882:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	691a      	ldr	r2, [r3, #16]
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800788e:	b2d2      	uxtb	r2, r2
 8007890:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007896:	1c5a      	adds	r2, r3, #1
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078a0:	3b01      	subs	r3, #1
 80078a2:	b29a      	uxth	r2, r3
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078ac:	b29b      	uxth	r3, r3
 80078ae:	3b01      	subs	r3, #1
 80078b0:	b29a      	uxth	r2, r3
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80078b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078b8:	9300      	str	r3, [sp, #0]
 80078ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078bc:	2200      	movs	r2, #0
 80078be:	494f      	ldr	r1, [pc, #316]	; (80079fc <HAL_I2C_Master_Receive+0x448>)
 80078c0:	68f8      	ldr	r0, [r7, #12]
 80078c2:	f000 fe8b 	bl	80085dc <I2C_WaitOnFlagUntilTimeout>
 80078c6:	4603      	mov	r3, r0
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d001      	beq.n	80078d0 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80078cc:	2301      	movs	r3, #1
 80078ce:	e091      	b.n	80079f4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	681a      	ldr	r2, [r3, #0]
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80078de:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	691a      	ldr	r2, [r3, #16]
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078ea:	b2d2      	uxtb	r2, r2
 80078ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078f2:	1c5a      	adds	r2, r3, #1
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078fc:	3b01      	subs	r3, #1
 80078fe:	b29a      	uxth	r2, r3
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007908:	b29b      	uxth	r3, r3
 800790a:	3b01      	subs	r3, #1
 800790c:	b29a      	uxth	r2, r3
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	691a      	ldr	r2, [r3, #16]
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800791c:	b2d2      	uxtb	r2, r2
 800791e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007924:	1c5a      	adds	r2, r3, #1
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800792e:	3b01      	subs	r3, #1
 8007930:	b29a      	uxth	r2, r3
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800793a:	b29b      	uxth	r3, r3
 800793c:	3b01      	subs	r3, #1
 800793e:	b29a      	uxth	r2, r3
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007944:	e042      	b.n	80079cc <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007946:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007948:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800794a:	68f8      	ldr	r0, [r7, #12]
 800794c:	f000 ff9e 	bl	800888c <I2C_WaitOnRXNEFlagUntilTimeout>
 8007950:	4603      	mov	r3, r0
 8007952:	2b00      	cmp	r3, #0
 8007954:	d001      	beq.n	800795a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8007956:	2301      	movs	r3, #1
 8007958:	e04c      	b.n	80079f4 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	691a      	ldr	r2, [r3, #16]
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007964:	b2d2      	uxtb	r2, r2
 8007966:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800796c:	1c5a      	adds	r2, r3, #1
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007976:	3b01      	subs	r3, #1
 8007978:	b29a      	uxth	r2, r3
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007982:	b29b      	uxth	r3, r3
 8007984:	3b01      	subs	r3, #1
 8007986:	b29a      	uxth	r2, r3
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	695b      	ldr	r3, [r3, #20]
 8007992:	f003 0304 	and.w	r3, r3, #4
 8007996:	2b04      	cmp	r3, #4
 8007998:	d118      	bne.n	80079cc <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	691a      	ldr	r2, [r3, #16]
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079a4:	b2d2      	uxtb	r2, r2
 80079a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ac:	1c5a      	adds	r2, r3, #1
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079b6:	3b01      	subs	r3, #1
 80079b8:	b29a      	uxth	r2, r3
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079c2:	b29b      	uxth	r3, r3
 80079c4:	3b01      	subs	r3, #1
 80079c6:	b29a      	uxth	r2, r3
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	f47f aec2 	bne.w	800775a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	2220      	movs	r2, #32
 80079da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	2200      	movs	r2, #0
 80079e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	2200      	movs	r2, #0
 80079ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80079ee:	2300      	movs	r3, #0
 80079f0:	e000      	b.n	80079f4 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80079f2:	2302      	movs	r3, #2
  }
}
 80079f4:	4618      	mov	r0, r3
 80079f6:	3728      	adds	r7, #40	; 0x28
 80079f8:	46bd      	mov	sp, r7
 80079fa:	bd80      	pop	{r7, pc}
 80079fc:	00010004 	.word	0x00010004

08007a00 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b088      	sub	sp, #32
 8007a04:	af02      	add	r7, sp, #8
 8007a06:	60f8      	str	r0, [r7, #12]
 8007a08:	4608      	mov	r0, r1
 8007a0a:	4611      	mov	r1, r2
 8007a0c:	461a      	mov	r2, r3
 8007a0e:	4603      	mov	r3, r0
 8007a10:	817b      	strh	r3, [r7, #10]
 8007a12:	460b      	mov	r3, r1
 8007a14:	813b      	strh	r3, [r7, #8]
 8007a16:	4613      	mov	r3, r2
 8007a18:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007a1a:	f7ff f807 	bl	8006a2c <HAL_GetTick>
 8007a1e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a26:	b2db      	uxtb	r3, r3
 8007a28:	2b20      	cmp	r3, #32
 8007a2a:	f040 80d9 	bne.w	8007be0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007a2e:	697b      	ldr	r3, [r7, #20]
 8007a30:	9300      	str	r3, [sp, #0]
 8007a32:	2319      	movs	r3, #25
 8007a34:	2201      	movs	r2, #1
 8007a36:	496d      	ldr	r1, [pc, #436]	; (8007bec <HAL_I2C_Mem_Write+0x1ec>)
 8007a38:	68f8      	ldr	r0, [r7, #12]
 8007a3a:	f000 fdcf 	bl	80085dc <I2C_WaitOnFlagUntilTimeout>
 8007a3e:	4603      	mov	r3, r0
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d001      	beq.n	8007a48 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8007a44:	2302      	movs	r3, #2
 8007a46:	e0cc      	b.n	8007be2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a4e:	2b01      	cmp	r3, #1
 8007a50:	d101      	bne.n	8007a56 <HAL_I2C_Mem_Write+0x56>
 8007a52:	2302      	movs	r3, #2
 8007a54:	e0c5      	b.n	8007be2 <HAL_I2C_Mem_Write+0x1e2>
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	2201      	movs	r2, #1
 8007a5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	f003 0301 	and.w	r3, r3, #1
 8007a68:	2b01      	cmp	r3, #1
 8007a6a:	d007      	beq.n	8007a7c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	681a      	ldr	r2, [r3, #0]
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	f042 0201 	orr.w	r2, r2, #1
 8007a7a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	681a      	ldr	r2, [r3, #0]
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007a8a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	2221      	movs	r2, #33	; 0x21
 8007a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	2240      	movs	r2, #64	; 0x40
 8007a98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	6a3a      	ldr	r2, [r7, #32]
 8007aa6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007aac:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ab2:	b29a      	uxth	r2, r3
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	4a4d      	ldr	r2, [pc, #308]	; (8007bf0 <HAL_I2C_Mem_Write+0x1f0>)
 8007abc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007abe:	88f8      	ldrh	r0, [r7, #6]
 8007ac0:	893a      	ldrh	r2, [r7, #8]
 8007ac2:	8979      	ldrh	r1, [r7, #10]
 8007ac4:	697b      	ldr	r3, [r7, #20]
 8007ac6:	9301      	str	r3, [sp, #4]
 8007ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aca:	9300      	str	r3, [sp, #0]
 8007acc:	4603      	mov	r3, r0
 8007ace:	68f8      	ldr	r0, [r7, #12]
 8007ad0:	f000 fc06 	bl	80082e0 <I2C_RequestMemoryWrite>
 8007ad4:	4603      	mov	r3, r0
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d052      	beq.n	8007b80 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8007ada:	2301      	movs	r3, #1
 8007adc:	e081      	b.n	8007be2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007ade:	697a      	ldr	r2, [r7, #20]
 8007ae0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007ae2:	68f8      	ldr	r0, [r7, #12]
 8007ae4:	f000 fe50 	bl	8008788 <I2C_WaitOnTXEFlagUntilTimeout>
 8007ae8:	4603      	mov	r3, r0
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d00d      	beq.n	8007b0a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007af2:	2b04      	cmp	r3, #4
 8007af4:	d107      	bne.n	8007b06 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	681a      	ldr	r2, [r3, #0]
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007b04:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007b06:	2301      	movs	r3, #1
 8007b08:	e06b      	b.n	8007be2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b0e:	781a      	ldrb	r2, [r3, #0]
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b1a:	1c5a      	adds	r2, r3, #1
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b24:	3b01      	subs	r3, #1
 8007b26:	b29a      	uxth	r2, r3
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b30:	b29b      	uxth	r3, r3
 8007b32:	3b01      	subs	r3, #1
 8007b34:	b29a      	uxth	r2, r3
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	695b      	ldr	r3, [r3, #20]
 8007b40:	f003 0304 	and.w	r3, r3, #4
 8007b44:	2b04      	cmp	r3, #4
 8007b46:	d11b      	bne.n	8007b80 <HAL_I2C_Mem_Write+0x180>
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d017      	beq.n	8007b80 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b54:	781a      	ldrb	r2, [r3, #0]
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b60:	1c5a      	adds	r2, r3, #1
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b6a:	3b01      	subs	r3, #1
 8007b6c:	b29a      	uxth	r2, r3
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b76:	b29b      	uxth	r3, r3
 8007b78:	3b01      	subs	r3, #1
 8007b7a:	b29a      	uxth	r2, r3
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d1aa      	bne.n	8007ade <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007b88:	697a      	ldr	r2, [r7, #20]
 8007b8a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007b8c:	68f8      	ldr	r0, [r7, #12]
 8007b8e:	f000 fe3c 	bl	800880a <I2C_WaitOnBTFFlagUntilTimeout>
 8007b92:	4603      	mov	r3, r0
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d00d      	beq.n	8007bb4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b9c:	2b04      	cmp	r3, #4
 8007b9e:	d107      	bne.n	8007bb0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	681a      	ldr	r2, [r3, #0]
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007bae:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007bb0:	2301      	movs	r3, #1
 8007bb2:	e016      	b.n	8007be2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	681a      	ldr	r2, [r3, #0]
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007bc2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	2220      	movs	r2, #32
 8007bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	2200      	movs	r2, #0
 8007bd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007bdc:	2300      	movs	r3, #0
 8007bde:	e000      	b.n	8007be2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8007be0:	2302      	movs	r3, #2
  }
}
 8007be2:	4618      	mov	r0, r3
 8007be4:	3718      	adds	r7, #24
 8007be6:	46bd      	mov	sp, r7
 8007be8:	bd80      	pop	{r7, pc}
 8007bea:	bf00      	nop
 8007bec:	00100002 	.word	0x00100002
 8007bf0:	ffff0000 	.word	0xffff0000

08007bf4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b08c      	sub	sp, #48	; 0x30
 8007bf8:	af02      	add	r7, sp, #8
 8007bfa:	60f8      	str	r0, [r7, #12]
 8007bfc:	4608      	mov	r0, r1
 8007bfe:	4611      	mov	r1, r2
 8007c00:	461a      	mov	r2, r3
 8007c02:	4603      	mov	r3, r0
 8007c04:	817b      	strh	r3, [r7, #10]
 8007c06:	460b      	mov	r3, r1
 8007c08:	813b      	strh	r3, [r7, #8]
 8007c0a:	4613      	mov	r3, r2
 8007c0c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007c0e:	f7fe ff0d 	bl	8006a2c <HAL_GetTick>
 8007c12:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c1a:	b2db      	uxtb	r3, r3
 8007c1c:	2b20      	cmp	r3, #32
 8007c1e:	f040 8208 	bne.w	8008032 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c24:	9300      	str	r3, [sp, #0]
 8007c26:	2319      	movs	r3, #25
 8007c28:	2201      	movs	r2, #1
 8007c2a:	497b      	ldr	r1, [pc, #492]	; (8007e18 <HAL_I2C_Mem_Read+0x224>)
 8007c2c:	68f8      	ldr	r0, [r7, #12]
 8007c2e:	f000 fcd5 	bl	80085dc <I2C_WaitOnFlagUntilTimeout>
 8007c32:	4603      	mov	r3, r0
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d001      	beq.n	8007c3c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8007c38:	2302      	movs	r3, #2
 8007c3a:	e1fb      	b.n	8008034 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c42:	2b01      	cmp	r3, #1
 8007c44:	d101      	bne.n	8007c4a <HAL_I2C_Mem_Read+0x56>
 8007c46:	2302      	movs	r3, #2
 8007c48:	e1f4      	b.n	8008034 <HAL_I2C_Mem_Read+0x440>
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	2201      	movs	r2, #1
 8007c4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	f003 0301 	and.w	r3, r3, #1
 8007c5c:	2b01      	cmp	r3, #1
 8007c5e:	d007      	beq.n	8007c70 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	681a      	ldr	r2, [r3, #0]
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	f042 0201 	orr.w	r2, r2, #1
 8007c6e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	681a      	ldr	r2, [r3, #0]
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007c7e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	2222      	movs	r2, #34	; 0x22
 8007c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	2240      	movs	r2, #64	; 0x40
 8007c8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	2200      	movs	r2, #0
 8007c94:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c9a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8007ca0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ca6:	b29a      	uxth	r2, r3
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	4a5b      	ldr	r2, [pc, #364]	; (8007e1c <HAL_I2C_Mem_Read+0x228>)
 8007cb0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007cb2:	88f8      	ldrh	r0, [r7, #6]
 8007cb4:	893a      	ldrh	r2, [r7, #8]
 8007cb6:	8979      	ldrh	r1, [r7, #10]
 8007cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cba:	9301      	str	r3, [sp, #4]
 8007cbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cbe:	9300      	str	r3, [sp, #0]
 8007cc0:	4603      	mov	r3, r0
 8007cc2:	68f8      	ldr	r0, [r7, #12]
 8007cc4:	f000 fba2 	bl	800840c <I2C_RequestMemoryRead>
 8007cc8:	4603      	mov	r3, r0
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d001      	beq.n	8007cd2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8007cce:	2301      	movs	r3, #1
 8007cd0:	e1b0      	b.n	8008034 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d113      	bne.n	8007d02 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007cda:	2300      	movs	r3, #0
 8007cdc:	623b      	str	r3, [r7, #32]
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	695b      	ldr	r3, [r3, #20]
 8007ce4:	623b      	str	r3, [r7, #32]
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	699b      	ldr	r3, [r3, #24]
 8007cec:	623b      	str	r3, [r7, #32]
 8007cee:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	681a      	ldr	r2, [r3, #0]
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007cfe:	601a      	str	r2, [r3, #0]
 8007d00:	e184      	b.n	800800c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d06:	2b01      	cmp	r3, #1
 8007d08:	d11b      	bne.n	8007d42 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	681a      	ldr	r2, [r3, #0]
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007d18:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	61fb      	str	r3, [r7, #28]
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	695b      	ldr	r3, [r3, #20]
 8007d24:	61fb      	str	r3, [r7, #28]
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	699b      	ldr	r3, [r3, #24]
 8007d2c:	61fb      	str	r3, [r7, #28]
 8007d2e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	681a      	ldr	r2, [r3, #0]
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007d3e:	601a      	str	r2, [r3, #0]
 8007d40:	e164      	b.n	800800c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d46:	2b02      	cmp	r3, #2
 8007d48:	d11b      	bne.n	8007d82 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	681a      	ldr	r2, [r3, #0]
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007d58:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	681a      	ldr	r2, [r3, #0]
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007d68:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	61bb      	str	r3, [r7, #24]
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	695b      	ldr	r3, [r3, #20]
 8007d74:	61bb      	str	r3, [r7, #24]
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	699b      	ldr	r3, [r3, #24]
 8007d7c:	61bb      	str	r3, [r7, #24]
 8007d7e:	69bb      	ldr	r3, [r7, #24]
 8007d80:	e144      	b.n	800800c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007d82:	2300      	movs	r3, #0
 8007d84:	617b      	str	r3, [r7, #20]
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	695b      	ldr	r3, [r3, #20]
 8007d8c:	617b      	str	r3, [r7, #20]
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	699b      	ldr	r3, [r3, #24]
 8007d94:	617b      	str	r3, [r7, #20]
 8007d96:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8007d98:	e138      	b.n	800800c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d9e:	2b03      	cmp	r3, #3
 8007da0:	f200 80f1 	bhi.w	8007f86 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007da8:	2b01      	cmp	r3, #1
 8007daa:	d123      	bne.n	8007df4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007dac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007dae:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007db0:	68f8      	ldr	r0, [r7, #12]
 8007db2:	f000 fd6b 	bl	800888c <I2C_WaitOnRXNEFlagUntilTimeout>
 8007db6:	4603      	mov	r3, r0
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d001      	beq.n	8007dc0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8007dbc:	2301      	movs	r3, #1
 8007dbe:	e139      	b.n	8008034 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	691a      	ldr	r2, [r3, #16]
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dca:	b2d2      	uxtb	r2, r2
 8007dcc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dd2:	1c5a      	adds	r2, r3, #1
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ddc:	3b01      	subs	r3, #1
 8007dde:	b29a      	uxth	r2, r3
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007de8:	b29b      	uxth	r3, r3
 8007dea:	3b01      	subs	r3, #1
 8007dec:	b29a      	uxth	r2, r3
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007df2:	e10b      	b.n	800800c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007df8:	2b02      	cmp	r3, #2
 8007dfa:	d14e      	bne.n	8007e9a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dfe:	9300      	str	r3, [sp, #0]
 8007e00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e02:	2200      	movs	r2, #0
 8007e04:	4906      	ldr	r1, [pc, #24]	; (8007e20 <HAL_I2C_Mem_Read+0x22c>)
 8007e06:	68f8      	ldr	r0, [r7, #12]
 8007e08:	f000 fbe8 	bl	80085dc <I2C_WaitOnFlagUntilTimeout>
 8007e0c:	4603      	mov	r3, r0
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d008      	beq.n	8007e24 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8007e12:	2301      	movs	r3, #1
 8007e14:	e10e      	b.n	8008034 <HAL_I2C_Mem_Read+0x440>
 8007e16:	bf00      	nop
 8007e18:	00100002 	.word	0x00100002
 8007e1c:	ffff0000 	.word	0xffff0000
 8007e20:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	681a      	ldr	r2, [r3, #0]
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007e32:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	691a      	ldr	r2, [r3, #16]
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e3e:	b2d2      	uxtb	r2, r2
 8007e40:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e46:	1c5a      	adds	r2, r3, #1
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e50:	3b01      	subs	r3, #1
 8007e52:	b29a      	uxth	r2, r3
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e5c:	b29b      	uxth	r3, r3
 8007e5e:	3b01      	subs	r3, #1
 8007e60:	b29a      	uxth	r2, r3
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	691a      	ldr	r2, [r3, #16]
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e70:	b2d2      	uxtb	r2, r2
 8007e72:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e78:	1c5a      	adds	r2, r3, #1
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e82:	3b01      	subs	r3, #1
 8007e84:	b29a      	uxth	r2, r3
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e8e:	b29b      	uxth	r3, r3
 8007e90:	3b01      	subs	r3, #1
 8007e92:	b29a      	uxth	r2, r3
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007e98:	e0b8      	b.n	800800c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e9c:	9300      	str	r3, [sp, #0]
 8007e9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	4966      	ldr	r1, [pc, #408]	; (800803c <HAL_I2C_Mem_Read+0x448>)
 8007ea4:	68f8      	ldr	r0, [r7, #12]
 8007ea6:	f000 fb99 	bl	80085dc <I2C_WaitOnFlagUntilTimeout>
 8007eaa:	4603      	mov	r3, r0
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d001      	beq.n	8007eb4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8007eb0:	2301      	movs	r3, #1
 8007eb2:	e0bf      	b.n	8008034 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	681a      	ldr	r2, [r3, #0]
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007ec2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	691a      	ldr	r2, [r3, #16]
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ece:	b2d2      	uxtb	r2, r2
 8007ed0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ed6:	1c5a      	adds	r2, r3, #1
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ee0:	3b01      	subs	r3, #1
 8007ee2:	b29a      	uxth	r2, r3
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007eec:	b29b      	uxth	r3, r3
 8007eee:	3b01      	subs	r3, #1
 8007ef0:	b29a      	uxth	r2, r3
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ef8:	9300      	str	r3, [sp, #0]
 8007efa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007efc:	2200      	movs	r2, #0
 8007efe:	494f      	ldr	r1, [pc, #316]	; (800803c <HAL_I2C_Mem_Read+0x448>)
 8007f00:	68f8      	ldr	r0, [r7, #12]
 8007f02:	f000 fb6b 	bl	80085dc <I2C_WaitOnFlagUntilTimeout>
 8007f06:	4603      	mov	r3, r0
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d001      	beq.n	8007f10 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8007f0c:	2301      	movs	r3, #1
 8007f0e:	e091      	b.n	8008034 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	681a      	ldr	r2, [r3, #0]
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007f1e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	691a      	ldr	r2, [r3, #16]
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f2a:	b2d2      	uxtb	r2, r2
 8007f2c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f32:	1c5a      	adds	r2, r3, #1
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f3c:	3b01      	subs	r3, #1
 8007f3e:	b29a      	uxth	r2, r3
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f48:	b29b      	uxth	r3, r3
 8007f4a:	3b01      	subs	r3, #1
 8007f4c:	b29a      	uxth	r2, r3
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	691a      	ldr	r2, [r3, #16]
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f5c:	b2d2      	uxtb	r2, r2
 8007f5e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f64:	1c5a      	adds	r2, r3, #1
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f6e:	3b01      	subs	r3, #1
 8007f70:	b29a      	uxth	r2, r3
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f7a:	b29b      	uxth	r3, r3
 8007f7c:	3b01      	subs	r3, #1
 8007f7e:	b29a      	uxth	r2, r3
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007f84:	e042      	b.n	800800c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007f86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f88:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007f8a:	68f8      	ldr	r0, [r7, #12]
 8007f8c:	f000 fc7e 	bl	800888c <I2C_WaitOnRXNEFlagUntilTimeout>
 8007f90:	4603      	mov	r3, r0
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d001      	beq.n	8007f9a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8007f96:	2301      	movs	r3, #1
 8007f98:	e04c      	b.n	8008034 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	691a      	ldr	r2, [r3, #16]
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fa4:	b2d2      	uxtb	r2, r2
 8007fa6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fac:	1c5a      	adds	r2, r3, #1
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007fb6:	3b01      	subs	r3, #1
 8007fb8:	b29a      	uxth	r2, r3
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007fc2:	b29b      	uxth	r3, r3
 8007fc4:	3b01      	subs	r3, #1
 8007fc6:	b29a      	uxth	r2, r3
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	695b      	ldr	r3, [r3, #20]
 8007fd2:	f003 0304 	and.w	r3, r3, #4
 8007fd6:	2b04      	cmp	r3, #4
 8007fd8:	d118      	bne.n	800800c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	691a      	ldr	r2, [r3, #16]
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fe4:	b2d2      	uxtb	r2, r2
 8007fe6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fec:	1c5a      	adds	r2, r3, #1
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ff6:	3b01      	subs	r3, #1
 8007ff8:	b29a      	uxth	r2, r3
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008002:	b29b      	uxth	r3, r3
 8008004:	3b01      	subs	r3, #1
 8008006:	b29a      	uxth	r2, r3
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008010:	2b00      	cmp	r3, #0
 8008012:	f47f aec2 	bne.w	8007d9a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	2220      	movs	r2, #32
 800801a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	2200      	movs	r2, #0
 8008022:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	2200      	movs	r2, #0
 800802a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800802e:	2300      	movs	r3, #0
 8008030:	e000      	b.n	8008034 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8008032:	2302      	movs	r3, #2
  }
}
 8008034:	4618      	mov	r0, r3
 8008036:	3728      	adds	r7, #40	; 0x28
 8008038:	46bd      	mov	sp, r7
 800803a:	bd80      	pop	{r7, pc}
 800803c:	00010004 	.word	0x00010004

08008040 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8008040:	b580      	push	{r7, lr}
 8008042:	b088      	sub	sp, #32
 8008044:	af02      	add	r7, sp, #8
 8008046:	60f8      	str	r0, [r7, #12]
 8008048:	607a      	str	r2, [r7, #4]
 800804a:	603b      	str	r3, [r7, #0]
 800804c:	460b      	mov	r3, r1
 800804e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008054:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8008056:	697b      	ldr	r3, [r7, #20]
 8008058:	2b08      	cmp	r3, #8
 800805a:	d006      	beq.n	800806a <I2C_MasterRequestWrite+0x2a>
 800805c:	697b      	ldr	r3, [r7, #20]
 800805e:	2b01      	cmp	r3, #1
 8008060:	d003      	beq.n	800806a <I2C_MasterRequestWrite+0x2a>
 8008062:	697b      	ldr	r3, [r7, #20]
 8008064:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008068:	d108      	bne.n	800807c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	681a      	ldr	r2, [r3, #0]
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008078:	601a      	str	r2, [r3, #0]
 800807a:	e00b      	b.n	8008094 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008080:	2b12      	cmp	r3, #18
 8008082:	d107      	bne.n	8008094 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	681a      	ldr	r2, [r3, #0]
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008092:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008094:	683b      	ldr	r3, [r7, #0]
 8008096:	9300      	str	r3, [sp, #0]
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	2200      	movs	r2, #0
 800809c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80080a0:	68f8      	ldr	r0, [r7, #12]
 80080a2:	f000 fa9b 	bl	80085dc <I2C_WaitOnFlagUntilTimeout>
 80080a6:	4603      	mov	r3, r0
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d00d      	beq.n	80080c8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80080ba:	d103      	bne.n	80080c4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80080c2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80080c4:	2303      	movs	r3, #3
 80080c6:	e035      	b.n	8008134 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	691b      	ldr	r3, [r3, #16]
 80080cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80080d0:	d108      	bne.n	80080e4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80080d2:	897b      	ldrh	r3, [r7, #10]
 80080d4:	b2db      	uxtb	r3, r3
 80080d6:	461a      	mov	r2, r3
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80080e0:	611a      	str	r2, [r3, #16]
 80080e2:	e01b      	b.n	800811c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80080e4:	897b      	ldrh	r3, [r7, #10]
 80080e6:	11db      	asrs	r3, r3, #7
 80080e8:	b2db      	uxtb	r3, r3
 80080ea:	f003 0306 	and.w	r3, r3, #6
 80080ee:	b2db      	uxtb	r3, r3
 80080f0:	f063 030f 	orn	r3, r3, #15
 80080f4:	b2da      	uxtb	r2, r3
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80080fc:	683b      	ldr	r3, [r7, #0]
 80080fe:	687a      	ldr	r2, [r7, #4]
 8008100:	490e      	ldr	r1, [pc, #56]	; (800813c <I2C_MasterRequestWrite+0xfc>)
 8008102:	68f8      	ldr	r0, [r7, #12]
 8008104:	f000 fac1 	bl	800868a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008108:	4603      	mov	r3, r0
 800810a:	2b00      	cmp	r3, #0
 800810c:	d001      	beq.n	8008112 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800810e:	2301      	movs	r3, #1
 8008110:	e010      	b.n	8008134 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8008112:	897b      	ldrh	r3, [r7, #10]
 8008114:	b2da      	uxtb	r2, r3
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800811c:	683b      	ldr	r3, [r7, #0]
 800811e:	687a      	ldr	r2, [r7, #4]
 8008120:	4907      	ldr	r1, [pc, #28]	; (8008140 <I2C_MasterRequestWrite+0x100>)
 8008122:	68f8      	ldr	r0, [r7, #12]
 8008124:	f000 fab1 	bl	800868a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008128:	4603      	mov	r3, r0
 800812a:	2b00      	cmp	r3, #0
 800812c:	d001      	beq.n	8008132 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800812e:	2301      	movs	r3, #1
 8008130:	e000      	b.n	8008134 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8008132:	2300      	movs	r3, #0
}
 8008134:	4618      	mov	r0, r3
 8008136:	3718      	adds	r7, #24
 8008138:	46bd      	mov	sp, r7
 800813a:	bd80      	pop	{r7, pc}
 800813c:	00010008 	.word	0x00010008
 8008140:	00010002 	.word	0x00010002

08008144 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8008144:	b580      	push	{r7, lr}
 8008146:	b088      	sub	sp, #32
 8008148:	af02      	add	r7, sp, #8
 800814a:	60f8      	str	r0, [r7, #12]
 800814c:	607a      	str	r2, [r7, #4]
 800814e:	603b      	str	r3, [r7, #0]
 8008150:	460b      	mov	r3, r1
 8008152:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008158:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	681a      	ldr	r2, [r3, #0]
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008168:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800816a:	697b      	ldr	r3, [r7, #20]
 800816c:	2b08      	cmp	r3, #8
 800816e:	d006      	beq.n	800817e <I2C_MasterRequestRead+0x3a>
 8008170:	697b      	ldr	r3, [r7, #20]
 8008172:	2b01      	cmp	r3, #1
 8008174:	d003      	beq.n	800817e <I2C_MasterRequestRead+0x3a>
 8008176:	697b      	ldr	r3, [r7, #20]
 8008178:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800817c:	d108      	bne.n	8008190 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	681a      	ldr	r2, [r3, #0]
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800818c:	601a      	str	r2, [r3, #0]
 800818e:	e00b      	b.n	80081a8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008194:	2b11      	cmp	r3, #17
 8008196:	d107      	bne.n	80081a8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	681a      	ldr	r2, [r3, #0]
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80081a6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80081a8:	683b      	ldr	r3, [r7, #0]
 80081aa:	9300      	str	r3, [sp, #0]
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2200      	movs	r2, #0
 80081b0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80081b4:	68f8      	ldr	r0, [r7, #12]
 80081b6:	f000 fa11 	bl	80085dc <I2C_WaitOnFlagUntilTimeout>
 80081ba:	4603      	mov	r3, r0
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d00d      	beq.n	80081dc <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80081ce:	d103      	bne.n	80081d8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80081d6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80081d8:	2303      	movs	r3, #3
 80081da:	e079      	b.n	80082d0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	691b      	ldr	r3, [r3, #16]
 80081e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80081e4:	d108      	bne.n	80081f8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80081e6:	897b      	ldrh	r3, [r7, #10]
 80081e8:	b2db      	uxtb	r3, r3
 80081ea:	f043 0301 	orr.w	r3, r3, #1
 80081ee:	b2da      	uxtb	r2, r3
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	611a      	str	r2, [r3, #16]
 80081f6:	e05f      	b.n	80082b8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80081f8:	897b      	ldrh	r3, [r7, #10]
 80081fa:	11db      	asrs	r3, r3, #7
 80081fc:	b2db      	uxtb	r3, r3
 80081fe:	f003 0306 	and.w	r3, r3, #6
 8008202:	b2db      	uxtb	r3, r3
 8008204:	f063 030f 	orn	r3, r3, #15
 8008208:	b2da      	uxtb	r2, r3
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8008210:	683b      	ldr	r3, [r7, #0]
 8008212:	687a      	ldr	r2, [r7, #4]
 8008214:	4930      	ldr	r1, [pc, #192]	; (80082d8 <I2C_MasterRequestRead+0x194>)
 8008216:	68f8      	ldr	r0, [r7, #12]
 8008218:	f000 fa37 	bl	800868a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800821c:	4603      	mov	r3, r0
 800821e:	2b00      	cmp	r3, #0
 8008220:	d001      	beq.n	8008226 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8008222:	2301      	movs	r3, #1
 8008224:	e054      	b.n	80082d0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8008226:	897b      	ldrh	r3, [r7, #10]
 8008228:	b2da      	uxtb	r2, r3
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008230:	683b      	ldr	r3, [r7, #0]
 8008232:	687a      	ldr	r2, [r7, #4]
 8008234:	4929      	ldr	r1, [pc, #164]	; (80082dc <I2C_MasterRequestRead+0x198>)
 8008236:	68f8      	ldr	r0, [r7, #12]
 8008238:	f000 fa27 	bl	800868a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800823c:	4603      	mov	r3, r0
 800823e:	2b00      	cmp	r3, #0
 8008240:	d001      	beq.n	8008246 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8008242:	2301      	movs	r3, #1
 8008244:	e044      	b.n	80082d0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008246:	2300      	movs	r3, #0
 8008248:	613b      	str	r3, [r7, #16]
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	695b      	ldr	r3, [r3, #20]
 8008250:	613b      	str	r3, [r7, #16]
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	699b      	ldr	r3, [r3, #24]
 8008258:	613b      	str	r3, [r7, #16]
 800825a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	681a      	ldr	r2, [r3, #0]
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800826a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	9300      	str	r3, [sp, #0]
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2200      	movs	r2, #0
 8008274:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008278:	68f8      	ldr	r0, [r7, #12]
 800827a:	f000 f9af 	bl	80085dc <I2C_WaitOnFlagUntilTimeout>
 800827e:	4603      	mov	r3, r0
 8008280:	2b00      	cmp	r3, #0
 8008282:	d00d      	beq.n	80082a0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800828e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008292:	d103      	bne.n	800829c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	f44f 7200 	mov.w	r2, #512	; 0x200
 800829a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800829c:	2303      	movs	r3, #3
 800829e:	e017      	b.n	80082d0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80082a0:	897b      	ldrh	r3, [r7, #10]
 80082a2:	11db      	asrs	r3, r3, #7
 80082a4:	b2db      	uxtb	r3, r3
 80082a6:	f003 0306 	and.w	r3, r3, #6
 80082aa:	b2db      	uxtb	r3, r3
 80082ac:	f063 030e 	orn	r3, r3, #14
 80082b0:	b2da      	uxtb	r2, r3
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80082b8:	683b      	ldr	r3, [r7, #0]
 80082ba:	687a      	ldr	r2, [r7, #4]
 80082bc:	4907      	ldr	r1, [pc, #28]	; (80082dc <I2C_MasterRequestRead+0x198>)
 80082be:	68f8      	ldr	r0, [r7, #12]
 80082c0:	f000 f9e3 	bl	800868a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80082c4:	4603      	mov	r3, r0
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d001      	beq.n	80082ce <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80082ca:	2301      	movs	r3, #1
 80082cc:	e000      	b.n	80082d0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80082ce:	2300      	movs	r3, #0
}
 80082d0:	4618      	mov	r0, r3
 80082d2:	3718      	adds	r7, #24
 80082d4:	46bd      	mov	sp, r7
 80082d6:	bd80      	pop	{r7, pc}
 80082d8:	00010008 	.word	0x00010008
 80082dc:	00010002 	.word	0x00010002

080082e0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b088      	sub	sp, #32
 80082e4:	af02      	add	r7, sp, #8
 80082e6:	60f8      	str	r0, [r7, #12]
 80082e8:	4608      	mov	r0, r1
 80082ea:	4611      	mov	r1, r2
 80082ec:	461a      	mov	r2, r3
 80082ee:	4603      	mov	r3, r0
 80082f0:	817b      	strh	r3, [r7, #10]
 80082f2:	460b      	mov	r3, r1
 80082f4:	813b      	strh	r3, [r7, #8]
 80082f6:	4613      	mov	r3, r2
 80082f8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	681a      	ldr	r2, [r3, #0]
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008308:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800830a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800830c:	9300      	str	r3, [sp, #0]
 800830e:	6a3b      	ldr	r3, [r7, #32]
 8008310:	2200      	movs	r2, #0
 8008312:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008316:	68f8      	ldr	r0, [r7, #12]
 8008318:	f000 f960 	bl	80085dc <I2C_WaitOnFlagUntilTimeout>
 800831c:	4603      	mov	r3, r0
 800831e:	2b00      	cmp	r3, #0
 8008320:	d00d      	beq.n	800833e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800832c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008330:	d103      	bne.n	800833a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008338:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800833a:	2303      	movs	r3, #3
 800833c:	e05f      	b.n	80083fe <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800833e:	897b      	ldrh	r3, [r7, #10]
 8008340:	b2db      	uxtb	r3, r3
 8008342:	461a      	mov	r2, r3
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800834c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800834e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008350:	6a3a      	ldr	r2, [r7, #32]
 8008352:	492d      	ldr	r1, [pc, #180]	; (8008408 <I2C_RequestMemoryWrite+0x128>)
 8008354:	68f8      	ldr	r0, [r7, #12]
 8008356:	f000 f998 	bl	800868a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800835a:	4603      	mov	r3, r0
 800835c:	2b00      	cmp	r3, #0
 800835e:	d001      	beq.n	8008364 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8008360:	2301      	movs	r3, #1
 8008362:	e04c      	b.n	80083fe <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008364:	2300      	movs	r3, #0
 8008366:	617b      	str	r3, [r7, #20]
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	695b      	ldr	r3, [r3, #20]
 800836e:	617b      	str	r3, [r7, #20]
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	699b      	ldr	r3, [r3, #24]
 8008376:	617b      	str	r3, [r7, #20]
 8008378:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800837a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800837c:	6a39      	ldr	r1, [r7, #32]
 800837e:	68f8      	ldr	r0, [r7, #12]
 8008380:	f000 fa02 	bl	8008788 <I2C_WaitOnTXEFlagUntilTimeout>
 8008384:	4603      	mov	r3, r0
 8008386:	2b00      	cmp	r3, #0
 8008388:	d00d      	beq.n	80083a6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800838e:	2b04      	cmp	r3, #4
 8008390:	d107      	bne.n	80083a2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	681a      	ldr	r2, [r3, #0]
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80083a0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80083a2:	2301      	movs	r3, #1
 80083a4:	e02b      	b.n	80083fe <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80083a6:	88fb      	ldrh	r3, [r7, #6]
 80083a8:	2b01      	cmp	r3, #1
 80083aa:	d105      	bne.n	80083b8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80083ac:	893b      	ldrh	r3, [r7, #8]
 80083ae:	b2da      	uxtb	r2, r3
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	611a      	str	r2, [r3, #16]
 80083b6:	e021      	b.n	80083fc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80083b8:	893b      	ldrh	r3, [r7, #8]
 80083ba:	0a1b      	lsrs	r3, r3, #8
 80083bc:	b29b      	uxth	r3, r3
 80083be:	b2da      	uxtb	r2, r3
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80083c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083c8:	6a39      	ldr	r1, [r7, #32]
 80083ca:	68f8      	ldr	r0, [r7, #12]
 80083cc:	f000 f9dc 	bl	8008788 <I2C_WaitOnTXEFlagUntilTimeout>
 80083d0:	4603      	mov	r3, r0
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d00d      	beq.n	80083f2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083da:	2b04      	cmp	r3, #4
 80083dc:	d107      	bne.n	80083ee <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	681a      	ldr	r2, [r3, #0]
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80083ec:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80083ee:	2301      	movs	r3, #1
 80083f0:	e005      	b.n	80083fe <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80083f2:	893b      	ldrh	r3, [r7, #8]
 80083f4:	b2da      	uxtb	r2, r3
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80083fc:	2300      	movs	r3, #0
}
 80083fe:	4618      	mov	r0, r3
 8008400:	3718      	adds	r7, #24
 8008402:	46bd      	mov	sp, r7
 8008404:	bd80      	pop	{r7, pc}
 8008406:	bf00      	nop
 8008408:	00010002 	.word	0x00010002

0800840c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800840c:	b580      	push	{r7, lr}
 800840e:	b088      	sub	sp, #32
 8008410:	af02      	add	r7, sp, #8
 8008412:	60f8      	str	r0, [r7, #12]
 8008414:	4608      	mov	r0, r1
 8008416:	4611      	mov	r1, r2
 8008418:	461a      	mov	r2, r3
 800841a:	4603      	mov	r3, r0
 800841c:	817b      	strh	r3, [r7, #10]
 800841e:	460b      	mov	r3, r1
 8008420:	813b      	strh	r3, [r7, #8]
 8008422:	4613      	mov	r3, r2
 8008424:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	681a      	ldr	r2, [r3, #0]
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008434:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	681a      	ldr	r2, [r3, #0]
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008444:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008448:	9300      	str	r3, [sp, #0]
 800844a:	6a3b      	ldr	r3, [r7, #32]
 800844c:	2200      	movs	r2, #0
 800844e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008452:	68f8      	ldr	r0, [r7, #12]
 8008454:	f000 f8c2 	bl	80085dc <I2C_WaitOnFlagUntilTimeout>
 8008458:	4603      	mov	r3, r0
 800845a:	2b00      	cmp	r3, #0
 800845c:	d00d      	beq.n	800847a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008468:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800846c:	d103      	bne.n	8008476 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008474:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008476:	2303      	movs	r3, #3
 8008478:	e0aa      	b.n	80085d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800847a:	897b      	ldrh	r3, [r7, #10]
 800847c:	b2db      	uxtb	r3, r3
 800847e:	461a      	mov	r2, r3
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008488:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800848a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800848c:	6a3a      	ldr	r2, [r7, #32]
 800848e:	4952      	ldr	r1, [pc, #328]	; (80085d8 <I2C_RequestMemoryRead+0x1cc>)
 8008490:	68f8      	ldr	r0, [r7, #12]
 8008492:	f000 f8fa 	bl	800868a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008496:	4603      	mov	r3, r0
 8008498:	2b00      	cmp	r3, #0
 800849a:	d001      	beq.n	80084a0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800849c:	2301      	movs	r3, #1
 800849e:	e097      	b.n	80085d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80084a0:	2300      	movs	r3, #0
 80084a2:	617b      	str	r3, [r7, #20]
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	695b      	ldr	r3, [r3, #20]
 80084aa:	617b      	str	r3, [r7, #20]
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	699b      	ldr	r3, [r3, #24]
 80084b2:	617b      	str	r3, [r7, #20]
 80084b4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80084b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80084b8:	6a39      	ldr	r1, [r7, #32]
 80084ba:	68f8      	ldr	r0, [r7, #12]
 80084bc:	f000 f964 	bl	8008788 <I2C_WaitOnTXEFlagUntilTimeout>
 80084c0:	4603      	mov	r3, r0
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d00d      	beq.n	80084e2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084ca:	2b04      	cmp	r3, #4
 80084cc:	d107      	bne.n	80084de <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	681a      	ldr	r2, [r3, #0]
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80084dc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80084de:	2301      	movs	r3, #1
 80084e0:	e076      	b.n	80085d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80084e2:	88fb      	ldrh	r3, [r7, #6]
 80084e4:	2b01      	cmp	r3, #1
 80084e6:	d105      	bne.n	80084f4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80084e8:	893b      	ldrh	r3, [r7, #8]
 80084ea:	b2da      	uxtb	r2, r3
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	611a      	str	r2, [r3, #16]
 80084f2:	e021      	b.n	8008538 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80084f4:	893b      	ldrh	r3, [r7, #8]
 80084f6:	0a1b      	lsrs	r3, r3, #8
 80084f8:	b29b      	uxth	r3, r3
 80084fa:	b2da      	uxtb	r2, r3
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008502:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008504:	6a39      	ldr	r1, [r7, #32]
 8008506:	68f8      	ldr	r0, [r7, #12]
 8008508:	f000 f93e 	bl	8008788 <I2C_WaitOnTXEFlagUntilTimeout>
 800850c:	4603      	mov	r3, r0
 800850e:	2b00      	cmp	r3, #0
 8008510:	d00d      	beq.n	800852e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008516:	2b04      	cmp	r3, #4
 8008518:	d107      	bne.n	800852a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	681a      	ldr	r2, [r3, #0]
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008528:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800852a:	2301      	movs	r3, #1
 800852c:	e050      	b.n	80085d0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800852e:	893b      	ldrh	r3, [r7, #8]
 8008530:	b2da      	uxtb	r2, r3
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008538:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800853a:	6a39      	ldr	r1, [r7, #32]
 800853c:	68f8      	ldr	r0, [r7, #12]
 800853e:	f000 f923 	bl	8008788 <I2C_WaitOnTXEFlagUntilTimeout>
 8008542:	4603      	mov	r3, r0
 8008544:	2b00      	cmp	r3, #0
 8008546:	d00d      	beq.n	8008564 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800854c:	2b04      	cmp	r3, #4
 800854e:	d107      	bne.n	8008560 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	681a      	ldr	r2, [r3, #0]
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800855e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008560:	2301      	movs	r3, #1
 8008562:	e035      	b.n	80085d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	681a      	ldr	r2, [r3, #0]
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008572:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008576:	9300      	str	r3, [sp, #0]
 8008578:	6a3b      	ldr	r3, [r7, #32]
 800857a:	2200      	movs	r2, #0
 800857c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008580:	68f8      	ldr	r0, [r7, #12]
 8008582:	f000 f82b 	bl	80085dc <I2C_WaitOnFlagUntilTimeout>
 8008586:	4603      	mov	r3, r0
 8008588:	2b00      	cmp	r3, #0
 800858a:	d00d      	beq.n	80085a8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008596:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800859a:	d103      	bne.n	80085a4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80085a2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80085a4:	2303      	movs	r3, #3
 80085a6:	e013      	b.n	80085d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80085a8:	897b      	ldrh	r3, [r7, #10]
 80085aa:	b2db      	uxtb	r3, r3
 80085ac:	f043 0301 	orr.w	r3, r3, #1
 80085b0:	b2da      	uxtb	r2, r3
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80085b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ba:	6a3a      	ldr	r2, [r7, #32]
 80085bc:	4906      	ldr	r1, [pc, #24]	; (80085d8 <I2C_RequestMemoryRead+0x1cc>)
 80085be:	68f8      	ldr	r0, [r7, #12]
 80085c0:	f000 f863 	bl	800868a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80085c4:	4603      	mov	r3, r0
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d001      	beq.n	80085ce <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80085ca:	2301      	movs	r3, #1
 80085cc:	e000      	b.n	80085d0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80085ce:	2300      	movs	r3, #0
}
 80085d0:	4618      	mov	r0, r3
 80085d2:	3718      	adds	r7, #24
 80085d4:	46bd      	mov	sp, r7
 80085d6:	bd80      	pop	{r7, pc}
 80085d8:	00010002 	.word	0x00010002

080085dc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80085dc:	b580      	push	{r7, lr}
 80085de:	b084      	sub	sp, #16
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	60f8      	str	r0, [r7, #12]
 80085e4:	60b9      	str	r1, [r7, #8]
 80085e6:	603b      	str	r3, [r7, #0]
 80085e8:	4613      	mov	r3, r2
 80085ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80085ec:	e025      	b.n	800863a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80085ee:	683b      	ldr	r3, [r7, #0]
 80085f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085f4:	d021      	beq.n	800863a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80085f6:	f7fe fa19 	bl	8006a2c <HAL_GetTick>
 80085fa:	4602      	mov	r2, r0
 80085fc:	69bb      	ldr	r3, [r7, #24]
 80085fe:	1ad3      	subs	r3, r2, r3
 8008600:	683a      	ldr	r2, [r7, #0]
 8008602:	429a      	cmp	r2, r3
 8008604:	d302      	bcc.n	800860c <I2C_WaitOnFlagUntilTimeout+0x30>
 8008606:	683b      	ldr	r3, [r7, #0]
 8008608:	2b00      	cmp	r3, #0
 800860a:	d116      	bne.n	800863a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	2200      	movs	r2, #0
 8008610:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	2220      	movs	r2, #32
 8008616:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	2200      	movs	r2, #0
 800861e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008626:	f043 0220 	orr.w	r2, r3, #32
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	2200      	movs	r2, #0
 8008632:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008636:	2301      	movs	r3, #1
 8008638:	e023      	b.n	8008682 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800863a:	68bb      	ldr	r3, [r7, #8]
 800863c:	0c1b      	lsrs	r3, r3, #16
 800863e:	b2db      	uxtb	r3, r3
 8008640:	2b01      	cmp	r3, #1
 8008642:	d10d      	bne.n	8008660 <I2C_WaitOnFlagUntilTimeout+0x84>
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	695b      	ldr	r3, [r3, #20]
 800864a:	43da      	mvns	r2, r3
 800864c:	68bb      	ldr	r3, [r7, #8]
 800864e:	4013      	ands	r3, r2
 8008650:	b29b      	uxth	r3, r3
 8008652:	2b00      	cmp	r3, #0
 8008654:	bf0c      	ite	eq
 8008656:	2301      	moveq	r3, #1
 8008658:	2300      	movne	r3, #0
 800865a:	b2db      	uxtb	r3, r3
 800865c:	461a      	mov	r2, r3
 800865e:	e00c      	b.n	800867a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	699b      	ldr	r3, [r3, #24]
 8008666:	43da      	mvns	r2, r3
 8008668:	68bb      	ldr	r3, [r7, #8]
 800866a:	4013      	ands	r3, r2
 800866c:	b29b      	uxth	r3, r3
 800866e:	2b00      	cmp	r3, #0
 8008670:	bf0c      	ite	eq
 8008672:	2301      	moveq	r3, #1
 8008674:	2300      	movne	r3, #0
 8008676:	b2db      	uxtb	r3, r3
 8008678:	461a      	mov	r2, r3
 800867a:	79fb      	ldrb	r3, [r7, #7]
 800867c:	429a      	cmp	r2, r3
 800867e:	d0b6      	beq.n	80085ee <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008680:	2300      	movs	r3, #0
}
 8008682:	4618      	mov	r0, r3
 8008684:	3710      	adds	r7, #16
 8008686:	46bd      	mov	sp, r7
 8008688:	bd80      	pop	{r7, pc}

0800868a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800868a:	b580      	push	{r7, lr}
 800868c:	b084      	sub	sp, #16
 800868e:	af00      	add	r7, sp, #0
 8008690:	60f8      	str	r0, [r7, #12]
 8008692:	60b9      	str	r1, [r7, #8]
 8008694:	607a      	str	r2, [r7, #4]
 8008696:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008698:	e051      	b.n	800873e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	695b      	ldr	r3, [r3, #20]
 80086a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80086a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80086a8:	d123      	bne.n	80086f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	681a      	ldr	r2, [r3, #0]
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80086b8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80086c2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	2200      	movs	r2, #0
 80086c8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	2220      	movs	r2, #32
 80086ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	2200      	movs	r2, #0
 80086d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086de:	f043 0204 	orr.w	r2, r3, #4
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	2200      	movs	r2, #0
 80086ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80086ee:	2301      	movs	r3, #1
 80086f0:	e046      	b.n	8008780 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086f8:	d021      	beq.n	800873e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80086fa:	f7fe f997 	bl	8006a2c <HAL_GetTick>
 80086fe:	4602      	mov	r2, r0
 8008700:	683b      	ldr	r3, [r7, #0]
 8008702:	1ad3      	subs	r3, r2, r3
 8008704:	687a      	ldr	r2, [r7, #4]
 8008706:	429a      	cmp	r2, r3
 8008708:	d302      	bcc.n	8008710 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	2b00      	cmp	r3, #0
 800870e:	d116      	bne.n	800873e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	2200      	movs	r2, #0
 8008714:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	2220      	movs	r2, #32
 800871a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	2200      	movs	r2, #0
 8008722:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800872a:	f043 0220 	orr.w	r2, r3, #32
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	2200      	movs	r2, #0
 8008736:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800873a:	2301      	movs	r3, #1
 800873c:	e020      	b.n	8008780 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800873e:	68bb      	ldr	r3, [r7, #8]
 8008740:	0c1b      	lsrs	r3, r3, #16
 8008742:	b2db      	uxtb	r3, r3
 8008744:	2b01      	cmp	r3, #1
 8008746:	d10c      	bne.n	8008762 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	695b      	ldr	r3, [r3, #20]
 800874e:	43da      	mvns	r2, r3
 8008750:	68bb      	ldr	r3, [r7, #8]
 8008752:	4013      	ands	r3, r2
 8008754:	b29b      	uxth	r3, r3
 8008756:	2b00      	cmp	r3, #0
 8008758:	bf14      	ite	ne
 800875a:	2301      	movne	r3, #1
 800875c:	2300      	moveq	r3, #0
 800875e:	b2db      	uxtb	r3, r3
 8008760:	e00b      	b.n	800877a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	699b      	ldr	r3, [r3, #24]
 8008768:	43da      	mvns	r2, r3
 800876a:	68bb      	ldr	r3, [r7, #8]
 800876c:	4013      	ands	r3, r2
 800876e:	b29b      	uxth	r3, r3
 8008770:	2b00      	cmp	r3, #0
 8008772:	bf14      	ite	ne
 8008774:	2301      	movne	r3, #1
 8008776:	2300      	moveq	r3, #0
 8008778:	b2db      	uxtb	r3, r3
 800877a:	2b00      	cmp	r3, #0
 800877c:	d18d      	bne.n	800869a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800877e:	2300      	movs	r3, #0
}
 8008780:	4618      	mov	r0, r3
 8008782:	3710      	adds	r7, #16
 8008784:	46bd      	mov	sp, r7
 8008786:	bd80      	pop	{r7, pc}

08008788 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008788:	b580      	push	{r7, lr}
 800878a:	b084      	sub	sp, #16
 800878c:	af00      	add	r7, sp, #0
 800878e:	60f8      	str	r0, [r7, #12]
 8008790:	60b9      	str	r1, [r7, #8]
 8008792:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008794:	e02d      	b.n	80087f2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008796:	68f8      	ldr	r0, [r7, #12]
 8008798:	f000 f8ce 	bl	8008938 <I2C_IsAcknowledgeFailed>
 800879c:	4603      	mov	r3, r0
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d001      	beq.n	80087a6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80087a2:	2301      	movs	r3, #1
 80087a4:	e02d      	b.n	8008802 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80087a6:	68bb      	ldr	r3, [r7, #8]
 80087a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087ac:	d021      	beq.n	80087f2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80087ae:	f7fe f93d 	bl	8006a2c <HAL_GetTick>
 80087b2:	4602      	mov	r2, r0
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	1ad3      	subs	r3, r2, r3
 80087b8:	68ba      	ldr	r2, [r7, #8]
 80087ba:	429a      	cmp	r2, r3
 80087bc:	d302      	bcc.n	80087c4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80087be:	68bb      	ldr	r3, [r7, #8]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d116      	bne.n	80087f2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	2200      	movs	r2, #0
 80087c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	2220      	movs	r2, #32
 80087ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	2200      	movs	r2, #0
 80087d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087de:	f043 0220 	orr.w	r2, r3, #32
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	2200      	movs	r2, #0
 80087ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80087ee:	2301      	movs	r3, #1
 80087f0:	e007      	b.n	8008802 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	695b      	ldr	r3, [r3, #20]
 80087f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087fc:	2b80      	cmp	r3, #128	; 0x80
 80087fe:	d1ca      	bne.n	8008796 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008800:	2300      	movs	r3, #0
}
 8008802:	4618      	mov	r0, r3
 8008804:	3710      	adds	r7, #16
 8008806:	46bd      	mov	sp, r7
 8008808:	bd80      	pop	{r7, pc}

0800880a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800880a:	b580      	push	{r7, lr}
 800880c:	b084      	sub	sp, #16
 800880e:	af00      	add	r7, sp, #0
 8008810:	60f8      	str	r0, [r7, #12]
 8008812:	60b9      	str	r1, [r7, #8]
 8008814:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008816:	e02d      	b.n	8008874 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008818:	68f8      	ldr	r0, [r7, #12]
 800881a:	f000 f88d 	bl	8008938 <I2C_IsAcknowledgeFailed>
 800881e:	4603      	mov	r3, r0
 8008820:	2b00      	cmp	r3, #0
 8008822:	d001      	beq.n	8008828 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008824:	2301      	movs	r3, #1
 8008826:	e02d      	b.n	8008884 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008828:	68bb      	ldr	r3, [r7, #8]
 800882a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800882e:	d021      	beq.n	8008874 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008830:	f7fe f8fc 	bl	8006a2c <HAL_GetTick>
 8008834:	4602      	mov	r2, r0
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	1ad3      	subs	r3, r2, r3
 800883a:	68ba      	ldr	r2, [r7, #8]
 800883c:	429a      	cmp	r2, r3
 800883e:	d302      	bcc.n	8008846 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008840:	68bb      	ldr	r3, [r7, #8]
 8008842:	2b00      	cmp	r3, #0
 8008844:	d116      	bne.n	8008874 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	2200      	movs	r2, #0
 800884a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	2220      	movs	r2, #32
 8008850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	2200      	movs	r2, #0
 8008858:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008860:	f043 0220 	orr.w	r2, r3, #32
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	2200      	movs	r2, #0
 800886c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008870:	2301      	movs	r3, #1
 8008872:	e007      	b.n	8008884 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	695b      	ldr	r3, [r3, #20]
 800887a:	f003 0304 	and.w	r3, r3, #4
 800887e:	2b04      	cmp	r3, #4
 8008880:	d1ca      	bne.n	8008818 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008882:	2300      	movs	r3, #0
}
 8008884:	4618      	mov	r0, r3
 8008886:	3710      	adds	r7, #16
 8008888:	46bd      	mov	sp, r7
 800888a:	bd80      	pop	{r7, pc}

0800888c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800888c:	b580      	push	{r7, lr}
 800888e:	b084      	sub	sp, #16
 8008890:	af00      	add	r7, sp, #0
 8008892:	60f8      	str	r0, [r7, #12]
 8008894:	60b9      	str	r1, [r7, #8]
 8008896:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008898:	e042      	b.n	8008920 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	695b      	ldr	r3, [r3, #20]
 80088a0:	f003 0310 	and.w	r3, r3, #16
 80088a4:	2b10      	cmp	r3, #16
 80088a6:	d119      	bne.n	80088dc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	f06f 0210 	mvn.w	r2, #16
 80088b0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	2200      	movs	r2, #0
 80088b6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	2220      	movs	r2, #32
 80088bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	2200      	movs	r2, #0
 80088c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	2200      	movs	r2, #0
 80088d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80088d8:	2301      	movs	r3, #1
 80088da:	e029      	b.n	8008930 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80088dc:	f7fe f8a6 	bl	8006a2c <HAL_GetTick>
 80088e0:	4602      	mov	r2, r0
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	1ad3      	subs	r3, r2, r3
 80088e6:	68ba      	ldr	r2, [r7, #8]
 80088e8:	429a      	cmp	r2, r3
 80088ea:	d302      	bcc.n	80088f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80088ec:	68bb      	ldr	r3, [r7, #8]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d116      	bne.n	8008920 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	2200      	movs	r2, #0
 80088f6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	2220      	movs	r2, #32
 80088fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	2200      	movs	r2, #0
 8008904:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800890c:	f043 0220 	orr.w	r2, r3, #32
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	2200      	movs	r2, #0
 8008918:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800891c:	2301      	movs	r3, #1
 800891e:	e007      	b.n	8008930 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	695b      	ldr	r3, [r3, #20]
 8008926:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800892a:	2b40      	cmp	r3, #64	; 0x40
 800892c:	d1b5      	bne.n	800889a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800892e:	2300      	movs	r3, #0
}
 8008930:	4618      	mov	r0, r3
 8008932:	3710      	adds	r7, #16
 8008934:	46bd      	mov	sp, r7
 8008936:	bd80      	pop	{r7, pc}

08008938 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008938:	b480      	push	{r7}
 800893a:	b083      	sub	sp, #12
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	695b      	ldr	r3, [r3, #20]
 8008946:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800894a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800894e:	d11b      	bne.n	8008988 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008958:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	2200      	movs	r2, #0
 800895e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	2220      	movs	r2, #32
 8008964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	2200      	movs	r2, #0
 800896c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008974:	f043 0204 	orr.w	r2, r3, #4
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	2200      	movs	r2, #0
 8008980:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8008984:	2301      	movs	r3, #1
 8008986:	e000      	b.n	800898a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008988:	2300      	movs	r3, #0
}
 800898a:	4618      	mov	r0, r3
 800898c:	370c      	adds	r7, #12
 800898e:	46bd      	mov	sp, r7
 8008990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008994:	4770      	bx	lr
	...

08008998 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8008998:	b580      	push	{r7, lr}
 800899a:	b082      	sub	sp, #8
 800899c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800899e:	2300      	movs	r3, #0
 80089a0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80089a2:	2300      	movs	r3, #0
 80089a4:	603b      	str	r3, [r7, #0]
 80089a6:	4b20      	ldr	r3, [pc, #128]	; (8008a28 <HAL_PWREx_EnableOverDrive+0x90>)
 80089a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089aa:	4a1f      	ldr	r2, [pc, #124]	; (8008a28 <HAL_PWREx_EnableOverDrive+0x90>)
 80089ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80089b0:	6413      	str	r3, [r2, #64]	; 0x40
 80089b2:	4b1d      	ldr	r3, [pc, #116]	; (8008a28 <HAL_PWREx_EnableOverDrive+0x90>)
 80089b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80089ba:	603b      	str	r3, [r7, #0]
 80089bc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80089be:	4b1b      	ldr	r3, [pc, #108]	; (8008a2c <HAL_PWREx_EnableOverDrive+0x94>)
 80089c0:	2201      	movs	r2, #1
 80089c2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80089c4:	f7fe f832 	bl	8006a2c <HAL_GetTick>
 80089c8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80089ca:	e009      	b.n	80089e0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80089cc:	f7fe f82e 	bl	8006a2c <HAL_GetTick>
 80089d0:	4602      	mov	r2, r0
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	1ad3      	subs	r3, r2, r3
 80089d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80089da:	d901      	bls.n	80089e0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80089dc:	2303      	movs	r3, #3
 80089de:	e01f      	b.n	8008a20 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80089e0:	4b13      	ldr	r3, [pc, #76]	; (8008a30 <HAL_PWREx_EnableOverDrive+0x98>)
 80089e2:	685b      	ldr	r3, [r3, #4]
 80089e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80089e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80089ec:	d1ee      	bne.n	80089cc <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80089ee:	4b11      	ldr	r3, [pc, #68]	; (8008a34 <HAL_PWREx_EnableOverDrive+0x9c>)
 80089f0:	2201      	movs	r2, #1
 80089f2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80089f4:	f7fe f81a 	bl	8006a2c <HAL_GetTick>
 80089f8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80089fa:	e009      	b.n	8008a10 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80089fc:	f7fe f816 	bl	8006a2c <HAL_GetTick>
 8008a00:	4602      	mov	r2, r0
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	1ad3      	subs	r3, r2, r3
 8008a06:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008a0a:	d901      	bls.n	8008a10 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8008a0c:	2303      	movs	r3, #3
 8008a0e:	e007      	b.n	8008a20 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008a10:	4b07      	ldr	r3, [pc, #28]	; (8008a30 <HAL_PWREx_EnableOverDrive+0x98>)
 8008a12:	685b      	ldr	r3, [r3, #4]
 8008a14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a18:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008a1c:	d1ee      	bne.n	80089fc <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8008a1e:	2300      	movs	r3, #0
}
 8008a20:	4618      	mov	r0, r3
 8008a22:	3708      	adds	r7, #8
 8008a24:	46bd      	mov	sp, r7
 8008a26:	bd80      	pop	{r7, pc}
 8008a28:	40023800 	.word	0x40023800
 8008a2c:	420e0040 	.word	0x420e0040
 8008a30:	40007000 	.word	0x40007000
 8008a34:	420e0044 	.word	0x420e0044

08008a38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008a38:	b580      	push	{r7, lr}
 8008a3a:	b084      	sub	sp, #16
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
 8008a40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d101      	bne.n	8008a4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008a48:	2301      	movs	r3, #1
 8008a4a:	e0cc      	b.n	8008be6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008a4c:	4b68      	ldr	r3, [pc, #416]	; (8008bf0 <HAL_RCC_ClockConfig+0x1b8>)
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	f003 030f 	and.w	r3, r3, #15
 8008a54:	683a      	ldr	r2, [r7, #0]
 8008a56:	429a      	cmp	r2, r3
 8008a58:	d90c      	bls.n	8008a74 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008a5a:	4b65      	ldr	r3, [pc, #404]	; (8008bf0 <HAL_RCC_ClockConfig+0x1b8>)
 8008a5c:	683a      	ldr	r2, [r7, #0]
 8008a5e:	b2d2      	uxtb	r2, r2
 8008a60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008a62:	4b63      	ldr	r3, [pc, #396]	; (8008bf0 <HAL_RCC_ClockConfig+0x1b8>)
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	f003 030f 	and.w	r3, r3, #15
 8008a6a:	683a      	ldr	r2, [r7, #0]
 8008a6c:	429a      	cmp	r2, r3
 8008a6e:	d001      	beq.n	8008a74 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008a70:	2301      	movs	r3, #1
 8008a72:	e0b8      	b.n	8008be6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	f003 0302 	and.w	r3, r3, #2
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d020      	beq.n	8008ac2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	f003 0304 	and.w	r3, r3, #4
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d005      	beq.n	8008a98 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008a8c:	4b59      	ldr	r3, [pc, #356]	; (8008bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8008a8e:	689b      	ldr	r3, [r3, #8]
 8008a90:	4a58      	ldr	r2, [pc, #352]	; (8008bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8008a92:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008a96:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	f003 0308 	and.w	r3, r3, #8
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d005      	beq.n	8008ab0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008aa4:	4b53      	ldr	r3, [pc, #332]	; (8008bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8008aa6:	689b      	ldr	r3, [r3, #8]
 8008aa8:	4a52      	ldr	r2, [pc, #328]	; (8008bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8008aaa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008aae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008ab0:	4b50      	ldr	r3, [pc, #320]	; (8008bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8008ab2:	689b      	ldr	r3, [r3, #8]
 8008ab4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	689b      	ldr	r3, [r3, #8]
 8008abc:	494d      	ldr	r1, [pc, #308]	; (8008bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8008abe:	4313      	orrs	r3, r2
 8008ac0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	f003 0301 	and.w	r3, r3, #1
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d044      	beq.n	8008b58 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	685b      	ldr	r3, [r3, #4]
 8008ad2:	2b01      	cmp	r3, #1
 8008ad4:	d107      	bne.n	8008ae6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008ad6:	4b47      	ldr	r3, [pc, #284]	; (8008bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d119      	bne.n	8008b16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008ae2:	2301      	movs	r3, #1
 8008ae4:	e07f      	b.n	8008be6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	685b      	ldr	r3, [r3, #4]
 8008aea:	2b02      	cmp	r3, #2
 8008aec:	d003      	beq.n	8008af6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008af2:	2b03      	cmp	r3, #3
 8008af4:	d107      	bne.n	8008b06 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008af6:	4b3f      	ldr	r3, [pc, #252]	; (8008bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d109      	bne.n	8008b16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008b02:	2301      	movs	r3, #1
 8008b04:	e06f      	b.n	8008be6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008b06:	4b3b      	ldr	r3, [pc, #236]	; (8008bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	f003 0302 	and.w	r3, r3, #2
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d101      	bne.n	8008b16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008b12:	2301      	movs	r3, #1
 8008b14:	e067      	b.n	8008be6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008b16:	4b37      	ldr	r3, [pc, #220]	; (8008bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8008b18:	689b      	ldr	r3, [r3, #8]
 8008b1a:	f023 0203 	bic.w	r2, r3, #3
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	685b      	ldr	r3, [r3, #4]
 8008b22:	4934      	ldr	r1, [pc, #208]	; (8008bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8008b24:	4313      	orrs	r3, r2
 8008b26:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008b28:	f7fd ff80 	bl	8006a2c <HAL_GetTick>
 8008b2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008b2e:	e00a      	b.n	8008b46 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008b30:	f7fd ff7c 	bl	8006a2c <HAL_GetTick>
 8008b34:	4602      	mov	r2, r0
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	1ad3      	subs	r3, r2, r3
 8008b3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b3e:	4293      	cmp	r3, r2
 8008b40:	d901      	bls.n	8008b46 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008b42:	2303      	movs	r3, #3
 8008b44:	e04f      	b.n	8008be6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008b46:	4b2b      	ldr	r3, [pc, #172]	; (8008bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8008b48:	689b      	ldr	r3, [r3, #8]
 8008b4a:	f003 020c 	and.w	r2, r3, #12
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	685b      	ldr	r3, [r3, #4]
 8008b52:	009b      	lsls	r3, r3, #2
 8008b54:	429a      	cmp	r2, r3
 8008b56:	d1eb      	bne.n	8008b30 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008b58:	4b25      	ldr	r3, [pc, #148]	; (8008bf0 <HAL_RCC_ClockConfig+0x1b8>)
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	f003 030f 	and.w	r3, r3, #15
 8008b60:	683a      	ldr	r2, [r7, #0]
 8008b62:	429a      	cmp	r2, r3
 8008b64:	d20c      	bcs.n	8008b80 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008b66:	4b22      	ldr	r3, [pc, #136]	; (8008bf0 <HAL_RCC_ClockConfig+0x1b8>)
 8008b68:	683a      	ldr	r2, [r7, #0]
 8008b6a:	b2d2      	uxtb	r2, r2
 8008b6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008b6e:	4b20      	ldr	r3, [pc, #128]	; (8008bf0 <HAL_RCC_ClockConfig+0x1b8>)
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	f003 030f 	and.w	r3, r3, #15
 8008b76:	683a      	ldr	r2, [r7, #0]
 8008b78:	429a      	cmp	r2, r3
 8008b7a:	d001      	beq.n	8008b80 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008b7c:	2301      	movs	r3, #1
 8008b7e:	e032      	b.n	8008be6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	f003 0304 	and.w	r3, r3, #4
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d008      	beq.n	8008b9e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008b8c:	4b19      	ldr	r3, [pc, #100]	; (8008bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8008b8e:	689b      	ldr	r3, [r3, #8]
 8008b90:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	68db      	ldr	r3, [r3, #12]
 8008b98:	4916      	ldr	r1, [pc, #88]	; (8008bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8008b9a:	4313      	orrs	r3, r2
 8008b9c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	f003 0308 	and.w	r3, r3, #8
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d009      	beq.n	8008bbe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008baa:	4b12      	ldr	r3, [pc, #72]	; (8008bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8008bac:	689b      	ldr	r3, [r3, #8]
 8008bae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	691b      	ldr	r3, [r3, #16]
 8008bb6:	00db      	lsls	r3, r3, #3
 8008bb8:	490e      	ldr	r1, [pc, #56]	; (8008bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8008bba:	4313      	orrs	r3, r2
 8008bbc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008bbe:	f000 f855 	bl	8008c6c <HAL_RCC_GetSysClockFreq>
 8008bc2:	4602      	mov	r2, r0
 8008bc4:	4b0b      	ldr	r3, [pc, #44]	; (8008bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8008bc6:	689b      	ldr	r3, [r3, #8]
 8008bc8:	091b      	lsrs	r3, r3, #4
 8008bca:	f003 030f 	and.w	r3, r3, #15
 8008bce:	490a      	ldr	r1, [pc, #40]	; (8008bf8 <HAL_RCC_ClockConfig+0x1c0>)
 8008bd0:	5ccb      	ldrb	r3, [r1, r3]
 8008bd2:	fa22 f303 	lsr.w	r3, r2, r3
 8008bd6:	4a09      	ldr	r2, [pc, #36]	; (8008bfc <HAL_RCC_ClockConfig+0x1c4>)
 8008bd8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008bda:	4b09      	ldr	r3, [pc, #36]	; (8008c00 <HAL_RCC_ClockConfig+0x1c8>)
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	4618      	mov	r0, r3
 8008be0:	f7fd fee0 	bl	80069a4 <HAL_InitTick>

  return HAL_OK;
 8008be4:	2300      	movs	r3, #0
}
 8008be6:	4618      	mov	r0, r3
 8008be8:	3710      	adds	r7, #16
 8008bea:	46bd      	mov	sp, r7
 8008bec:	bd80      	pop	{r7, pc}
 8008bee:	bf00      	nop
 8008bf0:	40023c00 	.word	0x40023c00
 8008bf4:	40023800 	.word	0x40023800
 8008bf8:	0800fc78 	.word	0x0800fc78
 8008bfc:	20000058 	.word	0x20000058
 8008c00:	2000005c 	.word	0x2000005c

08008c04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008c04:	b480      	push	{r7}
 8008c06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008c08:	4b03      	ldr	r3, [pc, #12]	; (8008c18 <HAL_RCC_GetHCLKFreq+0x14>)
 8008c0a:	681b      	ldr	r3, [r3, #0]
}
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c14:	4770      	bx	lr
 8008c16:	bf00      	nop
 8008c18:	20000058 	.word	0x20000058

08008c1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008c20:	f7ff fff0 	bl	8008c04 <HAL_RCC_GetHCLKFreq>
 8008c24:	4602      	mov	r2, r0
 8008c26:	4b05      	ldr	r3, [pc, #20]	; (8008c3c <HAL_RCC_GetPCLK1Freq+0x20>)
 8008c28:	689b      	ldr	r3, [r3, #8]
 8008c2a:	0a9b      	lsrs	r3, r3, #10
 8008c2c:	f003 0307 	and.w	r3, r3, #7
 8008c30:	4903      	ldr	r1, [pc, #12]	; (8008c40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008c32:	5ccb      	ldrb	r3, [r1, r3]
 8008c34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008c38:	4618      	mov	r0, r3
 8008c3a:	bd80      	pop	{r7, pc}
 8008c3c:	40023800 	.word	0x40023800
 8008c40:	0800fc88 	.word	0x0800fc88

08008c44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008c44:	b580      	push	{r7, lr}
 8008c46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008c48:	f7ff ffdc 	bl	8008c04 <HAL_RCC_GetHCLKFreq>
 8008c4c:	4602      	mov	r2, r0
 8008c4e:	4b05      	ldr	r3, [pc, #20]	; (8008c64 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008c50:	689b      	ldr	r3, [r3, #8]
 8008c52:	0b5b      	lsrs	r3, r3, #13
 8008c54:	f003 0307 	and.w	r3, r3, #7
 8008c58:	4903      	ldr	r1, [pc, #12]	; (8008c68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008c5a:	5ccb      	ldrb	r3, [r1, r3]
 8008c5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008c60:	4618      	mov	r0, r3
 8008c62:	bd80      	pop	{r7, pc}
 8008c64:	40023800 	.word	0x40023800
 8008c68:	0800fc88 	.word	0x0800fc88

08008c6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008c6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008c70:	b0ae      	sub	sp, #184	; 0xb8
 8008c72:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8008c74:	2300      	movs	r3, #0
 8008c76:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8008c80:	2300      	movs	r3, #0
 8008c82:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8008c86:	2300      	movs	r3, #0
 8008c88:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8008c8c:	2300      	movs	r3, #0
 8008c8e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008c92:	4bcb      	ldr	r3, [pc, #812]	; (8008fc0 <HAL_RCC_GetSysClockFreq+0x354>)
 8008c94:	689b      	ldr	r3, [r3, #8]
 8008c96:	f003 030c 	and.w	r3, r3, #12
 8008c9a:	2b0c      	cmp	r3, #12
 8008c9c:	f200 8206 	bhi.w	80090ac <HAL_RCC_GetSysClockFreq+0x440>
 8008ca0:	a201      	add	r2, pc, #4	; (adr r2, 8008ca8 <HAL_RCC_GetSysClockFreq+0x3c>)
 8008ca2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ca6:	bf00      	nop
 8008ca8:	08008cdd 	.word	0x08008cdd
 8008cac:	080090ad 	.word	0x080090ad
 8008cb0:	080090ad 	.word	0x080090ad
 8008cb4:	080090ad 	.word	0x080090ad
 8008cb8:	08008ce5 	.word	0x08008ce5
 8008cbc:	080090ad 	.word	0x080090ad
 8008cc0:	080090ad 	.word	0x080090ad
 8008cc4:	080090ad 	.word	0x080090ad
 8008cc8:	08008ced 	.word	0x08008ced
 8008ccc:	080090ad 	.word	0x080090ad
 8008cd0:	080090ad 	.word	0x080090ad
 8008cd4:	080090ad 	.word	0x080090ad
 8008cd8:	08008edd 	.word	0x08008edd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008cdc:	4bb9      	ldr	r3, [pc, #740]	; (8008fc4 <HAL_RCC_GetSysClockFreq+0x358>)
 8008cde:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8008ce2:	e1e7      	b.n	80090b4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008ce4:	4bb8      	ldr	r3, [pc, #736]	; (8008fc8 <HAL_RCC_GetSysClockFreq+0x35c>)
 8008ce6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8008cea:	e1e3      	b.n	80090b4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008cec:	4bb4      	ldr	r3, [pc, #720]	; (8008fc0 <HAL_RCC_GetSysClockFreq+0x354>)
 8008cee:	685b      	ldr	r3, [r3, #4]
 8008cf0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008cf4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008cf8:	4bb1      	ldr	r3, [pc, #708]	; (8008fc0 <HAL_RCC_GetSysClockFreq+0x354>)
 8008cfa:	685b      	ldr	r3, [r3, #4]
 8008cfc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d071      	beq.n	8008de8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008d04:	4bae      	ldr	r3, [pc, #696]	; (8008fc0 <HAL_RCC_GetSysClockFreq+0x354>)
 8008d06:	685b      	ldr	r3, [r3, #4]
 8008d08:	099b      	lsrs	r3, r3, #6
 8008d0a:	2200      	movs	r2, #0
 8008d0c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008d10:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8008d14:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008d18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d1c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008d20:	2300      	movs	r3, #0
 8008d22:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008d26:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008d2a:	4622      	mov	r2, r4
 8008d2c:	462b      	mov	r3, r5
 8008d2e:	f04f 0000 	mov.w	r0, #0
 8008d32:	f04f 0100 	mov.w	r1, #0
 8008d36:	0159      	lsls	r1, r3, #5
 8008d38:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008d3c:	0150      	lsls	r0, r2, #5
 8008d3e:	4602      	mov	r2, r0
 8008d40:	460b      	mov	r3, r1
 8008d42:	4621      	mov	r1, r4
 8008d44:	1a51      	subs	r1, r2, r1
 8008d46:	6439      	str	r1, [r7, #64]	; 0x40
 8008d48:	4629      	mov	r1, r5
 8008d4a:	eb63 0301 	sbc.w	r3, r3, r1
 8008d4e:	647b      	str	r3, [r7, #68]	; 0x44
 8008d50:	f04f 0200 	mov.w	r2, #0
 8008d54:	f04f 0300 	mov.w	r3, #0
 8008d58:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8008d5c:	4649      	mov	r1, r9
 8008d5e:	018b      	lsls	r3, r1, #6
 8008d60:	4641      	mov	r1, r8
 8008d62:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008d66:	4641      	mov	r1, r8
 8008d68:	018a      	lsls	r2, r1, #6
 8008d6a:	4641      	mov	r1, r8
 8008d6c:	1a51      	subs	r1, r2, r1
 8008d6e:	63b9      	str	r1, [r7, #56]	; 0x38
 8008d70:	4649      	mov	r1, r9
 8008d72:	eb63 0301 	sbc.w	r3, r3, r1
 8008d76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d78:	f04f 0200 	mov.w	r2, #0
 8008d7c:	f04f 0300 	mov.w	r3, #0
 8008d80:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8008d84:	4649      	mov	r1, r9
 8008d86:	00cb      	lsls	r3, r1, #3
 8008d88:	4641      	mov	r1, r8
 8008d8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008d8e:	4641      	mov	r1, r8
 8008d90:	00ca      	lsls	r2, r1, #3
 8008d92:	4610      	mov	r0, r2
 8008d94:	4619      	mov	r1, r3
 8008d96:	4603      	mov	r3, r0
 8008d98:	4622      	mov	r2, r4
 8008d9a:	189b      	adds	r3, r3, r2
 8008d9c:	633b      	str	r3, [r7, #48]	; 0x30
 8008d9e:	462b      	mov	r3, r5
 8008da0:	460a      	mov	r2, r1
 8008da2:	eb42 0303 	adc.w	r3, r2, r3
 8008da6:	637b      	str	r3, [r7, #52]	; 0x34
 8008da8:	f04f 0200 	mov.w	r2, #0
 8008dac:	f04f 0300 	mov.w	r3, #0
 8008db0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8008db4:	4629      	mov	r1, r5
 8008db6:	024b      	lsls	r3, r1, #9
 8008db8:	4621      	mov	r1, r4
 8008dba:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008dbe:	4621      	mov	r1, r4
 8008dc0:	024a      	lsls	r2, r1, #9
 8008dc2:	4610      	mov	r0, r2
 8008dc4:	4619      	mov	r1, r3
 8008dc6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008dca:	2200      	movs	r2, #0
 8008dcc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008dd0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008dd4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8008dd8:	f7f7 ff76 	bl	8000cc8 <__aeabi_uldivmod>
 8008ddc:	4602      	mov	r2, r0
 8008dde:	460b      	mov	r3, r1
 8008de0:	4613      	mov	r3, r2
 8008de2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008de6:	e067      	b.n	8008eb8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008de8:	4b75      	ldr	r3, [pc, #468]	; (8008fc0 <HAL_RCC_GetSysClockFreq+0x354>)
 8008dea:	685b      	ldr	r3, [r3, #4]
 8008dec:	099b      	lsrs	r3, r3, #6
 8008dee:	2200      	movs	r2, #0
 8008df0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008df4:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8008df8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008dfc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e00:	67bb      	str	r3, [r7, #120]	; 0x78
 8008e02:	2300      	movs	r3, #0
 8008e04:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008e06:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8008e0a:	4622      	mov	r2, r4
 8008e0c:	462b      	mov	r3, r5
 8008e0e:	f04f 0000 	mov.w	r0, #0
 8008e12:	f04f 0100 	mov.w	r1, #0
 8008e16:	0159      	lsls	r1, r3, #5
 8008e18:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008e1c:	0150      	lsls	r0, r2, #5
 8008e1e:	4602      	mov	r2, r0
 8008e20:	460b      	mov	r3, r1
 8008e22:	4621      	mov	r1, r4
 8008e24:	1a51      	subs	r1, r2, r1
 8008e26:	62b9      	str	r1, [r7, #40]	; 0x28
 8008e28:	4629      	mov	r1, r5
 8008e2a:	eb63 0301 	sbc.w	r3, r3, r1
 8008e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008e30:	f04f 0200 	mov.w	r2, #0
 8008e34:	f04f 0300 	mov.w	r3, #0
 8008e38:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8008e3c:	4649      	mov	r1, r9
 8008e3e:	018b      	lsls	r3, r1, #6
 8008e40:	4641      	mov	r1, r8
 8008e42:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008e46:	4641      	mov	r1, r8
 8008e48:	018a      	lsls	r2, r1, #6
 8008e4a:	4641      	mov	r1, r8
 8008e4c:	ebb2 0a01 	subs.w	sl, r2, r1
 8008e50:	4649      	mov	r1, r9
 8008e52:	eb63 0b01 	sbc.w	fp, r3, r1
 8008e56:	f04f 0200 	mov.w	r2, #0
 8008e5a:	f04f 0300 	mov.w	r3, #0
 8008e5e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008e62:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008e66:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008e6a:	4692      	mov	sl, r2
 8008e6c:	469b      	mov	fp, r3
 8008e6e:	4623      	mov	r3, r4
 8008e70:	eb1a 0303 	adds.w	r3, sl, r3
 8008e74:	623b      	str	r3, [r7, #32]
 8008e76:	462b      	mov	r3, r5
 8008e78:	eb4b 0303 	adc.w	r3, fp, r3
 8008e7c:	627b      	str	r3, [r7, #36]	; 0x24
 8008e7e:	f04f 0200 	mov.w	r2, #0
 8008e82:	f04f 0300 	mov.w	r3, #0
 8008e86:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8008e8a:	4629      	mov	r1, r5
 8008e8c:	028b      	lsls	r3, r1, #10
 8008e8e:	4621      	mov	r1, r4
 8008e90:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008e94:	4621      	mov	r1, r4
 8008e96:	028a      	lsls	r2, r1, #10
 8008e98:	4610      	mov	r0, r2
 8008e9a:	4619      	mov	r1, r3
 8008e9c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008ea0:	2200      	movs	r2, #0
 8008ea2:	673b      	str	r3, [r7, #112]	; 0x70
 8008ea4:	677a      	str	r2, [r7, #116]	; 0x74
 8008ea6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8008eaa:	f7f7 ff0d 	bl	8000cc8 <__aeabi_uldivmod>
 8008eae:	4602      	mov	r2, r0
 8008eb0:	460b      	mov	r3, r1
 8008eb2:	4613      	mov	r3, r2
 8008eb4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008eb8:	4b41      	ldr	r3, [pc, #260]	; (8008fc0 <HAL_RCC_GetSysClockFreq+0x354>)
 8008eba:	685b      	ldr	r3, [r3, #4]
 8008ebc:	0c1b      	lsrs	r3, r3, #16
 8008ebe:	f003 0303 	and.w	r3, r3, #3
 8008ec2:	3301      	adds	r3, #1
 8008ec4:	005b      	lsls	r3, r3, #1
 8008ec6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8008eca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008ece:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008ed2:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ed6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8008eda:	e0eb      	b.n	80090b4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008edc:	4b38      	ldr	r3, [pc, #224]	; (8008fc0 <HAL_RCC_GetSysClockFreq+0x354>)
 8008ede:	685b      	ldr	r3, [r3, #4]
 8008ee0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008ee4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008ee8:	4b35      	ldr	r3, [pc, #212]	; (8008fc0 <HAL_RCC_GetSysClockFreq+0x354>)
 8008eea:	685b      	ldr	r3, [r3, #4]
 8008eec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d06b      	beq.n	8008fcc <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008ef4:	4b32      	ldr	r3, [pc, #200]	; (8008fc0 <HAL_RCC_GetSysClockFreq+0x354>)
 8008ef6:	685b      	ldr	r3, [r3, #4]
 8008ef8:	099b      	lsrs	r3, r3, #6
 8008efa:	2200      	movs	r2, #0
 8008efc:	66bb      	str	r3, [r7, #104]	; 0x68
 8008efe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008f00:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008f02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f06:	663b      	str	r3, [r7, #96]	; 0x60
 8008f08:	2300      	movs	r3, #0
 8008f0a:	667b      	str	r3, [r7, #100]	; 0x64
 8008f0c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8008f10:	4622      	mov	r2, r4
 8008f12:	462b      	mov	r3, r5
 8008f14:	f04f 0000 	mov.w	r0, #0
 8008f18:	f04f 0100 	mov.w	r1, #0
 8008f1c:	0159      	lsls	r1, r3, #5
 8008f1e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008f22:	0150      	lsls	r0, r2, #5
 8008f24:	4602      	mov	r2, r0
 8008f26:	460b      	mov	r3, r1
 8008f28:	4621      	mov	r1, r4
 8008f2a:	1a51      	subs	r1, r2, r1
 8008f2c:	61b9      	str	r1, [r7, #24]
 8008f2e:	4629      	mov	r1, r5
 8008f30:	eb63 0301 	sbc.w	r3, r3, r1
 8008f34:	61fb      	str	r3, [r7, #28]
 8008f36:	f04f 0200 	mov.w	r2, #0
 8008f3a:	f04f 0300 	mov.w	r3, #0
 8008f3e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8008f42:	4659      	mov	r1, fp
 8008f44:	018b      	lsls	r3, r1, #6
 8008f46:	4651      	mov	r1, sl
 8008f48:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008f4c:	4651      	mov	r1, sl
 8008f4e:	018a      	lsls	r2, r1, #6
 8008f50:	4651      	mov	r1, sl
 8008f52:	ebb2 0801 	subs.w	r8, r2, r1
 8008f56:	4659      	mov	r1, fp
 8008f58:	eb63 0901 	sbc.w	r9, r3, r1
 8008f5c:	f04f 0200 	mov.w	r2, #0
 8008f60:	f04f 0300 	mov.w	r3, #0
 8008f64:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008f68:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008f6c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008f70:	4690      	mov	r8, r2
 8008f72:	4699      	mov	r9, r3
 8008f74:	4623      	mov	r3, r4
 8008f76:	eb18 0303 	adds.w	r3, r8, r3
 8008f7a:	613b      	str	r3, [r7, #16]
 8008f7c:	462b      	mov	r3, r5
 8008f7e:	eb49 0303 	adc.w	r3, r9, r3
 8008f82:	617b      	str	r3, [r7, #20]
 8008f84:	f04f 0200 	mov.w	r2, #0
 8008f88:	f04f 0300 	mov.w	r3, #0
 8008f8c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8008f90:	4629      	mov	r1, r5
 8008f92:	024b      	lsls	r3, r1, #9
 8008f94:	4621      	mov	r1, r4
 8008f96:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008f9a:	4621      	mov	r1, r4
 8008f9c:	024a      	lsls	r2, r1, #9
 8008f9e:	4610      	mov	r0, r2
 8008fa0:	4619      	mov	r1, r3
 8008fa2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008fa6:	2200      	movs	r2, #0
 8008fa8:	65bb      	str	r3, [r7, #88]	; 0x58
 8008faa:	65fa      	str	r2, [r7, #92]	; 0x5c
 8008fac:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008fb0:	f7f7 fe8a 	bl	8000cc8 <__aeabi_uldivmod>
 8008fb4:	4602      	mov	r2, r0
 8008fb6:	460b      	mov	r3, r1
 8008fb8:	4613      	mov	r3, r2
 8008fba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008fbe:	e065      	b.n	800908c <HAL_RCC_GetSysClockFreq+0x420>
 8008fc0:	40023800 	.word	0x40023800
 8008fc4:	00f42400 	.word	0x00f42400
 8008fc8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008fcc:	4b3d      	ldr	r3, [pc, #244]	; (80090c4 <HAL_RCC_GetSysClockFreq+0x458>)
 8008fce:	685b      	ldr	r3, [r3, #4]
 8008fd0:	099b      	lsrs	r3, r3, #6
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	4611      	mov	r1, r2
 8008fd8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8008fdc:	653b      	str	r3, [r7, #80]	; 0x50
 8008fde:	2300      	movs	r3, #0
 8008fe0:	657b      	str	r3, [r7, #84]	; 0x54
 8008fe2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8008fe6:	4642      	mov	r2, r8
 8008fe8:	464b      	mov	r3, r9
 8008fea:	f04f 0000 	mov.w	r0, #0
 8008fee:	f04f 0100 	mov.w	r1, #0
 8008ff2:	0159      	lsls	r1, r3, #5
 8008ff4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008ff8:	0150      	lsls	r0, r2, #5
 8008ffa:	4602      	mov	r2, r0
 8008ffc:	460b      	mov	r3, r1
 8008ffe:	4641      	mov	r1, r8
 8009000:	1a51      	subs	r1, r2, r1
 8009002:	60b9      	str	r1, [r7, #8]
 8009004:	4649      	mov	r1, r9
 8009006:	eb63 0301 	sbc.w	r3, r3, r1
 800900a:	60fb      	str	r3, [r7, #12]
 800900c:	f04f 0200 	mov.w	r2, #0
 8009010:	f04f 0300 	mov.w	r3, #0
 8009014:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8009018:	4659      	mov	r1, fp
 800901a:	018b      	lsls	r3, r1, #6
 800901c:	4651      	mov	r1, sl
 800901e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8009022:	4651      	mov	r1, sl
 8009024:	018a      	lsls	r2, r1, #6
 8009026:	4651      	mov	r1, sl
 8009028:	1a54      	subs	r4, r2, r1
 800902a:	4659      	mov	r1, fp
 800902c:	eb63 0501 	sbc.w	r5, r3, r1
 8009030:	f04f 0200 	mov.w	r2, #0
 8009034:	f04f 0300 	mov.w	r3, #0
 8009038:	00eb      	lsls	r3, r5, #3
 800903a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800903e:	00e2      	lsls	r2, r4, #3
 8009040:	4614      	mov	r4, r2
 8009042:	461d      	mov	r5, r3
 8009044:	4643      	mov	r3, r8
 8009046:	18e3      	adds	r3, r4, r3
 8009048:	603b      	str	r3, [r7, #0]
 800904a:	464b      	mov	r3, r9
 800904c:	eb45 0303 	adc.w	r3, r5, r3
 8009050:	607b      	str	r3, [r7, #4]
 8009052:	f04f 0200 	mov.w	r2, #0
 8009056:	f04f 0300 	mov.w	r3, #0
 800905a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800905e:	4629      	mov	r1, r5
 8009060:	028b      	lsls	r3, r1, #10
 8009062:	4621      	mov	r1, r4
 8009064:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009068:	4621      	mov	r1, r4
 800906a:	028a      	lsls	r2, r1, #10
 800906c:	4610      	mov	r0, r2
 800906e:	4619      	mov	r1, r3
 8009070:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009074:	2200      	movs	r2, #0
 8009076:	64bb      	str	r3, [r7, #72]	; 0x48
 8009078:	64fa      	str	r2, [r7, #76]	; 0x4c
 800907a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800907e:	f7f7 fe23 	bl	8000cc8 <__aeabi_uldivmod>
 8009082:	4602      	mov	r2, r0
 8009084:	460b      	mov	r3, r1
 8009086:	4613      	mov	r3, r2
 8009088:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800908c:	4b0d      	ldr	r3, [pc, #52]	; (80090c4 <HAL_RCC_GetSysClockFreq+0x458>)
 800908e:	685b      	ldr	r3, [r3, #4]
 8009090:	0f1b      	lsrs	r3, r3, #28
 8009092:	f003 0307 	and.w	r3, r3, #7
 8009096:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800909a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800909e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80090a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80090a6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80090aa:	e003      	b.n	80090b4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80090ac:	4b06      	ldr	r3, [pc, #24]	; (80090c8 <HAL_RCC_GetSysClockFreq+0x45c>)
 80090ae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80090b2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80090b4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80090b8:	4618      	mov	r0, r3
 80090ba:	37b8      	adds	r7, #184	; 0xb8
 80090bc:	46bd      	mov	sp, r7
 80090be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80090c2:	bf00      	nop
 80090c4:	40023800 	.word	0x40023800
 80090c8:	00f42400 	.word	0x00f42400

080090cc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80090cc:	b580      	push	{r7, lr}
 80090ce:	b086      	sub	sp, #24
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d101      	bne.n	80090de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80090da:	2301      	movs	r3, #1
 80090dc:	e28d      	b.n	80095fa <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	f003 0301 	and.w	r3, r3, #1
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	f000 8083 	beq.w	80091f2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80090ec:	4b94      	ldr	r3, [pc, #592]	; (8009340 <HAL_RCC_OscConfig+0x274>)
 80090ee:	689b      	ldr	r3, [r3, #8]
 80090f0:	f003 030c 	and.w	r3, r3, #12
 80090f4:	2b04      	cmp	r3, #4
 80090f6:	d019      	beq.n	800912c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80090f8:	4b91      	ldr	r3, [pc, #580]	; (8009340 <HAL_RCC_OscConfig+0x274>)
 80090fa:	689b      	ldr	r3, [r3, #8]
 80090fc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8009100:	2b08      	cmp	r3, #8
 8009102:	d106      	bne.n	8009112 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8009104:	4b8e      	ldr	r3, [pc, #568]	; (8009340 <HAL_RCC_OscConfig+0x274>)
 8009106:	685b      	ldr	r3, [r3, #4]
 8009108:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800910c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009110:	d00c      	beq.n	800912c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009112:	4b8b      	ldr	r3, [pc, #556]	; (8009340 <HAL_RCC_OscConfig+0x274>)
 8009114:	689b      	ldr	r3, [r3, #8]
 8009116:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800911a:	2b0c      	cmp	r3, #12
 800911c:	d112      	bne.n	8009144 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800911e:	4b88      	ldr	r3, [pc, #544]	; (8009340 <HAL_RCC_OscConfig+0x274>)
 8009120:	685b      	ldr	r3, [r3, #4]
 8009122:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009126:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800912a:	d10b      	bne.n	8009144 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800912c:	4b84      	ldr	r3, [pc, #528]	; (8009340 <HAL_RCC_OscConfig+0x274>)
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009134:	2b00      	cmp	r3, #0
 8009136:	d05b      	beq.n	80091f0 <HAL_RCC_OscConfig+0x124>
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	685b      	ldr	r3, [r3, #4]
 800913c:	2b00      	cmp	r3, #0
 800913e:	d157      	bne.n	80091f0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8009140:	2301      	movs	r3, #1
 8009142:	e25a      	b.n	80095fa <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	685b      	ldr	r3, [r3, #4]
 8009148:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800914c:	d106      	bne.n	800915c <HAL_RCC_OscConfig+0x90>
 800914e:	4b7c      	ldr	r3, [pc, #496]	; (8009340 <HAL_RCC_OscConfig+0x274>)
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	4a7b      	ldr	r2, [pc, #492]	; (8009340 <HAL_RCC_OscConfig+0x274>)
 8009154:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009158:	6013      	str	r3, [r2, #0]
 800915a:	e01d      	b.n	8009198 <HAL_RCC_OscConfig+0xcc>
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	685b      	ldr	r3, [r3, #4]
 8009160:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009164:	d10c      	bne.n	8009180 <HAL_RCC_OscConfig+0xb4>
 8009166:	4b76      	ldr	r3, [pc, #472]	; (8009340 <HAL_RCC_OscConfig+0x274>)
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	4a75      	ldr	r2, [pc, #468]	; (8009340 <HAL_RCC_OscConfig+0x274>)
 800916c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009170:	6013      	str	r3, [r2, #0]
 8009172:	4b73      	ldr	r3, [pc, #460]	; (8009340 <HAL_RCC_OscConfig+0x274>)
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	4a72      	ldr	r2, [pc, #456]	; (8009340 <HAL_RCC_OscConfig+0x274>)
 8009178:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800917c:	6013      	str	r3, [r2, #0]
 800917e:	e00b      	b.n	8009198 <HAL_RCC_OscConfig+0xcc>
 8009180:	4b6f      	ldr	r3, [pc, #444]	; (8009340 <HAL_RCC_OscConfig+0x274>)
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	4a6e      	ldr	r2, [pc, #440]	; (8009340 <HAL_RCC_OscConfig+0x274>)
 8009186:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800918a:	6013      	str	r3, [r2, #0]
 800918c:	4b6c      	ldr	r3, [pc, #432]	; (8009340 <HAL_RCC_OscConfig+0x274>)
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	4a6b      	ldr	r2, [pc, #428]	; (8009340 <HAL_RCC_OscConfig+0x274>)
 8009192:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009196:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	685b      	ldr	r3, [r3, #4]
 800919c:	2b00      	cmp	r3, #0
 800919e:	d013      	beq.n	80091c8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80091a0:	f7fd fc44 	bl	8006a2c <HAL_GetTick>
 80091a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80091a6:	e008      	b.n	80091ba <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80091a8:	f7fd fc40 	bl	8006a2c <HAL_GetTick>
 80091ac:	4602      	mov	r2, r0
 80091ae:	693b      	ldr	r3, [r7, #16]
 80091b0:	1ad3      	subs	r3, r2, r3
 80091b2:	2b64      	cmp	r3, #100	; 0x64
 80091b4:	d901      	bls.n	80091ba <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80091b6:	2303      	movs	r3, #3
 80091b8:	e21f      	b.n	80095fa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80091ba:	4b61      	ldr	r3, [pc, #388]	; (8009340 <HAL_RCC_OscConfig+0x274>)
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d0f0      	beq.n	80091a8 <HAL_RCC_OscConfig+0xdc>
 80091c6:	e014      	b.n	80091f2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80091c8:	f7fd fc30 	bl	8006a2c <HAL_GetTick>
 80091cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80091ce:	e008      	b.n	80091e2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80091d0:	f7fd fc2c 	bl	8006a2c <HAL_GetTick>
 80091d4:	4602      	mov	r2, r0
 80091d6:	693b      	ldr	r3, [r7, #16]
 80091d8:	1ad3      	subs	r3, r2, r3
 80091da:	2b64      	cmp	r3, #100	; 0x64
 80091dc:	d901      	bls.n	80091e2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80091de:	2303      	movs	r3, #3
 80091e0:	e20b      	b.n	80095fa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80091e2:	4b57      	ldr	r3, [pc, #348]	; (8009340 <HAL_RCC_OscConfig+0x274>)
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d1f0      	bne.n	80091d0 <HAL_RCC_OscConfig+0x104>
 80091ee:	e000      	b.n	80091f2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80091f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	f003 0302 	and.w	r3, r3, #2
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d06f      	beq.n	80092de <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80091fe:	4b50      	ldr	r3, [pc, #320]	; (8009340 <HAL_RCC_OscConfig+0x274>)
 8009200:	689b      	ldr	r3, [r3, #8]
 8009202:	f003 030c 	and.w	r3, r3, #12
 8009206:	2b00      	cmp	r3, #0
 8009208:	d017      	beq.n	800923a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800920a:	4b4d      	ldr	r3, [pc, #308]	; (8009340 <HAL_RCC_OscConfig+0x274>)
 800920c:	689b      	ldr	r3, [r3, #8]
 800920e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8009212:	2b08      	cmp	r3, #8
 8009214:	d105      	bne.n	8009222 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8009216:	4b4a      	ldr	r3, [pc, #296]	; (8009340 <HAL_RCC_OscConfig+0x274>)
 8009218:	685b      	ldr	r3, [r3, #4]
 800921a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800921e:	2b00      	cmp	r3, #0
 8009220:	d00b      	beq.n	800923a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009222:	4b47      	ldr	r3, [pc, #284]	; (8009340 <HAL_RCC_OscConfig+0x274>)
 8009224:	689b      	ldr	r3, [r3, #8]
 8009226:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800922a:	2b0c      	cmp	r3, #12
 800922c:	d11c      	bne.n	8009268 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800922e:	4b44      	ldr	r3, [pc, #272]	; (8009340 <HAL_RCC_OscConfig+0x274>)
 8009230:	685b      	ldr	r3, [r3, #4]
 8009232:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009236:	2b00      	cmp	r3, #0
 8009238:	d116      	bne.n	8009268 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800923a:	4b41      	ldr	r3, [pc, #260]	; (8009340 <HAL_RCC_OscConfig+0x274>)
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	f003 0302 	and.w	r3, r3, #2
 8009242:	2b00      	cmp	r3, #0
 8009244:	d005      	beq.n	8009252 <HAL_RCC_OscConfig+0x186>
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	68db      	ldr	r3, [r3, #12]
 800924a:	2b01      	cmp	r3, #1
 800924c:	d001      	beq.n	8009252 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800924e:	2301      	movs	r3, #1
 8009250:	e1d3      	b.n	80095fa <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009252:	4b3b      	ldr	r3, [pc, #236]	; (8009340 <HAL_RCC_OscConfig+0x274>)
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	691b      	ldr	r3, [r3, #16]
 800925e:	00db      	lsls	r3, r3, #3
 8009260:	4937      	ldr	r1, [pc, #220]	; (8009340 <HAL_RCC_OscConfig+0x274>)
 8009262:	4313      	orrs	r3, r2
 8009264:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009266:	e03a      	b.n	80092de <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	68db      	ldr	r3, [r3, #12]
 800926c:	2b00      	cmp	r3, #0
 800926e:	d020      	beq.n	80092b2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009270:	4b34      	ldr	r3, [pc, #208]	; (8009344 <HAL_RCC_OscConfig+0x278>)
 8009272:	2201      	movs	r2, #1
 8009274:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009276:	f7fd fbd9 	bl	8006a2c <HAL_GetTick>
 800927a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800927c:	e008      	b.n	8009290 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800927e:	f7fd fbd5 	bl	8006a2c <HAL_GetTick>
 8009282:	4602      	mov	r2, r0
 8009284:	693b      	ldr	r3, [r7, #16]
 8009286:	1ad3      	subs	r3, r2, r3
 8009288:	2b02      	cmp	r3, #2
 800928a:	d901      	bls.n	8009290 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800928c:	2303      	movs	r3, #3
 800928e:	e1b4      	b.n	80095fa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009290:	4b2b      	ldr	r3, [pc, #172]	; (8009340 <HAL_RCC_OscConfig+0x274>)
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	f003 0302 	and.w	r3, r3, #2
 8009298:	2b00      	cmp	r3, #0
 800929a:	d0f0      	beq.n	800927e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800929c:	4b28      	ldr	r3, [pc, #160]	; (8009340 <HAL_RCC_OscConfig+0x274>)
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	691b      	ldr	r3, [r3, #16]
 80092a8:	00db      	lsls	r3, r3, #3
 80092aa:	4925      	ldr	r1, [pc, #148]	; (8009340 <HAL_RCC_OscConfig+0x274>)
 80092ac:	4313      	orrs	r3, r2
 80092ae:	600b      	str	r3, [r1, #0]
 80092b0:	e015      	b.n	80092de <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80092b2:	4b24      	ldr	r3, [pc, #144]	; (8009344 <HAL_RCC_OscConfig+0x278>)
 80092b4:	2200      	movs	r2, #0
 80092b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80092b8:	f7fd fbb8 	bl	8006a2c <HAL_GetTick>
 80092bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80092be:	e008      	b.n	80092d2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80092c0:	f7fd fbb4 	bl	8006a2c <HAL_GetTick>
 80092c4:	4602      	mov	r2, r0
 80092c6:	693b      	ldr	r3, [r7, #16]
 80092c8:	1ad3      	subs	r3, r2, r3
 80092ca:	2b02      	cmp	r3, #2
 80092cc:	d901      	bls.n	80092d2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80092ce:	2303      	movs	r3, #3
 80092d0:	e193      	b.n	80095fa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80092d2:	4b1b      	ldr	r3, [pc, #108]	; (8009340 <HAL_RCC_OscConfig+0x274>)
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	f003 0302 	and.w	r3, r3, #2
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d1f0      	bne.n	80092c0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	f003 0308 	and.w	r3, r3, #8
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d036      	beq.n	8009358 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	695b      	ldr	r3, [r3, #20]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d016      	beq.n	8009320 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80092f2:	4b15      	ldr	r3, [pc, #84]	; (8009348 <HAL_RCC_OscConfig+0x27c>)
 80092f4:	2201      	movs	r2, #1
 80092f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80092f8:	f7fd fb98 	bl	8006a2c <HAL_GetTick>
 80092fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80092fe:	e008      	b.n	8009312 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009300:	f7fd fb94 	bl	8006a2c <HAL_GetTick>
 8009304:	4602      	mov	r2, r0
 8009306:	693b      	ldr	r3, [r7, #16]
 8009308:	1ad3      	subs	r3, r2, r3
 800930a:	2b02      	cmp	r3, #2
 800930c:	d901      	bls.n	8009312 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800930e:	2303      	movs	r3, #3
 8009310:	e173      	b.n	80095fa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009312:	4b0b      	ldr	r3, [pc, #44]	; (8009340 <HAL_RCC_OscConfig+0x274>)
 8009314:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009316:	f003 0302 	and.w	r3, r3, #2
 800931a:	2b00      	cmp	r3, #0
 800931c:	d0f0      	beq.n	8009300 <HAL_RCC_OscConfig+0x234>
 800931e:	e01b      	b.n	8009358 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009320:	4b09      	ldr	r3, [pc, #36]	; (8009348 <HAL_RCC_OscConfig+0x27c>)
 8009322:	2200      	movs	r2, #0
 8009324:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009326:	f7fd fb81 	bl	8006a2c <HAL_GetTick>
 800932a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800932c:	e00e      	b.n	800934c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800932e:	f7fd fb7d 	bl	8006a2c <HAL_GetTick>
 8009332:	4602      	mov	r2, r0
 8009334:	693b      	ldr	r3, [r7, #16]
 8009336:	1ad3      	subs	r3, r2, r3
 8009338:	2b02      	cmp	r3, #2
 800933a:	d907      	bls.n	800934c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800933c:	2303      	movs	r3, #3
 800933e:	e15c      	b.n	80095fa <HAL_RCC_OscConfig+0x52e>
 8009340:	40023800 	.word	0x40023800
 8009344:	42470000 	.word	0x42470000
 8009348:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800934c:	4b8a      	ldr	r3, [pc, #552]	; (8009578 <HAL_RCC_OscConfig+0x4ac>)
 800934e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009350:	f003 0302 	and.w	r3, r3, #2
 8009354:	2b00      	cmp	r3, #0
 8009356:	d1ea      	bne.n	800932e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	f003 0304 	and.w	r3, r3, #4
 8009360:	2b00      	cmp	r3, #0
 8009362:	f000 8097 	beq.w	8009494 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009366:	2300      	movs	r3, #0
 8009368:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800936a:	4b83      	ldr	r3, [pc, #524]	; (8009578 <HAL_RCC_OscConfig+0x4ac>)
 800936c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800936e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009372:	2b00      	cmp	r3, #0
 8009374:	d10f      	bne.n	8009396 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009376:	2300      	movs	r3, #0
 8009378:	60bb      	str	r3, [r7, #8]
 800937a:	4b7f      	ldr	r3, [pc, #508]	; (8009578 <HAL_RCC_OscConfig+0x4ac>)
 800937c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800937e:	4a7e      	ldr	r2, [pc, #504]	; (8009578 <HAL_RCC_OscConfig+0x4ac>)
 8009380:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009384:	6413      	str	r3, [r2, #64]	; 0x40
 8009386:	4b7c      	ldr	r3, [pc, #496]	; (8009578 <HAL_RCC_OscConfig+0x4ac>)
 8009388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800938a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800938e:	60bb      	str	r3, [r7, #8]
 8009390:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009392:	2301      	movs	r3, #1
 8009394:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009396:	4b79      	ldr	r3, [pc, #484]	; (800957c <HAL_RCC_OscConfig+0x4b0>)
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d118      	bne.n	80093d4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80093a2:	4b76      	ldr	r3, [pc, #472]	; (800957c <HAL_RCC_OscConfig+0x4b0>)
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	4a75      	ldr	r2, [pc, #468]	; (800957c <HAL_RCC_OscConfig+0x4b0>)
 80093a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80093ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80093ae:	f7fd fb3d 	bl	8006a2c <HAL_GetTick>
 80093b2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80093b4:	e008      	b.n	80093c8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80093b6:	f7fd fb39 	bl	8006a2c <HAL_GetTick>
 80093ba:	4602      	mov	r2, r0
 80093bc:	693b      	ldr	r3, [r7, #16]
 80093be:	1ad3      	subs	r3, r2, r3
 80093c0:	2b02      	cmp	r3, #2
 80093c2:	d901      	bls.n	80093c8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80093c4:	2303      	movs	r3, #3
 80093c6:	e118      	b.n	80095fa <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80093c8:	4b6c      	ldr	r3, [pc, #432]	; (800957c <HAL_RCC_OscConfig+0x4b0>)
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d0f0      	beq.n	80093b6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	689b      	ldr	r3, [r3, #8]
 80093d8:	2b01      	cmp	r3, #1
 80093da:	d106      	bne.n	80093ea <HAL_RCC_OscConfig+0x31e>
 80093dc:	4b66      	ldr	r3, [pc, #408]	; (8009578 <HAL_RCC_OscConfig+0x4ac>)
 80093de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093e0:	4a65      	ldr	r2, [pc, #404]	; (8009578 <HAL_RCC_OscConfig+0x4ac>)
 80093e2:	f043 0301 	orr.w	r3, r3, #1
 80093e6:	6713      	str	r3, [r2, #112]	; 0x70
 80093e8:	e01c      	b.n	8009424 <HAL_RCC_OscConfig+0x358>
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	689b      	ldr	r3, [r3, #8]
 80093ee:	2b05      	cmp	r3, #5
 80093f0:	d10c      	bne.n	800940c <HAL_RCC_OscConfig+0x340>
 80093f2:	4b61      	ldr	r3, [pc, #388]	; (8009578 <HAL_RCC_OscConfig+0x4ac>)
 80093f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093f6:	4a60      	ldr	r2, [pc, #384]	; (8009578 <HAL_RCC_OscConfig+0x4ac>)
 80093f8:	f043 0304 	orr.w	r3, r3, #4
 80093fc:	6713      	str	r3, [r2, #112]	; 0x70
 80093fe:	4b5e      	ldr	r3, [pc, #376]	; (8009578 <HAL_RCC_OscConfig+0x4ac>)
 8009400:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009402:	4a5d      	ldr	r2, [pc, #372]	; (8009578 <HAL_RCC_OscConfig+0x4ac>)
 8009404:	f043 0301 	orr.w	r3, r3, #1
 8009408:	6713      	str	r3, [r2, #112]	; 0x70
 800940a:	e00b      	b.n	8009424 <HAL_RCC_OscConfig+0x358>
 800940c:	4b5a      	ldr	r3, [pc, #360]	; (8009578 <HAL_RCC_OscConfig+0x4ac>)
 800940e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009410:	4a59      	ldr	r2, [pc, #356]	; (8009578 <HAL_RCC_OscConfig+0x4ac>)
 8009412:	f023 0301 	bic.w	r3, r3, #1
 8009416:	6713      	str	r3, [r2, #112]	; 0x70
 8009418:	4b57      	ldr	r3, [pc, #348]	; (8009578 <HAL_RCC_OscConfig+0x4ac>)
 800941a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800941c:	4a56      	ldr	r2, [pc, #344]	; (8009578 <HAL_RCC_OscConfig+0x4ac>)
 800941e:	f023 0304 	bic.w	r3, r3, #4
 8009422:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	689b      	ldr	r3, [r3, #8]
 8009428:	2b00      	cmp	r3, #0
 800942a:	d015      	beq.n	8009458 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800942c:	f7fd fafe 	bl	8006a2c <HAL_GetTick>
 8009430:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009432:	e00a      	b.n	800944a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009434:	f7fd fafa 	bl	8006a2c <HAL_GetTick>
 8009438:	4602      	mov	r2, r0
 800943a:	693b      	ldr	r3, [r7, #16]
 800943c:	1ad3      	subs	r3, r2, r3
 800943e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009442:	4293      	cmp	r3, r2
 8009444:	d901      	bls.n	800944a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8009446:	2303      	movs	r3, #3
 8009448:	e0d7      	b.n	80095fa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800944a:	4b4b      	ldr	r3, [pc, #300]	; (8009578 <HAL_RCC_OscConfig+0x4ac>)
 800944c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800944e:	f003 0302 	and.w	r3, r3, #2
 8009452:	2b00      	cmp	r3, #0
 8009454:	d0ee      	beq.n	8009434 <HAL_RCC_OscConfig+0x368>
 8009456:	e014      	b.n	8009482 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009458:	f7fd fae8 	bl	8006a2c <HAL_GetTick>
 800945c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800945e:	e00a      	b.n	8009476 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009460:	f7fd fae4 	bl	8006a2c <HAL_GetTick>
 8009464:	4602      	mov	r2, r0
 8009466:	693b      	ldr	r3, [r7, #16]
 8009468:	1ad3      	subs	r3, r2, r3
 800946a:	f241 3288 	movw	r2, #5000	; 0x1388
 800946e:	4293      	cmp	r3, r2
 8009470:	d901      	bls.n	8009476 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8009472:	2303      	movs	r3, #3
 8009474:	e0c1      	b.n	80095fa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009476:	4b40      	ldr	r3, [pc, #256]	; (8009578 <HAL_RCC_OscConfig+0x4ac>)
 8009478:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800947a:	f003 0302 	and.w	r3, r3, #2
 800947e:	2b00      	cmp	r3, #0
 8009480:	d1ee      	bne.n	8009460 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009482:	7dfb      	ldrb	r3, [r7, #23]
 8009484:	2b01      	cmp	r3, #1
 8009486:	d105      	bne.n	8009494 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009488:	4b3b      	ldr	r3, [pc, #236]	; (8009578 <HAL_RCC_OscConfig+0x4ac>)
 800948a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800948c:	4a3a      	ldr	r2, [pc, #232]	; (8009578 <HAL_RCC_OscConfig+0x4ac>)
 800948e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009492:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	699b      	ldr	r3, [r3, #24]
 8009498:	2b00      	cmp	r3, #0
 800949a:	f000 80ad 	beq.w	80095f8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800949e:	4b36      	ldr	r3, [pc, #216]	; (8009578 <HAL_RCC_OscConfig+0x4ac>)
 80094a0:	689b      	ldr	r3, [r3, #8]
 80094a2:	f003 030c 	and.w	r3, r3, #12
 80094a6:	2b08      	cmp	r3, #8
 80094a8:	d060      	beq.n	800956c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	699b      	ldr	r3, [r3, #24]
 80094ae:	2b02      	cmp	r3, #2
 80094b0:	d145      	bne.n	800953e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80094b2:	4b33      	ldr	r3, [pc, #204]	; (8009580 <HAL_RCC_OscConfig+0x4b4>)
 80094b4:	2200      	movs	r2, #0
 80094b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80094b8:	f7fd fab8 	bl	8006a2c <HAL_GetTick>
 80094bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80094be:	e008      	b.n	80094d2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80094c0:	f7fd fab4 	bl	8006a2c <HAL_GetTick>
 80094c4:	4602      	mov	r2, r0
 80094c6:	693b      	ldr	r3, [r7, #16]
 80094c8:	1ad3      	subs	r3, r2, r3
 80094ca:	2b02      	cmp	r3, #2
 80094cc:	d901      	bls.n	80094d2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80094ce:	2303      	movs	r3, #3
 80094d0:	e093      	b.n	80095fa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80094d2:	4b29      	ldr	r3, [pc, #164]	; (8009578 <HAL_RCC_OscConfig+0x4ac>)
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d1f0      	bne.n	80094c0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	69da      	ldr	r2, [r3, #28]
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	6a1b      	ldr	r3, [r3, #32]
 80094e6:	431a      	orrs	r2, r3
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094ec:	019b      	lsls	r3, r3, #6
 80094ee:	431a      	orrs	r2, r3
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094f4:	085b      	lsrs	r3, r3, #1
 80094f6:	3b01      	subs	r3, #1
 80094f8:	041b      	lsls	r3, r3, #16
 80094fa:	431a      	orrs	r2, r3
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009500:	061b      	lsls	r3, r3, #24
 8009502:	431a      	orrs	r2, r3
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009508:	071b      	lsls	r3, r3, #28
 800950a:	491b      	ldr	r1, [pc, #108]	; (8009578 <HAL_RCC_OscConfig+0x4ac>)
 800950c:	4313      	orrs	r3, r2
 800950e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009510:	4b1b      	ldr	r3, [pc, #108]	; (8009580 <HAL_RCC_OscConfig+0x4b4>)
 8009512:	2201      	movs	r2, #1
 8009514:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009516:	f7fd fa89 	bl	8006a2c <HAL_GetTick>
 800951a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800951c:	e008      	b.n	8009530 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800951e:	f7fd fa85 	bl	8006a2c <HAL_GetTick>
 8009522:	4602      	mov	r2, r0
 8009524:	693b      	ldr	r3, [r7, #16]
 8009526:	1ad3      	subs	r3, r2, r3
 8009528:	2b02      	cmp	r3, #2
 800952a:	d901      	bls.n	8009530 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800952c:	2303      	movs	r3, #3
 800952e:	e064      	b.n	80095fa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009530:	4b11      	ldr	r3, [pc, #68]	; (8009578 <HAL_RCC_OscConfig+0x4ac>)
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009538:	2b00      	cmp	r3, #0
 800953a:	d0f0      	beq.n	800951e <HAL_RCC_OscConfig+0x452>
 800953c:	e05c      	b.n	80095f8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800953e:	4b10      	ldr	r3, [pc, #64]	; (8009580 <HAL_RCC_OscConfig+0x4b4>)
 8009540:	2200      	movs	r2, #0
 8009542:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009544:	f7fd fa72 	bl	8006a2c <HAL_GetTick>
 8009548:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800954a:	e008      	b.n	800955e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800954c:	f7fd fa6e 	bl	8006a2c <HAL_GetTick>
 8009550:	4602      	mov	r2, r0
 8009552:	693b      	ldr	r3, [r7, #16]
 8009554:	1ad3      	subs	r3, r2, r3
 8009556:	2b02      	cmp	r3, #2
 8009558:	d901      	bls.n	800955e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800955a:	2303      	movs	r3, #3
 800955c:	e04d      	b.n	80095fa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800955e:	4b06      	ldr	r3, [pc, #24]	; (8009578 <HAL_RCC_OscConfig+0x4ac>)
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009566:	2b00      	cmp	r3, #0
 8009568:	d1f0      	bne.n	800954c <HAL_RCC_OscConfig+0x480>
 800956a:	e045      	b.n	80095f8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	699b      	ldr	r3, [r3, #24]
 8009570:	2b01      	cmp	r3, #1
 8009572:	d107      	bne.n	8009584 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8009574:	2301      	movs	r3, #1
 8009576:	e040      	b.n	80095fa <HAL_RCC_OscConfig+0x52e>
 8009578:	40023800 	.word	0x40023800
 800957c:	40007000 	.word	0x40007000
 8009580:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009584:	4b1f      	ldr	r3, [pc, #124]	; (8009604 <HAL_RCC_OscConfig+0x538>)
 8009586:	685b      	ldr	r3, [r3, #4]
 8009588:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	699b      	ldr	r3, [r3, #24]
 800958e:	2b01      	cmp	r3, #1
 8009590:	d030      	beq.n	80095f4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800959c:	429a      	cmp	r2, r3
 800959e:	d129      	bne.n	80095f4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80095aa:	429a      	cmp	r2, r3
 80095ac:	d122      	bne.n	80095f4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80095ae:	68fa      	ldr	r2, [r7, #12]
 80095b0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80095b4:	4013      	ands	r3, r2
 80095b6:	687a      	ldr	r2, [r7, #4]
 80095b8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80095ba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80095bc:	4293      	cmp	r3, r2
 80095be:	d119      	bne.n	80095f4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095ca:	085b      	lsrs	r3, r3, #1
 80095cc:	3b01      	subs	r3, #1
 80095ce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80095d0:	429a      	cmp	r2, r3
 80095d2:	d10f      	bne.n	80095f4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095de:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80095e0:	429a      	cmp	r2, r3
 80095e2:	d107      	bne.n	80095f4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095ee:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80095f0:	429a      	cmp	r2, r3
 80095f2:	d001      	beq.n	80095f8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80095f4:	2301      	movs	r3, #1
 80095f6:	e000      	b.n	80095fa <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80095f8:	2300      	movs	r3, #0
}
 80095fa:	4618      	mov	r0, r3
 80095fc:	3718      	adds	r7, #24
 80095fe:	46bd      	mov	sp, r7
 8009600:	bd80      	pop	{r7, pc}
 8009602:	bf00      	nop
 8009604:	40023800 	.word	0x40023800

08009608 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009608:	b580      	push	{r7, lr}
 800960a:	b082      	sub	sp, #8
 800960c:	af00      	add	r7, sp, #0
 800960e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	2b00      	cmp	r3, #0
 8009614:	d101      	bne.n	800961a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009616:	2301      	movs	r3, #1
 8009618:	e07b      	b.n	8009712 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800961e:	2b00      	cmp	r3, #0
 8009620:	d108      	bne.n	8009634 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	685b      	ldr	r3, [r3, #4]
 8009626:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800962a:	d009      	beq.n	8009640 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	2200      	movs	r2, #0
 8009630:	61da      	str	r2, [r3, #28]
 8009632:	e005      	b.n	8009640 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	2200      	movs	r2, #0
 8009638:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	2200      	movs	r2, #0
 800963e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	2200      	movs	r2, #0
 8009644:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800964c:	b2db      	uxtb	r3, r3
 800964e:	2b00      	cmp	r3, #0
 8009650:	d106      	bne.n	8009660 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	2200      	movs	r2, #0
 8009656:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800965a:	6878      	ldr	r0, [r7, #4]
 800965c:	f7fc feca 	bl	80063f4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	2202      	movs	r2, #2
 8009664:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	681a      	ldr	r2, [r3, #0]
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009676:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	685b      	ldr	r3, [r3, #4]
 800967c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	689b      	ldr	r3, [r3, #8]
 8009684:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8009688:	431a      	orrs	r2, r3
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	68db      	ldr	r3, [r3, #12]
 800968e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009692:	431a      	orrs	r2, r3
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	691b      	ldr	r3, [r3, #16]
 8009698:	f003 0302 	and.w	r3, r3, #2
 800969c:	431a      	orrs	r2, r3
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	695b      	ldr	r3, [r3, #20]
 80096a2:	f003 0301 	and.w	r3, r3, #1
 80096a6:	431a      	orrs	r2, r3
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	699b      	ldr	r3, [r3, #24]
 80096ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80096b0:	431a      	orrs	r2, r3
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	69db      	ldr	r3, [r3, #28]
 80096b6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80096ba:	431a      	orrs	r2, r3
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	6a1b      	ldr	r3, [r3, #32]
 80096c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80096c4:	ea42 0103 	orr.w	r1, r2, r3
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096cc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	430a      	orrs	r2, r1
 80096d6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	699b      	ldr	r3, [r3, #24]
 80096dc:	0c1b      	lsrs	r3, r3, #16
 80096de:	f003 0104 	and.w	r1, r3, #4
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096e6:	f003 0210 	and.w	r2, r3, #16
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	430a      	orrs	r2, r1
 80096f0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	69da      	ldr	r2, [r3, #28]
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009700:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	2200      	movs	r2, #0
 8009706:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	2201      	movs	r2, #1
 800970c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8009710:	2300      	movs	r3, #0
}
 8009712:	4618      	mov	r0, r3
 8009714:	3708      	adds	r7, #8
 8009716:	46bd      	mov	sp, r7
 8009718:	bd80      	pop	{r7, pc}

0800971a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800971a:	b580      	push	{r7, lr}
 800971c:	b082      	sub	sp, #8
 800971e:	af00      	add	r7, sp, #0
 8009720:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	2b00      	cmp	r3, #0
 8009726:	d101      	bne.n	800972c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009728:	2301      	movs	r3, #1
 800972a:	e041      	b.n	80097b0 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009732:	b2db      	uxtb	r3, r3
 8009734:	2b00      	cmp	r3, #0
 8009736:	d106      	bne.n	8009746 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	2200      	movs	r2, #0
 800973c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009740:	6878      	ldr	r0, [r7, #4]
 8009742:	f7fc febf 	bl	80064c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	2202      	movs	r2, #2
 800974a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681a      	ldr	r2, [r3, #0]
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	3304      	adds	r3, #4
 8009756:	4619      	mov	r1, r3
 8009758:	4610      	mov	r0, r2
 800975a:	f000 f9cd 	bl	8009af8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	2201      	movs	r2, #1
 8009762:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	2201      	movs	r2, #1
 800976a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	2201      	movs	r2, #1
 8009772:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	2201      	movs	r2, #1
 800977a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	2201      	movs	r2, #1
 8009782:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	2201      	movs	r2, #1
 800978a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	2201      	movs	r2, #1
 8009792:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	2201      	movs	r2, #1
 800979a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	2201      	movs	r2, #1
 80097a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	2201      	movs	r2, #1
 80097aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80097ae:	2300      	movs	r3, #0
}
 80097b0:	4618      	mov	r0, r3
 80097b2:	3708      	adds	r7, #8
 80097b4:	46bd      	mov	sp, r7
 80097b6:	bd80      	pop	{r7, pc}

080097b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80097b8:	b480      	push	{r7}
 80097ba:	b085      	sub	sp, #20
 80097bc:	af00      	add	r7, sp, #0
 80097be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80097c6:	b2db      	uxtb	r3, r3
 80097c8:	2b01      	cmp	r3, #1
 80097ca:	d001      	beq.n	80097d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80097cc:	2301      	movs	r3, #1
 80097ce:	e04e      	b.n	800986e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	2202      	movs	r2, #2
 80097d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	68da      	ldr	r2, [r3, #12]
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	f042 0201 	orr.w	r2, r2, #1
 80097e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	4a23      	ldr	r2, [pc, #140]	; (800987c <HAL_TIM_Base_Start_IT+0xc4>)
 80097ee:	4293      	cmp	r3, r2
 80097f0:	d022      	beq.n	8009838 <HAL_TIM_Base_Start_IT+0x80>
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80097fa:	d01d      	beq.n	8009838 <HAL_TIM_Base_Start_IT+0x80>
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	4a1f      	ldr	r2, [pc, #124]	; (8009880 <HAL_TIM_Base_Start_IT+0xc8>)
 8009802:	4293      	cmp	r3, r2
 8009804:	d018      	beq.n	8009838 <HAL_TIM_Base_Start_IT+0x80>
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	4a1e      	ldr	r2, [pc, #120]	; (8009884 <HAL_TIM_Base_Start_IT+0xcc>)
 800980c:	4293      	cmp	r3, r2
 800980e:	d013      	beq.n	8009838 <HAL_TIM_Base_Start_IT+0x80>
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	4a1c      	ldr	r2, [pc, #112]	; (8009888 <HAL_TIM_Base_Start_IT+0xd0>)
 8009816:	4293      	cmp	r3, r2
 8009818:	d00e      	beq.n	8009838 <HAL_TIM_Base_Start_IT+0x80>
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	4a1b      	ldr	r2, [pc, #108]	; (800988c <HAL_TIM_Base_Start_IT+0xd4>)
 8009820:	4293      	cmp	r3, r2
 8009822:	d009      	beq.n	8009838 <HAL_TIM_Base_Start_IT+0x80>
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	4a19      	ldr	r2, [pc, #100]	; (8009890 <HAL_TIM_Base_Start_IT+0xd8>)
 800982a:	4293      	cmp	r3, r2
 800982c:	d004      	beq.n	8009838 <HAL_TIM_Base_Start_IT+0x80>
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	4a18      	ldr	r2, [pc, #96]	; (8009894 <HAL_TIM_Base_Start_IT+0xdc>)
 8009834:	4293      	cmp	r3, r2
 8009836:	d111      	bne.n	800985c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	689b      	ldr	r3, [r3, #8]
 800983e:	f003 0307 	and.w	r3, r3, #7
 8009842:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	2b06      	cmp	r3, #6
 8009848:	d010      	beq.n	800986c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	681a      	ldr	r2, [r3, #0]
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	f042 0201 	orr.w	r2, r2, #1
 8009858:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800985a:	e007      	b.n	800986c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	681a      	ldr	r2, [r3, #0]
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	f042 0201 	orr.w	r2, r2, #1
 800986a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800986c:	2300      	movs	r3, #0
}
 800986e:	4618      	mov	r0, r3
 8009870:	3714      	adds	r7, #20
 8009872:	46bd      	mov	sp, r7
 8009874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009878:	4770      	bx	lr
 800987a:	bf00      	nop
 800987c:	40010000 	.word	0x40010000
 8009880:	40000400 	.word	0x40000400
 8009884:	40000800 	.word	0x40000800
 8009888:	40000c00 	.word	0x40000c00
 800988c:	40010400 	.word	0x40010400
 8009890:	40014000 	.word	0x40014000
 8009894:	40001800 	.word	0x40001800

08009898 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009898:	b580      	push	{r7, lr}
 800989a:	b082      	sub	sp, #8
 800989c:	af00      	add	r7, sp, #0
 800989e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	691b      	ldr	r3, [r3, #16]
 80098a6:	f003 0302 	and.w	r3, r3, #2
 80098aa:	2b02      	cmp	r3, #2
 80098ac:	d122      	bne.n	80098f4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	68db      	ldr	r3, [r3, #12]
 80098b4:	f003 0302 	and.w	r3, r3, #2
 80098b8:	2b02      	cmp	r3, #2
 80098ba:	d11b      	bne.n	80098f4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	f06f 0202 	mvn.w	r2, #2
 80098c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	2201      	movs	r2, #1
 80098ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	699b      	ldr	r3, [r3, #24]
 80098d2:	f003 0303 	and.w	r3, r3, #3
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d003      	beq.n	80098e2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80098da:	6878      	ldr	r0, [r7, #4]
 80098dc:	f000 f8ee 	bl	8009abc <HAL_TIM_IC_CaptureCallback>
 80098e0:	e005      	b.n	80098ee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80098e2:	6878      	ldr	r0, [r7, #4]
 80098e4:	f000 f8e0 	bl	8009aa8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80098e8:	6878      	ldr	r0, [r7, #4]
 80098ea:	f000 f8f1 	bl	8009ad0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	2200      	movs	r2, #0
 80098f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	691b      	ldr	r3, [r3, #16]
 80098fa:	f003 0304 	and.w	r3, r3, #4
 80098fe:	2b04      	cmp	r3, #4
 8009900:	d122      	bne.n	8009948 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	68db      	ldr	r3, [r3, #12]
 8009908:	f003 0304 	and.w	r3, r3, #4
 800990c:	2b04      	cmp	r3, #4
 800990e:	d11b      	bne.n	8009948 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	f06f 0204 	mvn.w	r2, #4
 8009918:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	2202      	movs	r2, #2
 800991e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	699b      	ldr	r3, [r3, #24]
 8009926:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800992a:	2b00      	cmp	r3, #0
 800992c:	d003      	beq.n	8009936 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800992e:	6878      	ldr	r0, [r7, #4]
 8009930:	f000 f8c4 	bl	8009abc <HAL_TIM_IC_CaptureCallback>
 8009934:	e005      	b.n	8009942 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009936:	6878      	ldr	r0, [r7, #4]
 8009938:	f000 f8b6 	bl	8009aa8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800993c:	6878      	ldr	r0, [r7, #4]
 800993e:	f000 f8c7 	bl	8009ad0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	2200      	movs	r2, #0
 8009946:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	691b      	ldr	r3, [r3, #16]
 800994e:	f003 0308 	and.w	r3, r3, #8
 8009952:	2b08      	cmp	r3, #8
 8009954:	d122      	bne.n	800999c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	68db      	ldr	r3, [r3, #12]
 800995c:	f003 0308 	and.w	r3, r3, #8
 8009960:	2b08      	cmp	r3, #8
 8009962:	d11b      	bne.n	800999c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	f06f 0208 	mvn.w	r2, #8
 800996c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	2204      	movs	r2, #4
 8009972:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	69db      	ldr	r3, [r3, #28]
 800997a:	f003 0303 	and.w	r3, r3, #3
 800997e:	2b00      	cmp	r3, #0
 8009980:	d003      	beq.n	800998a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009982:	6878      	ldr	r0, [r7, #4]
 8009984:	f000 f89a 	bl	8009abc <HAL_TIM_IC_CaptureCallback>
 8009988:	e005      	b.n	8009996 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800998a:	6878      	ldr	r0, [r7, #4]
 800998c:	f000 f88c 	bl	8009aa8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009990:	6878      	ldr	r0, [r7, #4]
 8009992:	f000 f89d 	bl	8009ad0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	2200      	movs	r2, #0
 800999a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	691b      	ldr	r3, [r3, #16]
 80099a2:	f003 0310 	and.w	r3, r3, #16
 80099a6:	2b10      	cmp	r3, #16
 80099a8:	d122      	bne.n	80099f0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	68db      	ldr	r3, [r3, #12]
 80099b0:	f003 0310 	and.w	r3, r3, #16
 80099b4:	2b10      	cmp	r3, #16
 80099b6:	d11b      	bne.n	80099f0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	f06f 0210 	mvn.w	r2, #16
 80099c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	2208      	movs	r2, #8
 80099c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	69db      	ldr	r3, [r3, #28]
 80099ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d003      	beq.n	80099de <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80099d6:	6878      	ldr	r0, [r7, #4]
 80099d8:	f000 f870 	bl	8009abc <HAL_TIM_IC_CaptureCallback>
 80099dc:	e005      	b.n	80099ea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80099de:	6878      	ldr	r0, [r7, #4]
 80099e0:	f000 f862 	bl	8009aa8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80099e4:	6878      	ldr	r0, [r7, #4]
 80099e6:	f000 f873 	bl	8009ad0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	2200      	movs	r2, #0
 80099ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	691b      	ldr	r3, [r3, #16]
 80099f6:	f003 0301 	and.w	r3, r3, #1
 80099fa:	2b01      	cmp	r3, #1
 80099fc:	d10e      	bne.n	8009a1c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	68db      	ldr	r3, [r3, #12]
 8009a04:	f003 0301 	and.w	r3, r3, #1
 8009a08:	2b01      	cmp	r3, #1
 8009a0a:	d107      	bne.n	8009a1c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	f06f 0201 	mvn.w	r2, #1
 8009a14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009a16:	6878      	ldr	r0, [r7, #4]
 8009a18:	f7f8 fa74 	bl	8001f04 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	691b      	ldr	r3, [r3, #16]
 8009a22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a26:	2b80      	cmp	r3, #128	; 0x80
 8009a28:	d10e      	bne.n	8009a48 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	68db      	ldr	r3, [r3, #12]
 8009a30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a34:	2b80      	cmp	r3, #128	; 0x80
 8009a36:	d107      	bne.n	8009a48 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009a40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009a42:	6878      	ldr	r0, [r7, #4]
 8009a44:	f000 f97e 	bl	8009d44 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	691b      	ldr	r3, [r3, #16]
 8009a4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a52:	2b40      	cmp	r3, #64	; 0x40
 8009a54:	d10e      	bne.n	8009a74 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	68db      	ldr	r3, [r3, #12]
 8009a5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a60:	2b40      	cmp	r3, #64	; 0x40
 8009a62:	d107      	bne.n	8009a74 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009a6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009a6e:	6878      	ldr	r0, [r7, #4]
 8009a70:	f000 f838 	bl	8009ae4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	691b      	ldr	r3, [r3, #16]
 8009a7a:	f003 0320 	and.w	r3, r3, #32
 8009a7e:	2b20      	cmp	r3, #32
 8009a80:	d10e      	bne.n	8009aa0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	68db      	ldr	r3, [r3, #12]
 8009a88:	f003 0320 	and.w	r3, r3, #32
 8009a8c:	2b20      	cmp	r3, #32
 8009a8e:	d107      	bne.n	8009aa0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	f06f 0220 	mvn.w	r2, #32
 8009a98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009a9a:	6878      	ldr	r0, [r7, #4]
 8009a9c:	f000 f948 	bl	8009d30 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009aa0:	bf00      	nop
 8009aa2:	3708      	adds	r7, #8
 8009aa4:	46bd      	mov	sp, r7
 8009aa6:	bd80      	pop	{r7, pc}

08009aa8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009aa8:	b480      	push	{r7}
 8009aaa:	b083      	sub	sp, #12
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009ab0:	bf00      	nop
 8009ab2:	370c      	adds	r7, #12
 8009ab4:	46bd      	mov	sp, r7
 8009ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aba:	4770      	bx	lr

08009abc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009abc:	b480      	push	{r7}
 8009abe:	b083      	sub	sp, #12
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009ac4:	bf00      	nop
 8009ac6:	370c      	adds	r7, #12
 8009ac8:	46bd      	mov	sp, r7
 8009aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ace:	4770      	bx	lr

08009ad0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009ad0:	b480      	push	{r7}
 8009ad2:	b083      	sub	sp, #12
 8009ad4:	af00      	add	r7, sp, #0
 8009ad6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009ad8:	bf00      	nop
 8009ada:	370c      	adds	r7, #12
 8009adc:	46bd      	mov	sp, r7
 8009ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae2:	4770      	bx	lr

08009ae4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009ae4:	b480      	push	{r7}
 8009ae6:	b083      	sub	sp, #12
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009aec:	bf00      	nop
 8009aee:	370c      	adds	r7, #12
 8009af0:	46bd      	mov	sp, r7
 8009af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af6:	4770      	bx	lr

08009af8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009af8:	b480      	push	{r7}
 8009afa:	b085      	sub	sp, #20
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	6078      	str	r0, [r7, #4]
 8009b00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	4a40      	ldr	r2, [pc, #256]	; (8009c0c <TIM_Base_SetConfig+0x114>)
 8009b0c:	4293      	cmp	r3, r2
 8009b0e:	d013      	beq.n	8009b38 <TIM_Base_SetConfig+0x40>
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b16:	d00f      	beq.n	8009b38 <TIM_Base_SetConfig+0x40>
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	4a3d      	ldr	r2, [pc, #244]	; (8009c10 <TIM_Base_SetConfig+0x118>)
 8009b1c:	4293      	cmp	r3, r2
 8009b1e:	d00b      	beq.n	8009b38 <TIM_Base_SetConfig+0x40>
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	4a3c      	ldr	r2, [pc, #240]	; (8009c14 <TIM_Base_SetConfig+0x11c>)
 8009b24:	4293      	cmp	r3, r2
 8009b26:	d007      	beq.n	8009b38 <TIM_Base_SetConfig+0x40>
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	4a3b      	ldr	r2, [pc, #236]	; (8009c18 <TIM_Base_SetConfig+0x120>)
 8009b2c:	4293      	cmp	r3, r2
 8009b2e:	d003      	beq.n	8009b38 <TIM_Base_SetConfig+0x40>
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	4a3a      	ldr	r2, [pc, #232]	; (8009c1c <TIM_Base_SetConfig+0x124>)
 8009b34:	4293      	cmp	r3, r2
 8009b36:	d108      	bne.n	8009b4a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009b40:	683b      	ldr	r3, [r7, #0]
 8009b42:	685b      	ldr	r3, [r3, #4]
 8009b44:	68fa      	ldr	r2, [r7, #12]
 8009b46:	4313      	orrs	r3, r2
 8009b48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	4a2f      	ldr	r2, [pc, #188]	; (8009c0c <TIM_Base_SetConfig+0x114>)
 8009b4e:	4293      	cmp	r3, r2
 8009b50:	d02b      	beq.n	8009baa <TIM_Base_SetConfig+0xb2>
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b58:	d027      	beq.n	8009baa <TIM_Base_SetConfig+0xb2>
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	4a2c      	ldr	r2, [pc, #176]	; (8009c10 <TIM_Base_SetConfig+0x118>)
 8009b5e:	4293      	cmp	r3, r2
 8009b60:	d023      	beq.n	8009baa <TIM_Base_SetConfig+0xb2>
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	4a2b      	ldr	r2, [pc, #172]	; (8009c14 <TIM_Base_SetConfig+0x11c>)
 8009b66:	4293      	cmp	r3, r2
 8009b68:	d01f      	beq.n	8009baa <TIM_Base_SetConfig+0xb2>
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	4a2a      	ldr	r2, [pc, #168]	; (8009c18 <TIM_Base_SetConfig+0x120>)
 8009b6e:	4293      	cmp	r3, r2
 8009b70:	d01b      	beq.n	8009baa <TIM_Base_SetConfig+0xb2>
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	4a29      	ldr	r2, [pc, #164]	; (8009c1c <TIM_Base_SetConfig+0x124>)
 8009b76:	4293      	cmp	r3, r2
 8009b78:	d017      	beq.n	8009baa <TIM_Base_SetConfig+0xb2>
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	4a28      	ldr	r2, [pc, #160]	; (8009c20 <TIM_Base_SetConfig+0x128>)
 8009b7e:	4293      	cmp	r3, r2
 8009b80:	d013      	beq.n	8009baa <TIM_Base_SetConfig+0xb2>
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	4a27      	ldr	r2, [pc, #156]	; (8009c24 <TIM_Base_SetConfig+0x12c>)
 8009b86:	4293      	cmp	r3, r2
 8009b88:	d00f      	beq.n	8009baa <TIM_Base_SetConfig+0xb2>
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	4a26      	ldr	r2, [pc, #152]	; (8009c28 <TIM_Base_SetConfig+0x130>)
 8009b8e:	4293      	cmp	r3, r2
 8009b90:	d00b      	beq.n	8009baa <TIM_Base_SetConfig+0xb2>
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	4a25      	ldr	r2, [pc, #148]	; (8009c2c <TIM_Base_SetConfig+0x134>)
 8009b96:	4293      	cmp	r3, r2
 8009b98:	d007      	beq.n	8009baa <TIM_Base_SetConfig+0xb2>
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	4a24      	ldr	r2, [pc, #144]	; (8009c30 <TIM_Base_SetConfig+0x138>)
 8009b9e:	4293      	cmp	r3, r2
 8009ba0:	d003      	beq.n	8009baa <TIM_Base_SetConfig+0xb2>
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	4a23      	ldr	r2, [pc, #140]	; (8009c34 <TIM_Base_SetConfig+0x13c>)
 8009ba6:	4293      	cmp	r3, r2
 8009ba8:	d108      	bne.n	8009bbc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009bb0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009bb2:	683b      	ldr	r3, [r7, #0]
 8009bb4:	68db      	ldr	r3, [r3, #12]
 8009bb6:	68fa      	ldr	r2, [r7, #12]
 8009bb8:	4313      	orrs	r3, r2
 8009bba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009bc2:	683b      	ldr	r3, [r7, #0]
 8009bc4:	695b      	ldr	r3, [r3, #20]
 8009bc6:	4313      	orrs	r3, r2
 8009bc8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	68fa      	ldr	r2, [r7, #12]
 8009bce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009bd0:	683b      	ldr	r3, [r7, #0]
 8009bd2:	689a      	ldr	r2, [r3, #8]
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009bd8:	683b      	ldr	r3, [r7, #0]
 8009bda:	681a      	ldr	r2, [r3, #0]
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	4a0a      	ldr	r2, [pc, #40]	; (8009c0c <TIM_Base_SetConfig+0x114>)
 8009be4:	4293      	cmp	r3, r2
 8009be6:	d003      	beq.n	8009bf0 <TIM_Base_SetConfig+0xf8>
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	4a0c      	ldr	r2, [pc, #48]	; (8009c1c <TIM_Base_SetConfig+0x124>)
 8009bec:	4293      	cmp	r3, r2
 8009bee:	d103      	bne.n	8009bf8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009bf0:	683b      	ldr	r3, [r7, #0]
 8009bf2:	691a      	ldr	r2, [r3, #16]
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	2201      	movs	r2, #1
 8009bfc:	615a      	str	r2, [r3, #20]
}
 8009bfe:	bf00      	nop
 8009c00:	3714      	adds	r7, #20
 8009c02:	46bd      	mov	sp, r7
 8009c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c08:	4770      	bx	lr
 8009c0a:	bf00      	nop
 8009c0c:	40010000 	.word	0x40010000
 8009c10:	40000400 	.word	0x40000400
 8009c14:	40000800 	.word	0x40000800
 8009c18:	40000c00 	.word	0x40000c00
 8009c1c:	40010400 	.word	0x40010400
 8009c20:	40014000 	.word	0x40014000
 8009c24:	40014400 	.word	0x40014400
 8009c28:	40014800 	.word	0x40014800
 8009c2c:	40001800 	.word	0x40001800
 8009c30:	40001c00 	.word	0x40001c00
 8009c34:	40002000 	.word	0x40002000

08009c38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009c38:	b480      	push	{r7}
 8009c3a:	b085      	sub	sp, #20
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	6078      	str	r0, [r7, #4]
 8009c40:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009c48:	2b01      	cmp	r3, #1
 8009c4a:	d101      	bne.n	8009c50 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009c4c:	2302      	movs	r3, #2
 8009c4e:	e05a      	b.n	8009d06 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	2201      	movs	r2, #1
 8009c54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	2202      	movs	r2, #2
 8009c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	685b      	ldr	r3, [r3, #4]
 8009c66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	689b      	ldr	r3, [r3, #8]
 8009c6e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c76:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009c78:	683b      	ldr	r3, [r7, #0]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	68fa      	ldr	r2, [r7, #12]
 8009c7e:	4313      	orrs	r3, r2
 8009c80:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	68fa      	ldr	r2, [r7, #12]
 8009c88:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	4a21      	ldr	r2, [pc, #132]	; (8009d14 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009c90:	4293      	cmp	r3, r2
 8009c92:	d022      	beq.n	8009cda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c9c:	d01d      	beq.n	8009cda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	4a1d      	ldr	r2, [pc, #116]	; (8009d18 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009ca4:	4293      	cmp	r3, r2
 8009ca6:	d018      	beq.n	8009cda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	4a1b      	ldr	r2, [pc, #108]	; (8009d1c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009cae:	4293      	cmp	r3, r2
 8009cb0:	d013      	beq.n	8009cda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	4a1a      	ldr	r2, [pc, #104]	; (8009d20 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009cb8:	4293      	cmp	r3, r2
 8009cba:	d00e      	beq.n	8009cda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	4a18      	ldr	r2, [pc, #96]	; (8009d24 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009cc2:	4293      	cmp	r3, r2
 8009cc4:	d009      	beq.n	8009cda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	4a17      	ldr	r2, [pc, #92]	; (8009d28 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009ccc:	4293      	cmp	r3, r2
 8009cce:	d004      	beq.n	8009cda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	4a15      	ldr	r2, [pc, #84]	; (8009d2c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009cd6:	4293      	cmp	r3, r2
 8009cd8:	d10c      	bne.n	8009cf4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009cda:	68bb      	ldr	r3, [r7, #8]
 8009cdc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009ce0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009ce2:	683b      	ldr	r3, [r7, #0]
 8009ce4:	685b      	ldr	r3, [r3, #4]
 8009ce6:	68ba      	ldr	r2, [r7, #8]
 8009ce8:	4313      	orrs	r3, r2
 8009cea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	68ba      	ldr	r2, [r7, #8]
 8009cf2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	2201      	movs	r2, #1
 8009cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	2200      	movs	r2, #0
 8009d00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009d04:	2300      	movs	r3, #0
}
 8009d06:	4618      	mov	r0, r3
 8009d08:	3714      	adds	r7, #20
 8009d0a:	46bd      	mov	sp, r7
 8009d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d10:	4770      	bx	lr
 8009d12:	bf00      	nop
 8009d14:	40010000 	.word	0x40010000
 8009d18:	40000400 	.word	0x40000400
 8009d1c:	40000800 	.word	0x40000800
 8009d20:	40000c00 	.word	0x40000c00
 8009d24:	40010400 	.word	0x40010400
 8009d28:	40014000 	.word	0x40014000
 8009d2c:	40001800 	.word	0x40001800

08009d30 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009d30:	b480      	push	{r7}
 8009d32:	b083      	sub	sp, #12
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009d38:	bf00      	nop
 8009d3a:	370c      	adds	r7, #12
 8009d3c:	46bd      	mov	sp, r7
 8009d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d42:	4770      	bx	lr

08009d44 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009d44:	b480      	push	{r7}
 8009d46:	b083      	sub	sp, #12
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009d4c:	bf00      	nop
 8009d4e:	370c      	adds	r7, #12
 8009d50:	46bd      	mov	sp, r7
 8009d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d56:	4770      	bx	lr

08009d58 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009d58:	b580      	push	{r7, lr}
 8009d5a:	b082      	sub	sp, #8
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d101      	bne.n	8009d6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009d66:	2301      	movs	r3, #1
 8009d68:	e03f      	b.n	8009dea <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009d70:	b2db      	uxtb	r3, r3
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d106      	bne.n	8009d84 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	2200      	movs	r2, #0
 8009d7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009d7e:	6878      	ldr	r0, [r7, #4]
 8009d80:	f7fc fbc8 	bl	8006514 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	2224      	movs	r2, #36	; 0x24
 8009d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	68da      	ldr	r2, [r3, #12]
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009d9a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009d9c:	6878      	ldr	r0, [r7, #4]
 8009d9e:	f000 fddf 	bl	800a960 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	691a      	ldr	r2, [r3, #16]
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009db0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	695a      	ldr	r2, [r3, #20]
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009dc0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	68da      	ldr	r2, [r3, #12]
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009dd0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	2200      	movs	r2, #0
 8009dd6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	2220      	movs	r2, #32
 8009ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	2220      	movs	r2, #32
 8009de4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009de8:	2300      	movs	r3, #0
}
 8009dea:	4618      	mov	r0, r3
 8009dec:	3708      	adds	r7, #8
 8009dee:	46bd      	mov	sp, r7
 8009df0:	bd80      	pop	{r7, pc}

08009df2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009df2:	b580      	push	{r7, lr}
 8009df4:	b08a      	sub	sp, #40	; 0x28
 8009df6:	af02      	add	r7, sp, #8
 8009df8:	60f8      	str	r0, [r7, #12]
 8009dfa:	60b9      	str	r1, [r7, #8]
 8009dfc:	603b      	str	r3, [r7, #0]
 8009dfe:	4613      	mov	r3, r2
 8009e00:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009e02:	2300      	movs	r3, #0
 8009e04:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009e0c:	b2db      	uxtb	r3, r3
 8009e0e:	2b20      	cmp	r3, #32
 8009e10:	d17c      	bne.n	8009f0c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009e12:	68bb      	ldr	r3, [r7, #8]
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d002      	beq.n	8009e1e <HAL_UART_Transmit+0x2c>
 8009e18:	88fb      	ldrh	r3, [r7, #6]
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d101      	bne.n	8009e22 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009e1e:	2301      	movs	r3, #1
 8009e20:	e075      	b.n	8009f0e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009e28:	2b01      	cmp	r3, #1
 8009e2a:	d101      	bne.n	8009e30 <HAL_UART_Transmit+0x3e>
 8009e2c:	2302      	movs	r3, #2
 8009e2e:	e06e      	b.n	8009f0e <HAL_UART_Transmit+0x11c>
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	2201      	movs	r2, #1
 8009e34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	2200      	movs	r2, #0
 8009e3c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	2221      	movs	r2, #33	; 0x21
 8009e42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009e46:	f7fc fdf1 	bl	8006a2c <HAL_GetTick>
 8009e4a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	88fa      	ldrh	r2, [r7, #6]
 8009e50:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	88fa      	ldrh	r2, [r7, #6]
 8009e56:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	689b      	ldr	r3, [r3, #8]
 8009e5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009e60:	d108      	bne.n	8009e74 <HAL_UART_Transmit+0x82>
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	691b      	ldr	r3, [r3, #16]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d104      	bne.n	8009e74 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8009e6a:	2300      	movs	r3, #0
 8009e6c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009e6e:	68bb      	ldr	r3, [r7, #8]
 8009e70:	61bb      	str	r3, [r7, #24]
 8009e72:	e003      	b.n	8009e7c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8009e74:	68bb      	ldr	r3, [r7, #8]
 8009e76:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009e78:	2300      	movs	r3, #0
 8009e7a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	2200      	movs	r2, #0
 8009e80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8009e84:	e02a      	b.n	8009edc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009e86:	683b      	ldr	r3, [r7, #0]
 8009e88:	9300      	str	r3, [sp, #0]
 8009e8a:	697b      	ldr	r3, [r7, #20]
 8009e8c:	2200      	movs	r2, #0
 8009e8e:	2180      	movs	r1, #128	; 0x80
 8009e90:	68f8      	ldr	r0, [r7, #12]
 8009e92:	f000 fb1f 	bl	800a4d4 <UART_WaitOnFlagUntilTimeout>
 8009e96:	4603      	mov	r3, r0
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d001      	beq.n	8009ea0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8009e9c:	2303      	movs	r3, #3
 8009e9e:	e036      	b.n	8009f0e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8009ea0:	69fb      	ldr	r3, [r7, #28]
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d10b      	bne.n	8009ebe <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009ea6:	69bb      	ldr	r3, [r7, #24]
 8009ea8:	881b      	ldrh	r3, [r3, #0]
 8009eaa:	461a      	mov	r2, r3
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009eb4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009eb6:	69bb      	ldr	r3, [r7, #24]
 8009eb8:	3302      	adds	r3, #2
 8009eba:	61bb      	str	r3, [r7, #24]
 8009ebc:	e007      	b.n	8009ece <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009ebe:	69fb      	ldr	r3, [r7, #28]
 8009ec0:	781a      	ldrb	r2, [r3, #0]
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009ec8:	69fb      	ldr	r3, [r7, #28]
 8009eca:	3301      	adds	r3, #1
 8009ecc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009ed2:	b29b      	uxth	r3, r3
 8009ed4:	3b01      	subs	r3, #1
 8009ed6:	b29a      	uxth	r2, r3
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009ee0:	b29b      	uxth	r3, r3
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d1cf      	bne.n	8009e86 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009ee6:	683b      	ldr	r3, [r7, #0]
 8009ee8:	9300      	str	r3, [sp, #0]
 8009eea:	697b      	ldr	r3, [r7, #20]
 8009eec:	2200      	movs	r2, #0
 8009eee:	2140      	movs	r1, #64	; 0x40
 8009ef0:	68f8      	ldr	r0, [r7, #12]
 8009ef2:	f000 faef 	bl	800a4d4 <UART_WaitOnFlagUntilTimeout>
 8009ef6:	4603      	mov	r3, r0
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d001      	beq.n	8009f00 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8009efc:	2303      	movs	r3, #3
 8009efe:	e006      	b.n	8009f0e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	2220      	movs	r2, #32
 8009f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8009f08:	2300      	movs	r3, #0
 8009f0a:	e000      	b.n	8009f0e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8009f0c:	2302      	movs	r3, #2
  }
}
 8009f0e:	4618      	mov	r0, r3
 8009f10:	3720      	adds	r7, #32
 8009f12:	46bd      	mov	sp, r7
 8009f14:	bd80      	pop	{r7, pc}

08009f16 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009f16:	b580      	push	{r7, lr}
 8009f18:	b084      	sub	sp, #16
 8009f1a:	af00      	add	r7, sp, #0
 8009f1c:	60f8      	str	r0, [r7, #12]
 8009f1e:	60b9      	str	r1, [r7, #8]
 8009f20:	4613      	mov	r3, r2
 8009f22:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009f2a:	b2db      	uxtb	r3, r3
 8009f2c:	2b20      	cmp	r3, #32
 8009f2e:	d11d      	bne.n	8009f6c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8009f30:	68bb      	ldr	r3, [r7, #8]
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d002      	beq.n	8009f3c <HAL_UART_Receive_IT+0x26>
 8009f36:	88fb      	ldrh	r3, [r7, #6]
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d101      	bne.n	8009f40 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8009f3c:	2301      	movs	r3, #1
 8009f3e:	e016      	b.n	8009f6e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009f46:	2b01      	cmp	r3, #1
 8009f48:	d101      	bne.n	8009f4e <HAL_UART_Receive_IT+0x38>
 8009f4a:	2302      	movs	r3, #2
 8009f4c:	e00f      	b.n	8009f6e <HAL_UART_Receive_IT+0x58>
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	2201      	movs	r2, #1
 8009f52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	2200      	movs	r2, #0
 8009f5a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8009f5c:	88fb      	ldrh	r3, [r7, #6]
 8009f5e:	461a      	mov	r2, r3
 8009f60:	68b9      	ldr	r1, [r7, #8]
 8009f62:	68f8      	ldr	r0, [r7, #12]
 8009f64:	f000 fb24 	bl	800a5b0 <UART_Start_Receive_IT>
 8009f68:	4603      	mov	r3, r0
 8009f6a:	e000      	b.n	8009f6e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8009f6c:	2302      	movs	r3, #2
  }
}
 8009f6e:	4618      	mov	r0, r3
 8009f70:	3710      	adds	r7, #16
 8009f72:	46bd      	mov	sp, r7
 8009f74:	bd80      	pop	{r7, pc}
	...

08009f78 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009f78:	b580      	push	{r7, lr}
 8009f7a:	b0ba      	sub	sp, #232	; 0xe8
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	68db      	ldr	r3, [r3, #12]
 8009f90:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	695b      	ldr	r3, [r3, #20]
 8009f9a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8009f9e:	2300      	movs	r3, #0
 8009fa0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8009fa4:	2300      	movs	r3, #0
 8009fa6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009faa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009fae:	f003 030f 	and.w	r3, r3, #15
 8009fb2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8009fb6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d10f      	bne.n	8009fde <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009fbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009fc2:	f003 0320 	and.w	r3, r3, #32
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d009      	beq.n	8009fde <HAL_UART_IRQHandler+0x66>
 8009fca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009fce:	f003 0320 	and.w	r3, r3, #32
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d003      	beq.n	8009fde <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8009fd6:	6878      	ldr	r0, [r7, #4]
 8009fd8:	f000 fc07 	bl	800a7ea <UART_Receive_IT>
      return;
 8009fdc:	e256      	b.n	800a48c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8009fde:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	f000 80de 	beq.w	800a1a4 <HAL_UART_IRQHandler+0x22c>
 8009fe8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009fec:	f003 0301 	and.w	r3, r3, #1
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d106      	bne.n	800a002 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009ff4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009ff8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	f000 80d1 	beq.w	800a1a4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a002:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a006:	f003 0301 	and.w	r3, r3, #1
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d00b      	beq.n	800a026 <HAL_UART_IRQHandler+0xae>
 800a00e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a012:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a016:	2b00      	cmp	r3, #0
 800a018:	d005      	beq.n	800a026 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a01e:	f043 0201 	orr.w	r2, r3, #1
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a026:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a02a:	f003 0304 	and.w	r3, r3, #4
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d00b      	beq.n	800a04a <HAL_UART_IRQHandler+0xd2>
 800a032:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a036:	f003 0301 	and.w	r3, r3, #1
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d005      	beq.n	800a04a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a042:	f043 0202 	orr.w	r2, r3, #2
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a04a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a04e:	f003 0302 	and.w	r3, r3, #2
 800a052:	2b00      	cmp	r3, #0
 800a054:	d00b      	beq.n	800a06e <HAL_UART_IRQHandler+0xf6>
 800a056:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a05a:	f003 0301 	and.w	r3, r3, #1
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d005      	beq.n	800a06e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a066:	f043 0204 	orr.w	r2, r3, #4
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800a06e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a072:	f003 0308 	and.w	r3, r3, #8
 800a076:	2b00      	cmp	r3, #0
 800a078:	d011      	beq.n	800a09e <HAL_UART_IRQHandler+0x126>
 800a07a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a07e:	f003 0320 	and.w	r3, r3, #32
 800a082:	2b00      	cmp	r3, #0
 800a084:	d105      	bne.n	800a092 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800a086:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a08a:	f003 0301 	and.w	r3, r3, #1
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d005      	beq.n	800a09e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a096:	f043 0208 	orr.w	r2, r3, #8
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	f000 81ed 	beq.w	800a482 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a0a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a0ac:	f003 0320 	and.w	r3, r3, #32
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d008      	beq.n	800a0c6 <HAL_UART_IRQHandler+0x14e>
 800a0b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a0b8:	f003 0320 	and.w	r3, r3, #32
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d002      	beq.n	800a0c6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800a0c0:	6878      	ldr	r0, [r7, #4]
 800a0c2:	f000 fb92 	bl	800a7ea <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	695b      	ldr	r3, [r3, #20]
 800a0cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0d0:	2b40      	cmp	r3, #64	; 0x40
 800a0d2:	bf0c      	ite	eq
 800a0d4:	2301      	moveq	r3, #1
 800a0d6:	2300      	movne	r3, #0
 800a0d8:	b2db      	uxtb	r3, r3
 800a0da:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0e2:	f003 0308 	and.w	r3, r3, #8
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d103      	bne.n	800a0f2 <HAL_UART_IRQHandler+0x17a>
 800a0ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d04f      	beq.n	800a192 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a0f2:	6878      	ldr	r0, [r7, #4]
 800a0f4:	f000 fa9a 	bl	800a62c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	695b      	ldr	r3, [r3, #20]
 800a0fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a102:	2b40      	cmp	r3, #64	; 0x40
 800a104:	d141      	bne.n	800a18a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	3314      	adds	r3, #20
 800a10c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a110:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a114:	e853 3f00 	ldrex	r3, [r3]
 800a118:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a11c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a120:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a124:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	3314      	adds	r3, #20
 800a12e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a132:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a136:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a13a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a13e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a142:	e841 2300 	strex	r3, r2, [r1]
 800a146:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a14a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d1d9      	bne.n	800a106 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a156:	2b00      	cmp	r3, #0
 800a158:	d013      	beq.n	800a182 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a15e:	4a7d      	ldr	r2, [pc, #500]	; (800a354 <HAL_UART_IRQHandler+0x3dc>)
 800a160:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a166:	4618      	mov	r0, r3
 800a168:	f7fc fe11 	bl	8006d8e <HAL_DMA_Abort_IT>
 800a16c:	4603      	mov	r3, r0
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d016      	beq.n	800a1a0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a176:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a178:	687a      	ldr	r2, [r7, #4]
 800a17a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a17c:	4610      	mov	r0, r2
 800a17e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a180:	e00e      	b.n	800a1a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a182:	6878      	ldr	r0, [r7, #4]
 800a184:	f000 f990 	bl	800a4a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a188:	e00a      	b.n	800a1a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a18a:	6878      	ldr	r0, [r7, #4]
 800a18c:	f000 f98c 	bl	800a4a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a190:	e006      	b.n	800a1a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a192:	6878      	ldr	r0, [r7, #4]
 800a194:	f000 f988 	bl	800a4a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	2200      	movs	r2, #0
 800a19c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800a19e:	e170      	b.n	800a482 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a1a0:	bf00      	nop
    return;
 800a1a2:	e16e      	b.n	800a482 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1a8:	2b01      	cmp	r3, #1
 800a1aa:	f040 814a 	bne.w	800a442 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800a1ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a1b2:	f003 0310 	and.w	r3, r3, #16
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	f000 8143 	beq.w	800a442 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800a1bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a1c0:	f003 0310 	and.w	r3, r3, #16
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	f000 813c 	beq.w	800a442 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a1ca:	2300      	movs	r3, #0
 800a1cc:	60bb      	str	r3, [r7, #8]
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	60bb      	str	r3, [r7, #8]
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	685b      	ldr	r3, [r3, #4]
 800a1dc:	60bb      	str	r3, [r7, #8]
 800a1de:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	695b      	ldr	r3, [r3, #20]
 800a1e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a1ea:	2b40      	cmp	r3, #64	; 0x40
 800a1ec:	f040 80b4 	bne.w	800a358 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	685b      	ldr	r3, [r3, #4]
 800a1f8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a1fc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a200:	2b00      	cmp	r3, #0
 800a202:	f000 8140 	beq.w	800a486 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a20a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a20e:	429a      	cmp	r2, r3
 800a210:	f080 8139 	bcs.w	800a486 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a21a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a220:	69db      	ldr	r3, [r3, #28]
 800a222:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a226:	f000 8088 	beq.w	800a33a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	330c      	adds	r3, #12
 800a230:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a234:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a238:	e853 3f00 	ldrex	r3, [r3]
 800a23c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a240:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a244:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a248:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	330c      	adds	r3, #12
 800a252:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800a256:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a25a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a25e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a262:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a266:	e841 2300 	strex	r3, r2, [r1]
 800a26a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a26e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a272:	2b00      	cmp	r3, #0
 800a274:	d1d9      	bne.n	800a22a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	3314      	adds	r3, #20
 800a27c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a27e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a280:	e853 3f00 	ldrex	r3, [r3]
 800a284:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a286:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a288:	f023 0301 	bic.w	r3, r3, #1
 800a28c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	3314      	adds	r3, #20
 800a296:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a29a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a29e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2a0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a2a2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a2a6:	e841 2300 	strex	r3, r2, [r1]
 800a2aa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a2ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d1e1      	bne.n	800a276 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	3314      	adds	r3, #20
 800a2b8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a2bc:	e853 3f00 	ldrex	r3, [r3]
 800a2c0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a2c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a2c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a2c8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	3314      	adds	r3, #20
 800a2d2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a2d6:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a2d8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2da:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a2dc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a2de:	e841 2300 	strex	r3, r2, [r1]
 800a2e2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a2e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d1e3      	bne.n	800a2b2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	2220      	movs	r2, #32
 800a2ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	2200      	movs	r2, #0
 800a2f6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	330c      	adds	r3, #12
 800a2fe:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a300:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a302:	e853 3f00 	ldrex	r3, [r3]
 800a306:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a308:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a30a:	f023 0310 	bic.w	r3, r3, #16
 800a30e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	330c      	adds	r3, #12
 800a318:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800a31c:	65ba      	str	r2, [r7, #88]	; 0x58
 800a31e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a320:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a322:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a324:	e841 2300 	strex	r3, r2, [r1]
 800a328:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a32a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d1e3      	bne.n	800a2f8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a334:	4618      	mov	r0, r3
 800a336:	f7fc fcba 	bl	8006cae <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a342:	b29b      	uxth	r3, r3
 800a344:	1ad3      	subs	r3, r2, r3
 800a346:	b29b      	uxth	r3, r3
 800a348:	4619      	mov	r1, r3
 800a34a:	6878      	ldr	r0, [r7, #4]
 800a34c:	f000 f8b6 	bl	800a4bc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a350:	e099      	b.n	800a486 <HAL_UART_IRQHandler+0x50e>
 800a352:	bf00      	nop
 800a354:	0800a6f3 	.word	0x0800a6f3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a360:	b29b      	uxth	r3, r3
 800a362:	1ad3      	subs	r3, r2, r3
 800a364:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a36c:	b29b      	uxth	r3, r3
 800a36e:	2b00      	cmp	r3, #0
 800a370:	f000 808b 	beq.w	800a48a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800a374:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a378:	2b00      	cmp	r3, #0
 800a37a:	f000 8086 	beq.w	800a48a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	330c      	adds	r3, #12
 800a384:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a388:	e853 3f00 	ldrex	r3, [r3]
 800a38c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a38e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a390:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a394:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	330c      	adds	r3, #12
 800a39e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800a3a2:	647a      	str	r2, [r7, #68]	; 0x44
 800a3a4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3a6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a3a8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a3aa:	e841 2300 	strex	r3, r2, [r1]
 800a3ae:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a3b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d1e3      	bne.n	800a37e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	3314      	adds	r3, #20
 800a3bc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3c0:	e853 3f00 	ldrex	r3, [r3]
 800a3c4:	623b      	str	r3, [r7, #32]
   return(result);
 800a3c6:	6a3b      	ldr	r3, [r7, #32]
 800a3c8:	f023 0301 	bic.w	r3, r3, #1
 800a3cc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	3314      	adds	r3, #20
 800a3d6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a3da:	633a      	str	r2, [r7, #48]	; 0x30
 800a3dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a3e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a3e2:	e841 2300 	strex	r3, r2, [r1]
 800a3e6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a3e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d1e3      	bne.n	800a3b6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	2220      	movs	r2, #32
 800a3f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	2200      	movs	r2, #0
 800a3fa:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	330c      	adds	r3, #12
 800a402:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a404:	693b      	ldr	r3, [r7, #16]
 800a406:	e853 3f00 	ldrex	r3, [r3]
 800a40a:	60fb      	str	r3, [r7, #12]
   return(result);
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	f023 0310 	bic.w	r3, r3, #16
 800a412:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	330c      	adds	r3, #12
 800a41c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800a420:	61fa      	str	r2, [r7, #28]
 800a422:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a424:	69b9      	ldr	r1, [r7, #24]
 800a426:	69fa      	ldr	r2, [r7, #28]
 800a428:	e841 2300 	strex	r3, r2, [r1]
 800a42c:	617b      	str	r3, [r7, #20]
   return(result);
 800a42e:	697b      	ldr	r3, [r7, #20]
 800a430:	2b00      	cmp	r3, #0
 800a432:	d1e3      	bne.n	800a3fc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a434:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a438:	4619      	mov	r1, r3
 800a43a:	6878      	ldr	r0, [r7, #4]
 800a43c:	f000 f83e 	bl	800a4bc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a440:	e023      	b.n	800a48a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a442:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a446:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d009      	beq.n	800a462 <HAL_UART_IRQHandler+0x4ea>
 800a44e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a452:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a456:	2b00      	cmp	r3, #0
 800a458:	d003      	beq.n	800a462 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800a45a:	6878      	ldr	r0, [r7, #4]
 800a45c:	f000 f95d 	bl	800a71a <UART_Transmit_IT>
    return;
 800a460:	e014      	b.n	800a48c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a462:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a466:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d00e      	beq.n	800a48c <HAL_UART_IRQHandler+0x514>
 800a46e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a472:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a476:	2b00      	cmp	r3, #0
 800a478:	d008      	beq.n	800a48c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800a47a:	6878      	ldr	r0, [r7, #4]
 800a47c:	f000 f99d 	bl	800a7ba <UART_EndTransmit_IT>
    return;
 800a480:	e004      	b.n	800a48c <HAL_UART_IRQHandler+0x514>
    return;
 800a482:	bf00      	nop
 800a484:	e002      	b.n	800a48c <HAL_UART_IRQHandler+0x514>
      return;
 800a486:	bf00      	nop
 800a488:	e000      	b.n	800a48c <HAL_UART_IRQHandler+0x514>
      return;
 800a48a:	bf00      	nop
  }
}
 800a48c:	37e8      	adds	r7, #232	; 0xe8
 800a48e:	46bd      	mov	sp, r7
 800a490:	bd80      	pop	{r7, pc}
 800a492:	bf00      	nop

0800a494 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a494:	b480      	push	{r7}
 800a496:	b083      	sub	sp, #12
 800a498:	af00      	add	r7, sp, #0
 800a49a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800a49c:	bf00      	nop
 800a49e:	370c      	adds	r7, #12
 800a4a0:	46bd      	mov	sp, r7
 800a4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a6:	4770      	bx	lr

0800a4a8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a4a8:	b480      	push	{r7}
 800a4aa:	b083      	sub	sp, #12
 800a4ac:	af00      	add	r7, sp, #0
 800a4ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a4b0:	bf00      	nop
 800a4b2:	370c      	adds	r7, #12
 800a4b4:	46bd      	mov	sp, r7
 800a4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ba:	4770      	bx	lr

0800a4bc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a4bc:	b480      	push	{r7}
 800a4be:	b083      	sub	sp, #12
 800a4c0:	af00      	add	r7, sp, #0
 800a4c2:	6078      	str	r0, [r7, #4]
 800a4c4:	460b      	mov	r3, r1
 800a4c6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a4c8:	bf00      	nop
 800a4ca:	370c      	adds	r7, #12
 800a4cc:	46bd      	mov	sp, r7
 800a4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d2:	4770      	bx	lr

0800a4d4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800a4d4:	b580      	push	{r7, lr}
 800a4d6:	b090      	sub	sp, #64	; 0x40
 800a4d8:	af00      	add	r7, sp, #0
 800a4da:	60f8      	str	r0, [r7, #12]
 800a4dc:	60b9      	str	r1, [r7, #8]
 800a4de:	603b      	str	r3, [r7, #0]
 800a4e0:	4613      	mov	r3, r2
 800a4e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a4e4:	e050      	b.n	800a588 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a4e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a4e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4ec:	d04c      	beq.n	800a588 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800a4ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d007      	beq.n	800a504 <UART_WaitOnFlagUntilTimeout+0x30>
 800a4f4:	f7fc fa9a 	bl	8006a2c <HAL_GetTick>
 800a4f8:	4602      	mov	r2, r0
 800a4fa:	683b      	ldr	r3, [r7, #0]
 800a4fc:	1ad3      	subs	r3, r2, r3
 800a4fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a500:	429a      	cmp	r2, r3
 800a502:	d241      	bcs.n	800a588 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	330c      	adds	r3, #12
 800a50a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a50c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a50e:	e853 3f00 	ldrex	r3, [r3]
 800a512:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a516:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a51a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	330c      	adds	r3, #12
 800a522:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a524:	637a      	str	r2, [r7, #52]	; 0x34
 800a526:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a528:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a52a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a52c:	e841 2300 	strex	r3, r2, [r1]
 800a530:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a534:	2b00      	cmp	r3, #0
 800a536:	d1e5      	bne.n	800a504 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	3314      	adds	r3, #20
 800a53e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a540:	697b      	ldr	r3, [r7, #20]
 800a542:	e853 3f00 	ldrex	r3, [r3]
 800a546:	613b      	str	r3, [r7, #16]
   return(result);
 800a548:	693b      	ldr	r3, [r7, #16]
 800a54a:	f023 0301 	bic.w	r3, r3, #1
 800a54e:	63bb      	str	r3, [r7, #56]	; 0x38
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	3314      	adds	r3, #20
 800a556:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a558:	623a      	str	r2, [r7, #32]
 800a55a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a55c:	69f9      	ldr	r1, [r7, #28]
 800a55e:	6a3a      	ldr	r2, [r7, #32]
 800a560:	e841 2300 	strex	r3, r2, [r1]
 800a564:	61bb      	str	r3, [r7, #24]
   return(result);
 800a566:	69bb      	ldr	r3, [r7, #24]
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d1e5      	bne.n	800a538 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	2220      	movs	r2, #32
 800a570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	2220      	movs	r2, #32
 800a578:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	2200      	movs	r2, #0
 800a580:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800a584:	2303      	movs	r3, #3
 800a586:	e00f      	b.n	800a5a8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	681a      	ldr	r2, [r3, #0]
 800a58e:	68bb      	ldr	r3, [r7, #8]
 800a590:	4013      	ands	r3, r2
 800a592:	68ba      	ldr	r2, [r7, #8]
 800a594:	429a      	cmp	r2, r3
 800a596:	bf0c      	ite	eq
 800a598:	2301      	moveq	r3, #1
 800a59a:	2300      	movne	r3, #0
 800a59c:	b2db      	uxtb	r3, r3
 800a59e:	461a      	mov	r2, r3
 800a5a0:	79fb      	ldrb	r3, [r7, #7]
 800a5a2:	429a      	cmp	r2, r3
 800a5a4:	d09f      	beq.n	800a4e6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a5a6:	2300      	movs	r3, #0
}
 800a5a8:	4618      	mov	r0, r3
 800a5aa:	3740      	adds	r7, #64	; 0x40
 800a5ac:	46bd      	mov	sp, r7
 800a5ae:	bd80      	pop	{r7, pc}

0800a5b0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a5b0:	b480      	push	{r7}
 800a5b2:	b085      	sub	sp, #20
 800a5b4:	af00      	add	r7, sp, #0
 800a5b6:	60f8      	str	r0, [r7, #12]
 800a5b8:	60b9      	str	r1, [r7, #8]
 800a5ba:	4613      	mov	r3, r2
 800a5bc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	68ba      	ldr	r2, [r7, #8]
 800a5c2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	88fa      	ldrh	r2, [r7, #6]
 800a5c8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	88fa      	ldrh	r2, [r7, #6]
 800a5ce:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	2200      	movs	r2, #0
 800a5d4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	2222      	movs	r2, #34	; 0x22
 800a5da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	2200      	movs	r2, #0
 800a5e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	691b      	ldr	r3, [r3, #16]
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d007      	beq.n	800a5fe <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	68da      	ldr	r2, [r3, #12]
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a5fc:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	695a      	ldr	r2, [r3, #20]
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	f042 0201 	orr.w	r2, r2, #1
 800a60c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	68da      	ldr	r2, [r3, #12]
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	f042 0220 	orr.w	r2, r2, #32
 800a61c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a61e:	2300      	movs	r3, #0
}
 800a620:	4618      	mov	r0, r3
 800a622:	3714      	adds	r7, #20
 800a624:	46bd      	mov	sp, r7
 800a626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a62a:	4770      	bx	lr

0800a62c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a62c:	b480      	push	{r7}
 800a62e:	b095      	sub	sp, #84	; 0x54
 800a630:	af00      	add	r7, sp, #0
 800a632:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	330c      	adds	r3, #12
 800a63a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a63c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a63e:	e853 3f00 	ldrex	r3, [r3]
 800a642:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a646:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a64a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	330c      	adds	r3, #12
 800a652:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a654:	643a      	str	r2, [r7, #64]	; 0x40
 800a656:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a658:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a65a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a65c:	e841 2300 	strex	r3, r2, [r1]
 800a660:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a664:	2b00      	cmp	r3, #0
 800a666:	d1e5      	bne.n	800a634 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	3314      	adds	r3, #20
 800a66e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a670:	6a3b      	ldr	r3, [r7, #32]
 800a672:	e853 3f00 	ldrex	r3, [r3]
 800a676:	61fb      	str	r3, [r7, #28]
   return(result);
 800a678:	69fb      	ldr	r3, [r7, #28]
 800a67a:	f023 0301 	bic.w	r3, r3, #1
 800a67e:	64bb      	str	r3, [r7, #72]	; 0x48
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	3314      	adds	r3, #20
 800a686:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a688:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a68a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a68c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a68e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a690:	e841 2300 	strex	r3, r2, [r1]
 800a694:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d1e5      	bne.n	800a668 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6a0:	2b01      	cmp	r3, #1
 800a6a2:	d119      	bne.n	800a6d8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	330c      	adds	r3, #12
 800a6aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	e853 3f00 	ldrex	r3, [r3]
 800a6b2:	60bb      	str	r3, [r7, #8]
   return(result);
 800a6b4:	68bb      	ldr	r3, [r7, #8]
 800a6b6:	f023 0310 	bic.w	r3, r3, #16
 800a6ba:	647b      	str	r3, [r7, #68]	; 0x44
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	330c      	adds	r3, #12
 800a6c2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a6c4:	61ba      	str	r2, [r7, #24]
 800a6c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6c8:	6979      	ldr	r1, [r7, #20]
 800a6ca:	69ba      	ldr	r2, [r7, #24]
 800a6cc:	e841 2300 	strex	r3, r2, [r1]
 800a6d0:	613b      	str	r3, [r7, #16]
   return(result);
 800a6d2:	693b      	ldr	r3, [r7, #16]
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d1e5      	bne.n	800a6a4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	2220      	movs	r2, #32
 800a6dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	2200      	movs	r2, #0
 800a6e4:	631a      	str	r2, [r3, #48]	; 0x30
}
 800a6e6:	bf00      	nop
 800a6e8:	3754      	adds	r7, #84	; 0x54
 800a6ea:	46bd      	mov	sp, r7
 800a6ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f0:	4770      	bx	lr

0800a6f2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a6f2:	b580      	push	{r7, lr}
 800a6f4:	b084      	sub	sp, #16
 800a6f6:	af00      	add	r7, sp, #0
 800a6f8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6fe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	2200      	movs	r2, #0
 800a704:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	2200      	movs	r2, #0
 800a70a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a70c:	68f8      	ldr	r0, [r7, #12]
 800a70e:	f7ff fecb 	bl	800a4a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a712:	bf00      	nop
 800a714:	3710      	adds	r7, #16
 800a716:	46bd      	mov	sp, r7
 800a718:	bd80      	pop	{r7, pc}

0800a71a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a71a:	b480      	push	{r7}
 800a71c:	b085      	sub	sp, #20
 800a71e:	af00      	add	r7, sp, #0
 800a720:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a728:	b2db      	uxtb	r3, r3
 800a72a:	2b21      	cmp	r3, #33	; 0x21
 800a72c:	d13e      	bne.n	800a7ac <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	689b      	ldr	r3, [r3, #8]
 800a732:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a736:	d114      	bne.n	800a762 <UART_Transmit_IT+0x48>
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	691b      	ldr	r3, [r3, #16]
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d110      	bne.n	800a762 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	6a1b      	ldr	r3, [r3, #32]
 800a744:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	881b      	ldrh	r3, [r3, #0]
 800a74a:	461a      	mov	r2, r3
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a754:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	6a1b      	ldr	r3, [r3, #32]
 800a75a:	1c9a      	adds	r2, r3, #2
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	621a      	str	r2, [r3, #32]
 800a760:	e008      	b.n	800a774 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	6a1b      	ldr	r3, [r3, #32]
 800a766:	1c59      	adds	r1, r3, #1
 800a768:	687a      	ldr	r2, [r7, #4]
 800a76a:	6211      	str	r1, [r2, #32]
 800a76c:	781a      	ldrb	r2, [r3, #0]
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a778:	b29b      	uxth	r3, r3
 800a77a:	3b01      	subs	r3, #1
 800a77c:	b29b      	uxth	r3, r3
 800a77e:	687a      	ldr	r2, [r7, #4]
 800a780:	4619      	mov	r1, r3
 800a782:	84d1      	strh	r1, [r2, #38]	; 0x26
 800a784:	2b00      	cmp	r3, #0
 800a786:	d10f      	bne.n	800a7a8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	68da      	ldr	r2, [r3, #12]
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a796:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	68da      	ldr	r2, [r3, #12]
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a7a6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a7a8:	2300      	movs	r3, #0
 800a7aa:	e000      	b.n	800a7ae <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a7ac:	2302      	movs	r3, #2
  }
}
 800a7ae:	4618      	mov	r0, r3
 800a7b0:	3714      	adds	r7, #20
 800a7b2:	46bd      	mov	sp, r7
 800a7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b8:	4770      	bx	lr

0800a7ba <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a7ba:	b580      	push	{r7, lr}
 800a7bc:	b082      	sub	sp, #8
 800a7be:	af00      	add	r7, sp, #0
 800a7c0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	68da      	ldr	r2, [r3, #12]
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a7d0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	2220      	movs	r2, #32
 800a7d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a7da:	6878      	ldr	r0, [r7, #4]
 800a7dc:	f7ff fe5a 	bl	800a494 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a7e0:	2300      	movs	r3, #0
}
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	3708      	adds	r7, #8
 800a7e6:	46bd      	mov	sp, r7
 800a7e8:	bd80      	pop	{r7, pc}

0800a7ea <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a7ea:	b580      	push	{r7, lr}
 800a7ec:	b08c      	sub	sp, #48	; 0x30
 800a7ee:	af00      	add	r7, sp, #0
 800a7f0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a7f8:	b2db      	uxtb	r3, r3
 800a7fa:	2b22      	cmp	r3, #34	; 0x22
 800a7fc:	f040 80ab 	bne.w	800a956 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	689b      	ldr	r3, [r3, #8]
 800a804:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a808:	d117      	bne.n	800a83a <UART_Receive_IT+0x50>
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	691b      	ldr	r3, [r3, #16]
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d113      	bne.n	800a83a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a812:	2300      	movs	r3, #0
 800a814:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a81a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	685b      	ldr	r3, [r3, #4]
 800a822:	b29b      	uxth	r3, r3
 800a824:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a828:	b29a      	uxth	r2, r3
 800a82a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a82c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a832:	1c9a      	adds	r2, r3, #2
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	629a      	str	r2, [r3, #40]	; 0x28
 800a838:	e026      	b.n	800a888 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a83e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800a840:	2300      	movs	r3, #0
 800a842:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	689b      	ldr	r3, [r3, #8]
 800a848:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a84c:	d007      	beq.n	800a85e <UART_Receive_IT+0x74>
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	689b      	ldr	r3, [r3, #8]
 800a852:	2b00      	cmp	r3, #0
 800a854:	d10a      	bne.n	800a86c <UART_Receive_IT+0x82>
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	691b      	ldr	r3, [r3, #16]
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d106      	bne.n	800a86c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	685b      	ldr	r3, [r3, #4]
 800a864:	b2da      	uxtb	r2, r3
 800a866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a868:	701a      	strb	r2, [r3, #0]
 800a86a:	e008      	b.n	800a87e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	685b      	ldr	r3, [r3, #4]
 800a872:	b2db      	uxtb	r3, r3
 800a874:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a878:	b2da      	uxtb	r2, r3
 800a87a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a87c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a882:	1c5a      	adds	r2, r3, #1
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a88c:	b29b      	uxth	r3, r3
 800a88e:	3b01      	subs	r3, #1
 800a890:	b29b      	uxth	r3, r3
 800a892:	687a      	ldr	r2, [r7, #4]
 800a894:	4619      	mov	r1, r3
 800a896:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d15a      	bne.n	800a952 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	68da      	ldr	r2, [r3, #12]
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	f022 0220 	bic.w	r2, r2, #32
 800a8aa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	68da      	ldr	r2, [r3, #12]
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a8ba:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	695a      	ldr	r2, [r3, #20]
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	f022 0201 	bic.w	r2, r2, #1
 800a8ca:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	2220      	movs	r2, #32
 800a8d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8d8:	2b01      	cmp	r3, #1
 800a8da:	d135      	bne.n	800a948 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	2200      	movs	r2, #0
 800a8e0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	330c      	adds	r3, #12
 800a8e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8ea:	697b      	ldr	r3, [r7, #20]
 800a8ec:	e853 3f00 	ldrex	r3, [r3]
 800a8f0:	613b      	str	r3, [r7, #16]
   return(result);
 800a8f2:	693b      	ldr	r3, [r7, #16]
 800a8f4:	f023 0310 	bic.w	r3, r3, #16
 800a8f8:	627b      	str	r3, [r7, #36]	; 0x24
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	330c      	adds	r3, #12
 800a900:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a902:	623a      	str	r2, [r7, #32]
 800a904:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a906:	69f9      	ldr	r1, [r7, #28]
 800a908:	6a3a      	ldr	r2, [r7, #32]
 800a90a:	e841 2300 	strex	r3, r2, [r1]
 800a90e:	61bb      	str	r3, [r7, #24]
   return(result);
 800a910:	69bb      	ldr	r3, [r7, #24]
 800a912:	2b00      	cmp	r3, #0
 800a914:	d1e5      	bne.n	800a8e2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	f003 0310 	and.w	r3, r3, #16
 800a920:	2b10      	cmp	r3, #16
 800a922:	d10a      	bne.n	800a93a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a924:	2300      	movs	r3, #0
 800a926:	60fb      	str	r3, [r7, #12]
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	60fb      	str	r3, [r7, #12]
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	685b      	ldr	r3, [r3, #4]
 800a936:	60fb      	str	r3, [r7, #12]
 800a938:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a93e:	4619      	mov	r1, r3
 800a940:	6878      	ldr	r0, [r7, #4]
 800a942:	f7ff fdbb 	bl	800a4bc <HAL_UARTEx_RxEventCallback>
 800a946:	e002      	b.n	800a94e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a948:	6878      	ldr	r0, [r7, #4]
 800a94a:	f7f7 fb25 	bl	8001f98 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a94e:	2300      	movs	r3, #0
 800a950:	e002      	b.n	800a958 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800a952:	2300      	movs	r3, #0
 800a954:	e000      	b.n	800a958 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800a956:	2302      	movs	r3, #2
  }
}
 800a958:	4618      	mov	r0, r3
 800a95a:	3730      	adds	r7, #48	; 0x30
 800a95c:	46bd      	mov	sp, r7
 800a95e:	bd80      	pop	{r7, pc}

0800a960 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a960:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a964:	b0c0      	sub	sp, #256	; 0x100
 800a966:	af00      	add	r7, sp, #0
 800a968:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a96c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	691b      	ldr	r3, [r3, #16]
 800a974:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800a978:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a97c:	68d9      	ldr	r1, [r3, #12]
 800a97e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a982:	681a      	ldr	r2, [r3, #0]
 800a984:	ea40 0301 	orr.w	r3, r0, r1
 800a988:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a98a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a98e:	689a      	ldr	r2, [r3, #8]
 800a990:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a994:	691b      	ldr	r3, [r3, #16]
 800a996:	431a      	orrs	r2, r3
 800a998:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a99c:	695b      	ldr	r3, [r3, #20]
 800a99e:	431a      	orrs	r2, r3
 800a9a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a9a4:	69db      	ldr	r3, [r3, #28]
 800a9a6:	4313      	orrs	r3, r2
 800a9a8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800a9ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	68db      	ldr	r3, [r3, #12]
 800a9b4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800a9b8:	f021 010c 	bic.w	r1, r1, #12
 800a9bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a9c0:	681a      	ldr	r2, [r3, #0]
 800a9c2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a9c6:	430b      	orrs	r3, r1
 800a9c8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a9ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	695b      	ldr	r3, [r3, #20]
 800a9d2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800a9d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a9da:	6999      	ldr	r1, [r3, #24]
 800a9dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a9e0:	681a      	ldr	r2, [r3, #0]
 800a9e2:	ea40 0301 	orr.w	r3, r0, r1
 800a9e6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a9e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a9ec:	681a      	ldr	r2, [r3, #0]
 800a9ee:	4b8f      	ldr	r3, [pc, #572]	; (800ac2c <UART_SetConfig+0x2cc>)
 800a9f0:	429a      	cmp	r2, r3
 800a9f2:	d005      	beq.n	800aa00 <UART_SetConfig+0xa0>
 800a9f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a9f8:	681a      	ldr	r2, [r3, #0]
 800a9fa:	4b8d      	ldr	r3, [pc, #564]	; (800ac30 <UART_SetConfig+0x2d0>)
 800a9fc:	429a      	cmp	r2, r3
 800a9fe:	d104      	bne.n	800aa0a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800aa00:	f7fe f920 	bl	8008c44 <HAL_RCC_GetPCLK2Freq>
 800aa04:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800aa08:	e003      	b.n	800aa12 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800aa0a:	f7fe f907 	bl	8008c1c <HAL_RCC_GetPCLK1Freq>
 800aa0e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800aa12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aa16:	69db      	ldr	r3, [r3, #28]
 800aa18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aa1c:	f040 810c 	bne.w	800ac38 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800aa20:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800aa24:	2200      	movs	r2, #0
 800aa26:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800aa2a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800aa2e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800aa32:	4622      	mov	r2, r4
 800aa34:	462b      	mov	r3, r5
 800aa36:	1891      	adds	r1, r2, r2
 800aa38:	65b9      	str	r1, [r7, #88]	; 0x58
 800aa3a:	415b      	adcs	r3, r3
 800aa3c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800aa3e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800aa42:	4621      	mov	r1, r4
 800aa44:	eb12 0801 	adds.w	r8, r2, r1
 800aa48:	4629      	mov	r1, r5
 800aa4a:	eb43 0901 	adc.w	r9, r3, r1
 800aa4e:	f04f 0200 	mov.w	r2, #0
 800aa52:	f04f 0300 	mov.w	r3, #0
 800aa56:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800aa5a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800aa5e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800aa62:	4690      	mov	r8, r2
 800aa64:	4699      	mov	r9, r3
 800aa66:	4623      	mov	r3, r4
 800aa68:	eb18 0303 	adds.w	r3, r8, r3
 800aa6c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800aa70:	462b      	mov	r3, r5
 800aa72:	eb49 0303 	adc.w	r3, r9, r3
 800aa76:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800aa7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aa7e:	685b      	ldr	r3, [r3, #4]
 800aa80:	2200      	movs	r2, #0
 800aa82:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800aa86:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800aa8a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800aa8e:	460b      	mov	r3, r1
 800aa90:	18db      	adds	r3, r3, r3
 800aa92:	653b      	str	r3, [r7, #80]	; 0x50
 800aa94:	4613      	mov	r3, r2
 800aa96:	eb42 0303 	adc.w	r3, r2, r3
 800aa9a:	657b      	str	r3, [r7, #84]	; 0x54
 800aa9c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800aaa0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800aaa4:	f7f6 f910 	bl	8000cc8 <__aeabi_uldivmod>
 800aaa8:	4602      	mov	r2, r0
 800aaaa:	460b      	mov	r3, r1
 800aaac:	4b61      	ldr	r3, [pc, #388]	; (800ac34 <UART_SetConfig+0x2d4>)
 800aaae:	fba3 2302 	umull	r2, r3, r3, r2
 800aab2:	095b      	lsrs	r3, r3, #5
 800aab4:	011c      	lsls	r4, r3, #4
 800aab6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800aaba:	2200      	movs	r2, #0
 800aabc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800aac0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800aac4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800aac8:	4642      	mov	r2, r8
 800aaca:	464b      	mov	r3, r9
 800aacc:	1891      	adds	r1, r2, r2
 800aace:	64b9      	str	r1, [r7, #72]	; 0x48
 800aad0:	415b      	adcs	r3, r3
 800aad2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800aad4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800aad8:	4641      	mov	r1, r8
 800aada:	eb12 0a01 	adds.w	sl, r2, r1
 800aade:	4649      	mov	r1, r9
 800aae0:	eb43 0b01 	adc.w	fp, r3, r1
 800aae4:	f04f 0200 	mov.w	r2, #0
 800aae8:	f04f 0300 	mov.w	r3, #0
 800aaec:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800aaf0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800aaf4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800aaf8:	4692      	mov	sl, r2
 800aafa:	469b      	mov	fp, r3
 800aafc:	4643      	mov	r3, r8
 800aafe:	eb1a 0303 	adds.w	r3, sl, r3
 800ab02:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ab06:	464b      	mov	r3, r9
 800ab08:	eb4b 0303 	adc.w	r3, fp, r3
 800ab0c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800ab10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ab14:	685b      	ldr	r3, [r3, #4]
 800ab16:	2200      	movs	r2, #0
 800ab18:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ab1c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800ab20:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800ab24:	460b      	mov	r3, r1
 800ab26:	18db      	adds	r3, r3, r3
 800ab28:	643b      	str	r3, [r7, #64]	; 0x40
 800ab2a:	4613      	mov	r3, r2
 800ab2c:	eb42 0303 	adc.w	r3, r2, r3
 800ab30:	647b      	str	r3, [r7, #68]	; 0x44
 800ab32:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800ab36:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800ab3a:	f7f6 f8c5 	bl	8000cc8 <__aeabi_uldivmod>
 800ab3e:	4602      	mov	r2, r0
 800ab40:	460b      	mov	r3, r1
 800ab42:	4611      	mov	r1, r2
 800ab44:	4b3b      	ldr	r3, [pc, #236]	; (800ac34 <UART_SetConfig+0x2d4>)
 800ab46:	fba3 2301 	umull	r2, r3, r3, r1
 800ab4a:	095b      	lsrs	r3, r3, #5
 800ab4c:	2264      	movs	r2, #100	; 0x64
 800ab4e:	fb02 f303 	mul.w	r3, r2, r3
 800ab52:	1acb      	subs	r3, r1, r3
 800ab54:	00db      	lsls	r3, r3, #3
 800ab56:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800ab5a:	4b36      	ldr	r3, [pc, #216]	; (800ac34 <UART_SetConfig+0x2d4>)
 800ab5c:	fba3 2302 	umull	r2, r3, r3, r2
 800ab60:	095b      	lsrs	r3, r3, #5
 800ab62:	005b      	lsls	r3, r3, #1
 800ab64:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800ab68:	441c      	add	r4, r3
 800ab6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ab6e:	2200      	movs	r2, #0
 800ab70:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ab74:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800ab78:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800ab7c:	4642      	mov	r2, r8
 800ab7e:	464b      	mov	r3, r9
 800ab80:	1891      	adds	r1, r2, r2
 800ab82:	63b9      	str	r1, [r7, #56]	; 0x38
 800ab84:	415b      	adcs	r3, r3
 800ab86:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ab88:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800ab8c:	4641      	mov	r1, r8
 800ab8e:	1851      	adds	r1, r2, r1
 800ab90:	6339      	str	r1, [r7, #48]	; 0x30
 800ab92:	4649      	mov	r1, r9
 800ab94:	414b      	adcs	r3, r1
 800ab96:	637b      	str	r3, [r7, #52]	; 0x34
 800ab98:	f04f 0200 	mov.w	r2, #0
 800ab9c:	f04f 0300 	mov.w	r3, #0
 800aba0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800aba4:	4659      	mov	r1, fp
 800aba6:	00cb      	lsls	r3, r1, #3
 800aba8:	4651      	mov	r1, sl
 800abaa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800abae:	4651      	mov	r1, sl
 800abb0:	00ca      	lsls	r2, r1, #3
 800abb2:	4610      	mov	r0, r2
 800abb4:	4619      	mov	r1, r3
 800abb6:	4603      	mov	r3, r0
 800abb8:	4642      	mov	r2, r8
 800abba:	189b      	adds	r3, r3, r2
 800abbc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800abc0:	464b      	mov	r3, r9
 800abc2:	460a      	mov	r2, r1
 800abc4:	eb42 0303 	adc.w	r3, r2, r3
 800abc8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800abcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800abd0:	685b      	ldr	r3, [r3, #4]
 800abd2:	2200      	movs	r2, #0
 800abd4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800abd8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800abdc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800abe0:	460b      	mov	r3, r1
 800abe2:	18db      	adds	r3, r3, r3
 800abe4:	62bb      	str	r3, [r7, #40]	; 0x28
 800abe6:	4613      	mov	r3, r2
 800abe8:	eb42 0303 	adc.w	r3, r2, r3
 800abec:	62fb      	str	r3, [r7, #44]	; 0x2c
 800abee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800abf2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800abf6:	f7f6 f867 	bl	8000cc8 <__aeabi_uldivmod>
 800abfa:	4602      	mov	r2, r0
 800abfc:	460b      	mov	r3, r1
 800abfe:	4b0d      	ldr	r3, [pc, #52]	; (800ac34 <UART_SetConfig+0x2d4>)
 800ac00:	fba3 1302 	umull	r1, r3, r3, r2
 800ac04:	095b      	lsrs	r3, r3, #5
 800ac06:	2164      	movs	r1, #100	; 0x64
 800ac08:	fb01 f303 	mul.w	r3, r1, r3
 800ac0c:	1ad3      	subs	r3, r2, r3
 800ac0e:	00db      	lsls	r3, r3, #3
 800ac10:	3332      	adds	r3, #50	; 0x32
 800ac12:	4a08      	ldr	r2, [pc, #32]	; (800ac34 <UART_SetConfig+0x2d4>)
 800ac14:	fba2 2303 	umull	r2, r3, r2, r3
 800ac18:	095b      	lsrs	r3, r3, #5
 800ac1a:	f003 0207 	and.w	r2, r3, #7
 800ac1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	4422      	add	r2, r4
 800ac26:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800ac28:	e105      	b.n	800ae36 <UART_SetConfig+0x4d6>
 800ac2a:	bf00      	nop
 800ac2c:	40011000 	.word	0x40011000
 800ac30:	40011400 	.word	0x40011400
 800ac34:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800ac38:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ac3c:	2200      	movs	r2, #0
 800ac3e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800ac42:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800ac46:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800ac4a:	4642      	mov	r2, r8
 800ac4c:	464b      	mov	r3, r9
 800ac4e:	1891      	adds	r1, r2, r2
 800ac50:	6239      	str	r1, [r7, #32]
 800ac52:	415b      	adcs	r3, r3
 800ac54:	627b      	str	r3, [r7, #36]	; 0x24
 800ac56:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800ac5a:	4641      	mov	r1, r8
 800ac5c:	1854      	adds	r4, r2, r1
 800ac5e:	4649      	mov	r1, r9
 800ac60:	eb43 0501 	adc.w	r5, r3, r1
 800ac64:	f04f 0200 	mov.w	r2, #0
 800ac68:	f04f 0300 	mov.w	r3, #0
 800ac6c:	00eb      	lsls	r3, r5, #3
 800ac6e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800ac72:	00e2      	lsls	r2, r4, #3
 800ac74:	4614      	mov	r4, r2
 800ac76:	461d      	mov	r5, r3
 800ac78:	4643      	mov	r3, r8
 800ac7a:	18e3      	adds	r3, r4, r3
 800ac7c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800ac80:	464b      	mov	r3, r9
 800ac82:	eb45 0303 	adc.w	r3, r5, r3
 800ac86:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800ac8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ac8e:	685b      	ldr	r3, [r3, #4]
 800ac90:	2200      	movs	r2, #0
 800ac92:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800ac96:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800ac9a:	f04f 0200 	mov.w	r2, #0
 800ac9e:	f04f 0300 	mov.w	r3, #0
 800aca2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800aca6:	4629      	mov	r1, r5
 800aca8:	008b      	lsls	r3, r1, #2
 800acaa:	4621      	mov	r1, r4
 800acac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800acb0:	4621      	mov	r1, r4
 800acb2:	008a      	lsls	r2, r1, #2
 800acb4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800acb8:	f7f6 f806 	bl	8000cc8 <__aeabi_uldivmod>
 800acbc:	4602      	mov	r2, r0
 800acbe:	460b      	mov	r3, r1
 800acc0:	4b60      	ldr	r3, [pc, #384]	; (800ae44 <UART_SetConfig+0x4e4>)
 800acc2:	fba3 2302 	umull	r2, r3, r3, r2
 800acc6:	095b      	lsrs	r3, r3, #5
 800acc8:	011c      	lsls	r4, r3, #4
 800acca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800acce:	2200      	movs	r2, #0
 800acd0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800acd4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800acd8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800acdc:	4642      	mov	r2, r8
 800acde:	464b      	mov	r3, r9
 800ace0:	1891      	adds	r1, r2, r2
 800ace2:	61b9      	str	r1, [r7, #24]
 800ace4:	415b      	adcs	r3, r3
 800ace6:	61fb      	str	r3, [r7, #28]
 800ace8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800acec:	4641      	mov	r1, r8
 800acee:	1851      	adds	r1, r2, r1
 800acf0:	6139      	str	r1, [r7, #16]
 800acf2:	4649      	mov	r1, r9
 800acf4:	414b      	adcs	r3, r1
 800acf6:	617b      	str	r3, [r7, #20]
 800acf8:	f04f 0200 	mov.w	r2, #0
 800acfc:	f04f 0300 	mov.w	r3, #0
 800ad00:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800ad04:	4659      	mov	r1, fp
 800ad06:	00cb      	lsls	r3, r1, #3
 800ad08:	4651      	mov	r1, sl
 800ad0a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ad0e:	4651      	mov	r1, sl
 800ad10:	00ca      	lsls	r2, r1, #3
 800ad12:	4610      	mov	r0, r2
 800ad14:	4619      	mov	r1, r3
 800ad16:	4603      	mov	r3, r0
 800ad18:	4642      	mov	r2, r8
 800ad1a:	189b      	adds	r3, r3, r2
 800ad1c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ad20:	464b      	mov	r3, r9
 800ad22:	460a      	mov	r2, r1
 800ad24:	eb42 0303 	adc.w	r3, r2, r3
 800ad28:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ad2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ad30:	685b      	ldr	r3, [r3, #4]
 800ad32:	2200      	movs	r2, #0
 800ad34:	67bb      	str	r3, [r7, #120]	; 0x78
 800ad36:	67fa      	str	r2, [r7, #124]	; 0x7c
 800ad38:	f04f 0200 	mov.w	r2, #0
 800ad3c:	f04f 0300 	mov.w	r3, #0
 800ad40:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800ad44:	4649      	mov	r1, r9
 800ad46:	008b      	lsls	r3, r1, #2
 800ad48:	4641      	mov	r1, r8
 800ad4a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ad4e:	4641      	mov	r1, r8
 800ad50:	008a      	lsls	r2, r1, #2
 800ad52:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800ad56:	f7f5 ffb7 	bl	8000cc8 <__aeabi_uldivmod>
 800ad5a:	4602      	mov	r2, r0
 800ad5c:	460b      	mov	r3, r1
 800ad5e:	4b39      	ldr	r3, [pc, #228]	; (800ae44 <UART_SetConfig+0x4e4>)
 800ad60:	fba3 1302 	umull	r1, r3, r3, r2
 800ad64:	095b      	lsrs	r3, r3, #5
 800ad66:	2164      	movs	r1, #100	; 0x64
 800ad68:	fb01 f303 	mul.w	r3, r1, r3
 800ad6c:	1ad3      	subs	r3, r2, r3
 800ad6e:	011b      	lsls	r3, r3, #4
 800ad70:	3332      	adds	r3, #50	; 0x32
 800ad72:	4a34      	ldr	r2, [pc, #208]	; (800ae44 <UART_SetConfig+0x4e4>)
 800ad74:	fba2 2303 	umull	r2, r3, r2, r3
 800ad78:	095b      	lsrs	r3, r3, #5
 800ad7a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ad7e:	441c      	add	r4, r3
 800ad80:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ad84:	2200      	movs	r2, #0
 800ad86:	673b      	str	r3, [r7, #112]	; 0x70
 800ad88:	677a      	str	r2, [r7, #116]	; 0x74
 800ad8a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800ad8e:	4642      	mov	r2, r8
 800ad90:	464b      	mov	r3, r9
 800ad92:	1891      	adds	r1, r2, r2
 800ad94:	60b9      	str	r1, [r7, #8]
 800ad96:	415b      	adcs	r3, r3
 800ad98:	60fb      	str	r3, [r7, #12]
 800ad9a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ad9e:	4641      	mov	r1, r8
 800ada0:	1851      	adds	r1, r2, r1
 800ada2:	6039      	str	r1, [r7, #0]
 800ada4:	4649      	mov	r1, r9
 800ada6:	414b      	adcs	r3, r1
 800ada8:	607b      	str	r3, [r7, #4]
 800adaa:	f04f 0200 	mov.w	r2, #0
 800adae:	f04f 0300 	mov.w	r3, #0
 800adb2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800adb6:	4659      	mov	r1, fp
 800adb8:	00cb      	lsls	r3, r1, #3
 800adba:	4651      	mov	r1, sl
 800adbc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800adc0:	4651      	mov	r1, sl
 800adc2:	00ca      	lsls	r2, r1, #3
 800adc4:	4610      	mov	r0, r2
 800adc6:	4619      	mov	r1, r3
 800adc8:	4603      	mov	r3, r0
 800adca:	4642      	mov	r2, r8
 800adcc:	189b      	adds	r3, r3, r2
 800adce:	66bb      	str	r3, [r7, #104]	; 0x68
 800add0:	464b      	mov	r3, r9
 800add2:	460a      	mov	r2, r1
 800add4:	eb42 0303 	adc.w	r3, r2, r3
 800add8:	66fb      	str	r3, [r7, #108]	; 0x6c
 800adda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800adde:	685b      	ldr	r3, [r3, #4]
 800ade0:	2200      	movs	r2, #0
 800ade2:	663b      	str	r3, [r7, #96]	; 0x60
 800ade4:	667a      	str	r2, [r7, #100]	; 0x64
 800ade6:	f04f 0200 	mov.w	r2, #0
 800adea:	f04f 0300 	mov.w	r3, #0
 800adee:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800adf2:	4649      	mov	r1, r9
 800adf4:	008b      	lsls	r3, r1, #2
 800adf6:	4641      	mov	r1, r8
 800adf8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800adfc:	4641      	mov	r1, r8
 800adfe:	008a      	lsls	r2, r1, #2
 800ae00:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800ae04:	f7f5 ff60 	bl	8000cc8 <__aeabi_uldivmod>
 800ae08:	4602      	mov	r2, r0
 800ae0a:	460b      	mov	r3, r1
 800ae0c:	4b0d      	ldr	r3, [pc, #52]	; (800ae44 <UART_SetConfig+0x4e4>)
 800ae0e:	fba3 1302 	umull	r1, r3, r3, r2
 800ae12:	095b      	lsrs	r3, r3, #5
 800ae14:	2164      	movs	r1, #100	; 0x64
 800ae16:	fb01 f303 	mul.w	r3, r1, r3
 800ae1a:	1ad3      	subs	r3, r2, r3
 800ae1c:	011b      	lsls	r3, r3, #4
 800ae1e:	3332      	adds	r3, #50	; 0x32
 800ae20:	4a08      	ldr	r2, [pc, #32]	; (800ae44 <UART_SetConfig+0x4e4>)
 800ae22:	fba2 2303 	umull	r2, r3, r2, r3
 800ae26:	095b      	lsrs	r3, r3, #5
 800ae28:	f003 020f 	and.w	r2, r3, #15
 800ae2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	4422      	add	r2, r4
 800ae34:	609a      	str	r2, [r3, #8]
}
 800ae36:	bf00      	nop
 800ae38:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800ae3c:	46bd      	mov	sp, r7
 800ae3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ae42:	bf00      	nop
 800ae44:	51eb851f 	.word	0x51eb851f

0800ae48 <__errno>:
 800ae48:	4b01      	ldr	r3, [pc, #4]	; (800ae50 <__errno+0x8>)
 800ae4a:	6818      	ldr	r0, [r3, #0]
 800ae4c:	4770      	bx	lr
 800ae4e:	bf00      	nop
 800ae50:	20000064 	.word	0x20000064

0800ae54 <__libc_init_array>:
 800ae54:	b570      	push	{r4, r5, r6, lr}
 800ae56:	4d0d      	ldr	r5, [pc, #52]	; (800ae8c <__libc_init_array+0x38>)
 800ae58:	4c0d      	ldr	r4, [pc, #52]	; (800ae90 <__libc_init_array+0x3c>)
 800ae5a:	1b64      	subs	r4, r4, r5
 800ae5c:	10a4      	asrs	r4, r4, #2
 800ae5e:	2600      	movs	r6, #0
 800ae60:	42a6      	cmp	r6, r4
 800ae62:	d109      	bne.n	800ae78 <__libc_init_array+0x24>
 800ae64:	4d0b      	ldr	r5, [pc, #44]	; (800ae94 <__libc_init_array+0x40>)
 800ae66:	4c0c      	ldr	r4, [pc, #48]	; (800ae98 <__libc_init_array+0x44>)
 800ae68:	f004 fd98 	bl	800f99c <_init>
 800ae6c:	1b64      	subs	r4, r4, r5
 800ae6e:	10a4      	asrs	r4, r4, #2
 800ae70:	2600      	movs	r6, #0
 800ae72:	42a6      	cmp	r6, r4
 800ae74:	d105      	bne.n	800ae82 <__libc_init_array+0x2e>
 800ae76:	bd70      	pop	{r4, r5, r6, pc}
 800ae78:	f855 3b04 	ldr.w	r3, [r5], #4
 800ae7c:	4798      	blx	r3
 800ae7e:	3601      	adds	r6, #1
 800ae80:	e7ee      	b.n	800ae60 <__libc_init_array+0xc>
 800ae82:	f855 3b04 	ldr.w	r3, [r5], #4
 800ae86:	4798      	blx	r3
 800ae88:	3601      	adds	r6, #1
 800ae8a:	e7f2      	b.n	800ae72 <__libc_init_array+0x1e>
 800ae8c:	08010140 	.word	0x08010140
 800ae90:	08010140 	.word	0x08010140
 800ae94:	08010140 	.word	0x08010140
 800ae98:	08010144 	.word	0x08010144

0800ae9c <memcpy>:
 800ae9c:	440a      	add	r2, r1
 800ae9e:	4291      	cmp	r1, r2
 800aea0:	f100 33ff 	add.w	r3, r0, #4294967295
 800aea4:	d100      	bne.n	800aea8 <memcpy+0xc>
 800aea6:	4770      	bx	lr
 800aea8:	b510      	push	{r4, lr}
 800aeaa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aeae:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aeb2:	4291      	cmp	r1, r2
 800aeb4:	d1f9      	bne.n	800aeaa <memcpy+0xe>
 800aeb6:	bd10      	pop	{r4, pc}

0800aeb8 <memset>:
 800aeb8:	4402      	add	r2, r0
 800aeba:	4603      	mov	r3, r0
 800aebc:	4293      	cmp	r3, r2
 800aebe:	d100      	bne.n	800aec2 <memset+0xa>
 800aec0:	4770      	bx	lr
 800aec2:	f803 1b01 	strb.w	r1, [r3], #1
 800aec6:	e7f9      	b.n	800aebc <memset+0x4>

0800aec8 <_scanf_float>:
 800aec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aecc:	b087      	sub	sp, #28
 800aece:	4617      	mov	r7, r2
 800aed0:	9303      	str	r3, [sp, #12]
 800aed2:	688b      	ldr	r3, [r1, #8]
 800aed4:	1e5a      	subs	r2, r3, #1
 800aed6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800aeda:	bf83      	ittte	hi
 800aedc:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800aee0:	195b      	addhi	r3, r3, r5
 800aee2:	9302      	strhi	r3, [sp, #8]
 800aee4:	2300      	movls	r3, #0
 800aee6:	bf86      	itte	hi
 800aee8:	f240 135d 	movwhi	r3, #349	; 0x15d
 800aeec:	608b      	strhi	r3, [r1, #8]
 800aeee:	9302      	strls	r3, [sp, #8]
 800aef0:	680b      	ldr	r3, [r1, #0]
 800aef2:	468b      	mov	fp, r1
 800aef4:	2500      	movs	r5, #0
 800aef6:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800aefa:	f84b 3b1c 	str.w	r3, [fp], #28
 800aefe:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800af02:	4680      	mov	r8, r0
 800af04:	460c      	mov	r4, r1
 800af06:	465e      	mov	r6, fp
 800af08:	46aa      	mov	sl, r5
 800af0a:	46a9      	mov	r9, r5
 800af0c:	9501      	str	r5, [sp, #4]
 800af0e:	68a2      	ldr	r2, [r4, #8]
 800af10:	b152      	cbz	r2, 800af28 <_scanf_float+0x60>
 800af12:	683b      	ldr	r3, [r7, #0]
 800af14:	781b      	ldrb	r3, [r3, #0]
 800af16:	2b4e      	cmp	r3, #78	; 0x4e
 800af18:	d864      	bhi.n	800afe4 <_scanf_float+0x11c>
 800af1a:	2b40      	cmp	r3, #64	; 0x40
 800af1c:	d83c      	bhi.n	800af98 <_scanf_float+0xd0>
 800af1e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800af22:	b2c8      	uxtb	r0, r1
 800af24:	280e      	cmp	r0, #14
 800af26:	d93a      	bls.n	800af9e <_scanf_float+0xd6>
 800af28:	f1b9 0f00 	cmp.w	r9, #0
 800af2c:	d003      	beq.n	800af36 <_scanf_float+0x6e>
 800af2e:	6823      	ldr	r3, [r4, #0]
 800af30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800af34:	6023      	str	r3, [r4, #0]
 800af36:	f10a 3aff 	add.w	sl, sl, #4294967295
 800af3a:	f1ba 0f01 	cmp.w	sl, #1
 800af3e:	f200 8113 	bhi.w	800b168 <_scanf_float+0x2a0>
 800af42:	455e      	cmp	r6, fp
 800af44:	f200 8105 	bhi.w	800b152 <_scanf_float+0x28a>
 800af48:	2501      	movs	r5, #1
 800af4a:	4628      	mov	r0, r5
 800af4c:	b007      	add	sp, #28
 800af4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af52:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800af56:	2a0d      	cmp	r2, #13
 800af58:	d8e6      	bhi.n	800af28 <_scanf_float+0x60>
 800af5a:	a101      	add	r1, pc, #4	; (adr r1, 800af60 <_scanf_float+0x98>)
 800af5c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800af60:	0800b09f 	.word	0x0800b09f
 800af64:	0800af29 	.word	0x0800af29
 800af68:	0800af29 	.word	0x0800af29
 800af6c:	0800af29 	.word	0x0800af29
 800af70:	0800b0ff 	.word	0x0800b0ff
 800af74:	0800b0d7 	.word	0x0800b0d7
 800af78:	0800af29 	.word	0x0800af29
 800af7c:	0800af29 	.word	0x0800af29
 800af80:	0800b0ad 	.word	0x0800b0ad
 800af84:	0800af29 	.word	0x0800af29
 800af88:	0800af29 	.word	0x0800af29
 800af8c:	0800af29 	.word	0x0800af29
 800af90:	0800af29 	.word	0x0800af29
 800af94:	0800b065 	.word	0x0800b065
 800af98:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800af9c:	e7db      	b.n	800af56 <_scanf_float+0x8e>
 800af9e:	290e      	cmp	r1, #14
 800afa0:	d8c2      	bhi.n	800af28 <_scanf_float+0x60>
 800afa2:	a001      	add	r0, pc, #4	; (adr r0, 800afa8 <_scanf_float+0xe0>)
 800afa4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800afa8:	0800b057 	.word	0x0800b057
 800afac:	0800af29 	.word	0x0800af29
 800afb0:	0800b057 	.word	0x0800b057
 800afb4:	0800b0eb 	.word	0x0800b0eb
 800afb8:	0800af29 	.word	0x0800af29
 800afbc:	0800b005 	.word	0x0800b005
 800afc0:	0800b041 	.word	0x0800b041
 800afc4:	0800b041 	.word	0x0800b041
 800afc8:	0800b041 	.word	0x0800b041
 800afcc:	0800b041 	.word	0x0800b041
 800afd0:	0800b041 	.word	0x0800b041
 800afd4:	0800b041 	.word	0x0800b041
 800afd8:	0800b041 	.word	0x0800b041
 800afdc:	0800b041 	.word	0x0800b041
 800afe0:	0800b041 	.word	0x0800b041
 800afe4:	2b6e      	cmp	r3, #110	; 0x6e
 800afe6:	d809      	bhi.n	800affc <_scanf_float+0x134>
 800afe8:	2b60      	cmp	r3, #96	; 0x60
 800afea:	d8b2      	bhi.n	800af52 <_scanf_float+0x8a>
 800afec:	2b54      	cmp	r3, #84	; 0x54
 800afee:	d077      	beq.n	800b0e0 <_scanf_float+0x218>
 800aff0:	2b59      	cmp	r3, #89	; 0x59
 800aff2:	d199      	bne.n	800af28 <_scanf_float+0x60>
 800aff4:	2d07      	cmp	r5, #7
 800aff6:	d197      	bne.n	800af28 <_scanf_float+0x60>
 800aff8:	2508      	movs	r5, #8
 800affa:	e029      	b.n	800b050 <_scanf_float+0x188>
 800affc:	2b74      	cmp	r3, #116	; 0x74
 800affe:	d06f      	beq.n	800b0e0 <_scanf_float+0x218>
 800b000:	2b79      	cmp	r3, #121	; 0x79
 800b002:	e7f6      	b.n	800aff2 <_scanf_float+0x12a>
 800b004:	6821      	ldr	r1, [r4, #0]
 800b006:	05c8      	lsls	r0, r1, #23
 800b008:	d51a      	bpl.n	800b040 <_scanf_float+0x178>
 800b00a:	9b02      	ldr	r3, [sp, #8]
 800b00c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800b010:	6021      	str	r1, [r4, #0]
 800b012:	f109 0901 	add.w	r9, r9, #1
 800b016:	b11b      	cbz	r3, 800b020 <_scanf_float+0x158>
 800b018:	3b01      	subs	r3, #1
 800b01a:	3201      	adds	r2, #1
 800b01c:	9302      	str	r3, [sp, #8]
 800b01e:	60a2      	str	r2, [r4, #8]
 800b020:	68a3      	ldr	r3, [r4, #8]
 800b022:	3b01      	subs	r3, #1
 800b024:	60a3      	str	r3, [r4, #8]
 800b026:	6923      	ldr	r3, [r4, #16]
 800b028:	3301      	adds	r3, #1
 800b02a:	6123      	str	r3, [r4, #16]
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	3b01      	subs	r3, #1
 800b030:	2b00      	cmp	r3, #0
 800b032:	607b      	str	r3, [r7, #4]
 800b034:	f340 8084 	ble.w	800b140 <_scanf_float+0x278>
 800b038:	683b      	ldr	r3, [r7, #0]
 800b03a:	3301      	adds	r3, #1
 800b03c:	603b      	str	r3, [r7, #0]
 800b03e:	e766      	b.n	800af0e <_scanf_float+0x46>
 800b040:	eb1a 0f05 	cmn.w	sl, r5
 800b044:	f47f af70 	bne.w	800af28 <_scanf_float+0x60>
 800b048:	6822      	ldr	r2, [r4, #0]
 800b04a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800b04e:	6022      	str	r2, [r4, #0]
 800b050:	f806 3b01 	strb.w	r3, [r6], #1
 800b054:	e7e4      	b.n	800b020 <_scanf_float+0x158>
 800b056:	6822      	ldr	r2, [r4, #0]
 800b058:	0610      	lsls	r0, r2, #24
 800b05a:	f57f af65 	bpl.w	800af28 <_scanf_float+0x60>
 800b05e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b062:	e7f4      	b.n	800b04e <_scanf_float+0x186>
 800b064:	f1ba 0f00 	cmp.w	sl, #0
 800b068:	d10e      	bne.n	800b088 <_scanf_float+0x1c0>
 800b06a:	f1b9 0f00 	cmp.w	r9, #0
 800b06e:	d10e      	bne.n	800b08e <_scanf_float+0x1c6>
 800b070:	6822      	ldr	r2, [r4, #0]
 800b072:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800b076:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800b07a:	d108      	bne.n	800b08e <_scanf_float+0x1c6>
 800b07c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800b080:	6022      	str	r2, [r4, #0]
 800b082:	f04f 0a01 	mov.w	sl, #1
 800b086:	e7e3      	b.n	800b050 <_scanf_float+0x188>
 800b088:	f1ba 0f02 	cmp.w	sl, #2
 800b08c:	d055      	beq.n	800b13a <_scanf_float+0x272>
 800b08e:	2d01      	cmp	r5, #1
 800b090:	d002      	beq.n	800b098 <_scanf_float+0x1d0>
 800b092:	2d04      	cmp	r5, #4
 800b094:	f47f af48 	bne.w	800af28 <_scanf_float+0x60>
 800b098:	3501      	adds	r5, #1
 800b09a:	b2ed      	uxtb	r5, r5
 800b09c:	e7d8      	b.n	800b050 <_scanf_float+0x188>
 800b09e:	f1ba 0f01 	cmp.w	sl, #1
 800b0a2:	f47f af41 	bne.w	800af28 <_scanf_float+0x60>
 800b0a6:	f04f 0a02 	mov.w	sl, #2
 800b0aa:	e7d1      	b.n	800b050 <_scanf_float+0x188>
 800b0ac:	b97d      	cbnz	r5, 800b0ce <_scanf_float+0x206>
 800b0ae:	f1b9 0f00 	cmp.w	r9, #0
 800b0b2:	f47f af3c 	bne.w	800af2e <_scanf_float+0x66>
 800b0b6:	6822      	ldr	r2, [r4, #0]
 800b0b8:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800b0bc:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800b0c0:	f47f af39 	bne.w	800af36 <_scanf_float+0x6e>
 800b0c4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800b0c8:	6022      	str	r2, [r4, #0]
 800b0ca:	2501      	movs	r5, #1
 800b0cc:	e7c0      	b.n	800b050 <_scanf_float+0x188>
 800b0ce:	2d03      	cmp	r5, #3
 800b0d0:	d0e2      	beq.n	800b098 <_scanf_float+0x1d0>
 800b0d2:	2d05      	cmp	r5, #5
 800b0d4:	e7de      	b.n	800b094 <_scanf_float+0x1cc>
 800b0d6:	2d02      	cmp	r5, #2
 800b0d8:	f47f af26 	bne.w	800af28 <_scanf_float+0x60>
 800b0dc:	2503      	movs	r5, #3
 800b0de:	e7b7      	b.n	800b050 <_scanf_float+0x188>
 800b0e0:	2d06      	cmp	r5, #6
 800b0e2:	f47f af21 	bne.w	800af28 <_scanf_float+0x60>
 800b0e6:	2507      	movs	r5, #7
 800b0e8:	e7b2      	b.n	800b050 <_scanf_float+0x188>
 800b0ea:	6822      	ldr	r2, [r4, #0]
 800b0ec:	0591      	lsls	r1, r2, #22
 800b0ee:	f57f af1b 	bpl.w	800af28 <_scanf_float+0x60>
 800b0f2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800b0f6:	6022      	str	r2, [r4, #0]
 800b0f8:	f8cd 9004 	str.w	r9, [sp, #4]
 800b0fc:	e7a8      	b.n	800b050 <_scanf_float+0x188>
 800b0fe:	6822      	ldr	r2, [r4, #0]
 800b100:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800b104:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800b108:	d006      	beq.n	800b118 <_scanf_float+0x250>
 800b10a:	0550      	lsls	r0, r2, #21
 800b10c:	f57f af0c 	bpl.w	800af28 <_scanf_float+0x60>
 800b110:	f1b9 0f00 	cmp.w	r9, #0
 800b114:	f43f af0f 	beq.w	800af36 <_scanf_float+0x6e>
 800b118:	0591      	lsls	r1, r2, #22
 800b11a:	bf58      	it	pl
 800b11c:	9901      	ldrpl	r1, [sp, #4]
 800b11e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800b122:	bf58      	it	pl
 800b124:	eba9 0101 	subpl.w	r1, r9, r1
 800b128:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800b12c:	bf58      	it	pl
 800b12e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800b132:	6022      	str	r2, [r4, #0]
 800b134:	f04f 0900 	mov.w	r9, #0
 800b138:	e78a      	b.n	800b050 <_scanf_float+0x188>
 800b13a:	f04f 0a03 	mov.w	sl, #3
 800b13e:	e787      	b.n	800b050 <_scanf_float+0x188>
 800b140:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b144:	4639      	mov	r1, r7
 800b146:	4640      	mov	r0, r8
 800b148:	4798      	blx	r3
 800b14a:	2800      	cmp	r0, #0
 800b14c:	f43f aedf 	beq.w	800af0e <_scanf_float+0x46>
 800b150:	e6ea      	b.n	800af28 <_scanf_float+0x60>
 800b152:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b156:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b15a:	463a      	mov	r2, r7
 800b15c:	4640      	mov	r0, r8
 800b15e:	4798      	blx	r3
 800b160:	6923      	ldr	r3, [r4, #16]
 800b162:	3b01      	subs	r3, #1
 800b164:	6123      	str	r3, [r4, #16]
 800b166:	e6ec      	b.n	800af42 <_scanf_float+0x7a>
 800b168:	1e6b      	subs	r3, r5, #1
 800b16a:	2b06      	cmp	r3, #6
 800b16c:	d825      	bhi.n	800b1ba <_scanf_float+0x2f2>
 800b16e:	2d02      	cmp	r5, #2
 800b170:	d836      	bhi.n	800b1e0 <_scanf_float+0x318>
 800b172:	455e      	cmp	r6, fp
 800b174:	f67f aee8 	bls.w	800af48 <_scanf_float+0x80>
 800b178:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b17c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b180:	463a      	mov	r2, r7
 800b182:	4640      	mov	r0, r8
 800b184:	4798      	blx	r3
 800b186:	6923      	ldr	r3, [r4, #16]
 800b188:	3b01      	subs	r3, #1
 800b18a:	6123      	str	r3, [r4, #16]
 800b18c:	e7f1      	b.n	800b172 <_scanf_float+0x2aa>
 800b18e:	9802      	ldr	r0, [sp, #8]
 800b190:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b194:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800b198:	9002      	str	r0, [sp, #8]
 800b19a:	463a      	mov	r2, r7
 800b19c:	4640      	mov	r0, r8
 800b19e:	4798      	blx	r3
 800b1a0:	6923      	ldr	r3, [r4, #16]
 800b1a2:	3b01      	subs	r3, #1
 800b1a4:	6123      	str	r3, [r4, #16]
 800b1a6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b1aa:	fa5f fa8a 	uxtb.w	sl, sl
 800b1ae:	f1ba 0f02 	cmp.w	sl, #2
 800b1b2:	d1ec      	bne.n	800b18e <_scanf_float+0x2c6>
 800b1b4:	3d03      	subs	r5, #3
 800b1b6:	b2ed      	uxtb	r5, r5
 800b1b8:	1b76      	subs	r6, r6, r5
 800b1ba:	6823      	ldr	r3, [r4, #0]
 800b1bc:	05da      	lsls	r2, r3, #23
 800b1be:	d52f      	bpl.n	800b220 <_scanf_float+0x358>
 800b1c0:	055b      	lsls	r3, r3, #21
 800b1c2:	d510      	bpl.n	800b1e6 <_scanf_float+0x31e>
 800b1c4:	455e      	cmp	r6, fp
 800b1c6:	f67f aebf 	bls.w	800af48 <_scanf_float+0x80>
 800b1ca:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b1ce:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b1d2:	463a      	mov	r2, r7
 800b1d4:	4640      	mov	r0, r8
 800b1d6:	4798      	blx	r3
 800b1d8:	6923      	ldr	r3, [r4, #16]
 800b1da:	3b01      	subs	r3, #1
 800b1dc:	6123      	str	r3, [r4, #16]
 800b1de:	e7f1      	b.n	800b1c4 <_scanf_float+0x2fc>
 800b1e0:	46aa      	mov	sl, r5
 800b1e2:	9602      	str	r6, [sp, #8]
 800b1e4:	e7df      	b.n	800b1a6 <_scanf_float+0x2de>
 800b1e6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800b1ea:	6923      	ldr	r3, [r4, #16]
 800b1ec:	2965      	cmp	r1, #101	; 0x65
 800b1ee:	f103 33ff 	add.w	r3, r3, #4294967295
 800b1f2:	f106 35ff 	add.w	r5, r6, #4294967295
 800b1f6:	6123      	str	r3, [r4, #16]
 800b1f8:	d00c      	beq.n	800b214 <_scanf_float+0x34c>
 800b1fa:	2945      	cmp	r1, #69	; 0x45
 800b1fc:	d00a      	beq.n	800b214 <_scanf_float+0x34c>
 800b1fe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b202:	463a      	mov	r2, r7
 800b204:	4640      	mov	r0, r8
 800b206:	4798      	blx	r3
 800b208:	6923      	ldr	r3, [r4, #16]
 800b20a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800b20e:	3b01      	subs	r3, #1
 800b210:	1eb5      	subs	r5, r6, #2
 800b212:	6123      	str	r3, [r4, #16]
 800b214:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b218:	463a      	mov	r2, r7
 800b21a:	4640      	mov	r0, r8
 800b21c:	4798      	blx	r3
 800b21e:	462e      	mov	r6, r5
 800b220:	6825      	ldr	r5, [r4, #0]
 800b222:	f015 0510 	ands.w	r5, r5, #16
 800b226:	d159      	bne.n	800b2dc <_scanf_float+0x414>
 800b228:	7035      	strb	r5, [r6, #0]
 800b22a:	6823      	ldr	r3, [r4, #0]
 800b22c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800b230:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b234:	d11b      	bne.n	800b26e <_scanf_float+0x3a6>
 800b236:	9b01      	ldr	r3, [sp, #4]
 800b238:	454b      	cmp	r3, r9
 800b23a:	eba3 0209 	sub.w	r2, r3, r9
 800b23e:	d123      	bne.n	800b288 <_scanf_float+0x3c0>
 800b240:	2200      	movs	r2, #0
 800b242:	4659      	mov	r1, fp
 800b244:	4640      	mov	r0, r8
 800b246:	f000 ff39 	bl	800c0bc <_strtod_r>
 800b24a:	6822      	ldr	r2, [r4, #0]
 800b24c:	9b03      	ldr	r3, [sp, #12]
 800b24e:	f012 0f02 	tst.w	r2, #2
 800b252:	ec57 6b10 	vmov	r6, r7, d0
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	d021      	beq.n	800b29e <_scanf_float+0x3d6>
 800b25a:	9903      	ldr	r1, [sp, #12]
 800b25c:	1d1a      	adds	r2, r3, #4
 800b25e:	600a      	str	r2, [r1, #0]
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	e9c3 6700 	strd	r6, r7, [r3]
 800b266:	68e3      	ldr	r3, [r4, #12]
 800b268:	3301      	adds	r3, #1
 800b26a:	60e3      	str	r3, [r4, #12]
 800b26c:	e66d      	b.n	800af4a <_scanf_float+0x82>
 800b26e:	9b04      	ldr	r3, [sp, #16]
 800b270:	2b00      	cmp	r3, #0
 800b272:	d0e5      	beq.n	800b240 <_scanf_float+0x378>
 800b274:	9905      	ldr	r1, [sp, #20]
 800b276:	230a      	movs	r3, #10
 800b278:	462a      	mov	r2, r5
 800b27a:	3101      	adds	r1, #1
 800b27c:	4640      	mov	r0, r8
 800b27e:	f000 ffa5 	bl	800c1cc <_strtol_r>
 800b282:	9b04      	ldr	r3, [sp, #16]
 800b284:	9e05      	ldr	r6, [sp, #20]
 800b286:	1ac2      	subs	r2, r0, r3
 800b288:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800b28c:	429e      	cmp	r6, r3
 800b28e:	bf28      	it	cs
 800b290:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800b294:	4912      	ldr	r1, [pc, #72]	; (800b2e0 <_scanf_float+0x418>)
 800b296:	4630      	mov	r0, r6
 800b298:	f000 f8ba 	bl	800b410 <siprintf>
 800b29c:	e7d0      	b.n	800b240 <_scanf_float+0x378>
 800b29e:	9903      	ldr	r1, [sp, #12]
 800b2a0:	f012 0f04 	tst.w	r2, #4
 800b2a4:	f103 0204 	add.w	r2, r3, #4
 800b2a8:	600a      	str	r2, [r1, #0]
 800b2aa:	d1d9      	bne.n	800b260 <_scanf_float+0x398>
 800b2ac:	f8d3 8000 	ldr.w	r8, [r3]
 800b2b0:	ee10 2a10 	vmov	r2, s0
 800b2b4:	ee10 0a10 	vmov	r0, s0
 800b2b8:	463b      	mov	r3, r7
 800b2ba:	4639      	mov	r1, r7
 800b2bc:	f7f5 fc56 	bl	8000b6c <__aeabi_dcmpun>
 800b2c0:	b128      	cbz	r0, 800b2ce <_scanf_float+0x406>
 800b2c2:	4808      	ldr	r0, [pc, #32]	; (800b2e4 <_scanf_float+0x41c>)
 800b2c4:	f000 f89e 	bl	800b404 <nanf>
 800b2c8:	ed88 0a00 	vstr	s0, [r8]
 800b2cc:	e7cb      	b.n	800b266 <_scanf_float+0x39e>
 800b2ce:	4630      	mov	r0, r6
 800b2d0:	4639      	mov	r1, r7
 800b2d2:	f7f5 fca9 	bl	8000c28 <__aeabi_d2f>
 800b2d6:	f8c8 0000 	str.w	r0, [r8]
 800b2da:	e7c4      	b.n	800b266 <_scanf_float+0x39e>
 800b2dc:	2500      	movs	r5, #0
 800b2de:	e634      	b.n	800af4a <_scanf_float+0x82>
 800b2e0:	0800fc94 	.word	0x0800fc94
 800b2e4:	080100ca 	.word	0x080100ca

0800b2e8 <iprintf>:
 800b2e8:	b40f      	push	{r0, r1, r2, r3}
 800b2ea:	4b0a      	ldr	r3, [pc, #40]	; (800b314 <iprintf+0x2c>)
 800b2ec:	b513      	push	{r0, r1, r4, lr}
 800b2ee:	681c      	ldr	r4, [r3, #0]
 800b2f0:	b124      	cbz	r4, 800b2fc <iprintf+0x14>
 800b2f2:	69a3      	ldr	r3, [r4, #24]
 800b2f4:	b913      	cbnz	r3, 800b2fc <iprintf+0x14>
 800b2f6:	4620      	mov	r0, r4
 800b2f8:	f001 f944 	bl	800c584 <__sinit>
 800b2fc:	ab05      	add	r3, sp, #20
 800b2fe:	9a04      	ldr	r2, [sp, #16]
 800b300:	68a1      	ldr	r1, [r4, #8]
 800b302:	9301      	str	r3, [sp, #4]
 800b304:	4620      	mov	r0, r4
 800b306:	f002 fd01 	bl	800dd0c <_vfiprintf_r>
 800b30a:	b002      	add	sp, #8
 800b30c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b310:	b004      	add	sp, #16
 800b312:	4770      	bx	lr
 800b314:	20000064 	.word	0x20000064

0800b318 <_puts_r>:
 800b318:	b570      	push	{r4, r5, r6, lr}
 800b31a:	460e      	mov	r6, r1
 800b31c:	4605      	mov	r5, r0
 800b31e:	b118      	cbz	r0, 800b328 <_puts_r+0x10>
 800b320:	6983      	ldr	r3, [r0, #24]
 800b322:	b90b      	cbnz	r3, 800b328 <_puts_r+0x10>
 800b324:	f001 f92e 	bl	800c584 <__sinit>
 800b328:	69ab      	ldr	r3, [r5, #24]
 800b32a:	68ac      	ldr	r4, [r5, #8]
 800b32c:	b913      	cbnz	r3, 800b334 <_puts_r+0x1c>
 800b32e:	4628      	mov	r0, r5
 800b330:	f001 f928 	bl	800c584 <__sinit>
 800b334:	4b2c      	ldr	r3, [pc, #176]	; (800b3e8 <_puts_r+0xd0>)
 800b336:	429c      	cmp	r4, r3
 800b338:	d120      	bne.n	800b37c <_puts_r+0x64>
 800b33a:	686c      	ldr	r4, [r5, #4]
 800b33c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b33e:	07db      	lsls	r3, r3, #31
 800b340:	d405      	bmi.n	800b34e <_puts_r+0x36>
 800b342:	89a3      	ldrh	r3, [r4, #12]
 800b344:	0598      	lsls	r0, r3, #22
 800b346:	d402      	bmi.n	800b34e <_puts_r+0x36>
 800b348:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b34a:	f001 fd28 	bl	800cd9e <__retarget_lock_acquire_recursive>
 800b34e:	89a3      	ldrh	r3, [r4, #12]
 800b350:	0719      	lsls	r1, r3, #28
 800b352:	d51d      	bpl.n	800b390 <_puts_r+0x78>
 800b354:	6923      	ldr	r3, [r4, #16]
 800b356:	b1db      	cbz	r3, 800b390 <_puts_r+0x78>
 800b358:	3e01      	subs	r6, #1
 800b35a:	68a3      	ldr	r3, [r4, #8]
 800b35c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b360:	3b01      	subs	r3, #1
 800b362:	60a3      	str	r3, [r4, #8]
 800b364:	bb39      	cbnz	r1, 800b3b6 <_puts_r+0x9e>
 800b366:	2b00      	cmp	r3, #0
 800b368:	da38      	bge.n	800b3dc <_puts_r+0xc4>
 800b36a:	4622      	mov	r2, r4
 800b36c:	210a      	movs	r1, #10
 800b36e:	4628      	mov	r0, r5
 800b370:	f000 ff2e 	bl	800c1d0 <__swbuf_r>
 800b374:	3001      	adds	r0, #1
 800b376:	d011      	beq.n	800b39c <_puts_r+0x84>
 800b378:	250a      	movs	r5, #10
 800b37a:	e011      	b.n	800b3a0 <_puts_r+0x88>
 800b37c:	4b1b      	ldr	r3, [pc, #108]	; (800b3ec <_puts_r+0xd4>)
 800b37e:	429c      	cmp	r4, r3
 800b380:	d101      	bne.n	800b386 <_puts_r+0x6e>
 800b382:	68ac      	ldr	r4, [r5, #8]
 800b384:	e7da      	b.n	800b33c <_puts_r+0x24>
 800b386:	4b1a      	ldr	r3, [pc, #104]	; (800b3f0 <_puts_r+0xd8>)
 800b388:	429c      	cmp	r4, r3
 800b38a:	bf08      	it	eq
 800b38c:	68ec      	ldreq	r4, [r5, #12]
 800b38e:	e7d5      	b.n	800b33c <_puts_r+0x24>
 800b390:	4621      	mov	r1, r4
 800b392:	4628      	mov	r0, r5
 800b394:	f000 ff6e 	bl	800c274 <__swsetup_r>
 800b398:	2800      	cmp	r0, #0
 800b39a:	d0dd      	beq.n	800b358 <_puts_r+0x40>
 800b39c:	f04f 35ff 	mov.w	r5, #4294967295
 800b3a0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b3a2:	07da      	lsls	r2, r3, #31
 800b3a4:	d405      	bmi.n	800b3b2 <_puts_r+0x9a>
 800b3a6:	89a3      	ldrh	r3, [r4, #12]
 800b3a8:	059b      	lsls	r3, r3, #22
 800b3aa:	d402      	bmi.n	800b3b2 <_puts_r+0x9a>
 800b3ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b3ae:	f001 fcf7 	bl	800cda0 <__retarget_lock_release_recursive>
 800b3b2:	4628      	mov	r0, r5
 800b3b4:	bd70      	pop	{r4, r5, r6, pc}
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	da04      	bge.n	800b3c4 <_puts_r+0xac>
 800b3ba:	69a2      	ldr	r2, [r4, #24]
 800b3bc:	429a      	cmp	r2, r3
 800b3be:	dc06      	bgt.n	800b3ce <_puts_r+0xb6>
 800b3c0:	290a      	cmp	r1, #10
 800b3c2:	d004      	beq.n	800b3ce <_puts_r+0xb6>
 800b3c4:	6823      	ldr	r3, [r4, #0]
 800b3c6:	1c5a      	adds	r2, r3, #1
 800b3c8:	6022      	str	r2, [r4, #0]
 800b3ca:	7019      	strb	r1, [r3, #0]
 800b3cc:	e7c5      	b.n	800b35a <_puts_r+0x42>
 800b3ce:	4622      	mov	r2, r4
 800b3d0:	4628      	mov	r0, r5
 800b3d2:	f000 fefd 	bl	800c1d0 <__swbuf_r>
 800b3d6:	3001      	adds	r0, #1
 800b3d8:	d1bf      	bne.n	800b35a <_puts_r+0x42>
 800b3da:	e7df      	b.n	800b39c <_puts_r+0x84>
 800b3dc:	6823      	ldr	r3, [r4, #0]
 800b3de:	250a      	movs	r5, #10
 800b3e0:	1c5a      	adds	r2, r3, #1
 800b3e2:	6022      	str	r2, [r4, #0]
 800b3e4:	701d      	strb	r5, [r3, #0]
 800b3e6:	e7db      	b.n	800b3a0 <_puts_r+0x88>
 800b3e8:	0800fe1c 	.word	0x0800fe1c
 800b3ec:	0800fe3c 	.word	0x0800fe3c
 800b3f0:	0800fdfc 	.word	0x0800fdfc

0800b3f4 <puts>:
 800b3f4:	4b02      	ldr	r3, [pc, #8]	; (800b400 <puts+0xc>)
 800b3f6:	4601      	mov	r1, r0
 800b3f8:	6818      	ldr	r0, [r3, #0]
 800b3fa:	f7ff bf8d 	b.w	800b318 <_puts_r>
 800b3fe:	bf00      	nop
 800b400:	20000064 	.word	0x20000064

0800b404 <nanf>:
 800b404:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800b40c <nanf+0x8>
 800b408:	4770      	bx	lr
 800b40a:	bf00      	nop
 800b40c:	7fc00000 	.word	0x7fc00000

0800b410 <siprintf>:
 800b410:	b40e      	push	{r1, r2, r3}
 800b412:	b500      	push	{lr}
 800b414:	b09c      	sub	sp, #112	; 0x70
 800b416:	ab1d      	add	r3, sp, #116	; 0x74
 800b418:	9002      	str	r0, [sp, #8]
 800b41a:	9006      	str	r0, [sp, #24]
 800b41c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b420:	4809      	ldr	r0, [pc, #36]	; (800b448 <siprintf+0x38>)
 800b422:	9107      	str	r1, [sp, #28]
 800b424:	9104      	str	r1, [sp, #16]
 800b426:	4909      	ldr	r1, [pc, #36]	; (800b44c <siprintf+0x3c>)
 800b428:	f853 2b04 	ldr.w	r2, [r3], #4
 800b42c:	9105      	str	r1, [sp, #20]
 800b42e:	6800      	ldr	r0, [r0, #0]
 800b430:	9301      	str	r3, [sp, #4]
 800b432:	a902      	add	r1, sp, #8
 800b434:	f002 fb40 	bl	800dab8 <_svfiprintf_r>
 800b438:	9b02      	ldr	r3, [sp, #8]
 800b43a:	2200      	movs	r2, #0
 800b43c:	701a      	strb	r2, [r3, #0]
 800b43e:	b01c      	add	sp, #112	; 0x70
 800b440:	f85d eb04 	ldr.w	lr, [sp], #4
 800b444:	b003      	add	sp, #12
 800b446:	4770      	bx	lr
 800b448:	20000064 	.word	0x20000064
 800b44c:	ffff0208 	.word	0xffff0208

0800b450 <strncmp>:
 800b450:	b510      	push	{r4, lr}
 800b452:	b17a      	cbz	r2, 800b474 <strncmp+0x24>
 800b454:	4603      	mov	r3, r0
 800b456:	3901      	subs	r1, #1
 800b458:	1884      	adds	r4, r0, r2
 800b45a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b45e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800b462:	4290      	cmp	r0, r2
 800b464:	d101      	bne.n	800b46a <strncmp+0x1a>
 800b466:	42a3      	cmp	r3, r4
 800b468:	d101      	bne.n	800b46e <strncmp+0x1e>
 800b46a:	1a80      	subs	r0, r0, r2
 800b46c:	bd10      	pop	{r4, pc}
 800b46e:	2800      	cmp	r0, #0
 800b470:	d1f3      	bne.n	800b45a <strncmp+0xa>
 800b472:	e7fa      	b.n	800b46a <strncmp+0x1a>
 800b474:	4610      	mov	r0, r2
 800b476:	e7f9      	b.n	800b46c <strncmp+0x1c>

0800b478 <sulp>:
 800b478:	b570      	push	{r4, r5, r6, lr}
 800b47a:	4604      	mov	r4, r0
 800b47c:	460d      	mov	r5, r1
 800b47e:	ec45 4b10 	vmov	d0, r4, r5
 800b482:	4616      	mov	r6, r2
 800b484:	f002 f876 	bl	800d574 <__ulp>
 800b488:	ec51 0b10 	vmov	r0, r1, d0
 800b48c:	b17e      	cbz	r6, 800b4ae <sulp+0x36>
 800b48e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800b492:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b496:	2b00      	cmp	r3, #0
 800b498:	dd09      	ble.n	800b4ae <sulp+0x36>
 800b49a:	051b      	lsls	r3, r3, #20
 800b49c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800b4a0:	2400      	movs	r4, #0
 800b4a2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800b4a6:	4622      	mov	r2, r4
 800b4a8:	462b      	mov	r3, r5
 800b4aa:	f7f5 f8c5 	bl	8000638 <__aeabi_dmul>
 800b4ae:	bd70      	pop	{r4, r5, r6, pc}

0800b4b0 <_strtod_l>:
 800b4b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4b4:	ed2d 8b02 	vpush	{d8}
 800b4b8:	b09d      	sub	sp, #116	; 0x74
 800b4ba:	461f      	mov	r7, r3
 800b4bc:	2300      	movs	r3, #0
 800b4be:	9318      	str	r3, [sp, #96]	; 0x60
 800b4c0:	4ba2      	ldr	r3, [pc, #648]	; (800b74c <_strtod_l+0x29c>)
 800b4c2:	9213      	str	r2, [sp, #76]	; 0x4c
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	9305      	str	r3, [sp, #20]
 800b4c8:	4604      	mov	r4, r0
 800b4ca:	4618      	mov	r0, r3
 800b4cc:	4688      	mov	r8, r1
 800b4ce:	f7f4 fe9f 	bl	8000210 <strlen>
 800b4d2:	f04f 0a00 	mov.w	sl, #0
 800b4d6:	4605      	mov	r5, r0
 800b4d8:	f04f 0b00 	mov.w	fp, #0
 800b4dc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800b4e0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b4e2:	781a      	ldrb	r2, [r3, #0]
 800b4e4:	2a2b      	cmp	r2, #43	; 0x2b
 800b4e6:	d04e      	beq.n	800b586 <_strtod_l+0xd6>
 800b4e8:	d83b      	bhi.n	800b562 <_strtod_l+0xb2>
 800b4ea:	2a0d      	cmp	r2, #13
 800b4ec:	d834      	bhi.n	800b558 <_strtod_l+0xa8>
 800b4ee:	2a08      	cmp	r2, #8
 800b4f0:	d834      	bhi.n	800b55c <_strtod_l+0xac>
 800b4f2:	2a00      	cmp	r2, #0
 800b4f4:	d03e      	beq.n	800b574 <_strtod_l+0xc4>
 800b4f6:	2300      	movs	r3, #0
 800b4f8:	930a      	str	r3, [sp, #40]	; 0x28
 800b4fa:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800b4fc:	7833      	ldrb	r3, [r6, #0]
 800b4fe:	2b30      	cmp	r3, #48	; 0x30
 800b500:	f040 80b0 	bne.w	800b664 <_strtod_l+0x1b4>
 800b504:	7873      	ldrb	r3, [r6, #1]
 800b506:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b50a:	2b58      	cmp	r3, #88	; 0x58
 800b50c:	d168      	bne.n	800b5e0 <_strtod_l+0x130>
 800b50e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b510:	9301      	str	r3, [sp, #4]
 800b512:	ab18      	add	r3, sp, #96	; 0x60
 800b514:	9702      	str	r7, [sp, #8]
 800b516:	9300      	str	r3, [sp, #0]
 800b518:	4a8d      	ldr	r2, [pc, #564]	; (800b750 <_strtod_l+0x2a0>)
 800b51a:	ab19      	add	r3, sp, #100	; 0x64
 800b51c:	a917      	add	r1, sp, #92	; 0x5c
 800b51e:	4620      	mov	r0, r4
 800b520:	f001 f934 	bl	800c78c <__gethex>
 800b524:	f010 0707 	ands.w	r7, r0, #7
 800b528:	4605      	mov	r5, r0
 800b52a:	d005      	beq.n	800b538 <_strtod_l+0x88>
 800b52c:	2f06      	cmp	r7, #6
 800b52e:	d12c      	bne.n	800b58a <_strtod_l+0xda>
 800b530:	3601      	adds	r6, #1
 800b532:	2300      	movs	r3, #0
 800b534:	9617      	str	r6, [sp, #92]	; 0x5c
 800b536:	930a      	str	r3, [sp, #40]	; 0x28
 800b538:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	f040 8590 	bne.w	800c060 <_strtod_l+0xbb0>
 800b540:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b542:	b1eb      	cbz	r3, 800b580 <_strtod_l+0xd0>
 800b544:	4652      	mov	r2, sl
 800b546:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b54a:	ec43 2b10 	vmov	d0, r2, r3
 800b54e:	b01d      	add	sp, #116	; 0x74
 800b550:	ecbd 8b02 	vpop	{d8}
 800b554:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b558:	2a20      	cmp	r2, #32
 800b55a:	d1cc      	bne.n	800b4f6 <_strtod_l+0x46>
 800b55c:	3301      	adds	r3, #1
 800b55e:	9317      	str	r3, [sp, #92]	; 0x5c
 800b560:	e7be      	b.n	800b4e0 <_strtod_l+0x30>
 800b562:	2a2d      	cmp	r2, #45	; 0x2d
 800b564:	d1c7      	bne.n	800b4f6 <_strtod_l+0x46>
 800b566:	2201      	movs	r2, #1
 800b568:	920a      	str	r2, [sp, #40]	; 0x28
 800b56a:	1c5a      	adds	r2, r3, #1
 800b56c:	9217      	str	r2, [sp, #92]	; 0x5c
 800b56e:	785b      	ldrb	r3, [r3, #1]
 800b570:	2b00      	cmp	r3, #0
 800b572:	d1c2      	bne.n	800b4fa <_strtod_l+0x4a>
 800b574:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b576:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	f040 856e 	bne.w	800c05c <_strtod_l+0xbac>
 800b580:	4652      	mov	r2, sl
 800b582:	465b      	mov	r3, fp
 800b584:	e7e1      	b.n	800b54a <_strtod_l+0x9a>
 800b586:	2200      	movs	r2, #0
 800b588:	e7ee      	b.n	800b568 <_strtod_l+0xb8>
 800b58a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b58c:	b13a      	cbz	r2, 800b59e <_strtod_l+0xee>
 800b58e:	2135      	movs	r1, #53	; 0x35
 800b590:	a81a      	add	r0, sp, #104	; 0x68
 800b592:	f002 f8fa 	bl	800d78a <__copybits>
 800b596:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b598:	4620      	mov	r0, r4
 800b59a:	f001 fcb9 	bl	800cf10 <_Bfree>
 800b59e:	3f01      	subs	r7, #1
 800b5a0:	2f04      	cmp	r7, #4
 800b5a2:	d806      	bhi.n	800b5b2 <_strtod_l+0x102>
 800b5a4:	e8df f007 	tbb	[pc, r7]
 800b5a8:	1714030a 	.word	0x1714030a
 800b5ac:	0a          	.byte	0x0a
 800b5ad:	00          	.byte	0x00
 800b5ae:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800b5b2:	0728      	lsls	r0, r5, #28
 800b5b4:	d5c0      	bpl.n	800b538 <_strtod_l+0x88>
 800b5b6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800b5ba:	e7bd      	b.n	800b538 <_strtod_l+0x88>
 800b5bc:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800b5c0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800b5c2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800b5c6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800b5ca:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800b5ce:	e7f0      	b.n	800b5b2 <_strtod_l+0x102>
 800b5d0:	f8df b180 	ldr.w	fp, [pc, #384]	; 800b754 <_strtod_l+0x2a4>
 800b5d4:	e7ed      	b.n	800b5b2 <_strtod_l+0x102>
 800b5d6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800b5da:	f04f 3aff 	mov.w	sl, #4294967295
 800b5de:	e7e8      	b.n	800b5b2 <_strtod_l+0x102>
 800b5e0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b5e2:	1c5a      	adds	r2, r3, #1
 800b5e4:	9217      	str	r2, [sp, #92]	; 0x5c
 800b5e6:	785b      	ldrb	r3, [r3, #1]
 800b5e8:	2b30      	cmp	r3, #48	; 0x30
 800b5ea:	d0f9      	beq.n	800b5e0 <_strtod_l+0x130>
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d0a3      	beq.n	800b538 <_strtod_l+0x88>
 800b5f0:	2301      	movs	r3, #1
 800b5f2:	f04f 0900 	mov.w	r9, #0
 800b5f6:	9304      	str	r3, [sp, #16]
 800b5f8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b5fa:	9308      	str	r3, [sp, #32]
 800b5fc:	f8cd 901c 	str.w	r9, [sp, #28]
 800b600:	464f      	mov	r7, r9
 800b602:	220a      	movs	r2, #10
 800b604:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800b606:	7806      	ldrb	r6, [r0, #0]
 800b608:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800b60c:	b2d9      	uxtb	r1, r3
 800b60e:	2909      	cmp	r1, #9
 800b610:	d92a      	bls.n	800b668 <_strtod_l+0x1b8>
 800b612:	9905      	ldr	r1, [sp, #20]
 800b614:	462a      	mov	r2, r5
 800b616:	f7ff ff1b 	bl	800b450 <strncmp>
 800b61a:	b398      	cbz	r0, 800b684 <_strtod_l+0x1d4>
 800b61c:	2000      	movs	r0, #0
 800b61e:	4632      	mov	r2, r6
 800b620:	463d      	mov	r5, r7
 800b622:	9005      	str	r0, [sp, #20]
 800b624:	4603      	mov	r3, r0
 800b626:	2a65      	cmp	r2, #101	; 0x65
 800b628:	d001      	beq.n	800b62e <_strtod_l+0x17e>
 800b62a:	2a45      	cmp	r2, #69	; 0x45
 800b62c:	d118      	bne.n	800b660 <_strtod_l+0x1b0>
 800b62e:	b91d      	cbnz	r5, 800b638 <_strtod_l+0x188>
 800b630:	9a04      	ldr	r2, [sp, #16]
 800b632:	4302      	orrs	r2, r0
 800b634:	d09e      	beq.n	800b574 <_strtod_l+0xc4>
 800b636:	2500      	movs	r5, #0
 800b638:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800b63c:	f108 0201 	add.w	r2, r8, #1
 800b640:	9217      	str	r2, [sp, #92]	; 0x5c
 800b642:	f898 2001 	ldrb.w	r2, [r8, #1]
 800b646:	2a2b      	cmp	r2, #43	; 0x2b
 800b648:	d075      	beq.n	800b736 <_strtod_l+0x286>
 800b64a:	2a2d      	cmp	r2, #45	; 0x2d
 800b64c:	d07b      	beq.n	800b746 <_strtod_l+0x296>
 800b64e:	f04f 0c00 	mov.w	ip, #0
 800b652:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800b656:	2909      	cmp	r1, #9
 800b658:	f240 8082 	bls.w	800b760 <_strtod_l+0x2b0>
 800b65c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800b660:	2600      	movs	r6, #0
 800b662:	e09d      	b.n	800b7a0 <_strtod_l+0x2f0>
 800b664:	2300      	movs	r3, #0
 800b666:	e7c4      	b.n	800b5f2 <_strtod_l+0x142>
 800b668:	2f08      	cmp	r7, #8
 800b66a:	bfd8      	it	le
 800b66c:	9907      	ldrle	r1, [sp, #28]
 800b66e:	f100 0001 	add.w	r0, r0, #1
 800b672:	bfda      	itte	le
 800b674:	fb02 3301 	mlale	r3, r2, r1, r3
 800b678:	9307      	strle	r3, [sp, #28]
 800b67a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800b67e:	3701      	adds	r7, #1
 800b680:	9017      	str	r0, [sp, #92]	; 0x5c
 800b682:	e7bf      	b.n	800b604 <_strtod_l+0x154>
 800b684:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b686:	195a      	adds	r2, r3, r5
 800b688:	9217      	str	r2, [sp, #92]	; 0x5c
 800b68a:	5d5a      	ldrb	r2, [r3, r5]
 800b68c:	2f00      	cmp	r7, #0
 800b68e:	d037      	beq.n	800b700 <_strtod_l+0x250>
 800b690:	9005      	str	r0, [sp, #20]
 800b692:	463d      	mov	r5, r7
 800b694:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800b698:	2b09      	cmp	r3, #9
 800b69a:	d912      	bls.n	800b6c2 <_strtod_l+0x212>
 800b69c:	2301      	movs	r3, #1
 800b69e:	e7c2      	b.n	800b626 <_strtod_l+0x176>
 800b6a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b6a2:	1c5a      	adds	r2, r3, #1
 800b6a4:	9217      	str	r2, [sp, #92]	; 0x5c
 800b6a6:	785a      	ldrb	r2, [r3, #1]
 800b6a8:	3001      	adds	r0, #1
 800b6aa:	2a30      	cmp	r2, #48	; 0x30
 800b6ac:	d0f8      	beq.n	800b6a0 <_strtod_l+0x1f0>
 800b6ae:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800b6b2:	2b08      	cmp	r3, #8
 800b6b4:	f200 84d9 	bhi.w	800c06a <_strtod_l+0xbba>
 800b6b8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b6ba:	9005      	str	r0, [sp, #20]
 800b6bc:	2000      	movs	r0, #0
 800b6be:	9308      	str	r3, [sp, #32]
 800b6c0:	4605      	mov	r5, r0
 800b6c2:	3a30      	subs	r2, #48	; 0x30
 800b6c4:	f100 0301 	add.w	r3, r0, #1
 800b6c8:	d014      	beq.n	800b6f4 <_strtod_l+0x244>
 800b6ca:	9905      	ldr	r1, [sp, #20]
 800b6cc:	4419      	add	r1, r3
 800b6ce:	9105      	str	r1, [sp, #20]
 800b6d0:	462b      	mov	r3, r5
 800b6d2:	eb00 0e05 	add.w	lr, r0, r5
 800b6d6:	210a      	movs	r1, #10
 800b6d8:	4573      	cmp	r3, lr
 800b6da:	d113      	bne.n	800b704 <_strtod_l+0x254>
 800b6dc:	182b      	adds	r3, r5, r0
 800b6de:	2b08      	cmp	r3, #8
 800b6e0:	f105 0501 	add.w	r5, r5, #1
 800b6e4:	4405      	add	r5, r0
 800b6e6:	dc1c      	bgt.n	800b722 <_strtod_l+0x272>
 800b6e8:	9907      	ldr	r1, [sp, #28]
 800b6ea:	230a      	movs	r3, #10
 800b6ec:	fb03 2301 	mla	r3, r3, r1, r2
 800b6f0:	9307      	str	r3, [sp, #28]
 800b6f2:	2300      	movs	r3, #0
 800b6f4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b6f6:	1c51      	adds	r1, r2, #1
 800b6f8:	9117      	str	r1, [sp, #92]	; 0x5c
 800b6fa:	7852      	ldrb	r2, [r2, #1]
 800b6fc:	4618      	mov	r0, r3
 800b6fe:	e7c9      	b.n	800b694 <_strtod_l+0x1e4>
 800b700:	4638      	mov	r0, r7
 800b702:	e7d2      	b.n	800b6aa <_strtod_l+0x1fa>
 800b704:	2b08      	cmp	r3, #8
 800b706:	dc04      	bgt.n	800b712 <_strtod_l+0x262>
 800b708:	9e07      	ldr	r6, [sp, #28]
 800b70a:	434e      	muls	r6, r1
 800b70c:	9607      	str	r6, [sp, #28]
 800b70e:	3301      	adds	r3, #1
 800b710:	e7e2      	b.n	800b6d8 <_strtod_l+0x228>
 800b712:	f103 0c01 	add.w	ip, r3, #1
 800b716:	f1bc 0f10 	cmp.w	ip, #16
 800b71a:	bfd8      	it	le
 800b71c:	fb01 f909 	mulle.w	r9, r1, r9
 800b720:	e7f5      	b.n	800b70e <_strtod_l+0x25e>
 800b722:	2d10      	cmp	r5, #16
 800b724:	bfdc      	itt	le
 800b726:	230a      	movle	r3, #10
 800b728:	fb03 2909 	mlale	r9, r3, r9, r2
 800b72c:	e7e1      	b.n	800b6f2 <_strtod_l+0x242>
 800b72e:	2300      	movs	r3, #0
 800b730:	9305      	str	r3, [sp, #20]
 800b732:	2301      	movs	r3, #1
 800b734:	e77c      	b.n	800b630 <_strtod_l+0x180>
 800b736:	f04f 0c00 	mov.w	ip, #0
 800b73a:	f108 0202 	add.w	r2, r8, #2
 800b73e:	9217      	str	r2, [sp, #92]	; 0x5c
 800b740:	f898 2002 	ldrb.w	r2, [r8, #2]
 800b744:	e785      	b.n	800b652 <_strtod_l+0x1a2>
 800b746:	f04f 0c01 	mov.w	ip, #1
 800b74a:	e7f6      	b.n	800b73a <_strtod_l+0x28a>
 800b74c:	0800fed4 	.word	0x0800fed4
 800b750:	0800fca8 	.word	0x0800fca8
 800b754:	7ff00000 	.word	0x7ff00000
 800b758:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b75a:	1c51      	adds	r1, r2, #1
 800b75c:	9117      	str	r1, [sp, #92]	; 0x5c
 800b75e:	7852      	ldrb	r2, [r2, #1]
 800b760:	2a30      	cmp	r2, #48	; 0x30
 800b762:	d0f9      	beq.n	800b758 <_strtod_l+0x2a8>
 800b764:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800b768:	2908      	cmp	r1, #8
 800b76a:	f63f af79 	bhi.w	800b660 <_strtod_l+0x1b0>
 800b76e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800b772:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b774:	9206      	str	r2, [sp, #24]
 800b776:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b778:	1c51      	adds	r1, r2, #1
 800b77a:	9117      	str	r1, [sp, #92]	; 0x5c
 800b77c:	7852      	ldrb	r2, [r2, #1]
 800b77e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800b782:	2e09      	cmp	r6, #9
 800b784:	d937      	bls.n	800b7f6 <_strtod_l+0x346>
 800b786:	9e06      	ldr	r6, [sp, #24]
 800b788:	1b89      	subs	r1, r1, r6
 800b78a:	2908      	cmp	r1, #8
 800b78c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800b790:	dc02      	bgt.n	800b798 <_strtod_l+0x2e8>
 800b792:	4576      	cmp	r6, lr
 800b794:	bfa8      	it	ge
 800b796:	4676      	movge	r6, lr
 800b798:	f1bc 0f00 	cmp.w	ip, #0
 800b79c:	d000      	beq.n	800b7a0 <_strtod_l+0x2f0>
 800b79e:	4276      	negs	r6, r6
 800b7a0:	2d00      	cmp	r5, #0
 800b7a2:	d14d      	bne.n	800b840 <_strtod_l+0x390>
 800b7a4:	9904      	ldr	r1, [sp, #16]
 800b7a6:	4301      	orrs	r1, r0
 800b7a8:	f47f aec6 	bne.w	800b538 <_strtod_l+0x88>
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	f47f aee1 	bne.w	800b574 <_strtod_l+0xc4>
 800b7b2:	2a69      	cmp	r2, #105	; 0x69
 800b7b4:	d027      	beq.n	800b806 <_strtod_l+0x356>
 800b7b6:	dc24      	bgt.n	800b802 <_strtod_l+0x352>
 800b7b8:	2a49      	cmp	r2, #73	; 0x49
 800b7ba:	d024      	beq.n	800b806 <_strtod_l+0x356>
 800b7bc:	2a4e      	cmp	r2, #78	; 0x4e
 800b7be:	f47f aed9 	bne.w	800b574 <_strtod_l+0xc4>
 800b7c2:	499f      	ldr	r1, [pc, #636]	; (800ba40 <_strtod_l+0x590>)
 800b7c4:	a817      	add	r0, sp, #92	; 0x5c
 800b7c6:	f001 fa39 	bl	800cc3c <__match>
 800b7ca:	2800      	cmp	r0, #0
 800b7cc:	f43f aed2 	beq.w	800b574 <_strtod_l+0xc4>
 800b7d0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b7d2:	781b      	ldrb	r3, [r3, #0]
 800b7d4:	2b28      	cmp	r3, #40	; 0x28
 800b7d6:	d12d      	bne.n	800b834 <_strtod_l+0x384>
 800b7d8:	499a      	ldr	r1, [pc, #616]	; (800ba44 <_strtod_l+0x594>)
 800b7da:	aa1a      	add	r2, sp, #104	; 0x68
 800b7dc:	a817      	add	r0, sp, #92	; 0x5c
 800b7de:	f001 fa41 	bl	800cc64 <__hexnan>
 800b7e2:	2805      	cmp	r0, #5
 800b7e4:	d126      	bne.n	800b834 <_strtod_l+0x384>
 800b7e6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b7e8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800b7ec:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800b7f0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800b7f4:	e6a0      	b.n	800b538 <_strtod_l+0x88>
 800b7f6:	210a      	movs	r1, #10
 800b7f8:	fb01 2e0e 	mla	lr, r1, lr, r2
 800b7fc:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800b800:	e7b9      	b.n	800b776 <_strtod_l+0x2c6>
 800b802:	2a6e      	cmp	r2, #110	; 0x6e
 800b804:	e7db      	b.n	800b7be <_strtod_l+0x30e>
 800b806:	4990      	ldr	r1, [pc, #576]	; (800ba48 <_strtod_l+0x598>)
 800b808:	a817      	add	r0, sp, #92	; 0x5c
 800b80a:	f001 fa17 	bl	800cc3c <__match>
 800b80e:	2800      	cmp	r0, #0
 800b810:	f43f aeb0 	beq.w	800b574 <_strtod_l+0xc4>
 800b814:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b816:	498d      	ldr	r1, [pc, #564]	; (800ba4c <_strtod_l+0x59c>)
 800b818:	3b01      	subs	r3, #1
 800b81a:	a817      	add	r0, sp, #92	; 0x5c
 800b81c:	9317      	str	r3, [sp, #92]	; 0x5c
 800b81e:	f001 fa0d 	bl	800cc3c <__match>
 800b822:	b910      	cbnz	r0, 800b82a <_strtod_l+0x37a>
 800b824:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b826:	3301      	adds	r3, #1
 800b828:	9317      	str	r3, [sp, #92]	; 0x5c
 800b82a:	f8df b230 	ldr.w	fp, [pc, #560]	; 800ba5c <_strtod_l+0x5ac>
 800b82e:	f04f 0a00 	mov.w	sl, #0
 800b832:	e681      	b.n	800b538 <_strtod_l+0x88>
 800b834:	4886      	ldr	r0, [pc, #536]	; (800ba50 <_strtod_l+0x5a0>)
 800b836:	f002 fd2f 	bl	800e298 <nan>
 800b83a:	ec5b ab10 	vmov	sl, fp, d0
 800b83e:	e67b      	b.n	800b538 <_strtod_l+0x88>
 800b840:	9b05      	ldr	r3, [sp, #20]
 800b842:	9807      	ldr	r0, [sp, #28]
 800b844:	1af3      	subs	r3, r6, r3
 800b846:	2f00      	cmp	r7, #0
 800b848:	bf08      	it	eq
 800b84a:	462f      	moveq	r7, r5
 800b84c:	2d10      	cmp	r5, #16
 800b84e:	9306      	str	r3, [sp, #24]
 800b850:	46a8      	mov	r8, r5
 800b852:	bfa8      	it	ge
 800b854:	f04f 0810 	movge.w	r8, #16
 800b858:	f7f4 fe74 	bl	8000544 <__aeabi_ui2d>
 800b85c:	2d09      	cmp	r5, #9
 800b85e:	4682      	mov	sl, r0
 800b860:	468b      	mov	fp, r1
 800b862:	dd13      	ble.n	800b88c <_strtod_l+0x3dc>
 800b864:	4b7b      	ldr	r3, [pc, #492]	; (800ba54 <_strtod_l+0x5a4>)
 800b866:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800b86a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800b86e:	f7f4 fee3 	bl	8000638 <__aeabi_dmul>
 800b872:	4682      	mov	sl, r0
 800b874:	4648      	mov	r0, r9
 800b876:	468b      	mov	fp, r1
 800b878:	f7f4 fe64 	bl	8000544 <__aeabi_ui2d>
 800b87c:	4602      	mov	r2, r0
 800b87e:	460b      	mov	r3, r1
 800b880:	4650      	mov	r0, sl
 800b882:	4659      	mov	r1, fp
 800b884:	f7f4 fd22 	bl	80002cc <__adddf3>
 800b888:	4682      	mov	sl, r0
 800b88a:	468b      	mov	fp, r1
 800b88c:	2d0f      	cmp	r5, #15
 800b88e:	dc38      	bgt.n	800b902 <_strtod_l+0x452>
 800b890:	9b06      	ldr	r3, [sp, #24]
 800b892:	2b00      	cmp	r3, #0
 800b894:	f43f ae50 	beq.w	800b538 <_strtod_l+0x88>
 800b898:	dd24      	ble.n	800b8e4 <_strtod_l+0x434>
 800b89a:	2b16      	cmp	r3, #22
 800b89c:	dc0b      	bgt.n	800b8b6 <_strtod_l+0x406>
 800b89e:	496d      	ldr	r1, [pc, #436]	; (800ba54 <_strtod_l+0x5a4>)
 800b8a0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b8a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b8a8:	4652      	mov	r2, sl
 800b8aa:	465b      	mov	r3, fp
 800b8ac:	f7f4 fec4 	bl	8000638 <__aeabi_dmul>
 800b8b0:	4682      	mov	sl, r0
 800b8b2:	468b      	mov	fp, r1
 800b8b4:	e640      	b.n	800b538 <_strtod_l+0x88>
 800b8b6:	9a06      	ldr	r2, [sp, #24]
 800b8b8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800b8bc:	4293      	cmp	r3, r2
 800b8be:	db20      	blt.n	800b902 <_strtod_l+0x452>
 800b8c0:	4c64      	ldr	r4, [pc, #400]	; (800ba54 <_strtod_l+0x5a4>)
 800b8c2:	f1c5 050f 	rsb	r5, r5, #15
 800b8c6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800b8ca:	4652      	mov	r2, sl
 800b8cc:	465b      	mov	r3, fp
 800b8ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b8d2:	f7f4 feb1 	bl	8000638 <__aeabi_dmul>
 800b8d6:	9b06      	ldr	r3, [sp, #24]
 800b8d8:	1b5d      	subs	r5, r3, r5
 800b8da:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800b8de:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b8e2:	e7e3      	b.n	800b8ac <_strtod_l+0x3fc>
 800b8e4:	9b06      	ldr	r3, [sp, #24]
 800b8e6:	3316      	adds	r3, #22
 800b8e8:	db0b      	blt.n	800b902 <_strtod_l+0x452>
 800b8ea:	9b05      	ldr	r3, [sp, #20]
 800b8ec:	1b9e      	subs	r6, r3, r6
 800b8ee:	4b59      	ldr	r3, [pc, #356]	; (800ba54 <_strtod_l+0x5a4>)
 800b8f0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800b8f4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b8f8:	4650      	mov	r0, sl
 800b8fa:	4659      	mov	r1, fp
 800b8fc:	f7f4 ffc6 	bl	800088c <__aeabi_ddiv>
 800b900:	e7d6      	b.n	800b8b0 <_strtod_l+0x400>
 800b902:	9b06      	ldr	r3, [sp, #24]
 800b904:	eba5 0808 	sub.w	r8, r5, r8
 800b908:	4498      	add	r8, r3
 800b90a:	f1b8 0f00 	cmp.w	r8, #0
 800b90e:	dd74      	ble.n	800b9fa <_strtod_l+0x54a>
 800b910:	f018 030f 	ands.w	r3, r8, #15
 800b914:	d00a      	beq.n	800b92c <_strtod_l+0x47c>
 800b916:	494f      	ldr	r1, [pc, #316]	; (800ba54 <_strtod_l+0x5a4>)
 800b918:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b91c:	4652      	mov	r2, sl
 800b91e:	465b      	mov	r3, fp
 800b920:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b924:	f7f4 fe88 	bl	8000638 <__aeabi_dmul>
 800b928:	4682      	mov	sl, r0
 800b92a:	468b      	mov	fp, r1
 800b92c:	f038 080f 	bics.w	r8, r8, #15
 800b930:	d04f      	beq.n	800b9d2 <_strtod_l+0x522>
 800b932:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800b936:	dd22      	ble.n	800b97e <_strtod_l+0x4ce>
 800b938:	2500      	movs	r5, #0
 800b93a:	462e      	mov	r6, r5
 800b93c:	9507      	str	r5, [sp, #28]
 800b93e:	9505      	str	r5, [sp, #20]
 800b940:	2322      	movs	r3, #34	; 0x22
 800b942:	f8df b118 	ldr.w	fp, [pc, #280]	; 800ba5c <_strtod_l+0x5ac>
 800b946:	6023      	str	r3, [r4, #0]
 800b948:	f04f 0a00 	mov.w	sl, #0
 800b94c:	9b07      	ldr	r3, [sp, #28]
 800b94e:	2b00      	cmp	r3, #0
 800b950:	f43f adf2 	beq.w	800b538 <_strtod_l+0x88>
 800b954:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b956:	4620      	mov	r0, r4
 800b958:	f001 fada 	bl	800cf10 <_Bfree>
 800b95c:	9905      	ldr	r1, [sp, #20]
 800b95e:	4620      	mov	r0, r4
 800b960:	f001 fad6 	bl	800cf10 <_Bfree>
 800b964:	4631      	mov	r1, r6
 800b966:	4620      	mov	r0, r4
 800b968:	f001 fad2 	bl	800cf10 <_Bfree>
 800b96c:	9907      	ldr	r1, [sp, #28]
 800b96e:	4620      	mov	r0, r4
 800b970:	f001 face 	bl	800cf10 <_Bfree>
 800b974:	4629      	mov	r1, r5
 800b976:	4620      	mov	r0, r4
 800b978:	f001 faca 	bl	800cf10 <_Bfree>
 800b97c:	e5dc      	b.n	800b538 <_strtod_l+0x88>
 800b97e:	4b36      	ldr	r3, [pc, #216]	; (800ba58 <_strtod_l+0x5a8>)
 800b980:	9304      	str	r3, [sp, #16]
 800b982:	2300      	movs	r3, #0
 800b984:	ea4f 1828 	mov.w	r8, r8, asr #4
 800b988:	4650      	mov	r0, sl
 800b98a:	4659      	mov	r1, fp
 800b98c:	4699      	mov	r9, r3
 800b98e:	f1b8 0f01 	cmp.w	r8, #1
 800b992:	dc21      	bgt.n	800b9d8 <_strtod_l+0x528>
 800b994:	b10b      	cbz	r3, 800b99a <_strtod_l+0x4ea>
 800b996:	4682      	mov	sl, r0
 800b998:	468b      	mov	fp, r1
 800b99a:	4b2f      	ldr	r3, [pc, #188]	; (800ba58 <_strtod_l+0x5a8>)
 800b99c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800b9a0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800b9a4:	4652      	mov	r2, sl
 800b9a6:	465b      	mov	r3, fp
 800b9a8:	e9d9 0100 	ldrd	r0, r1, [r9]
 800b9ac:	f7f4 fe44 	bl	8000638 <__aeabi_dmul>
 800b9b0:	4b2a      	ldr	r3, [pc, #168]	; (800ba5c <_strtod_l+0x5ac>)
 800b9b2:	460a      	mov	r2, r1
 800b9b4:	400b      	ands	r3, r1
 800b9b6:	492a      	ldr	r1, [pc, #168]	; (800ba60 <_strtod_l+0x5b0>)
 800b9b8:	428b      	cmp	r3, r1
 800b9ba:	4682      	mov	sl, r0
 800b9bc:	d8bc      	bhi.n	800b938 <_strtod_l+0x488>
 800b9be:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800b9c2:	428b      	cmp	r3, r1
 800b9c4:	bf86      	itte	hi
 800b9c6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800ba64 <_strtod_l+0x5b4>
 800b9ca:	f04f 3aff 	movhi.w	sl, #4294967295
 800b9ce:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800b9d2:	2300      	movs	r3, #0
 800b9d4:	9304      	str	r3, [sp, #16]
 800b9d6:	e084      	b.n	800bae2 <_strtod_l+0x632>
 800b9d8:	f018 0f01 	tst.w	r8, #1
 800b9dc:	d005      	beq.n	800b9ea <_strtod_l+0x53a>
 800b9de:	9b04      	ldr	r3, [sp, #16]
 800b9e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9e4:	f7f4 fe28 	bl	8000638 <__aeabi_dmul>
 800b9e8:	2301      	movs	r3, #1
 800b9ea:	9a04      	ldr	r2, [sp, #16]
 800b9ec:	3208      	adds	r2, #8
 800b9ee:	f109 0901 	add.w	r9, r9, #1
 800b9f2:	ea4f 0868 	mov.w	r8, r8, asr #1
 800b9f6:	9204      	str	r2, [sp, #16]
 800b9f8:	e7c9      	b.n	800b98e <_strtod_l+0x4de>
 800b9fa:	d0ea      	beq.n	800b9d2 <_strtod_l+0x522>
 800b9fc:	f1c8 0800 	rsb	r8, r8, #0
 800ba00:	f018 020f 	ands.w	r2, r8, #15
 800ba04:	d00a      	beq.n	800ba1c <_strtod_l+0x56c>
 800ba06:	4b13      	ldr	r3, [pc, #76]	; (800ba54 <_strtod_l+0x5a4>)
 800ba08:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ba0c:	4650      	mov	r0, sl
 800ba0e:	4659      	mov	r1, fp
 800ba10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba14:	f7f4 ff3a 	bl	800088c <__aeabi_ddiv>
 800ba18:	4682      	mov	sl, r0
 800ba1a:	468b      	mov	fp, r1
 800ba1c:	ea5f 1828 	movs.w	r8, r8, asr #4
 800ba20:	d0d7      	beq.n	800b9d2 <_strtod_l+0x522>
 800ba22:	f1b8 0f1f 	cmp.w	r8, #31
 800ba26:	dd1f      	ble.n	800ba68 <_strtod_l+0x5b8>
 800ba28:	2500      	movs	r5, #0
 800ba2a:	462e      	mov	r6, r5
 800ba2c:	9507      	str	r5, [sp, #28]
 800ba2e:	9505      	str	r5, [sp, #20]
 800ba30:	2322      	movs	r3, #34	; 0x22
 800ba32:	f04f 0a00 	mov.w	sl, #0
 800ba36:	f04f 0b00 	mov.w	fp, #0
 800ba3a:	6023      	str	r3, [r4, #0]
 800ba3c:	e786      	b.n	800b94c <_strtod_l+0x49c>
 800ba3e:	bf00      	nop
 800ba40:	0800fca2 	.word	0x0800fca2
 800ba44:	0800fcbc 	.word	0x0800fcbc
 800ba48:	0800fc99 	.word	0x0800fc99
 800ba4c:	0800fc9c 	.word	0x0800fc9c
 800ba50:	080100ca 	.word	0x080100ca
 800ba54:	0800ff88 	.word	0x0800ff88
 800ba58:	0800ff60 	.word	0x0800ff60
 800ba5c:	7ff00000 	.word	0x7ff00000
 800ba60:	7ca00000 	.word	0x7ca00000
 800ba64:	7fefffff 	.word	0x7fefffff
 800ba68:	f018 0310 	ands.w	r3, r8, #16
 800ba6c:	bf18      	it	ne
 800ba6e:	236a      	movne	r3, #106	; 0x6a
 800ba70:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800be20 <_strtod_l+0x970>
 800ba74:	9304      	str	r3, [sp, #16]
 800ba76:	4650      	mov	r0, sl
 800ba78:	4659      	mov	r1, fp
 800ba7a:	2300      	movs	r3, #0
 800ba7c:	f018 0f01 	tst.w	r8, #1
 800ba80:	d004      	beq.n	800ba8c <_strtod_l+0x5dc>
 800ba82:	e9d9 2300 	ldrd	r2, r3, [r9]
 800ba86:	f7f4 fdd7 	bl	8000638 <__aeabi_dmul>
 800ba8a:	2301      	movs	r3, #1
 800ba8c:	ea5f 0868 	movs.w	r8, r8, asr #1
 800ba90:	f109 0908 	add.w	r9, r9, #8
 800ba94:	d1f2      	bne.n	800ba7c <_strtod_l+0x5cc>
 800ba96:	b10b      	cbz	r3, 800ba9c <_strtod_l+0x5ec>
 800ba98:	4682      	mov	sl, r0
 800ba9a:	468b      	mov	fp, r1
 800ba9c:	9b04      	ldr	r3, [sp, #16]
 800ba9e:	b1c3      	cbz	r3, 800bad2 <_strtod_l+0x622>
 800baa0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800baa4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	4659      	mov	r1, fp
 800baac:	dd11      	ble.n	800bad2 <_strtod_l+0x622>
 800baae:	2b1f      	cmp	r3, #31
 800bab0:	f340 8124 	ble.w	800bcfc <_strtod_l+0x84c>
 800bab4:	2b34      	cmp	r3, #52	; 0x34
 800bab6:	bfde      	ittt	le
 800bab8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800babc:	f04f 33ff 	movle.w	r3, #4294967295
 800bac0:	fa03 f202 	lslle.w	r2, r3, r2
 800bac4:	f04f 0a00 	mov.w	sl, #0
 800bac8:	bfcc      	ite	gt
 800baca:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800bace:	ea02 0b01 	andle.w	fp, r2, r1
 800bad2:	2200      	movs	r2, #0
 800bad4:	2300      	movs	r3, #0
 800bad6:	4650      	mov	r0, sl
 800bad8:	4659      	mov	r1, fp
 800bada:	f7f5 f815 	bl	8000b08 <__aeabi_dcmpeq>
 800bade:	2800      	cmp	r0, #0
 800bae0:	d1a2      	bne.n	800ba28 <_strtod_l+0x578>
 800bae2:	9b07      	ldr	r3, [sp, #28]
 800bae4:	9300      	str	r3, [sp, #0]
 800bae6:	9908      	ldr	r1, [sp, #32]
 800bae8:	462b      	mov	r3, r5
 800baea:	463a      	mov	r2, r7
 800baec:	4620      	mov	r0, r4
 800baee:	f001 fa77 	bl	800cfe0 <__s2b>
 800baf2:	9007      	str	r0, [sp, #28]
 800baf4:	2800      	cmp	r0, #0
 800baf6:	f43f af1f 	beq.w	800b938 <_strtod_l+0x488>
 800bafa:	9b05      	ldr	r3, [sp, #20]
 800bafc:	1b9e      	subs	r6, r3, r6
 800bafe:	9b06      	ldr	r3, [sp, #24]
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	bfb4      	ite	lt
 800bb04:	4633      	movlt	r3, r6
 800bb06:	2300      	movge	r3, #0
 800bb08:	930c      	str	r3, [sp, #48]	; 0x30
 800bb0a:	9b06      	ldr	r3, [sp, #24]
 800bb0c:	2500      	movs	r5, #0
 800bb0e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800bb12:	9312      	str	r3, [sp, #72]	; 0x48
 800bb14:	462e      	mov	r6, r5
 800bb16:	9b07      	ldr	r3, [sp, #28]
 800bb18:	4620      	mov	r0, r4
 800bb1a:	6859      	ldr	r1, [r3, #4]
 800bb1c:	f001 f9b8 	bl	800ce90 <_Balloc>
 800bb20:	9005      	str	r0, [sp, #20]
 800bb22:	2800      	cmp	r0, #0
 800bb24:	f43f af0c 	beq.w	800b940 <_strtod_l+0x490>
 800bb28:	9b07      	ldr	r3, [sp, #28]
 800bb2a:	691a      	ldr	r2, [r3, #16]
 800bb2c:	3202      	adds	r2, #2
 800bb2e:	f103 010c 	add.w	r1, r3, #12
 800bb32:	0092      	lsls	r2, r2, #2
 800bb34:	300c      	adds	r0, #12
 800bb36:	f7ff f9b1 	bl	800ae9c <memcpy>
 800bb3a:	ec4b ab10 	vmov	d0, sl, fp
 800bb3e:	aa1a      	add	r2, sp, #104	; 0x68
 800bb40:	a919      	add	r1, sp, #100	; 0x64
 800bb42:	4620      	mov	r0, r4
 800bb44:	f001 fd92 	bl	800d66c <__d2b>
 800bb48:	ec4b ab18 	vmov	d8, sl, fp
 800bb4c:	9018      	str	r0, [sp, #96]	; 0x60
 800bb4e:	2800      	cmp	r0, #0
 800bb50:	f43f aef6 	beq.w	800b940 <_strtod_l+0x490>
 800bb54:	2101      	movs	r1, #1
 800bb56:	4620      	mov	r0, r4
 800bb58:	f001 fadc 	bl	800d114 <__i2b>
 800bb5c:	4606      	mov	r6, r0
 800bb5e:	2800      	cmp	r0, #0
 800bb60:	f43f aeee 	beq.w	800b940 <_strtod_l+0x490>
 800bb64:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800bb66:	9904      	ldr	r1, [sp, #16]
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	bfab      	itete	ge
 800bb6c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800bb6e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800bb70:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800bb72:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800bb76:	bfac      	ite	ge
 800bb78:	eb03 0902 	addge.w	r9, r3, r2
 800bb7c:	1ad7      	sublt	r7, r2, r3
 800bb7e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800bb80:	eba3 0801 	sub.w	r8, r3, r1
 800bb84:	4490      	add	r8, r2
 800bb86:	4ba1      	ldr	r3, [pc, #644]	; (800be0c <_strtod_l+0x95c>)
 800bb88:	f108 38ff 	add.w	r8, r8, #4294967295
 800bb8c:	4598      	cmp	r8, r3
 800bb8e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800bb92:	f280 80c7 	bge.w	800bd24 <_strtod_l+0x874>
 800bb96:	eba3 0308 	sub.w	r3, r3, r8
 800bb9a:	2b1f      	cmp	r3, #31
 800bb9c:	eba2 0203 	sub.w	r2, r2, r3
 800bba0:	f04f 0101 	mov.w	r1, #1
 800bba4:	f300 80b1 	bgt.w	800bd0a <_strtod_l+0x85a>
 800bba8:	fa01 f303 	lsl.w	r3, r1, r3
 800bbac:	930d      	str	r3, [sp, #52]	; 0x34
 800bbae:	2300      	movs	r3, #0
 800bbb0:	9308      	str	r3, [sp, #32]
 800bbb2:	eb09 0802 	add.w	r8, r9, r2
 800bbb6:	9b04      	ldr	r3, [sp, #16]
 800bbb8:	45c1      	cmp	r9, r8
 800bbba:	4417      	add	r7, r2
 800bbbc:	441f      	add	r7, r3
 800bbbe:	464b      	mov	r3, r9
 800bbc0:	bfa8      	it	ge
 800bbc2:	4643      	movge	r3, r8
 800bbc4:	42bb      	cmp	r3, r7
 800bbc6:	bfa8      	it	ge
 800bbc8:	463b      	movge	r3, r7
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	bfc2      	ittt	gt
 800bbce:	eba8 0803 	subgt.w	r8, r8, r3
 800bbd2:	1aff      	subgt	r7, r7, r3
 800bbd4:	eba9 0903 	subgt.w	r9, r9, r3
 800bbd8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	dd17      	ble.n	800bc0e <_strtod_l+0x75e>
 800bbde:	4631      	mov	r1, r6
 800bbe0:	461a      	mov	r2, r3
 800bbe2:	4620      	mov	r0, r4
 800bbe4:	f001 fb56 	bl	800d294 <__pow5mult>
 800bbe8:	4606      	mov	r6, r0
 800bbea:	2800      	cmp	r0, #0
 800bbec:	f43f aea8 	beq.w	800b940 <_strtod_l+0x490>
 800bbf0:	4601      	mov	r1, r0
 800bbf2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800bbf4:	4620      	mov	r0, r4
 800bbf6:	f001 faa3 	bl	800d140 <__multiply>
 800bbfa:	900b      	str	r0, [sp, #44]	; 0x2c
 800bbfc:	2800      	cmp	r0, #0
 800bbfe:	f43f ae9f 	beq.w	800b940 <_strtod_l+0x490>
 800bc02:	9918      	ldr	r1, [sp, #96]	; 0x60
 800bc04:	4620      	mov	r0, r4
 800bc06:	f001 f983 	bl	800cf10 <_Bfree>
 800bc0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bc0c:	9318      	str	r3, [sp, #96]	; 0x60
 800bc0e:	f1b8 0f00 	cmp.w	r8, #0
 800bc12:	f300 808c 	bgt.w	800bd2e <_strtod_l+0x87e>
 800bc16:	9b06      	ldr	r3, [sp, #24]
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	dd08      	ble.n	800bc2e <_strtod_l+0x77e>
 800bc1c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800bc1e:	9905      	ldr	r1, [sp, #20]
 800bc20:	4620      	mov	r0, r4
 800bc22:	f001 fb37 	bl	800d294 <__pow5mult>
 800bc26:	9005      	str	r0, [sp, #20]
 800bc28:	2800      	cmp	r0, #0
 800bc2a:	f43f ae89 	beq.w	800b940 <_strtod_l+0x490>
 800bc2e:	2f00      	cmp	r7, #0
 800bc30:	dd08      	ble.n	800bc44 <_strtod_l+0x794>
 800bc32:	9905      	ldr	r1, [sp, #20]
 800bc34:	463a      	mov	r2, r7
 800bc36:	4620      	mov	r0, r4
 800bc38:	f001 fb86 	bl	800d348 <__lshift>
 800bc3c:	9005      	str	r0, [sp, #20]
 800bc3e:	2800      	cmp	r0, #0
 800bc40:	f43f ae7e 	beq.w	800b940 <_strtod_l+0x490>
 800bc44:	f1b9 0f00 	cmp.w	r9, #0
 800bc48:	dd08      	ble.n	800bc5c <_strtod_l+0x7ac>
 800bc4a:	4631      	mov	r1, r6
 800bc4c:	464a      	mov	r2, r9
 800bc4e:	4620      	mov	r0, r4
 800bc50:	f001 fb7a 	bl	800d348 <__lshift>
 800bc54:	4606      	mov	r6, r0
 800bc56:	2800      	cmp	r0, #0
 800bc58:	f43f ae72 	beq.w	800b940 <_strtod_l+0x490>
 800bc5c:	9a05      	ldr	r2, [sp, #20]
 800bc5e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800bc60:	4620      	mov	r0, r4
 800bc62:	f001 fbfd 	bl	800d460 <__mdiff>
 800bc66:	4605      	mov	r5, r0
 800bc68:	2800      	cmp	r0, #0
 800bc6a:	f43f ae69 	beq.w	800b940 <_strtod_l+0x490>
 800bc6e:	68c3      	ldr	r3, [r0, #12]
 800bc70:	930b      	str	r3, [sp, #44]	; 0x2c
 800bc72:	2300      	movs	r3, #0
 800bc74:	60c3      	str	r3, [r0, #12]
 800bc76:	4631      	mov	r1, r6
 800bc78:	f001 fbd6 	bl	800d428 <__mcmp>
 800bc7c:	2800      	cmp	r0, #0
 800bc7e:	da60      	bge.n	800bd42 <_strtod_l+0x892>
 800bc80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bc82:	ea53 030a 	orrs.w	r3, r3, sl
 800bc86:	f040 8082 	bne.w	800bd8e <_strtod_l+0x8de>
 800bc8a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d17d      	bne.n	800bd8e <_strtod_l+0x8de>
 800bc92:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800bc96:	0d1b      	lsrs	r3, r3, #20
 800bc98:	051b      	lsls	r3, r3, #20
 800bc9a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800bc9e:	d976      	bls.n	800bd8e <_strtod_l+0x8de>
 800bca0:	696b      	ldr	r3, [r5, #20]
 800bca2:	b913      	cbnz	r3, 800bcaa <_strtod_l+0x7fa>
 800bca4:	692b      	ldr	r3, [r5, #16]
 800bca6:	2b01      	cmp	r3, #1
 800bca8:	dd71      	ble.n	800bd8e <_strtod_l+0x8de>
 800bcaa:	4629      	mov	r1, r5
 800bcac:	2201      	movs	r2, #1
 800bcae:	4620      	mov	r0, r4
 800bcb0:	f001 fb4a 	bl	800d348 <__lshift>
 800bcb4:	4631      	mov	r1, r6
 800bcb6:	4605      	mov	r5, r0
 800bcb8:	f001 fbb6 	bl	800d428 <__mcmp>
 800bcbc:	2800      	cmp	r0, #0
 800bcbe:	dd66      	ble.n	800bd8e <_strtod_l+0x8de>
 800bcc0:	9904      	ldr	r1, [sp, #16]
 800bcc2:	4a53      	ldr	r2, [pc, #332]	; (800be10 <_strtod_l+0x960>)
 800bcc4:	465b      	mov	r3, fp
 800bcc6:	2900      	cmp	r1, #0
 800bcc8:	f000 8081 	beq.w	800bdce <_strtod_l+0x91e>
 800bccc:	ea02 010b 	and.w	r1, r2, fp
 800bcd0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800bcd4:	dc7b      	bgt.n	800bdce <_strtod_l+0x91e>
 800bcd6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800bcda:	f77f aea9 	ble.w	800ba30 <_strtod_l+0x580>
 800bcde:	4b4d      	ldr	r3, [pc, #308]	; (800be14 <_strtod_l+0x964>)
 800bce0:	4650      	mov	r0, sl
 800bce2:	4659      	mov	r1, fp
 800bce4:	2200      	movs	r2, #0
 800bce6:	f7f4 fca7 	bl	8000638 <__aeabi_dmul>
 800bcea:	460b      	mov	r3, r1
 800bcec:	4303      	orrs	r3, r0
 800bcee:	bf08      	it	eq
 800bcf0:	2322      	moveq	r3, #34	; 0x22
 800bcf2:	4682      	mov	sl, r0
 800bcf4:	468b      	mov	fp, r1
 800bcf6:	bf08      	it	eq
 800bcf8:	6023      	streq	r3, [r4, #0]
 800bcfa:	e62b      	b.n	800b954 <_strtod_l+0x4a4>
 800bcfc:	f04f 32ff 	mov.w	r2, #4294967295
 800bd00:	fa02 f303 	lsl.w	r3, r2, r3
 800bd04:	ea03 0a0a 	and.w	sl, r3, sl
 800bd08:	e6e3      	b.n	800bad2 <_strtod_l+0x622>
 800bd0a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800bd0e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800bd12:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800bd16:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800bd1a:	fa01 f308 	lsl.w	r3, r1, r8
 800bd1e:	9308      	str	r3, [sp, #32]
 800bd20:	910d      	str	r1, [sp, #52]	; 0x34
 800bd22:	e746      	b.n	800bbb2 <_strtod_l+0x702>
 800bd24:	2300      	movs	r3, #0
 800bd26:	9308      	str	r3, [sp, #32]
 800bd28:	2301      	movs	r3, #1
 800bd2a:	930d      	str	r3, [sp, #52]	; 0x34
 800bd2c:	e741      	b.n	800bbb2 <_strtod_l+0x702>
 800bd2e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800bd30:	4642      	mov	r2, r8
 800bd32:	4620      	mov	r0, r4
 800bd34:	f001 fb08 	bl	800d348 <__lshift>
 800bd38:	9018      	str	r0, [sp, #96]	; 0x60
 800bd3a:	2800      	cmp	r0, #0
 800bd3c:	f47f af6b 	bne.w	800bc16 <_strtod_l+0x766>
 800bd40:	e5fe      	b.n	800b940 <_strtod_l+0x490>
 800bd42:	465f      	mov	r7, fp
 800bd44:	d16e      	bne.n	800be24 <_strtod_l+0x974>
 800bd46:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bd48:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bd4c:	b342      	cbz	r2, 800bda0 <_strtod_l+0x8f0>
 800bd4e:	4a32      	ldr	r2, [pc, #200]	; (800be18 <_strtod_l+0x968>)
 800bd50:	4293      	cmp	r3, r2
 800bd52:	d128      	bne.n	800bda6 <_strtod_l+0x8f6>
 800bd54:	9b04      	ldr	r3, [sp, #16]
 800bd56:	4651      	mov	r1, sl
 800bd58:	b1eb      	cbz	r3, 800bd96 <_strtod_l+0x8e6>
 800bd5a:	4b2d      	ldr	r3, [pc, #180]	; (800be10 <_strtod_l+0x960>)
 800bd5c:	403b      	ands	r3, r7
 800bd5e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800bd62:	f04f 32ff 	mov.w	r2, #4294967295
 800bd66:	d819      	bhi.n	800bd9c <_strtod_l+0x8ec>
 800bd68:	0d1b      	lsrs	r3, r3, #20
 800bd6a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800bd6e:	fa02 f303 	lsl.w	r3, r2, r3
 800bd72:	4299      	cmp	r1, r3
 800bd74:	d117      	bne.n	800bda6 <_strtod_l+0x8f6>
 800bd76:	4b29      	ldr	r3, [pc, #164]	; (800be1c <_strtod_l+0x96c>)
 800bd78:	429f      	cmp	r7, r3
 800bd7a:	d102      	bne.n	800bd82 <_strtod_l+0x8d2>
 800bd7c:	3101      	adds	r1, #1
 800bd7e:	f43f addf 	beq.w	800b940 <_strtod_l+0x490>
 800bd82:	4b23      	ldr	r3, [pc, #140]	; (800be10 <_strtod_l+0x960>)
 800bd84:	403b      	ands	r3, r7
 800bd86:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800bd8a:	f04f 0a00 	mov.w	sl, #0
 800bd8e:	9b04      	ldr	r3, [sp, #16]
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d1a4      	bne.n	800bcde <_strtod_l+0x82e>
 800bd94:	e5de      	b.n	800b954 <_strtod_l+0x4a4>
 800bd96:	f04f 33ff 	mov.w	r3, #4294967295
 800bd9a:	e7ea      	b.n	800bd72 <_strtod_l+0x8c2>
 800bd9c:	4613      	mov	r3, r2
 800bd9e:	e7e8      	b.n	800bd72 <_strtod_l+0x8c2>
 800bda0:	ea53 030a 	orrs.w	r3, r3, sl
 800bda4:	d08c      	beq.n	800bcc0 <_strtod_l+0x810>
 800bda6:	9b08      	ldr	r3, [sp, #32]
 800bda8:	b1db      	cbz	r3, 800bde2 <_strtod_l+0x932>
 800bdaa:	423b      	tst	r3, r7
 800bdac:	d0ef      	beq.n	800bd8e <_strtod_l+0x8de>
 800bdae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bdb0:	9a04      	ldr	r2, [sp, #16]
 800bdb2:	4650      	mov	r0, sl
 800bdb4:	4659      	mov	r1, fp
 800bdb6:	b1c3      	cbz	r3, 800bdea <_strtod_l+0x93a>
 800bdb8:	f7ff fb5e 	bl	800b478 <sulp>
 800bdbc:	4602      	mov	r2, r0
 800bdbe:	460b      	mov	r3, r1
 800bdc0:	ec51 0b18 	vmov	r0, r1, d8
 800bdc4:	f7f4 fa82 	bl	80002cc <__adddf3>
 800bdc8:	4682      	mov	sl, r0
 800bdca:	468b      	mov	fp, r1
 800bdcc:	e7df      	b.n	800bd8e <_strtod_l+0x8de>
 800bdce:	4013      	ands	r3, r2
 800bdd0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800bdd4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800bdd8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800bddc:	f04f 3aff 	mov.w	sl, #4294967295
 800bde0:	e7d5      	b.n	800bd8e <_strtod_l+0x8de>
 800bde2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bde4:	ea13 0f0a 	tst.w	r3, sl
 800bde8:	e7e0      	b.n	800bdac <_strtod_l+0x8fc>
 800bdea:	f7ff fb45 	bl	800b478 <sulp>
 800bdee:	4602      	mov	r2, r0
 800bdf0:	460b      	mov	r3, r1
 800bdf2:	ec51 0b18 	vmov	r0, r1, d8
 800bdf6:	f7f4 fa67 	bl	80002c8 <__aeabi_dsub>
 800bdfa:	2200      	movs	r2, #0
 800bdfc:	2300      	movs	r3, #0
 800bdfe:	4682      	mov	sl, r0
 800be00:	468b      	mov	fp, r1
 800be02:	f7f4 fe81 	bl	8000b08 <__aeabi_dcmpeq>
 800be06:	2800      	cmp	r0, #0
 800be08:	d0c1      	beq.n	800bd8e <_strtod_l+0x8de>
 800be0a:	e611      	b.n	800ba30 <_strtod_l+0x580>
 800be0c:	fffffc02 	.word	0xfffffc02
 800be10:	7ff00000 	.word	0x7ff00000
 800be14:	39500000 	.word	0x39500000
 800be18:	000fffff 	.word	0x000fffff
 800be1c:	7fefffff 	.word	0x7fefffff
 800be20:	0800fcd0 	.word	0x0800fcd0
 800be24:	4631      	mov	r1, r6
 800be26:	4628      	mov	r0, r5
 800be28:	f001 fc7c 	bl	800d724 <__ratio>
 800be2c:	ec59 8b10 	vmov	r8, r9, d0
 800be30:	ee10 0a10 	vmov	r0, s0
 800be34:	2200      	movs	r2, #0
 800be36:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800be3a:	4649      	mov	r1, r9
 800be3c:	f7f4 fe78 	bl	8000b30 <__aeabi_dcmple>
 800be40:	2800      	cmp	r0, #0
 800be42:	d07a      	beq.n	800bf3a <_strtod_l+0xa8a>
 800be44:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800be46:	2b00      	cmp	r3, #0
 800be48:	d04a      	beq.n	800bee0 <_strtod_l+0xa30>
 800be4a:	4b95      	ldr	r3, [pc, #596]	; (800c0a0 <_strtod_l+0xbf0>)
 800be4c:	2200      	movs	r2, #0
 800be4e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800be52:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800c0a0 <_strtod_l+0xbf0>
 800be56:	f04f 0800 	mov.w	r8, #0
 800be5a:	4b92      	ldr	r3, [pc, #584]	; (800c0a4 <_strtod_l+0xbf4>)
 800be5c:	403b      	ands	r3, r7
 800be5e:	930d      	str	r3, [sp, #52]	; 0x34
 800be60:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800be62:	4b91      	ldr	r3, [pc, #580]	; (800c0a8 <_strtod_l+0xbf8>)
 800be64:	429a      	cmp	r2, r3
 800be66:	f040 80b0 	bne.w	800bfca <_strtod_l+0xb1a>
 800be6a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800be6e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800be72:	ec4b ab10 	vmov	d0, sl, fp
 800be76:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800be7a:	f001 fb7b 	bl	800d574 <__ulp>
 800be7e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800be82:	ec53 2b10 	vmov	r2, r3, d0
 800be86:	f7f4 fbd7 	bl	8000638 <__aeabi_dmul>
 800be8a:	4652      	mov	r2, sl
 800be8c:	465b      	mov	r3, fp
 800be8e:	f7f4 fa1d 	bl	80002cc <__adddf3>
 800be92:	460b      	mov	r3, r1
 800be94:	4983      	ldr	r1, [pc, #524]	; (800c0a4 <_strtod_l+0xbf4>)
 800be96:	4a85      	ldr	r2, [pc, #532]	; (800c0ac <_strtod_l+0xbfc>)
 800be98:	4019      	ands	r1, r3
 800be9a:	4291      	cmp	r1, r2
 800be9c:	4682      	mov	sl, r0
 800be9e:	d960      	bls.n	800bf62 <_strtod_l+0xab2>
 800bea0:	ee18 3a90 	vmov	r3, s17
 800bea4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800bea8:	4293      	cmp	r3, r2
 800beaa:	d104      	bne.n	800beb6 <_strtod_l+0xa06>
 800beac:	ee18 3a10 	vmov	r3, s16
 800beb0:	3301      	adds	r3, #1
 800beb2:	f43f ad45 	beq.w	800b940 <_strtod_l+0x490>
 800beb6:	f8df b200 	ldr.w	fp, [pc, #512]	; 800c0b8 <_strtod_l+0xc08>
 800beba:	f04f 3aff 	mov.w	sl, #4294967295
 800bebe:	9918      	ldr	r1, [sp, #96]	; 0x60
 800bec0:	4620      	mov	r0, r4
 800bec2:	f001 f825 	bl	800cf10 <_Bfree>
 800bec6:	9905      	ldr	r1, [sp, #20]
 800bec8:	4620      	mov	r0, r4
 800beca:	f001 f821 	bl	800cf10 <_Bfree>
 800bece:	4631      	mov	r1, r6
 800bed0:	4620      	mov	r0, r4
 800bed2:	f001 f81d 	bl	800cf10 <_Bfree>
 800bed6:	4629      	mov	r1, r5
 800bed8:	4620      	mov	r0, r4
 800beda:	f001 f819 	bl	800cf10 <_Bfree>
 800bede:	e61a      	b.n	800bb16 <_strtod_l+0x666>
 800bee0:	f1ba 0f00 	cmp.w	sl, #0
 800bee4:	d11b      	bne.n	800bf1e <_strtod_l+0xa6e>
 800bee6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800beea:	b9f3      	cbnz	r3, 800bf2a <_strtod_l+0xa7a>
 800beec:	4b6c      	ldr	r3, [pc, #432]	; (800c0a0 <_strtod_l+0xbf0>)
 800beee:	2200      	movs	r2, #0
 800bef0:	4640      	mov	r0, r8
 800bef2:	4649      	mov	r1, r9
 800bef4:	f7f4 fe12 	bl	8000b1c <__aeabi_dcmplt>
 800bef8:	b9d0      	cbnz	r0, 800bf30 <_strtod_l+0xa80>
 800befa:	4640      	mov	r0, r8
 800befc:	4649      	mov	r1, r9
 800befe:	4b6c      	ldr	r3, [pc, #432]	; (800c0b0 <_strtod_l+0xc00>)
 800bf00:	2200      	movs	r2, #0
 800bf02:	f7f4 fb99 	bl	8000638 <__aeabi_dmul>
 800bf06:	4680      	mov	r8, r0
 800bf08:	4689      	mov	r9, r1
 800bf0a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800bf0e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800bf12:	9315      	str	r3, [sp, #84]	; 0x54
 800bf14:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800bf18:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800bf1c:	e79d      	b.n	800be5a <_strtod_l+0x9aa>
 800bf1e:	f1ba 0f01 	cmp.w	sl, #1
 800bf22:	d102      	bne.n	800bf2a <_strtod_l+0xa7a>
 800bf24:	2f00      	cmp	r7, #0
 800bf26:	f43f ad83 	beq.w	800ba30 <_strtod_l+0x580>
 800bf2a:	4b62      	ldr	r3, [pc, #392]	; (800c0b4 <_strtod_l+0xc04>)
 800bf2c:	2200      	movs	r2, #0
 800bf2e:	e78e      	b.n	800be4e <_strtod_l+0x99e>
 800bf30:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800c0b0 <_strtod_l+0xc00>
 800bf34:	f04f 0800 	mov.w	r8, #0
 800bf38:	e7e7      	b.n	800bf0a <_strtod_l+0xa5a>
 800bf3a:	4b5d      	ldr	r3, [pc, #372]	; (800c0b0 <_strtod_l+0xc00>)
 800bf3c:	4640      	mov	r0, r8
 800bf3e:	4649      	mov	r1, r9
 800bf40:	2200      	movs	r2, #0
 800bf42:	f7f4 fb79 	bl	8000638 <__aeabi_dmul>
 800bf46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bf48:	4680      	mov	r8, r0
 800bf4a:	4689      	mov	r9, r1
 800bf4c:	b933      	cbnz	r3, 800bf5c <_strtod_l+0xaac>
 800bf4e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bf52:	900e      	str	r0, [sp, #56]	; 0x38
 800bf54:	930f      	str	r3, [sp, #60]	; 0x3c
 800bf56:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800bf5a:	e7dd      	b.n	800bf18 <_strtod_l+0xa68>
 800bf5c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800bf60:	e7f9      	b.n	800bf56 <_strtod_l+0xaa6>
 800bf62:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800bf66:	9b04      	ldr	r3, [sp, #16]
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d1a8      	bne.n	800bebe <_strtod_l+0xa0e>
 800bf6c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800bf70:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bf72:	0d1b      	lsrs	r3, r3, #20
 800bf74:	051b      	lsls	r3, r3, #20
 800bf76:	429a      	cmp	r2, r3
 800bf78:	d1a1      	bne.n	800bebe <_strtod_l+0xa0e>
 800bf7a:	4640      	mov	r0, r8
 800bf7c:	4649      	mov	r1, r9
 800bf7e:	f7f4 febb 	bl	8000cf8 <__aeabi_d2lz>
 800bf82:	f7f4 fb2b 	bl	80005dc <__aeabi_l2d>
 800bf86:	4602      	mov	r2, r0
 800bf88:	460b      	mov	r3, r1
 800bf8a:	4640      	mov	r0, r8
 800bf8c:	4649      	mov	r1, r9
 800bf8e:	f7f4 f99b 	bl	80002c8 <__aeabi_dsub>
 800bf92:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bf94:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bf98:	ea43 030a 	orr.w	r3, r3, sl
 800bf9c:	4313      	orrs	r3, r2
 800bf9e:	4680      	mov	r8, r0
 800bfa0:	4689      	mov	r9, r1
 800bfa2:	d055      	beq.n	800c050 <_strtod_l+0xba0>
 800bfa4:	a336      	add	r3, pc, #216	; (adr r3, 800c080 <_strtod_l+0xbd0>)
 800bfa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfaa:	f7f4 fdb7 	bl	8000b1c <__aeabi_dcmplt>
 800bfae:	2800      	cmp	r0, #0
 800bfb0:	f47f acd0 	bne.w	800b954 <_strtod_l+0x4a4>
 800bfb4:	a334      	add	r3, pc, #208	; (adr r3, 800c088 <_strtod_l+0xbd8>)
 800bfb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfba:	4640      	mov	r0, r8
 800bfbc:	4649      	mov	r1, r9
 800bfbe:	f7f4 fdcb 	bl	8000b58 <__aeabi_dcmpgt>
 800bfc2:	2800      	cmp	r0, #0
 800bfc4:	f43f af7b 	beq.w	800bebe <_strtod_l+0xa0e>
 800bfc8:	e4c4      	b.n	800b954 <_strtod_l+0x4a4>
 800bfca:	9b04      	ldr	r3, [sp, #16]
 800bfcc:	b333      	cbz	r3, 800c01c <_strtod_l+0xb6c>
 800bfce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bfd0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800bfd4:	d822      	bhi.n	800c01c <_strtod_l+0xb6c>
 800bfd6:	a32e      	add	r3, pc, #184	; (adr r3, 800c090 <_strtod_l+0xbe0>)
 800bfd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfdc:	4640      	mov	r0, r8
 800bfde:	4649      	mov	r1, r9
 800bfe0:	f7f4 fda6 	bl	8000b30 <__aeabi_dcmple>
 800bfe4:	b1a0      	cbz	r0, 800c010 <_strtod_l+0xb60>
 800bfe6:	4649      	mov	r1, r9
 800bfe8:	4640      	mov	r0, r8
 800bfea:	f7f4 fdfd 	bl	8000be8 <__aeabi_d2uiz>
 800bfee:	2801      	cmp	r0, #1
 800bff0:	bf38      	it	cc
 800bff2:	2001      	movcc	r0, #1
 800bff4:	f7f4 faa6 	bl	8000544 <__aeabi_ui2d>
 800bff8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bffa:	4680      	mov	r8, r0
 800bffc:	4689      	mov	r9, r1
 800bffe:	bb23      	cbnz	r3, 800c04a <_strtod_l+0xb9a>
 800c000:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c004:	9010      	str	r0, [sp, #64]	; 0x40
 800c006:	9311      	str	r3, [sp, #68]	; 0x44
 800c008:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c00c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c010:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c012:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c014:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800c018:	1a9b      	subs	r3, r3, r2
 800c01a:	9309      	str	r3, [sp, #36]	; 0x24
 800c01c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c020:	eeb0 0a48 	vmov.f32	s0, s16
 800c024:	eef0 0a68 	vmov.f32	s1, s17
 800c028:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c02c:	f001 faa2 	bl	800d574 <__ulp>
 800c030:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c034:	ec53 2b10 	vmov	r2, r3, d0
 800c038:	f7f4 fafe 	bl	8000638 <__aeabi_dmul>
 800c03c:	ec53 2b18 	vmov	r2, r3, d8
 800c040:	f7f4 f944 	bl	80002cc <__adddf3>
 800c044:	4682      	mov	sl, r0
 800c046:	468b      	mov	fp, r1
 800c048:	e78d      	b.n	800bf66 <_strtod_l+0xab6>
 800c04a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800c04e:	e7db      	b.n	800c008 <_strtod_l+0xb58>
 800c050:	a311      	add	r3, pc, #68	; (adr r3, 800c098 <_strtod_l+0xbe8>)
 800c052:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c056:	f7f4 fd61 	bl	8000b1c <__aeabi_dcmplt>
 800c05a:	e7b2      	b.n	800bfc2 <_strtod_l+0xb12>
 800c05c:	2300      	movs	r3, #0
 800c05e:	930a      	str	r3, [sp, #40]	; 0x28
 800c060:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c062:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c064:	6013      	str	r3, [r2, #0]
 800c066:	f7ff ba6b 	b.w	800b540 <_strtod_l+0x90>
 800c06a:	2a65      	cmp	r2, #101	; 0x65
 800c06c:	f43f ab5f 	beq.w	800b72e <_strtod_l+0x27e>
 800c070:	2a45      	cmp	r2, #69	; 0x45
 800c072:	f43f ab5c 	beq.w	800b72e <_strtod_l+0x27e>
 800c076:	2301      	movs	r3, #1
 800c078:	f7ff bb94 	b.w	800b7a4 <_strtod_l+0x2f4>
 800c07c:	f3af 8000 	nop.w
 800c080:	94a03595 	.word	0x94a03595
 800c084:	3fdfffff 	.word	0x3fdfffff
 800c088:	35afe535 	.word	0x35afe535
 800c08c:	3fe00000 	.word	0x3fe00000
 800c090:	ffc00000 	.word	0xffc00000
 800c094:	41dfffff 	.word	0x41dfffff
 800c098:	94a03595 	.word	0x94a03595
 800c09c:	3fcfffff 	.word	0x3fcfffff
 800c0a0:	3ff00000 	.word	0x3ff00000
 800c0a4:	7ff00000 	.word	0x7ff00000
 800c0a8:	7fe00000 	.word	0x7fe00000
 800c0ac:	7c9fffff 	.word	0x7c9fffff
 800c0b0:	3fe00000 	.word	0x3fe00000
 800c0b4:	bff00000 	.word	0xbff00000
 800c0b8:	7fefffff 	.word	0x7fefffff

0800c0bc <_strtod_r>:
 800c0bc:	4b01      	ldr	r3, [pc, #4]	; (800c0c4 <_strtod_r+0x8>)
 800c0be:	f7ff b9f7 	b.w	800b4b0 <_strtod_l>
 800c0c2:	bf00      	nop
 800c0c4:	200000cc 	.word	0x200000cc

0800c0c8 <_strtol_l.constprop.0>:
 800c0c8:	2b01      	cmp	r3, #1
 800c0ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c0ce:	d001      	beq.n	800c0d4 <_strtol_l.constprop.0+0xc>
 800c0d0:	2b24      	cmp	r3, #36	; 0x24
 800c0d2:	d906      	bls.n	800c0e2 <_strtol_l.constprop.0+0x1a>
 800c0d4:	f7fe feb8 	bl	800ae48 <__errno>
 800c0d8:	2316      	movs	r3, #22
 800c0da:	6003      	str	r3, [r0, #0]
 800c0dc:	2000      	movs	r0, #0
 800c0de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c0e2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800c1c8 <_strtol_l.constprop.0+0x100>
 800c0e6:	460d      	mov	r5, r1
 800c0e8:	462e      	mov	r6, r5
 800c0ea:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c0ee:	f814 700c 	ldrb.w	r7, [r4, ip]
 800c0f2:	f017 0708 	ands.w	r7, r7, #8
 800c0f6:	d1f7      	bne.n	800c0e8 <_strtol_l.constprop.0+0x20>
 800c0f8:	2c2d      	cmp	r4, #45	; 0x2d
 800c0fa:	d132      	bne.n	800c162 <_strtol_l.constprop.0+0x9a>
 800c0fc:	782c      	ldrb	r4, [r5, #0]
 800c0fe:	2701      	movs	r7, #1
 800c100:	1cb5      	adds	r5, r6, #2
 800c102:	2b00      	cmp	r3, #0
 800c104:	d05b      	beq.n	800c1be <_strtol_l.constprop.0+0xf6>
 800c106:	2b10      	cmp	r3, #16
 800c108:	d109      	bne.n	800c11e <_strtol_l.constprop.0+0x56>
 800c10a:	2c30      	cmp	r4, #48	; 0x30
 800c10c:	d107      	bne.n	800c11e <_strtol_l.constprop.0+0x56>
 800c10e:	782c      	ldrb	r4, [r5, #0]
 800c110:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800c114:	2c58      	cmp	r4, #88	; 0x58
 800c116:	d14d      	bne.n	800c1b4 <_strtol_l.constprop.0+0xec>
 800c118:	786c      	ldrb	r4, [r5, #1]
 800c11a:	2310      	movs	r3, #16
 800c11c:	3502      	adds	r5, #2
 800c11e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800c122:	f108 38ff 	add.w	r8, r8, #4294967295
 800c126:	f04f 0c00 	mov.w	ip, #0
 800c12a:	fbb8 f9f3 	udiv	r9, r8, r3
 800c12e:	4666      	mov	r6, ip
 800c130:	fb03 8a19 	mls	sl, r3, r9, r8
 800c134:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800c138:	f1be 0f09 	cmp.w	lr, #9
 800c13c:	d816      	bhi.n	800c16c <_strtol_l.constprop.0+0xa4>
 800c13e:	4674      	mov	r4, lr
 800c140:	42a3      	cmp	r3, r4
 800c142:	dd24      	ble.n	800c18e <_strtol_l.constprop.0+0xc6>
 800c144:	f1bc 0f00 	cmp.w	ip, #0
 800c148:	db1e      	blt.n	800c188 <_strtol_l.constprop.0+0xc0>
 800c14a:	45b1      	cmp	r9, r6
 800c14c:	d31c      	bcc.n	800c188 <_strtol_l.constprop.0+0xc0>
 800c14e:	d101      	bne.n	800c154 <_strtol_l.constprop.0+0x8c>
 800c150:	45a2      	cmp	sl, r4
 800c152:	db19      	blt.n	800c188 <_strtol_l.constprop.0+0xc0>
 800c154:	fb06 4603 	mla	r6, r6, r3, r4
 800c158:	f04f 0c01 	mov.w	ip, #1
 800c15c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c160:	e7e8      	b.n	800c134 <_strtol_l.constprop.0+0x6c>
 800c162:	2c2b      	cmp	r4, #43	; 0x2b
 800c164:	bf04      	itt	eq
 800c166:	782c      	ldrbeq	r4, [r5, #0]
 800c168:	1cb5      	addeq	r5, r6, #2
 800c16a:	e7ca      	b.n	800c102 <_strtol_l.constprop.0+0x3a>
 800c16c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800c170:	f1be 0f19 	cmp.w	lr, #25
 800c174:	d801      	bhi.n	800c17a <_strtol_l.constprop.0+0xb2>
 800c176:	3c37      	subs	r4, #55	; 0x37
 800c178:	e7e2      	b.n	800c140 <_strtol_l.constprop.0+0x78>
 800c17a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800c17e:	f1be 0f19 	cmp.w	lr, #25
 800c182:	d804      	bhi.n	800c18e <_strtol_l.constprop.0+0xc6>
 800c184:	3c57      	subs	r4, #87	; 0x57
 800c186:	e7db      	b.n	800c140 <_strtol_l.constprop.0+0x78>
 800c188:	f04f 3cff 	mov.w	ip, #4294967295
 800c18c:	e7e6      	b.n	800c15c <_strtol_l.constprop.0+0x94>
 800c18e:	f1bc 0f00 	cmp.w	ip, #0
 800c192:	da05      	bge.n	800c1a0 <_strtol_l.constprop.0+0xd8>
 800c194:	2322      	movs	r3, #34	; 0x22
 800c196:	6003      	str	r3, [r0, #0]
 800c198:	4646      	mov	r6, r8
 800c19a:	b942      	cbnz	r2, 800c1ae <_strtol_l.constprop.0+0xe6>
 800c19c:	4630      	mov	r0, r6
 800c19e:	e79e      	b.n	800c0de <_strtol_l.constprop.0+0x16>
 800c1a0:	b107      	cbz	r7, 800c1a4 <_strtol_l.constprop.0+0xdc>
 800c1a2:	4276      	negs	r6, r6
 800c1a4:	2a00      	cmp	r2, #0
 800c1a6:	d0f9      	beq.n	800c19c <_strtol_l.constprop.0+0xd4>
 800c1a8:	f1bc 0f00 	cmp.w	ip, #0
 800c1ac:	d000      	beq.n	800c1b0 <_strtol_l.constprop.0+0xe8>
 800c1ae:	1e69      	subs	r1, r5, #1
 800c1b0:	6011      	str	r1, [r2, #0]
 800c1b2:	e7f3      	b.n	800c19c <_strtol_l.constprop.0+0xd4>
 800c1b4:	2430      	movs	r4, #48	; 0x30
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d1b1      	bne.n	800c11e <_strtol_l.constprop.0+0x56>
 800c1ba:	2308      	movs	r3, #8
 800c1bc:	e7af      	b.n	800c11e <_strtol_l.constprop.0+0x56>
 800c1be:	2c30      	cmp	r4, #48	; 0x30
 800c1c0:	d0a5      	beq.n	800c10e <_strtol_l.constprop.0+0x46>
 800c1c2:	230a      	movs	r3, #10
 800c1c4:	e7ab      	b.n	800c11e <_strtol_l.constprop.0+0x56>
 800c1c6:	bf00      	nop
 800c1c8:	0800fcf9 	.word	0x0800fcf9

0800c1cc <_strtol_r>:
 800c1cc:	f7ff bf7c 	b.w	800c0c8 <_strtol_l.constprop.0>

0800c1d0 <__swbuf_r>:
 800c1d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1d2:	460e      	mov	r6, r1
 800c1d4:	4614      	mov	r4, r2
 800c1d6:	4605      	mov	r5, r0
 800c1d8:	b118      	cbz	r0, 800c1e2 <__swbuf_r+0x12>
 800c1da:	6983      	ldr	r3, [r0, #24]
 800c1dc:	b90b      	cbnz	r3, 800c1e2 <__swbuf_r+0x12>
 800c1de:	f000 f9d1 	bl	800c584 <__sinit>
 800c1e2:	4b21      	ldr	r3, [pc, #132]	; (800c268 <__swbuf_r+0x98>)
 800c1e4:	429c      	cmp	r4, r3
 800c1e6:	d12b      	bne.n	800c240 <__swbuf_r+0x70>
 800c1e8:	686c      	ldr	r4, [r5, #4]
 800c1ea:	69a3      	ldr	r3, [r4, #24]
 800c1ec:	60a3      	str	r3, [r4, #8]
 800c1ee:	89a3      	ldrh	r3, [r4, #12]
 800c1f0:	071a      	lsls	r2, r3, #28
 800c1f2:	d52f      	bpl.n	800c254 <__swbuf_r+0x84>
 800c1f4:	6923      	ldr	r3, [r4, #16]
 800c1f6:	b36b      	cbz	r3, 800c254 <__swbuf_r+0x84>
 800c1f8:	6923      	ldr	r3, [r4, #16]
 800c1fa:	6820      	ldr	r0, [r4, #0]
 800c1fc:	1ac0      	subs	r0, r0, r3
 800c1fe:	6963      	ldr	r3, [r4, #20]
 800c200:	b2f6      	uxtb	r6, r6
 800c202:	4283      	cmp	r3, r0
 800c204:	4637      	mov	r7, r6
 800c206:	dc04      	bgt.n	800c212 <__swbuf_r+0x42>
 800c208:	4621      	mov	r1, r4
 800c20a:	4628      	mov	r0, r5
 800c20c:	f000 f926 	bl	800c45c <_fflush_r>
 800c210:	bb30      	cbnz	r0, 800c260 <__swbuf_r+0x90>
 800c212:	68a3      	ldr	r3, [r4, #8]
 800c214:	3b01      	subs	r3, #1
 800c216:	60a3      	str	r3, [r4, #8]
 800c218:	6823      	ldr	r3, [r4, #0]
 800c21a:	1c5a      	adds	r2, r3, #1
 800c21c:	6022      	str	r2, [r4, #0]
 800c21e:	701e      	strb	r6, [r3, #0]
 800c220:	6963      	ldr	r3, [r4, #20]
 800c222:	3001      	adds	r0, #1
 800c224:	4283      	cmp	r3, r0
 800c226:	d004      	beq.n	800c232 <__swbuf_r+0x62>
 800c228:	89a3      	ldrh	r3, [r4, #12]
 800c22a:	07db      	lsls	r3, r3, #31
 800c22c:	d506      	bpl.n	800c23c <__swbuf_r+0x6c>
 800c22e:	2e0a      	cmp	r6, #10
 800c230:	d104      	bne.n	800c23c <__swbuf_r+0x6c>
 800c232:	4621      	mov	r1, r4
 800c234:	4628      	mov	r0, r5
 800c236:	f000 f911 	bl	800c45c <_fflush_r>
 800c23a:	b988      	cbnz	r0, 800c260 <__swbuf_r+0x90>
 800c23c:	4638      	mov	r0, r7
 800c23e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c240:	4b0a      	ldr	r3, [pc, #40]	; (800c26c <__swbuf_r+0x9c>)
 800c242:	429c      	cmp	r4, r3
 800c244:	d101      	bne.n	800c24a <__swbuf_r+0x7a>
 800c246:	68ac      	ldr	r4, [r5, #8]
 800c248:	e7cf      	b.n	800c1ea <__swbuf_r+0x1a>
 800c24a:	4b09      	ldr	r3, [pc, #36]	; (800c270 <__swbuf_r+0xa0>)
 800c24c:	429c      	cmp	r4, r3
 800c24e:	bf08      	it	eq
 800c250:	68ec      	ldreq	r4, [r5, #12]
 800c252:	e7ca      	b.n	800c1ea <__swbuf_r+0x1a>
 800c254:	4621      	mov	r1, r4
 800c256:	4628      	mov	r0, r5
 800c258:	f000 f80c 	bl	800c274 <__swsetup_r>
 800c25c:	2800      	cmp	r0, #0
 800c25e:	d0cb      	beq.n	800c1f8 <__swbuf_r+0x28>
 800c260:	f04f 37ff 	mov.w	r7, #4294967295
 800c264:	e7ea      	b.n	800c23c <__swbuf_r+0x6c>
 800c266:	bf00      	nop
 800c268:	0800fe1c 	.word	0x0800fe1c
 800c26c:	0800fe3c 	.word	0x0800fe3c
 800c270:	0800fdfc 	.word	0x0800fdfc

0800c274 <__swsetup_r>:
 800c274:	4b32      	ldr	r3, [pc, #200]	; (800c340 <__swsetup_r+0xcc>)
 800c276:	b570      	push	{r4, r5, r6, lr}
 800c278:	681d      	ldr	r5, [r3, #0]
 800c27a:	4606      	mov	r6, r0
 800c27c:	460c      	mov	r4, r1
 800c27e:	b125      	cbz	r5, 800c28a <__swsetup_r+0x16>
 800c280:	69ab      	ldr	r3, [r5, #24]
 800c282:	b913      	cbnz	r3, 800c28a <__swsetup_r+0x16>
 800c284:	4628      	mov	r0, r5
 800c286:	f000 f97d 	bl	800c584 <__sinit>
 800c28a:	4b2e      	ldr	r3, [pc, #184]	; (800c344 <__swsetup_r+0xd0>)
 800c28c:	429c      	cmp	r4, r3
 800c28e:	d10f      	bne.n	800c2b0 <__swsetup_r+0x3c>
 800c290:	686c      	ldr	r4, [r5, #4]
 800c292:	89a3      	ldrh	r3, [r4, #12]
 800c294:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c298:	0719      	lsls	r1, r3, #28
 800c29a:	d42c      	bmi.n	800c2f6 <__swsetup_r+0x82>
 800c29c:	06dd      	lsls	r5, r3, #27
 800c29e:	d411      	bmi.n	800c2c4 <__swsetup_r+0x50>
 800c2a0:	2309      	movs	r3, #9
 800c2a2:	6033      	str	r3, [r6, #0]
 800c2a4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c2a8:	81a3      	strh	r3, [r4, #12]
 800c2aa:	f04f 30ff 	mov.w	r0, #4294967295
 800c2ae:	e03e      	b.n	800c32e <__swsetup_r+0xba>
 800c2b0:	4b25      	ldr	r3, [pc, #148]	; (800c348 <__swsetup_r+0xd4>)
 800c2b2:	429c      	cmp	r4, r3
 800c2b4:	d101      	bne.n	800c2ba <__swsetup_r+0x46>
 800c2b6:	68ac      	ldr	r4, [r5, #8]
 800c2b8:	e7eb      	b.n	800c292 <__swsetup_r+0x1e>
 800c2ba:	4b24      	ldr	r3, [pc, #144]	; (800c34c <__swsetup_r+0xd8>)
 800c2bc:	429c      	cmp	r4, r3
 800c2be:	bf08      	it	eq
 800c2c0:	68ec      	ldreq	r4, [r5, #12]
 800c2c2:	e7e6      	b.n	800c292 <__swsetup_r+0x1e>
 800c2c4:	0758      	lsls	r0, r3, #29
 800c2c6:	d512      	bpl.n	800c2ee <__swsetup_r+0x7a>
 800c2c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c2ca:	b141      	cbz	r1, 800c2de <__swsetup_r+0x6a>
 800c2cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c2d0:	4299      	cmp	r1, r3
 800c2d2:	d002      	beq.n	800c2da <__swsetup_r+0x66>
 800c2d4:	4630      	mov	r0, r6
 800c2d6:	f001 fab3 	bl	800d840 <_free_r>
 800c2da:	2300      	movs	r3, #0
 800c2dc:	6363      	str	r3, [r4, #52]	; 0x34
 800c2de:	89a3      	ldrh	r3, [r4, #12]
 800c2e0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c2e4:	81a3      	strh	r3, [r4, #12]
 800c2e6:	2300      	movs	r3, #0
 800c2e8:	6063      	str	r3, [r4, #4]
 800c2ea:	6923      	ldr	r3, [r4, #16]
 800c2ec:	6023      	str	r3, [r4, #0]
 800c2ee:	89a3      	ldrh	r3, [r4, #12]
 800c2f0:	f043 0308 	orr.w	r3, r3, #8
 800c2f4:	81a3      	strh	r3, [r4, #12]
 800c2f6:	6923      	ldr	r3, [r4, #16]
 800c2f8:	b94b      	cbnz	r3, 800c30e <__swsetup_r+0x9a>
 800c2fa:	89a3      	ldrh	r3, [r4, #12]
 800c2fc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c300:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c304:	d003      	beq.n	800c30e <__swsetup_r+0x9a>
 800c306:	4621      	mov	r1, r4
 800c308:	4630      	mov	r0, r6
 800c30a:	f000 fd6f 	bl	800cdec <__smakebuf_r>
 800c30e:	89a0      	ldrh	r0, [r4, #12]
 800c310:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c314:	f010 0301 	ands.w	r3, r0, #1
 800c318:	d00a      	beq.n	800c330 <__swsetup_r+0xbc>
 800c31a:	2300      	movs	r3, #0
 800c31c:	60a3      	str	r3, [r4, #8]
 800c31e:	6963      	ldr	r3, [r4, #20]
 800c320:	425b      	negs	r3, r3
 800c322:	61a3      	str	r3, [r4, #24]
 800c324:	6923      	ldr	r3, [r4, #16]
 800c326:	b943      	cbnz	r3, 800c33a <__swsetup_r+0xc6>
 800c328:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c32c:	d1ba      	bne.n	800c2a4 <__swsetup_r+0x30>
 800c32e:	bd70      	pop	{r4, r5, r6, pc}
 800c330:	0781      	lsls	r1, r0, #30
 800c332:	bf58      	it	pl
 800c334:	6963      	ldrpl	r3, [r4, #20]
 800c336:	60a3      	str	r3, [r4, #8]
 800c338:	e7f4      	b.n	800c324 <__swsetup_r+0xb0>
 800c33a:	2000      	movs	r0, #0
 800c33c:	e7f7      	b.n	800c32e <__swsetup_r+0xba>
 800c33e:	bf00      	nop
 800c340:	20000064 	.word	0x20000064
 800c344:	0800fe1c 	.word	0x0800fe1c
 800c348:	0800fe3c 	.word	0x0800fe3c
 800c34c:	0800fdfc 	.word	0x0800fdfc

0800c350 <__sflush_r>:
 800c350:	898a      	ldrh	r2, [r1, #12]
 800c352:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c356:	4605      	mov	r5, r0
 800c358:	0710      	lsls	r0, r2, #28
 800c35a:	460c      	mov	r4, r1
 800c35c:	d458      	bmi.n	800c410 <__sflush_r+0xc0>
 800c35e:	684b      	ldr	r3, [r1, #4]
 800c360:	2b00      	cmp	r3, #0
 800c362:	dc05      	bgt.n	800c370 <__sflush_r+0x20>
 800c364:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c366:	2b00      	cmp	r3, #0
 800c368:	dc02      	bgt.n	800c370 <__sflush_r+0x20>
 800c36a:	2000      	movs	r0, #0
 800c36c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c370:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c372:	2e00      	cmp	r6, #0
 800c374:	d0f9      	beq.n	800c36a <__sflush_r+0x1a>
 800c376:	2300      	movs	r3, #0
 800c378:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c37c:	682f      	ldr	r7, [r5, #0]
 800c37e:	602b      	str	r3, [r5, #0]
 800c380:	d032      	beq.n	800c3e8 <__sflush_r+0x98>
 800c382:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c384:	89a3      	ldrh	r3, [r4, #12]
 800c386:	075a      	lsls	r2, r3, #29
 800c388:	d505      	bpl.n	800c396 <__sflush_r+0x46>
 800c38a:	6863      	ldr	r3, [r4, #4]
 800c38c:	1ac0      	subs	r0, r0, r3
 800c38e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c390:	b10b      	cbz	r3, 800c396 <__sflush_r+0x46>
 800c392:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c394:	1ac0      	subs	r0, r0, r3
 800c396:	2300      	movs	r3, #0
 800c398:	4602      	mov	r2, r0
 800c39a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c39c:	6a21      	ldr	r1, [r4, #32]
 800c39e:	4628      	mov	r0, r5
 800c3a0:	47b0      	blx	r6
 800c3a2:	1c43      	adds	r3, r0, #1
 800c3a4:	89a3      	ldrh	r3, [r4, #12]
 800c3a6:	d106      	bne.n	800c3b6 <__sflush_r+0x66>
 800c3a8:	6829      	ldr	r1, [r5, #0]
 800c3aa:	291d      	cmp	r1, #29
 800c3ac:	d82c      	bhi.n	800c408 <__sflush_r+0xb8>
 800c3ae:	4a2a      	ldr	r2, [pc, #168]	; (800c458 <__sflush_r+0x108>)
 800c3b0:	40ca      	lsrs	r2, r1
 800c3b2:	07d6      	lsls	r6, r2, #31
 800c3b4:	d528      	bpl.n	800c408 <__sflush_r+0xb8>
 800c3b6:	2200      	movs	r2, #0
 800c3b8:	6062      	str	r2, [r4, #4]
 800c3ba:	04d9      	lsls	r1, r3, #19
 800c3bc:	6922      	ldr	r2, [r4, #16]
 800c3be:	6022      	str	r2, [r4, #0]
 800c3c0:	d504      	bpl.n	800c3cc <__sflush_r+0x7c>
 800c3c2:	1c42      	adds	r2, r0, #1
 800c3c4:	d101      	bne.n	800c3ca <__sflush_r+0x7a>
 800c3c6:	682b      	ldr	r3, [r5, #0]
 800c3c8:	b903      	cbnz	r3, 800c3cc <__sflush_r+0x7c>
 800c3ca:	6560      	str	r0, [r4, #84]	; 0x54
 800c3cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c3ce:	602f      	str	r7, [r5, #0]
 800c3d0:	2900      	cmp	r1, #0
 800c3d2:	d0ca      	beq.n	800c36a <__sflush_r+0x1a>
 800c3d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c3d8:	4299      	cmp	r1, r3
 800c3da:	d002      	beq.n	800c3e2 <__sflush_r+0x92>
 800c3dc:	4628      	mov	r0, r5
 800c3de:	f001 fa2f 	bl	800d840 <_free_r>
 800c3e2:	2000      	movs	r0, #0
 800c3e4:	6360      	str	r0, [r4, #52]	; 0x34
 800c3e6:	e7c1      	b.n	800c36c <__sflush_r+0x1c>
 800c3e8:	6a21      	ldr	r1, [r4, #32]
 800c3ea:	2301      	movs	r3, #1
 800c3ec:	4628      	mov	r0, r5
 800c3ee:	47b0      	blx	r6
 800c3f0:	1c41      	adds	r1, r0, #1
 800c3f2:	d1c7      	bne.n	800c384 <__sflush_r+0x34>
 800c3f4:	682b      	ldr	r3, [r5, #0]
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d0c4      	beq.n	800c384 <__sflush_r+0x34>
 800c3fa:	2b1d      	cmp	r3, #29
 800c3fc:	d001      	beq.n	800c402 <__sflush_r+0xb2>
 800c3fe:	2b16      	cmp	r3, #22
 800c400:	d101      	bne.n	800c406 <__sflush_r+0xb6>
 800c402:	602f      	str	r7, [r5, #0]
 800c404:	e7b1      	b.n	800c36a <__sflush_r+0x1a>
 800c406:	89a3      	ldrh	r3, [r4, #12]
 800c408:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c40c:	81a3      	strh	r3, [r4, #12]
 800c40e:	e7ad      	b.n	800c36c <__sflush_r+0x1c>
 800c410:	690f      	ldr	r7, [r1, #16]
 800c412:	2f00      	cmp	r7, #0
 800c414:	d0a9      	beq.n	800c36a <__sflush_r+0x1a>
 800c416:	0793      	lsls	r3, r2, #30
 800c418:	680e      	ldr	r6, [r1, #0]
 800c41a:	bf08      	it	eq
 800c41c:	694b      	ldreq	r3, [r1, #20]
 800c41e:	600f      	str	r7, [r1, #0]
 800c420:	bf18      	it	ne
 800c422:	2300      	movne	r3, #0
 800c424:	eba6 0807 	sub.w	r8, r6, r7
 800c428:	608b      	str	r3, [r1, #8]
 800c42a:	f1b8 0f00 	cmp.w	r8, #0
 800c42e:	dd9c      	ble.n	800c36a <__sflush_r+0x1a>
 800c430:	6a21      	ldr	r1, [r4, #32]
 800c432:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c434:	4643      	mov	r3, r8
 800c436:	463a      	mov	r2, r7
 800c438:	4628      	mov	r0, r5
 800c43a:	47b0      	blx	r6
 800c43c:	2800      	cmp	r0, #0
 800c43e:	dc06      	bgt.n	800c44e <__sflush_r+0xfe>
 800c440:	89a3      	ldrh	r3, [r4, #12]
 800c442:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c446:	81a3      	strh	r3, [r4, #12]
 800c448:	f04f 30ff 	mov.w	r0, #4294967295
 800c44c:	e78e      	b.n	800c36c <__sflush_r+0x1c>
 800c44e:	4407      	add	r7, r0
 800c450:	eba8 0800 	sub.w	r8, r8, r0
 800c454:	e7e9      	b.n	800c42a <__sflush_r+0xda>
 800c456:	bf00      	nop
 800c458:	20400001 	.word	0x20400001

0800c45c <_fflush_r>:
 800c45c:	b538      	push	{r3, r4, r5, lr}
 800c45e:	690b      	ldr	r3, [r1, #16]
 800c460:	4605      	mov	r5, r0
 800c462:	460c      	mov	r4, r1
 800c464:	b913      	cbnz	r3, 800c46c <_fflush_r+0x10>
 800c466:	2500      	movs	r5, #0
 800c468:	4628      	mov	r0, r5
 800c46a:	bd38      	pop	{r3, r4, r5, pc}
 800c46c:	b118      	cbz	r0, 800c476 <_fflush_r+0x1a>
 800c46e:	6983      	ldr	r3, [r0, #24]
 800c470:	b90b      	cbnz	r3, 800c476 <_fflush_r+0x1a>
 800c472:	f000 f887 	bl	800c584 <__sinit>
 800c476:	4b14      	ldr	r3, [pc, #80]	; (800c4c8 <_fflush_r+0x6c>)
 800c478:	429c      	cmp	r4, r3
 800c47a:	d11b      	bne.n	800c4b4 <_fflush_r+0x58>
 800c47c:	686c      	ldr	r4, [r5, #4]
 800c47e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c482:	2b00      	cmp	r3, #0
 800c484:	d0ef      	beq.n	800c466 <_fflush_r+0xa>
 800c486:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c488:	07d0      	lsls	r0, r2, #31
 800c48a:	d404      	bmi.n	800c496 <_fflush_r+0x3a>
 800c48c:	0599      	lsls	r1, r3, #22
 800c48e:	d402      	bmi.n	800c496 <_fflush_r+0x3a>
 800c490:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c492:	f000 fc84 	bl	800cd9e <__retarget_lock_acquire_recursive>
 800c496:	4628      	mov	r0, r5
 800c498:	4621      	mov	r1, r4
 800c49a:	f7ff ff59 	bl	800c350 <__sflush_r>
 800c49e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c4a0:	07da      	lsls	r2, r3, #31
 800c4a2:	4605      	mov	r5, r0
 800c4a4:	d4e0      	bmi.n	800c468 <_fflush_r+0xc>
 800c4a6:	89a3      	ldrh	r3, [r4, #12]
 800c4a8:	059b      	lsls	r3, r3, #22
 800c4aa:	d4dd      	bmi.n	800c468 <_fflush_r+0xc>
 800c4ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c4ae:	f000 fc77 	bl	800cda0 <__retarget_lock_release_recursive>
 800c4b2:	e7d9      	b.n	800c468 <_fflush_r+0xc>
 800c4b4:	4b05      	ldr	r3, [pc, #20]	; (800c4cc <_fflush_r+0x70>)
 800c4b6:	429c      	cmp	r4, r3
 800c4b8:	d101      	bne.n	800c4be <_fflush_r+0x62>
 800c4ba:	68ac      	ldr	r4, [r5, #8]
 800c4bc:	e7df      	b.n	800c47e <_fflush_r+0x22>
 800c4be:	4b04      	ldr	r3, [pc, #16]	; (800c4d0 <_fflush_r+0x74>)
 800c4c0:	429c      	cmp	r4, r3
 800c4c2:	bf08      	it	eq
 800c4c4:	68ec      	ldreq	r4, [r5, #12]
 800c4c6:	e7da      	b.n	800c47e <_fflush_r+0x22>
 800c4c8:	0800fe1c 	.word	0x0800fe1c
 800c4cc:	0800fe3c 	.word	0x0800fe3c
 800c4d0:	0800fdfc 	.word	0x0800fdfc

0800c4d4 <std>:
 800c4d4:	2300      	movs	r3, #0
 800c4d6:	b510      	push	{r4, lr}
 800c4d8:	4604      	mov	r4, r0
 800c4da:	e9c0 3300 	strd	r3, r3, [r0]
 800c4de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c4e2:	6083      	str	r3, [r0, #8]
 800c4e4:	8181      	strh	r1, [r0, #12]
 800c4e6:	6643      	str	r3, [r0, #100]	; 0x64
 800c4e8:	81c2      	strh	r2, [r0, #14]
 800c4ea:	6183      	str	r3, [r0, #24]
 800c4ec:	4619      	mov	r1, r3
 800c4ee:	2208      	movs	r2, #8
 800c4f0:	305c      	adds	r0, #92	; 0x5c
 800c4f2:	f7fe fce1 	bl	800aeb8 <memset>
 800c4f6:	4b05      	ldr	r3, [pc, #20]	; (800c50c <std+0x38>)
 800c4f8:	6263      	str	r3, [r4, #36]	; 0x24
 800c4fa:	4b05      	ldr	r3, [pc, #20]	; (800c510 <std+0x3c>)
 800c4fc:	62a3      	str	r3, [r4, #40]	; 0x28
 800c4fe:	4b05      	ldr	r3, [pc, #20]	; (800c514 <std+0x40>)
 800c500:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c502:	4b05      	ldr	r3, [pc, #20]	; (800c518 <std+0x44>)
 800c504:	6224      	str	r4, [r4, #32]
 800c506:	6323      	str	r3, [r4, #48]	; 0x30
 800c508:	bd10      	pop	{r4, pc}
 800c50a:	bf00      	nop
 800c50c:	0800e2c9 	.word	0x0800e2c9
 800c510:	0800e2eb 	.word	0x0800e2eb
 800c514:	0800e323 	.word	0x0800e323
 800c518:	0800e347 	.word	0x0800e347

0800c51c <_cleanup_r>:
 800c51c:	4901      	ldr	r1, [pc, #4]	; (800c524 <_cleanup_r+0x8>)
 800c51e:	f000 b8af 	b.w	800c680 <_fwalk_reent>
 800c522:	bf00      	nop
 800c524:	0800c45d 	.word	0x0800c45d

0800c528 <__sfmoreglue>:
 800c528:	b570      	push	{r4, r5, r6, lr}
 800c52a:	2268      	movs	r2, #104	; 0x68
 800c52c:	1e4d      	subs	r5, r1, #1
 800c52e:	4355      	muls	r5, r2
 800c530:	460e      	mov	r6, r1
 800c532:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c536:	f001 f9ef 	bl	800d918 <_malloc_r>
 800c53a:	4604      	mov	r4, r0
 800c53c:	b140      	cbz	r0, 800c550 <__sfmoreglue+0x28>
 800c53e:	2100      	movs	r1, #0
 800c540:	e9c0 1600 	strd	r1, r6, [r0]
 800c544:	300c      	adds	r0, #12
 800c546:	60a0      	str	r0, [r4, #8]
 800c548:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c54c:	f7fe fcb4 	bl	800aeb8 <memset>
 800c550:	4620      	mov	r0, r4
 800c552:	bd70      	pop	{r4, r5, r6, pc}

0800c554 <__sfp_lock_acquire>:
 800c554:	4801      	ldr	r0, [pc, #4]	; (800c55c <__sfp_lock_acquire+0x8>)
 800c556:	f000 bc22 	b.w	800cd9e <__retarget_lock_acquire_recursive>
 800c55a:	bf00      	nop
 800c55c:	200006c9 	.word	0x200006c9

0800c560 <__sfp_lock_release>:
 800c560:	4801      	ldr	r0, [pc, #4]	; (800c568 <__sfp_lock_release+0x8>)
 800c562:	f000 bc1d 	b.w	800cda0 <__retarget_lock_release_recursive>
 800c566:	bf00      	nop
 800c568:	200006c9 	.word	0x200006c9

0800c56c <__sinit_lock_acquire>:
 800c56c:	4801      	ldr	r0, [pc, #4]	; (800c574 <__sinit_lock_acquire+0x8>)
 800c56e:	f000 bc16 	b.w	800cd9e <__retarget_lock_acquire_recursive>
 800c572:	bf00      	nop
 800c574:	200006ca 	.word	0x200006ca

0800c578 <__sinit_lock_release>:
 800c578:	4801      	ldr	r0, [pc, #4]	; (800c580 <__sinit_lock_release+0x8>)
 800c57a:	f000 bc11 	b.w	800cda0 <__retarget_lock_release_recursive>
 800c57e:	bf00      	nop
 800c580:	200006ca 	.word	0x200006ca

0800c584 <__sinit>:
 800c584:	b510      	push	{r4, lr}
 800c586:	4604      	mov	r4, r0
 800c588:	f7ff fff0 	bl	800c56c <__sinit_lock_acquire>
 800c58c:	69a3      	ldr	r3, [r4, #24]
 800c58e:	b11b      	cbz	r3, 800c598 <__sinit+0x14>
 800c590:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c594:	f7ff bff0 	b.w	800c578 <__sinit_lock_release>
 800c598:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c59c:	6523      	str	r3, [r4, #80]	; 0x50
 800c59e:	4b13      	ldr	r3, [pc, #76]	; (800c5ec <__sinit+0x68>)
 800c5a0:	4a13      	ldr	r2, [pc, #76]	; (800c5f0 <__sinit+0x6c>)
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	62a2      	str	r2, [r4, #40]	; 0x28
 800c5a6:	42a3      	cmp	r3, r4
 800c5a8:	bf04      	itt	eq
 800c5aa:	2301      	moveq	r3, #1
 800c5ac:	61a3      	streq	r3, [r4, #24]
 800c5ae:	4620      	mov	r0, r4
 800c5b0:	f000 f820 	bl	800c5f4 <__sfp>
 800c5b4:	6060      	str	r0, [r4, #4]
 800c5b6:	4620      	mov	r0, r4
 800c5b8:	f000 f81c 	bl	800c5f4 <__sfp>
 800c5bc:	60a0      	str	r0, [r4, #8]
 800c5be:	4620      	mov	r0, r4
 800c5c0:	f000 f818 	bl	800c5f4 <__sfp>
 800c5c4:	2200      	movs	r2, #0
 800c5c6:	60e0      	str	r0, [r4, #12]
 800c5c8:	2104      	movs	r1, #4
 800c5ca:	6860      	ldr	r0, [r4, #4]
 800c5cc:	f7ff ff82 	bl	800c4d4 <std>
 800c5d0:	68a0      	ldr	r0, [r4, #8]
 800c5d2:	2201      	movs	r2, #1
 800c5d4:	2109      	movs	r1, #9
 800c5d6:	f7ff ff7d 	bl	800c4d4 <std>
 800c5da:	68e0      	ldr	r0, [r4, #12]
 800c5dc:	2202      	movs	r2, #2
 800c5de:	2112      	movs	r1, #18
 800c5e0:	f7ff ff78 	bl	800c4d4 <std>
 800c5e4:	2301      	movs	r3, #1
 800c5e6:	61a3      	str	r3, [r4, #24]
 800c5e8:	e7d2      	b.n	800c590 <__sinit+0xc>
 800c5ea:	bf00      	nop
 800c5ec:	0800fc90 	.word	0x0800fc90
 800c5f0:	0800c51d 	.word	0x0800c51d

0800c5f4 <__sfp>:
 800c5f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5f6:	4607      	mov	r7, r0
 800c5f8:	f7ff ffac 	bl	800c554 <__sfp_lock_acquire>
 800c5fc:	4b1e      	ldr	r3, [pc, #120]	; (800c678 <__sfp+0x84>)
 800c5fe:	681e      	ldr	r6, [r3, #0]
 800c600:	69b3      	ldr	r3, [r6, #24]
 800c602:	b913      	cbnz	r3, 800c60a <__sfp+0x16>
 800c604:	4630      	mov	r0, r6
 800c606:	f7ff ffbd 	bl	800c584 <__sinit>
 800c60a:	3648      	adds	r6, #72	; 0x48
 800c60c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c610:	3b01      	subs	r3, #1
 800c612:	d503      	bpl.n	800c61c <__sfp+0x28>
 800c614:	6833      	ldr	r3, [r6, #0]
 800c616:	b30b      	cbz	r3, 800c65c <__sfp+0x68>
 800c618:	6836      	ldr	r6, [r6, #0]
 800c61a:	e7f7      	b.n	800c60c <__sfp+0x18>
 800c61c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c620:	b9d5      	cbnz	r5, 800c658 <__sfp+0x64>
 800c622:	4b16      	ldr	r3, [pc, #88]	; (800c67c <__sfp+0x88>)
 800c624:	60e3      	str	r3, [r4, #12]
 800c626:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c62a:	6665      	str	r5, [r4, #100]	; 0x64
 800c62c:	f000 fbb6 	bl	800cd9c <__retarget_lock_init_recursive>
 800c630:	f7ff ff96 	bl	800c560 <__sfp_lock_release>
 800c634:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c638:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c63c:	6025      	str	r5, [r4, #0]
 800c63e:	61a5      	str	r5, [r4, #24]
 800c640:	2208      	movs	r2, #8
 800c642:	4629      	mov	r1, r5
 800c644:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c648:	f7fe fc36 	bl	800aeb8 <memset>
 800c64c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c650:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c654:	4620      	mov	r0, r4
 800c656:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c658:	3468      	adds	r4, #104	; 0x68
 800c65a:	e7d9      	b.n	800c610 <__sfp+0x1c>
 800c65c:	2104      	movs	r1, #4
 800c65e:	4638      	mov	r0, r7
 800c660:	f7ff ff62 	bl	800c528 <__sfmoreglue>
 800c664:	4604      	mov	r4, r0
 800c666:	6030      	str	r0, [r6, #0]
 800c668:	2800      	cmp	r0, #0
 800c66a:	d1d5      	bne.n	800c618 <__sfp+0x24>
 800c66c:	f7ff ff78 	bl	800c560 <__sfp_lock_release>
 800c670:	230c      	movs	r3, #12
 800c672:	603b      	str	r3, [r7, #0]
 800c674:	e7ee      	b.n	800c654 <__sfp+0x60>
 800c676:	bf00      	nop
 800c678:	0800fc90 	.word	0x0800fc90
 800c67c:	ffff0001 	.word	0xffff0001

0800c680 <_fwalk_reent>:
 800c680:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c684:	4606      	mov	r6, r0
 800c686:	4688      	mov	r8, r1
 800c688:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c68c:	2700      	movs	r7, #0
 800c68e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c692:	f1b9 0901 	subs.w	r9, r9, #1
 800c696:	d505      	bpl.n	800c6a4 <_fwalk_reent+0x24>
 800c698:	6824      	ldr	r4, [r4, #0]
 800c69a:	2c00      	cmp	r4, #0
 800c69c:	d1f7      	bne.n	800c68e <_fwalk_reent+0xe>
 800c69e:	4638      	mov	r0, r7
 800c6a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c6a4:	89ab      	ldrh	r3, [r5, #12]
 800c6a6:	2b01      	cmp	r3, #1
 800c6a8:	d907      	bls.n	800c6ba <_fwalk_reent+0x3a>
 800c6aa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c6ae:	3301      	adds	r3, #1
 800c6b0:	d003      	beq.n	800c6ba <_fwalk_reent+0x3a>
 800c6b2:	4629      	mov	r1, r5
 800c6b4:	4630      	mov	r0, r6
 800c6b6:	47c0      	blx	r8
 800c6b8:	4307      	orrs	r7, r0
 800c6ba:	3568      	adds	r5, #104	; 0x68
 800c6bc:	e7e9      	b.n	800c692 <_fwalk_reent+0x12>

0800c6be <rshift>:
 800c6be:	6903      	ldr	r3, [r0, #16]
 800c6c0:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c6c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c6c8:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c6cc:	f100 0414 	add.w	r4, r0, #20
 800c6d0:	dd45      	ble.n	800c75e <rshift+0xa0>
 800c6d2:	f011 011f 	ands.w	r1, r1, #31
 800c6d6:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c6da:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c6de:	d10c      	bne.n	800c6fa <rshift+0x3c>
 800c6e0:	f100 0710 	add.w	r7, r0, #16
 800c6e4:	4629      	mov	r1, r5
 800c6e6:	42b1      	cmp	r1, r6
 800c6e8:	d334      	bcc.n	800c754 <rshift+0x96>
 800c6ea:	1a9b      	subs	r3, r3, r2
 800c6ec:	009b      	lsls	r3, r3, #2
 800c6ee:	1eea      	subs	r2, r5, #3
 800c6f0:	4296      	cmp	r6, r2
 800c6f2:	bf38      	it	cc
 800c6f4:	2300      	movcc	r3, #0
 800c6f6:	4423      	add	r3, r4
 800c6f8:	e015      	b.n	800c726 <rshift+0x68>
 800c6fa:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c6fe:	f1c1 0820 	rsb	r8, r1, #32
 800c702:	40cf      	lsrs	r7, r1
 800c704:	f105 0e04 	add.w	lr, r5, #4
 800c708:	46a1      	mov	r9, r4
 800c70a:	4576      	cmp	r6, lr
 800c70c:	46f4      	mov	ip, lr
 800c70e:	d815      	bhi.n	800c73c <rshift+0x7e>
 800c710:	1a9a      	subs	r2, r3, r2
 800c712:	0092      	lsls	r2, r2, #2
 800c714:	3a04      	subs	r2, #4
 800c716:	3501      	adds	r5, #1
 800c718:	42ae      	cmp	r6, r5
 800c71a:	bf38      	it	cc
 800c71c:	2200      	movcc	r2, #0
 800c71e:	18a3      	adds	r3, r4, r2
 800c720:	50a7      	str	r7, [r4, r2]
 800c722:	b107      	cbz	r7, 800c726 <rshift+0x68>
 800c724:	3304      	adds	r3, #4
 800c726:	1b1a      	subs	r2, r3, r4
 800c728:	42a3      	cmp	r3, r4
 800c72a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c72e:	bf08      	it	eq
 800c730:	2300      	moveq	r3, #0
 800c732:	6102      	str	r2, [r0, #16]
 800c734:	bf08      	it	eq
 800c736:	6143      	streq	r3, [r0, #20]
 800c738:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c73c:	f8dc c000 	ldr.w	ip, [ip]
 800c740:	fa0c fc08 	lsl.w	ip, ip, r8
 800c744:	ea4c 0707 	orr.w	r7, ip, r7
 800c748:	f849 7b04 	str.w	r7, [r9], #4
 800c74c:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c750:	40cf      	lsrs	r7, r1
 800c752:	e7da      	b.n	800c70a <rshift+0x4c>
 800c754:	f851 cb04 	ldr.w	ip, [r1], #4
 800c758:	f847 cf04 	str.w	ip, [r7, #4]!
 800c75c:	e7c3      	b.n	800c6e6 <rshift+0x28>
 800c75e:	4623      	mov	r3, r4
 800c760:	e7e1      	b.n	800c726 <rshift+0x68>

0800c762 <__hexdig_fun>:
 800c762:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800c766:	2b09      	cmp	r3, #9
 800c768:	d802      	bhi.n	800c770 <__hexdig_fun+0xe>
 800c76a:	3820      	subs	r0, #32
 800c76c:	b2c0      	uxtb	r0, r0
 800c76e:	4770      	bx	lr
 800c770:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800c774:	2b05      	cmp	r3, #5
 800c776:	d801      	bhi.n	800c77c <__hexdig_fun+0x1a>
 800c778:	3847      	subs	r0, #71	; 0x47
 800c77a:	e7f7      	b.n	800c76c <__hexdig_fun+0xa>
 800c77c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800c780:	2b05      	cmp	r3, #5
 800c782:	d801      	bhi.n	800c788 <__hexdig_fun+0x26>
 800c784:	3827      	subs	r0, #39	; 0x27
 800c786:	e7f1      	b.n	800c76c <__hexdig_fun+0xa>
 800c788:	2000      	movs	r0, #0
 800c78a:	4770      	bx	lr

0800c78c <__gethex>:
 800c78c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c790:	ed2d 8b02 	vpush	{d8}
 800c794:	b089      	sub	sp, #36	; 0x24
 800c796:	ee08 0a10 	vmov	s16, r0
 800c79a:	9304      	str	r3, [sp, #16]
 800c79c:	4bb4      	ldr	r3, [pc, #720]	; (800ca70 <__gethex+0x2e4>)
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	9301      	str	r3, [sp, #4]
 800c7a2:	4618      	mov	r0, r3
 800c7a4:	468b      	mov	fp, r1
 800c7a6:	4690      	mov	r8, r2
 800c7a8:	f7f3 fd32 	bl	8000210 <strlen>
 800c7ac:	9b01      	ldr	r3, [sp, #4]
 800c7ae:	f8db 2000 	ldr.w	r2, [fp]
 800c7b2:	4403      	add	r3, r0
 800c7b4:	4682      	mov	sl, r0
 800c7b6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800c7ba:	9305      	str	r3, [sp, #20]
 800c7bc:	1c93      	adds	r3, r2, #2
 800c7be:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800c7c2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800c7c6:	32fe      	adds	r2, #254	; 0xfe
 800c7c8:	18d1      	adds	r1, r2, r3
 800c7ca:	461f      	mov	r7, r3
 800c7cc:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c7d0:	9100      	str	r1, [sp, #0]
 800c7d2:	2830      	cmp	r0, #48	; 0x30
 800c7d4:	d0f8      	beq.n	800c7c8 <__gethex+0x3c>
 800c7d6:	f7ff ffc4 	bl	800c762 <__hexdig_fun>
 800c7da:	4604      	mov	r4, r0
 800c7dc:	2800      	cmp	r0, #0
 800c7de:	d13a      	bne.n	800c856 <__gethex+0xca>
 800c7e0:	9901      	ldr	r1, [sp, #4]
 800c7e2:	4652      	mov	r2, sl
 800c7e4:	4638      	mov	r0, r7
 800c7e6:	f7fe fe33 	bl	800b450 <strncmp>
 800c7ea:	4605      	mov	r5, r0
 800c7ec:	2800      	cmp	r0, #0
 800c7ee:	d168      	bne.n	800c8c2 <__gethex+0x136>
 800c7f0:	f817 000a 	ldrb.w	r0, [r7, sl]
 800c7f4:	eb07 060a 	add.w	r6, r7, sl
 800c7f8:	f7ff ffb3 	bl	800c762 <__hexdig_fun>
 800c7fc:	2800      	cmp	r0, #0
 800c7fe:	d062      	beq.n	800c8c6 <__gethex+0x13a>
 800c800:	4633      	mov	r3, r6
 800c802:	7818      	ldrb	r0, [r3, #0]
 800c804:	2830      	cmp	r0, #48	; 0x30
 800c806:	461f      	mov	r7, r3
 800c808:	f103 0301 	add.w	r3, r3, #1
 800c80c:	d0f9      	beq.n	800c802 <__gethex+0x76>
 800c80e:	f7ff ffa8 	bl	800c762 <__hexdig_fun>
 800c812:	2301      	movs	r3, #1
 800c814:	fab0 f480 	clz	r4, r0
 800c818:	0964      	lsrs	r4, r4, #5
 800c81a:	4635      	mov	r5, r6
 800c81c:	9300      	str	r3, [sp, #0]
 800c81e:	463a      	mov	r2, r7
 800c820:	4616      	mov	r6, r2
 800c822:	3201      	adds	r2, #1
 800c824:	7830      	ldrb	r0, [r6, #0]
 800c826:	f7ff ff9c 	bl	800c762 <__hexdig_fun>
 800c82a:	2800      	cmp	r0, #0
 800c82c:	d1f8      	bne.n	800c820 <__gethex+0x94>
 800c82e:	9901      	ldr	r1, [sp, #4]
 800c830:	4652      	mov	r2, sl
 800c832:	4630      	mov	r0, r6
 800c834:	f7fe fe0c 	bl	800b450 <strncmp>
 800c838:	b980      	cbnz	r0, 800c85c <__gethex+0xd0>
 800c83a:	b94d      	cbnz	r5, 800c850 <__gethex+0xc4>
 800c83c:	eb06 050a 	add.w	r5, r6, sl
 800c840:	462a      	mov	r2, r5
 800c842:	4616      	mov	r6, r2
 800c844:	3201      	adds	r2, #1
 800c846:	7830      	ldrb	r0, [r6, #0]
 800c848:	f7ff ff8b 	bl	800c762 <__hexdig_fun>
 800c84c:	2800      	cmp	r0, #0
 800c84e:	d1f8      	bne.n	800c842 <__gethex+0xb6>
 800c850:	1bad      	subs	r5, r5, r6
 800c852:	00ad      	lsls	r5, r5, #2
 800c854:	e004      	b.n	800c860 <__gethex+0xd4>
 800c856:	2400      	movs	r4, #0
 800c858:	4625      	mov	r5, r4
 800c85a:	e7e0      	b.n	800c81e <__gethex+0x92>
 800c85c:	2d00      	cmp	r5, #0
 800c85e:	d1f7      	bne.n	800c850 <__gethex+0xc4>
 800c860:	7833      	ldrb	r3, [r6, #0]
 800c862:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c866:	2b50      	cmp	r3, #80	; 0x50
 800c868:	d13b      	bne.n	800c8e2 <__gethex+0x156>
 800c86a:	7873      	ldrb	r3, [r6, #1]
 800c86c:	2b2b      	cmp	r3, #43	; 0x2b
 800c86e:	d02c      	beq.n	800c8ca <__gethex+0x13e>
 800c870:	2b2d      	cmp	r3, #45	; 0x2d
 800c872:	d02e      	beq.n	800c8d2 <__gethex+0x146>
 800c874:	1c71      	adds	r1, r6, #1
 800c876:	f04f 0900 	mov.w	r9, #0
 800c87a:	7808      	ldrb	r0, [r1, #0]
 800c87c:	f7ff ff71 	bl	800c762 <__hexdig_fun>
 800c880:	1e43      	subs	r3, r0, #1
 800c882:	b2db      	uxtb	r3, r3
 800c884:	2b18      	cmp	r3, #24
 800c886:	d82c      	bhi.n	800c8e2 <__gethex+0x156>
 800c888:	f1a0 0210 	sub.w	r2, r0, #16
 800c88c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c890:	f7ff ff67 	bl	800c762 <__hexdig_fun>
 800c894:	1e43      	subs	r3, r0, #1
 800c896:	b2db      	uxtb	r3, r3
 800c898:	2b18      	cmp	r3, #24
 800c89a:	d91d      	bls.n	800c8d8 <__gethex+0x14c>
 800c89c:	f1b9 0f00 	cmp.w	r9, #0
 800c8a0:	d000      	beq.n	800c8a4 <__gethex+0x118>
 800c8a2:	4252      	negs	r2, r2
 800c8a4:	4415      	add	r5, r2
 800c8a6:	f8cb 1000 	str.w	r1, [fp]
 800c8aa:	b1e4      	cbz	r4, 800c8e6 <__gethex+0x15a>
 800c8ac:	9b00      	ldr	r3, [sp, #0]
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	bf14      	ite	ne
 800c8b2:	2700      	movne	r7, #0
 800c8b4:	2706      	moveq	r7, #6
 800c8b6:	4638      	mov	r0, r7
 800c8b8:	b009      	add	sp, #36	; 0x24
 800c8ba:	ecbd 8b02 	vpop	{d8}
 800c8be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8c2:	463e      	mov	r6, r7
 800c8c4:	4625      	mov	r5, r4
 800c8c6:	2401      	movs	r4, #1
 800c8c8:	e7ca      	b.n	800c860 <__gethex+0xd4>
 800c8ca:	f04f 0900 	mov.w	r9, #0
 800c8ce:	1cb1      	adds	r1, r6, #2
 800c8d0:	e7d3      	b.n	800c87a <__gethex+0xee>
 800c8d2:	f04f 0901 	mov.w	r9, #1
 800c8d6:	e7fa      	b.n	800c8ce <__gethex+0x142>
 800c8d8:	230a      	movs	r3, #10
 800c8da:	fb03 0202 	mla	r2, r3, r2, r0
 800c8de:	3a10      	subs	r2, #16
 800c8e0:	e7d4      	b.n	800c88c <__gethex+0x100>
 800c8e2:	4631      	mov	r1, r6
 800c8e4:	e7df      	b.n	800c8a6 <__gethex+0x11a>
 800c8e6:	1bf3      	subs	r3, r6, r7
 800c8e8:	3b01      	subs	r3, #1
 800c8ea:	4621      	mov	r1, r4
 800c8ec:	2b07      	cmp	r3, #7
 800c8ee:	dc0b      	bgt.n	800c908 <__gethex+0x17c>
 800c8f0:	ee18 0a10 	vmov	r0, s16
 800c8f4:	f000 facc 	bl	800ce90 <_Balloc>
 800c8f8:	4604      	mov	r4, r0
 800c8fa:	b940      	cbnz	r0, 800c90e <__gethex+0x182>
 800c8fc:	4b5d      	ldr	r3, [pc, #372]	; (800ca74 <__gethex+0x2e8>)
 800c8fe:	4602      	mov	r2, r0
 800c900:	21de      	movs	r1, #222	; 0xde
 800c902:	485d      	ldr	r0, [pc, #372]	; (800ca78 <__gethex+0x2ec>)
 800c904:	f001 fd42 	bl	800e38c <__assert_func>
 800c908:	3101      	adds	r1, #1
 800c90a:	105b      	asrs	r3, r3, #1
 800c90c:	e7ee      	b.n	800c8ec <__gethex+0x160>
 800c90e:	f100 0914 	add.w	r9, r0, #20
 800c912:	f04f 0b00 	mov.w	fp, #0
 800c916:	f1ca 0301 	rsb	r3, sl, #1
 800c91a:	f8cd 9008 	str.w	r9, [sp, #8]
 800c91e:	f8cd b000 	str.w	fp, [sp]
 800c922:	9306      	str	r3, [sp, #24]
 800c924:	42b7      	cmp	r7, r6
 800c926:	d340      	bcc.n	800c9aa <__gethex+0x21e>
 800c928:	9802      	ldr	r0, [sp, #8]
 800c92a:	9b00      	ldr	r3, [sp, #0]
 800c92c:	f840 3b04 	str.w	r3, [r0], #4
 800c930:	eba0 0009 	sub.w	r0, r0, r9
 800c934:	1080      	asrs	r0, r0, #2
 800c936:	0146      	lsls	r6, r0, #5
 800c938:	6120      	str	r0, [r4, #16]
 800c93a:	4618      	mov	r0, r3
 800c93c:	f000 fb9a 	bl	800d074 <__hi0bits>
 800c940:	1a30      	subs	r0, r6, r0
 800c942:	f8d8 6000 	ldr.w	r6, [r8]
 800c946:	42b0      	cmp	r0, r6
 800c948:	dd63      	ble.n	800ca12 <__gethex+0x286>
 800c94a:	1b87      	subs	r7, r0, r6
 800c94c:	4639      	mov	r1, r7
 800c94e:	4620      	mov	r0, r4
 800c950:	f000 ff3e 	bl	800d7d0 <__any_on>
 800c954:	4682      	mov	sl, r0
 800c956:	b1a8      	cbz	r0, 800c984 <__gethex+0x1f8>
 800c958:	1e7b      	subs	r3, r7, #1
 800c95a:	1159      	asrs	r1, r3, #5
 800c95c:	f003 021f 	and.w	r2, r3, #31
 800c960:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800c964:	f04f 0a01 	mov.w	sl, #1
 800c968:	fa0a f202 	lsl.w	r2, sl, r2
 800c96c:	420a      	tst	r2, r1
 800c96e:	d009      	beq.n	800c984 <__gethex+0x1f8>
 800c970:	4553      	cmp	r3, sl
 800c972:	dd05      	ble.n	800c980 <__gethex+0x1f4>
 800c974:	1eb9      	subs	r1, r7, #2
 800c976:	4620      	mov	r0, r4
 800c978:	f000 ff2a 	bl	800d7d0 <__any_on>
 800c97c:	2800      	cmp	r0, #0
 800c97e:	d145      	bne.n	800ca0c <__gethex+0x280>
 800c980:	f04f 0a02 	mov.w	sl, #2
 800c984:	4639      	mov	r1, r7
 800c986:	4620      	mov	r0, r4
 800c988:	f7ff fe99 	bl	800c6be <rshift>
 800c98c:	443d      	add	r5, r7
 800c98e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c992:	42ab      	cmp	r3, r5
 800c994:	da4c      	bge.n	800ca30 <__gethex+0x2a4>
 800c996:	ee18 0a10 	vmov	r0, s16
 800c99a:	4621      	mov	r1, r4
 800c99c:	f000 fab8 	bl	800cf10 <_Bfree>
 800c9a0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c9a2:	2300      	movs	r3, #0
 800c9a4:	6013      	str	r3, [r2, #0]
 800c9a6:	27a3      	movs	r7, #163	; 0xa3
 800c9a8:	e785      	b.n	800c8b6 <__gethex+0x12a>
 800c9aa:	1e73      	subs	r3, r6, #1
 800c9ac:	9a05      	ldr	r2, [sp, #20]
 800c9ae:	9303      	str	r3, [sp, #12]
 800c9b0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c9b4:	4293      	cmp	r3, r2
 800c9b6:	d019      	beq.n	800c9ec <__gethex+0x260>
 800c9b8:	f1bb 0f20 	cmp.w	fp, #32
 800c9bc:	d107      	bne.n	800c9ce <__gethex+0x242>
 800c9be:	9b02      	ldr	r3, [sp, #8]
 800c9c0:	9a00      	ldr	r2, [sp, #0]
 800c9c2:	f843 2b04 	str.w	r2, [r3], #4
 800c9c6:	9302      	str	r3, [sp, #8]
 800c9c8:	2300      	movs	r3, #0
 800c9ca:	9300      	str	r3, [sp, #0]
 800c9cc:	469b      	mov	fp, r3
 800c9ce:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800c9d2:	f7ff fec6 	bl	800c762 <__hexdig_fun>
 800c9d6:	9b00      	ldr	r3, [sp, #0]
 800c9d8:	f000 000f 	and.w	r0, r0, #15
 800c9dc:	fa00 f00b 	lsl.w	r0, r0, fp
 800c9e0:	4303      	orrs	r3, r0
 800c9e2:	9300      	str	r3, [sp, #0]
 800c9e4:	f10b 0b04 	add.w	fp, fp, #4
 800c9e8:	9b03      	ldr	r3, [sp, #12]
 800c9ea:	e00d      	b.n	800ca08 <__gethex+0x27c>
 800c9ec:	9b03      	ldr	r3, [sp, #12]
 800c9ee:	9a06      	ldr	r2, [sp, #24]
 800c9f0:	4413      	add	r3, r2
 800c9f2:	42bb      	cmp	r3, r7
 800c9f4:	d3e0      	bcc.n	800c9b8 <__gethex+0x22c>
 800c9f6:	4618      	mov	r0, r3
 800c9f8:	9901      	ldr	r1, [sp, #4]
 800c9fa:	9307      	str	r3, [sp, #28]
 800c9fc:	4652      	mov	r2, sl
 800c9fe:	f7fe fd27 	bl	800b450 <strncmp>
 800ca02:	9b07      	ldr	r3, [sp, #28]
 800ca04:	2800      	cmp	r0, #0
 800ca06:	d1d7      	bne.n	800c9b8 <__gethex+0x22c>
 800ca08:	461e      	mov	r6, r3
 800ca0a:	e78b      	b.n	800c924 <__gethex+0x198>
 800ca0c:	f04f 0a03 	mov.w	sl, #3
 800ca10:	e7b8      	b.n	800c984 <__gethex+0x1f8>
 800ca12:	da0a      	bge.n	800ca2a <__gethex+0x29e>
 800ca14:	1a37      	subs	r7, r6, r0
 800ca16:	4621      	mov	r1, r4
 800ca18:	ee18 0a10 	vmov	r0, s16
 800ca1c:	463a      	mov	r2, r7
 800ca1e:	f000 fc93 	bl	800d348 <__lshift>
 800ca22:	1bed      	subs	r5, r5, r7
 800ca24:	4604      	mov	r4, r0
 800ca26:	f100 0914 	add.w	r9, r0, #20
 800ca2a:	f04f 0a00 	mov.w	sl, #0
 800ca2e:	e7ae      	b.n	800c98e <__gethex+0x202>
 800ca30:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800ca34:	42a8      	cmp	r0, r5
 800ca36:	dd72      	ble.n	800cb1e <__gethex+0x392>
 800ca38:	1b45      	subs	r5, r0, r5
 800ca3a:	42ae      	cmp	r6, r5
 800ca3c:	dc36      	bgt.n	800caac <__gethex+0x320>
 800ca3e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ca42:	2b02      	cmp	r3, #2
 800ca44:	d02a      	beq.n	800ca9c <__gethex+0x310>
 800ca46:	2b03      	cmp	r3, #3
 800ca48:	d02c      	beq.n	800caa4 <__gethex+0x318>
 800ca4a:	2b01      	cmp	r3, #1
 800ca4c:	d11c      	bne.n	800ca88 <__gethex+0x2fc>
 800ca4e:	42ae      	cmp	r6, r5
 800ca50:	d11a      	bne.n	800ca88 <__gethex+0x2fc>
 800ca52:	2e01      	cmp	r6, #1
 800ca54:	d112      	bne.n	800ca7c <__gethex+0x2f0>
 800ca56:	9a04      	ldr	r2, [sp, #16]
 800ca58:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ca5c:	6013      	str	r3, [r2, #0]
 800ca5e:	2301      	movs	r3, #1
 800ca60:	6123      	str	r3, [r4, #16]
 800ca62:	f8c9 3000 	str.w	r3, [r9]
 800ca66:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ca68:	2762      	movs	r7, #98	; 0x62
 800ca6a:	601c      	str	r4, [r3, #0]
 800ca6c:	e723      	b.n	800c8b6 <__gethex+0x12a>
 800ca6e:	bf00      	nop
 800ca70:	0800fed4 	.word	0x0800fed4
 800ca74:	0800fe5c 	.word	0x0800fe5c
 800ca78:	0800fe6d 	.word	0x0800fe6d
 800ca7c:	1e71      	subs	r1, r6, #1
 800ca7e:	4620      	mov	r0, r4
 800ca80:	f000 fea6 	bl	800d7d0 <__any_on>
 800ca84:	2800      	cmp	r0, #0
 800ca86:	d1e6      	bne.n	800ca56 <__gethex+0x2ca>
 800ca88:	ee18 0a10 	vmov	r0, s16
 800ca8c:	4621      	mov	r1, r4
 800ca8e:	f000 fa3f 	bl	800cf10 <_Bfree>
 800ca92:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ca94:	2300      	movs	r3, #0
 800ca96:	6013      	str	r3, [r2, #0]
 800ca98:	2750      	movs	r7, #80	; 0x50
 800ca9a:	e70c      	b.n	800c8b6 <__gethex+0x12a>
 800ca9c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d1f2      	bne.n	800ca88 <__gethex+0x2fc>
 800caa2:	e7d8      	b.n	800ca56 <__gethex+0x2ca>
 800caa4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d1d5      	bne.n	800ca56 <__gethex+0x2ca>
 800caaa:	e7ed      	b.n	800ca88 <__gethex+0x2fc>
 800caac:	1e6f      	subs	r7, r5, #1
 800caae:	f1ba 0f00 	cmp.w	sl, #0
 800cab2:	d131      	bne.n	800cb18 <__gethex+0x38c>
 800cab4:	b127      	cbz	r7, 800cac0 <__gethex+0x334>
 800cab6:	4639      	mov	r1, r7
 800cab8:	4620      	mov	r0, r4
 800caba:	f000 fe89 	bl	800d7d0 <__any_on>
 800cabe:	4682      	mov	sl, r0
 800cac0:	117b      	asrs	r3, r7, #5
 800cac2:	2101      	movs	r1, #1
 800cac4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800cac8:	f007 071f 	and.w	r7, r7, #31
 800cacc:	fa01 f707 	lsl.w	r7, r1, r7
 800cad0:	421f      	tst	r7, r3
 800cad2:	4629      	mov	r1, r5
 800cad4:	4620      	mov	r0, r4
 800cad6:	bf18      	it	ne
 800cad8:	f04a 0a02 	orrne.w	sl, sl, #2
 800cadc:	1b76      	subs	r6, r6, r5
 800cade:	f7ff fdee 	bl	800c6be <rshift>
 800cae2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800cae6:	2702      	movs	r7, #2
 800cae8:	f1ba 0f00 	cmp.w	sl, #0
 800caec:	d048      	beq.n	800cb80 <__gethex+0x3f4>
 800caee:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800caf2:	2b02      	cmp	r3, #2
 800caf4:	d015      	beq.n	800cb22 <__gethex+0x396>
 800caf6:	2b03      	cmp	r3, #3
 800caf8:	d017      	beq.n	800cb2a <__gethex+0x39e>
 800cafa:	2b01      	cmp	r3, #1
 800cafc:	d109      	bne.n	800cb12 <__gethex+0x386>
 800cafe:	f01a 0f02 	tst.w	sl, #2
 800cb02:	d006      	beq.n	800cb12 <__gethex+0x386>
 800cb04:	f8d9 0000 	ldr.w	r0, [r9]
 800cb08:	ea4a 0a00 	orr.w	sl, sl, r0
 800cb0c:	f01a 0f01 	tst.w	sl, #1
 800cb10:	d10e      	bne.n	800cb30 <__gethex+0x3a4>
 800cb12:	f047 0710 	orr.w	r7, r7, #16
 800cb16:	e033      	b.n	800cb80 <__gethex+0x3f4>
 800cb18:	f04f 0a01 	mov.w	sl, #1
 800cb1c:	e7d0      	b.n	800cac0 <__gethex+0x334>
 800cb1e:	2701      	movs	r7, #1
 800cb20:	e7e2      	b.n	800cae8 <__gethex+0x35c>
 800cb22:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cb24:	f1c3 0301 	rsb	r3, r3, #1
 800cb28:	9315      	str	r3, [sp, #84]	; 0x54
 800cb2a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d0f0      	beq.n	800cb12 <__gethex+0x386>
 800cb30:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800cb34:	f104 0314 	add.w	r3, r4, #20
 800cb38:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800cb3c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800cb40:	f04f 0c00 	mov.w	ip, #0
 800cb44:	4618      	mov	r0, r3
 800cb46:	f853 2b04 	ldr.w	r2, [r3], #4
 800cb4a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800cb4e:	d01c      	beq.n	800cb8a <__gethex+0x3fe>
 800cb50:	3201      	adds	r2, #1
 800cb52:	6002      	str	r2, [r0, #0]
 800cb54:	2f02      	cmp	r7, #2
 800cb56:	f104 0314 	add.w	r3, r4, #20
 800cb5a:	d13f      	bne.n	800cbdc <__gethex+0x450>
 800cb5c:	f8d8 2000 	ldr.w	r2, [r8]
 800cb60:	3a01      	subs	r2, #1
 800cb62:	42b2      	cmp	r2, r6
 800cb64:	d10a      	bne.n	800cb7c <__gethex+0x3f0>
 800cb66:	1171      	asrs	r1, r6, #5
 800cb68:	2201      	movs	r2, #1
 800cb6a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800cb6e:	f006 061f 	and.w	r6, r6, #31
 800cb72:	fa02 f606 	lsl.w	r6, r2, r6
 800cb76:	421e      	tst	r6, r3
 800cb78:	bf18      	it	ne
 800cb7a:	4617      	movne	r7, r2
 800cb7c:	f047 0720 	orr.w	r7, r7, #32
 800cb80:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800cb82:	601c      	str	r4, [r3, #0]
 800cb84:	9b04      	ldr	r3, [sp, #16]
 800cb86:	601d      	str	r5, [r3, #0]
 800cb88:	e695      	b.n	800c8b6 <__gethex+0x12a>
 800cb8a:	4299      	cmp	r1, r3
 800cb8c:	f843 cc04 	str.w	ip, [r3, #-4]
 800cb90:	d8d8      	bhi.n	800cb44 <__gethex+0x3b8>
 800cb92:	68a3      	ldr	r3, [r4, #8]
 800cb94:	459b      	cmp	fp, r3
 800cb96:	db19      	blt.n	800cbcc <__gethex+0x440>
 800cb98:	6861      	ldr	r1, [r4, #4]
 800cb9a:	ee18 0a10 	vmov	r0, s16
 800cb9e:	3101      	adds	r1, #1
 800cba0:	f000 f976 	bl	800ce90 <_Balloc>
 800cba4:	4681      	mov	r9, r0
 800cba6:	b918      	cbnz	r0, 800cbb0 <__gethex+0x424>
 800cba8:	4b1a      	ldr	r3, [pc, #104]	; (800cc14 <__gethex+0x488>)
 800cbaa:	4602      	mov	r2, r0
 800cbac:	2184      	movs	r1, #132	; 0x84
 800cbae:	e6a8      	b.n	800c902 <__gethex+0x176>
 800cbb0:	6922      	ldr	r2, [r4, #16]
 800cbb2:	3202      	adds	r2, #2
 800cbb4:	f104 010c 	add.w	r1, r4, #12
 800cbb8:	0092      	lsls	r2, r2, #2
 800cbba:	300c      	adds	r0, #12
 800cbbc:	f7fe f96e 	bl	800ae9c <memcpy>
 800cbc0:	4621      	mov	r1, r4
 800cbc2:	ee18 0a10 	vmov	r0, s16
 800cbc6:	f000 f9a3 	bl	800cf10 <_Bfree>
 800cbca:	464c      	mov	r4, r9
 800cbcc:	6923      	ldr	r3, [r4, #16]
 800cbce:	1c5a      	adds	r2, r3, #1
 800cbd0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800cbd4:	6122      	str	r2, [r4, #16]
 800cbd6:	2201      	movs	r2, #1
 800cbd8:	615a      	str	r2, [r3, #20]
 800cbda:	e7bb      	b.n	800cb54 <__gethex+0x3c8>
 800cbdc:	6922      	ldr	r2, [r4, #16]
 800cbde:	455a      	cmp	r2, fp
 800cbe0:	dd0b      	ble.n	800cbfa <__gethex+0x46e>
 800cbe2:	2101      	movs	r1, #1
 800cbe4:	4620      	mov	r0, r4
 800cbe6:	f7ff fd6a 	bl	800c6be <rshift>
 800cbea:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cbee:	3501      	adds	r5, #1
 800cbf0:	42ab      	cmp	r3, r5
 800cbf2:	f6ff aed0 	blt.w	800c996 <__gethex+0x20a>
 800cbf6:	2701      	movs	r7, #1
 800cbf8:	e7c0      	b.n	800cb7c <__gethex+0x3f0>
 800cbfa:	f016 061f 	ands.w	r6, r6, #31
 800cbfe:	d0fa      	beq.n	800cbf6 <__gethex+0x46a>
 800cc00:	4453      	add	r3, sl
 800cc02:	f1c6 0620 	rsb	r6, r6, #32
 800cc06:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800cc0a:	f000 fa33 	bl	800d074 <__hi0bits>
 800cc0e:	42b0      	cmp	r0, r6
 800cc10:	dbe7      	blt.n	800cbe2 <__gethex+0x456>
 800cc12:	e7f0      	b.n	800cbf6 <__gethex+0x46a>
 800cc14:	0800fe5c 	.word	0x0800fe5c

0800cc18 <L_shift>:
 800cc18:	f1c2 0208 	rsb	r2, r2, #8
 800cc1c:	0092      	lsls	r2, r2, #2
 800cc1e:	b570      	push	{r4, r5, r6, lr}
 800cc20:	f1c2 0620 	rsb	r6, r2, #32
 800cc24:	6843      	ldr	r3, [r0, #4]
 800cc26:	6804      	ldr	r4, [r0, #0]
 800cc28:	fa03 f506 	lsl.w	r5, r3, r6
 800cc2c:	432c      	orrs	r4, r5
 800cc2e:	40d3      	lsrs	r3, r2
 800cc30:	6004      	str	r4, [r0, #0]
 800cc32:	f840 3f04 	str.w	r3, [r0, #4]!
 800cc36:	4288      	cmp	r0, r1
 800cc38:	d3f4      	bcc.n	800cc24 <L_shift+0xc>
 800cc3a:	bd70      	pop	{r4, r5, r6, pc}

0800cc3c <__match>:
 800cc3c:	b530      	push	{r4, r5, lr}
 800cc3e:	6803      	ldr	r3, [r0, #0]
 800cc40:	3301      	adds	r3, #1
 800cc42:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cc46:	b914      	cbnz	r4, 800cc4e <__match+0x12>
 800cc48:	6003      	str	r3, [r0, #0]
 800cc4a:	2001      	movs	r0, #1
 800cc4c:	bd30      	pop	{r4, r5, pc}
 800cc4e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cc52:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800cc56:	2d19      	cmp	r5, #25
 800cc58:	bf98      	it	ls
 800cc5a:	3220      	addls	r2, #32
 800cc5c:	42a2      	cmp	r2, r4
 800cc5e:	d0f0      	beq.n	800cc42 <__match+0x6>
 800cc60:	2000      	movs	r0, #0
 800cc62:	e7f3      	b.n	800cc4c <__match+0x10>

0800cc64 <__hexnan>:
 800cc64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc68:	680b      	ldr	r3, [r1, #0]
 800cc6a:	115e      	asrs	r6, r3, #5
 800cc6c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800cc70:	f013 031f 	ands.w	r3, r3, #31
 800cc74:	b087      	sub	sp, #28
 800cc76:	bf18      	it	ne
 800cc78:	3604      	addne	r6, #4
 800cc7a:	2500      	movs	r5, #0
 800cc7c:	1f37      	subs	r7, r6, #4
 800cc7e:	4690      	mov	r8, r2
 800cc80:	6802      	ldr	r2, [r0, #0]
 800cc82:	9301      	str	r3, [sp, #4]
 800cc84:	4682      	mov	sl, r0
 800cc86:	f846 5c04 	str.w	r5, [r6, #-4]
 800cc8a:	46b9      	mov	r9, r7
 800cc8c:	463c      	mov	r4, r7
 800cc8e:	9502      	str	r5, [sp, #8]
 800cc90:	46ab      	mov	fp, r5
 800cc92:	7851      	ldrb	r1, [r2, #1]
 800cc94:	1c53      	adds	r3, r2, #1
 800cc96:	9303      	str	r3, [sp, #12]
 800cc98:	b341      	cbz	r1, 800ccec <__hexnan+0x88>
 800cc9a:	4608      	mov	r0, r1
 800cc9c:	9205      	str	r2, [sp, #20]
 800cc9e:	9104      	str	r1, [sp, #16]
 800cca0:	f7ff fd5f 	bl	800c762 <__hexdig_fun>
 800cca4:	2800      	cmp	r0, #0
 800cca6:	d14f      	bne.n	800cd48 <__hexnan+0xe4>
 800cca8:	9904      	ldr	r1, [sp, #16]
 800ccaa:	9a05      	ldr	r2, [sp, #20]
 800ccac:	2920      	cmp	r1, #32
 800ccae:	d818      	bhi.n	800cce2 <__hexnan+0x7e>
 800ccb0:	9b02      	ldr	r3, [sp, #8]
 800ccb2:	459b      	cmp	fp, r3
 800ccb4:	dd13      	ble.n	800ccde <__hexnan+0x7a>
 800ccb6:	454c      	cmp	r4, r9
 800ccb8:	d206      	bcs.n	800ccc8 <__hexnan+0x64>
 800ccba:	2d07      	cmp	r5, #7
 800ccbc:	dc04      	bgt.n	800ccc8 <__hexnan+0x64>
 800ccbe:	462a      	mov	r2, r5
 800ccc0:	4649      	mov	r1, r9
 800ccc2:	4620      	mov	r0, r4
 800ccc4:	f7ff ffa8 	bl	800cc18 <L_shift>
 800ccc8:	4544      	cmp	r4, r8
 800ccca:	d950      	bls.n	800cd6e <__hexnan+0x10a>
 800cccc:	2300      	movs	r3, #0
 800ccce:	f1a4 0904 	sub.w	r9, r4, #4
 800ccd2:	f844 3c04 	str.w	r3, [r4, #-4]
 800ccd6:	f8cd b008 	str.w	fp, [sp, #8]
 800ccda:	464c      	mov	r4, r9
 800ccdc:	461d      	mov	r5, r3
 800ccde:	9a03      	ldr	r2, [sp, #12]
 800cce0:	e7d7      	b.n	800cc92 <__hexnan+0x2e>
 800cce2:	2929      	cmp	r1, #41	; 0x29
 800cce4:	d156      	bne.n	800cd94 <__hexnan+0x130>
 800cce6:	3202      	adds	r2, #2
 800cce8:	f8ca 2000 	str.w	r2, [sl]
 800ccec:	f1bb 0f00 	cmp.w	fp, #0
 800ccf0:	d050      	beq.n	800cd94 <__hexnan+0x130>
 800ccf2:	454c      	cmp	r4, r9
 800ccf4:	d206      	bcs.n	800cd04 <__hexnan+0xa0>
 800ccf6:	2d07      	cmp	r5, #7
 800ccf8:	dc04      	bgt.n	800cd04 <__hexnan+0xa0>
 800ccfa:	462a      	mov	r2, r5
 800ccfc:	4649      	mov	r1, r9
 800ccfe:	4620      	mov	r0, r4
 800cd00:	f7ff ff8a 	bl	800cc18 <L_shift>
 800cd04:	4544      	cmp	r4, r8
 800cd06:	d934      	bls.n	800cd72 <__hexnan+0x10e>
 800cd08:	f1a8 0204 	sub.w	r2, r8, #4
 800cd0c:	4623      	mov	r3, r4
 800cd0e:	f853 1b04 	ldr.w	r1, [r3], #4
 800cd12:	f842 1f04 	str.w	r1, [r2, #4]!
 800cd16:	429f      	cmp	r7, r3
 800cd18:	d2f9      	bcs.n	800cd0e <__hexnan+0xaa>
 800cd1a:	1b3b      	subs	r3, r7, r4
 800cd1c:	f023 0303 	bic.w	r3, r3, #3
 800cd20:	3304      	adds	r3, #4
 800cd22:	3401      	adds	r4, #1
 800cd24:	3e03      	subs	r6, #3
 800cd26:	42b4      	cmp	r4, r6
 800cd28:	bf88      	it	hi
 800cd2a:	2304      	movhi	r3, #4
 800cd2c:	4443      	add	r3, r8
 800cd2e:	2200      	movs	r2, #0
 800cd30:	f843 2b04 	str.w	r2, [r3], #4
 800cd34:	429f      	cmp	r7, r3
 800cd36:	d2fb      	bcs.n	800cd30 <__hexnan+0xcc>
 800cd38:	683b      	ldr	r3, [r7, #0]
 800cd3a:	b91b      	cbnz	r3, 800cd44 <__hexnan+0xe0>
 800cd3c:	4547      	cmp	r7, r8
 800cd3e:	d127      	bne.n	800cd90 <__hexnan+0x12c>
 800cd40:	2301      	movs	r3, #1
 800cd42:	603b      	str	r3, [r7, #0]
 800cd44:	2005      	movs	r0, #5
 800cd46:	e026      	b.n	800cd96 <__hexnan+0x132>
 800cd48:	3501      	adds	r5, #1
 800cd4a:	2d08      	cmp	r5, #8
 800cd4c:	f10b 0b01 	add.w	fp, fp, #1
 800cd50:	dd06      	ble.n	800cd60 <__hexnan+0xfc>
 800cd52:	4544      	cmp	r4, r8
 800cd54:	d9c3      	bls.n	800ccde <__hexnan+0x7a>
 800cd56:	2300      	movs	r3, #0
 800cd58:	f844 3c04 	str.w	r3, [r4, #-4]
 800cd5c:	2501      	movs	r5, #1
 800cd5e:	3c04      	subs	r4, #4
 800cd60:	6822      	ldr	r2, [r4, #0]
 800cd62:	f000 000f 	and.w	r0, r0, #15
 800cd66:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800cd6a:	6022      	str	r2, [r4, #0]
 800cd6c:	e7b7      	b.n	800ccde <__hexnan+0x7a>
 800cd6e:	2508      	movs	r5, #8
 800cd70:	e7b5      	b.n	800ccde <__hexnan+0x7a>
 800cd72:	9b01      	ldr	r3, [sp, #4]
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d0df      	beq.n	800cd38 <__hexnan+0xd4>
 800cd78:	f04f 32ff 	mov.w	r2, #4294967295
 800cd7c:	f1c3 0320 	rsb	r3, r3, #32
 800cd80:	fa22 f303 	lsr.w	r3, r2, r3
 800cd84:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800cd88:	401a      	ands	r2, r3
 800cd8a:	f846 2c04 	str.w	r2, [r6, #-4]
 800cd8e:	e7d3      	b.n	800cd38 <__hexnan+0xd4>
 800cd90:	3f04      	subs	r7, #4
 800cd92:	e7d1      	b.n	800cd38 <__hexnan+0xd4>
 800cd94:	2004      	movs	r0, #4
 800cd96:	b007      	add	sp, #28
 800cd98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cd9c <__retarget_lock_init_recursive>:
 800cd9c:	4770      	bx	lr

0800cd9e <__retarget_lock_acquire_recursive>:
 800cd9e:	4770      	bx	lr

0800cda0 <__retarget_lock_release_recursive>:
 800cda0:	4770      	bx	lr

0800cda2 <__swhatbuf_r>:
 800cda2:	b570      	push	{r4, r5, r6, lr}
 800cda4:	460e      	mov	r6, r1
 800cda6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cdaa:	2900      	cmp	r1, #0
 800cdac:	b096      	sub	sp, #88	; 0x58
 800cdae:	4614      	mov	r4, r2
 800cdb0:	461d      	mov	r5, r3
 800cdb2:	da08      	bge.n	800cdc6 <__swhatbuf_r+0x24>
 800cdb4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800cdb8:	2200      	movs	r2, #0
 800cdba:	602a      	str	r2, [r5, #0]
 800cdbc:	061a      	lsls	r2, r3, #24
 800cdbe:	d410      	bmi.n	800cde2 <__swhatbuf_r+0x40>
 800cdc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cdc4:	e00e      	b.n	800cde4 <__swhatbuf_r+0x42>
 800cdc6:	466a      	mov	r2, sp
 800cdc8:	f001 fb20 	bl	800e40c <_fstat_r>
 800cdcc:	2800      	cmp	r0, #0
 800cdce:	dbf1      	blt.n	800cdb4 <__swhatbuf_r+0x12>
 800cdd0:	9a01      	ldr	r2, [sp, #4]
 800cdd2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800cdd6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800cdda:	425a      	negs	r2, r3
 800cddc:	415a      	adcs	r2, r3
 800cdde:	602a      	str	r2, [r5, #0]
 800cde0:	e7ee      	b.n	800cdc0 <__swhatbuf_r+0x1e>
 800cde2:	2340      	movs	r3, #64	; 0x40
 800cde4:	2000      	movs	r0, #0
 800cde6:	6023      	str	r3, [r4, #0]
 800cde8:	b016      	add	sp, #88	; 0x58
 800cdea:	bd70      	pop	{r4, r5, r6, pc}

0800cdec <__smakebuf_r>:
 800cdec:	898b      	ldrh	r3, [r1, #12]
 800cdee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cdf0:	079d      	lsls	r5, r3, #30
 800cdf2:	4606      	mov	r6, r0
 800cdf4:	460c      	mov	r4, r1
 800cdf6:	d507      	bpl.n	800ce08 <__smakebuf_r+0x1c>
 800cdf8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cdfc:	6023      	str	r3, [r4, #0]
 800cdfe:	6123      	str	r3, [r4, #16]
 800ce00:	2301      	movs	r3, #1
 800ce02:	6163      	str	r3, [r4, #20]
 800ce04:	b002      	add	sp, #8
 800ce06:	bd70      	pop	{r4, r5, r6, pc}
 800ce08:	ab01      	add	r3, sp, #4
 800ce0a:	466a      	mov	r2, sp
 800ce0c:	f7ff ffc9 	bl	800cda2 <__swhatbuf_r>
 800ce10:	9900      	ldr	r1, [sp, #0]
 800ce12:	4605      	mov	r5, r0
 800ce14:	4630      	mov	r0, r6
 800ce16:	f000 fd7f 	bl	800d918 <_malloc_r>
 800ce1a:	b948      	cbnz	r0, 800ce30 <__smakebuf_r+0x44>
 800ce1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ce20:	059a      	lsls	r2, r3, #22
 800ce22:	d4ef      	bmi.n	800ce04 <__smakebuf_r+0x18>
 800ce24:	f023 0303 	bic.w	r3, r3, #3
 800ce28:	f043 0302 	orr.w	r3, r3, #2
 800ce2c:	81a3      	strh	r3, [r4, #12]
 800ce2e:	e7e3      	b.n	800cdf8 <__smakebuf_r+0xc>
 800ce30:	4b0d      	ldr	r3, [pc, #52]	; (800ce68 <__smakebuf_r+0x7c>)
 800ce32:	62b3      	str	r3, [r6, #40]	; 0x28
 800ce34:	89a3      	ldrh	r3, [r4, #12]
 800ce36:	6020      	str	r0, [r4, #0]
 800ce38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ce3c:	81a3      	strh	r3, [r4, #12]
 800ce3e:	9b00      	ldr	r3, [sp, #0]
 800ce40:	6163      	str	r3, [r4, #20]
 800ce42:	9b01      	ldr	r3, [sp, #4]
 800ce44:	6120      	str	r0, [r4, #16]
 800ce46:	b15b      	cbz	r3, 800ce60 <__smakebuf_r+0x74>
 800ce48:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ce4c:	4630      	mov	r0, r6
 800ce4e:	f001 faef 	bl	800e430 <_isatty_r>
 800ce52:	b128      	cbz	r0, 800ce60 <__smakebuf_r+0x74>
 800ce54:	89a3      	ldrh	r3, [r4, #12]
 800ce56:	f023 0303 	bic.w	r3, r3, #3
 800ce5a:	f043 0301 	orr.w	r3, r3, #1
 800ce5e:	81a3      	strh	r3, [r4, #12]
 800ce60:	89a0      	ldrh	r0, [r4, #12]
 800ce62:	4305      	orrs	r5, r0
 800ce64:	81a5      	strh	r5, [r4, #12]
 800ce66:	e7cd      	b.n	800ce04 <__smakebuf_r+0x18>
 800ce68:	0800c51d 	.word	0x0800c51d

0800ce6c <__ascii_mbtowc>:
 800ce6c:	b082      	sub	sp, #8
 800ce6e:	b901      	cbnz	r1, 800ce72 <__ascii_mbtowc+0x6>
 800ce70:	a901      	add	r1, sp, #4
 800ce72:	b142      	cbz	r2, 800ce86 <__ascii_mbtowc+0x1a>
 800ce74:	b14b      	cbz	r3, 800ce8a <__ascii_mbtowc+0x1e>
 800ce76:	7813      	ldrb	r3, [r2, #0]
 800ce78:	600b      	str	r3, [r1, #0]
 800ce7a:	7812      	ldrb	r2, [r2, #0]
 800ce7c:	1e10      	subs	r0, r2, #0
 800ce7e:	bf18      	it	ne
 800ce80:	2001      	movne	r0, #1
 800ce82:	b002      	add	sp, #8
 800ce84:	4770      	bx	lr
 800ce86:	4610      	mov	r0, r2
 800ce88:	e7fb      	b.n	800ce82 <__ascii_mbtowc+0x16>
 800ce8a:	f06f 0001 	mvn.w	r0, #1
 800ce8e:	e7f8      	b.n	800ce82 <__ascii_mbtowc+0x16>

0800ce90 <_Balloc>:
 800ce90:	b570      	push	{r4, r5, r6, lr}
 800ce92:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ce94:	4604      	mov	r4, r0
 800ce96:	460d      	mov	r5, r1
 800ce98:	b976      	cbnz	r6, 800ceb8 <_Balloc+0x28>
 800ce9a:	2010      	movs	r0, #16
 800ce9c:	f001 faea 	bl	800e474 <malloc>
 800cea0:	4602      	mov	r2, r0
 800cea2:	6260      	str	r0, [r4, #36]	; 0x24
 800cea4:	b920      	cbnz	r0, 800ceb0 <_Balloc+0x20>
 800cea6:	4b18      	ldr	r3, [pc, #96]	; (800cf08 <_Balloc+0x78>)
 800cea8:	4818      	ldr	r0, [pc, #96]	; (800cf0c <_Balloc+0x7c>)
 800ceaa:	2166      	movs	r1, #102	; 0x66
 800ceac:	f001 fa6e 	bl	800e38c <__assert_func>
 800ceb0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ceb4:	6006      	str	r6, [r0, #0]
 800ceb6:	60c6      	str	r6, [r0, #12]
 800ceb8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ceba:	68f3      	ldr	r3, [r6, #12]
 800cebc:	b183      	cbz	r3, 800cee0 <_Balloc+0x50>
 800cebe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cec0:	68db      	ldr	r3, [r3, #12]
 800cec2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cec6:	b9b8      	cbnz	r0, 800cef8 <_Balloc+0x68>
 800cec8:	2101      	movs	r1, #1
 800ceca:	fa01 f605 	lsl.w	r6, r1, r5
 800cece:	1d72      	adds	r2, r6, #5
 800ced0:	0092      	lsls	r2, r2, #2
 800ced2:	4620      	mov	r0, r4
 800ced4:	f000 fc9d 	bl	800d812 <_calloc_r>
 800ced8:	b160      	cbz	r0, 800cef4 <_Balloc+0x64>
 800ceda:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800cede:	e00e      	b.n	800cefe <_Balloc+0x6e>
 800cee0:	2221      	movs	r2, #33	; 0x21
 800cee2:	2104      	movs	r1, #4
 800cee4:	4620      	mov	r0, r4
 800cee6:	f000 fc94 	bl	800d812 <_calloc_r>
 800ceea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ceec:	60f0      	str	r0, [r6, #12]
 800ceee:	68db      	ldr	r3, [r3, #12]
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d1e4      	bne.n	800cebe <_Balloc+0x2e>
 800cef4:	2000      	movs	r0, #0
 800cef6:	bd70      	pop	{r4, r5, r6, pc}
 800cef8:	6802      	ldr	r2, [r0, #0]
 800cefa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800cefe:	2300      	movs	r3, #0
 800cf00:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cf04:	e7f7      	b.n	800cef6 <_Balloc+0x66>
 800cf06:	bf00      	nop
 800cf08:	0800fee8 	.word	0x0800fee8
 800cf0c:	0800feff 	.word	0x0800feff

0800cf10 <_Bfree>:
 800cf10:	b570      	push	{r4, r5, r6, lr}
 800cf12:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800cf14:	4605      	mov	r5, r0
 800cf16:	460c      	mov	r4, r1
 800cf18:	b976      	cbnz	r6, 800cf38 <_Bfree+0x28>
 800cf1a:	2010      	movs	r0, #16
 800cf1c:	f001 faaa 	bl	800e474 <malloc>
 800cf20:	4602      	mov	r2, r0
 800cf22:	6268      	str	r0, [r5, #36]	; 0x24
 800cf24:	b920      	cbnz	r0, 800cf30 <_Bfree+0x20>
 800cf26:	4b09      	ldr	r3, [pc, #36]	; (800cf4c <_Bfree+0x3c>)
 800cf28:	4809      	ldr	r0, [pc, #36]	; (800cf50 <_Bfree+0x40>)
 800cf2a:	218a      	movs	r1, #138	; 0x8a
 800cf2c:	f001 fa2e 	bl	800e38c <__assert_func>
 800cf30:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cf34:	6006      	str	r6, [r0, #0]
 800cf36:	60c6      	str	r6, [r0, #12]
 800cf38:	b13c      	cbz	r4, 800cf4a <_Bfree+0x3a>
 800cf3a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800cf3c:	6862      	ldr	r2, [r4, #4]
 800cf3e:	68db      	ldr	r3, [r3, #12]
 800cf40:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cf44:	6021      	str	r1, [r4, #0]
 800cf46:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800cf4a:	bd70      	pop	{r4, r5, r6, pc}
 800cf4c:	0800fee8 	.word	0x0800fee8
 800cf50:	0800feff 	.word	0x0800feff

0800cf54 <__multadd>:
 800cf54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf58:	690d      	ldr	r5, [r1, #16]
 800cf5a:	4607      	mov	r7, r0
 800cf5c:	460c      	mov	r4, r1
 800cf5e:	461e      	mov	r6, r3
 800cf60:	f101 0c14 	add.w	ip, r1, #20
 800cf64:	2000      	movs	r0, #0
 800cf66:	f8dc 3000 	ldr.w	r3, [ip]
 800cf6a:	b299      	uxth	r1, r3
 800cf6c:	fb02 6101 	mla	r1, r2, r1, r6
 800cf70:	0c1e      	lsrs	r6, r3, #16
 800cf72:	0c0b      	lsrs	r3, r1, #16
 800cf74:	fb02 3306 	mla	r3, r2, r6, r3
 800cf78:	b289      	uxth	r1, r1
 800cf7a:	3001      	adds	r0, #1
 800cf7c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800cf80:	4285      	cmp	r5, r0
 800cf82:	f84c 1b04 	str.w	r1, [ip], #4
 800cf86:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800cf8a:	dcec      	bgt.n	800cf66 <__multadd+0x12>
 800cf8c:	b30e      	cbz	r6, 800cfd2 <__multadd+0x7e>
 800cf8e:	68a3      	ldr	r3, [r4, #8]
 800cf90:	42ab      	cmp	r3, r5
 800cf92:	dc19      	bgt.n	800cfc8 <__multadd+0x74>
 800cf94:	6861      	ldr	r1, [r4, #4]
 800cf96:	4638      	mov	r0, r7
 800cf98:	3101      	adds	r1, #1
 800cf9a:	f7ff ff79 	bl	800ce90 <_Balloc>
 800cf9e:	4680      	mov	r8, r0
 800cfa0:	b928      	cbnz	r0, 800cfae <__multadd+0x5a>
 800cfa2:	4602      	mov	r2, r0
 800cfa4:	4b0c      	ldr	r3, [pc, #48]	; (800cfd8 <__multadd+0x84>)
 800cfa6:	480d      	ldr	r0, [pc, #52]	; (800cfdc <__multadd+0x88>)
 800cfa8:	21b5      	movs	r1, #181	; 0xb5
 800cfaa:	f001 f9ef 	bl	800e38c <__assert_func>
 800cfae:	6922      	ldr	r2, [r4, #16]
 800cfb0:	3202      	adds	r2, #2
 800cfb2:	f104 010c 	add.w	r1, r4, #12
 800cfb6:	0092      	lsls	r2, r2, #2
 800cfb8:	300c      	adds	r0, #12
 800cfba:	f7fd ff6f 	bl	800ae9c <memcpy>
 800cfbe:	4621      	mov	r1, r4
 800cfc0:	4638      	mov	r0, r7
 800cfc2:	f7ff ffa5 	bl	800cf10 <_Bfree>
 800cfc6:	4644      	mov	r4, r8
 800cfc8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cfcc:	3501      	adds	r5, #1
 800cfce:	615e      	str	r6, [r3, #20]
 800cfd0:	6125      	str	r5, [r4, #16]
 800cfd2:	4620      	mov	r0, r4
 800cfd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cfd8:	0800fe5c 	.word	0x0800fe5c
 800cfdc:	0800feff 	.word	0x0800feff

0800cfe0 <__s2b>:
 800cfe0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cfe4:	460c      	mov	r4, r1
 800cfe6:	4615      	mov	r5, r2
 800cfe8:	461f      	mov	r7, r3
 800cfea:	2209      	movs	r2, #9
 800cfec:	3308      	adds	r3, #8
 800cfee:	4606      	mov	r6, r0
 800cff0:	fb93 f3f2 	sdiv	r3, r3, r2
 800cff4:	2100      	movs	r1, #0
 800cff6:	2201      	movs	r2, #1
 800cff8:	429a      	cmp	r2, r3
 800cffa:	db09      	blt.n	800d010 <__s2b+0x30>
 800cffc:	4630      	mov	r0, r6
 800cffe:	f7ff ff47 	bl	800ce90 <_Balloc>
 800d002:	b940      	cbnz	r0, 800d016 <__s2b+0x36>
 800d004:	4602      	mov	r2, r0
 800d006:	4b19      	ldr	r3, [pc, #100]	; (800d06c <__s2b+0x8c>)
 800d008:	4819      	ldr	r0, [pc, #100]	; (800d070 <__s2b+0x90>)
 800d00a:	21ce      	movs	r1, #206	; 0xce
 800d00c:	f001 f9be 	bl	800e38c <__assert_func>
 800d010:	0052      	lsls	r2, r2, #1
 800d012:	3101      	adds	r1, #1
 800d014:	e7f0      	b.n	800cff8 <__s2b+0x18>
 800d016:	9b08      	ldr	r3, [sp, #32]
 800d018:	6143      	str	r3, [r0, #20]
 800d01a:	2d09      	cmp	r5, #9
 800d01c:	f04f 0301 	mov.w	r3, #1
 800d020:	6103      	str	r3, [r0, #16]
 800d022:	dd16      	ble.n	800d052 <__s2b+0x72>
 800d024:	f104 0909 	add.w	r9, r4, #9
 800d028:	46c8      	mov	r8, r9
 800d02a:	442c      	add	r4, r5
 800d02c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800d030:	4601      	mov	r1, r0
 800d032:	3b30      	subs	r3, #48	; 0x30
 800d034:	220a      	movs	r2, #10
 800d036:	4630      	mov	r0, r6
 800d038:	f7ff ff8c 	bl	800cf54 <__multadd>
 800d03c:	45a0      	cmp	r8, r4
 800d03e:	d1f5      	bne.n	800d02c <__s2b+0x4c>
 800d040:	f1a5 0408 	sub.w	r4, r5, #8
 800d044:	444c      	add	r4, r9
 800d046:	1b2d      	subs	r5, r5, r4
 800d048:	1963      	adds	r3, r4, r5
 800d04a:	42bb      	cmp	r3, r7
 800d04c:	db04      	blt.n	800d058 <__s2b+0x78>
 800d04e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d052:	340a      	adds	r4, #10
 800d054:	2509      	movs	r5, #9
 800d056:	e7f6      	b.n	800d046 <__s2b+0x66>
 800d058:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d05c:	4601      	mov	r1, r0
 800d05e:	3b30      	subs	r3, #48	; 0x30
 800d060:	220a      	movs	r2, #10
 800d062:	4630      	mov	r0, r6
 800d064:	f7ff ff76 	bl	800cf54 <__multadd>
 800d068:	e7ee      	b.n	800d048 <__s2b+0x68>
 800d06a:	bf00      	nop
 800d06c:	0800fe5c 	.word	0x0800fe5c
 800d070:	0800feff 	.word	0x0800feff

0800d074 <__hi0bits>:
 800d074:	0c03      	lsrs	r3, r0, #16
 800d076:	041b      	lsls	r3, r3, #16
 800d078:	b9d3      	cbnz	r3, 800d0b0 <__hi0bits+0x3c>
 800d07a:	0400      	lsls	r0, r0, #16
 800d07c:	2310      	movs	r3, #16
 800d07e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d082:	bf04      	itt	eq
 800d084:	0200      	lsleq	r0, r0, #8
 800d086:	3308      	addeq	r3, #8
 800d088:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d08c:	bf04      	itt	eq
 800d08e:	0100      	lsleq	r0, r0, #4
 800d090:	3304      	addeq	r3, #4
 800d092:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d096:	bf04      	itt	eq
 800d098:	0080      	lsleq	r0, r0, #2
 800d09a:	3302      	addeq	r3, #2
 800d09c:	2800      	cmp	r0, #0
 800d09e:	db05      	blt.n	800d0ac <__hi0bits+0x38>
 800d0a0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d0a4:	f103 0301 	add.w	r3, r3, #1
 800d0a8:	bf08      	it	eq
 800d0aa:	2320      	moveq	r3, #32
 800d0ac:	4618      	mov	r0, r3
 800d0ae:	4770      	bx	lr
 800d0b0:	2300      	movs	r3, #0
 800d0b2:	e7e4      	b.n	800d07e <__hi0bits+0xa>

0800d0b4 <__lo0bits>:
 800d0b4:	6803      	ldr	r3, [r0, #0]
 800d0b6:	f013 0207 	ands.w	r2, r3, #7
 800d0ba:	4601      	mov	r1, r0
 800d0bc:	d00b      	beq.n	800d0d6 <__lo0bits+0x22>
 800d0be:	07da      	lsls	r2, r3, #31
 800d0c0:	d423      	bmi.n	800d10a <__lo0bits+0x56>
 800d0c2:	0798      	lsls	r0, r3, #30
 800d0c4:	bf49      	itett	mi
 800d0c6:	085b      	lsrmi	r3, r3, #1
 800d0c8:	089b      	lsrpl	r3, r3, #2
 800d0ca:	2001      	movmi	r0, #1
 800d0cc:	600b      	strmi	r3, [r1, #0]
 800d0ce:	bf5c      	itt	pl
 800d0d0:	600b      	strpl	r3, [r1, #0]
 800d0d2:	2002      	movpl	r0, #2
 800d0d4:	4770      	bx	lr
 800d0d6:	b298      	uxth	r0, r3
 800d0d8:	b9a8      	cbnz	r0, 800d106 <__lo0bits+0x52>
 800d0da:	0c1b      	lsrs	r3, r3, #16
 800d0dc:	2010      	movs	r0, #16
 800d0de:	b2da      	uxtb	r2, r3
 800d0e0:	b90a      	cbnz	r2, 800d0e6 <__lo0bits+0x32>
 800d0e2:	3008      	adds	r0, #8
 800d0e4:	0a1b      	lsrs	r3, r3, #8
 800d0e6:	071a      	lsls	r2, r3, #28
 800d0e8:	bf04      	itt	eq
 800d0ea:	091b      	lsreq	r3, r3, #4
 800d0ec:	3004      	addeq	r0, #4
 800d0ee:	079a      	lsls	r2, r3, #30
 800d0f0:	bf04      	itt	eq
 800d0f2:	089b      	lsreq	r3, r3, #2
 800d0f4:	3002      	addeq	r0, #2
 800d0f6:	07da      	lsls	r2, r3, #31
 800d0f8:	d403      	bmi.n	800d102 <__lo0bits+0x4e>
 800d0fa:	085b      	lsrs	r3, r3, #1
 800d0fc:	f100 0001 	add.w	r0, r0, #1
 800d100:	d005      	beq.n	800d10e <__lo0bits+0x5a>
 800d102:	600b      	str	r3, [r1, #0]
 800d104:	4770      	bx	lr
 800d106:	4610      	mov	r0, r2
 800d108:	e7e9      	b.n	800d0de <__lo0bits+0x2a>
 800d10a:	2000      	movs	r0, #0
 800d10c:	4770      	bx	lr
 800d10e:	2020      	movs	r0, #32
 800d110:	4770      	bx	lr
	...

0800d114 <__i2b>:
 800d114:	b510      	push	{r4, lr}
 800d116:	460c      	mov	r4, r1
 800d118:	2101      	movs	r1, #1
 800d11a:	f7ff feb9 	bl	800ce90 <_Balloc>
 800d11e:	4602      	mov	r2, r0
 800d120:	b928      	cbnz	r0, 800d12e <__i2b+0x1a>
 800d122:	4b05      	ldr	r3, [pc, #20]	; (800d138 <__i2b+0x24>)
 800d124:	4805      	ldr	r0, [pc, #20]	; (800d13c <__i2b+0x28>)
 800d126:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800d12a:	f001 f92f 	bl	800e38c <__assert_func>
 800d12e:	2301      	movs	r3, #1
 800d130:	6144      	str	r4, [r0, #20]
 800d132:	6103      	str	r3, [r0, #16]
 800d134:	bd10      	pop	{r4, pc}
 800d136:	bf00      	nop
 800d138:	0800fe5c 	.word	0x0800fe5c
 800d13c:	0800feff 	.word	0x0800feff

0800d140 <__multiply>:
 800d140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d144:	4691      	mov	r9, r2
 800d146:	690a      	ldr	r2, [r1, #16]
 800d148:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d14c:	429a      	cmp	r2, r3
 800d14e:	bfb8      	it	lt
 800d150:	460b      	movlt	r3, r1
 800d152:	460c      	mov	r4, r1
 800d154:	bfbc      	itt	lt
 800d156:	464c      	movlt	r4, r9
 800d158:	4699      	movlt	r9, r3
 800d15a:	6927      	ldr	r7, [r4, #16]
 800d15c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d160:	68a3      	ldr	r3, [r4, #8]
 800d162:	6861      	ldr	r1, [r4, #4]
 800d164:	eb07 060a 	add.w	r6, r7, sl
 800d168:	42b3      	cmp	r3, r6
 800d16a:	b085      	sub	sp, #20
 800d16c:	bfb8      	it	lt
 800d16e:	3101      	addlt	r1, #1
 800d170:	f7ff fe8e 	bl	800ce90 <_Balloc>
 800d174:	b930      	cbnz	r0, 800d184 <__multiply+0x44>
 800d176:	4602      	mov	r2, r0
 800d178:	4b44      	ldr	r3, [pc, #272]	; (800d28c <__multiply+0x14c>)
 800d17a:	4845      	ldr	r0, [pc, #276]	; (800d290 <__multiply+0x150>)
 800d17c:	f240 115d 	movw	r1, #349	; 0x15d
 800d180:	f001 f904 	bl	800e38c <__assert_func>
 800d184:	f100 0514 	add.w	r5, r0, #20
 800d188:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d18c:	462b      	mov	r3, r5
 800d18e:	2200      	movs	r2, #0
 800d190:	4543      	cmp	r3, r8
 800d192:	d321      	bcc.n	800d1d8 <__multiply+0x98>
 800d194:	f104 0314 	add.w	r3, r4, #20
 800d198:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d19c:	f109 0314 	add.w	r3, r9, #20
 800d1a0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800d1a4:	9202      	str	r2, [sp, #8]
 800d1a6:	1b3a      	subs	r2, r7, r4
 800d1a8:	3a15      	subs	r2, #21
 800d1aa:	f022 0203 	bic.w	r2, r2, #3
 800d1ae:	3204      	adds	r2, #4
 800d1b0:	f104 0115 	add.w	r1, r4, #21
 800d1b4:	428f      	cmp	r7, r1
 800d1b6:	bf38      	it	cc
 800d1b8:	2204      	movcc	r2, #4
 800d1ba:	9201      	str	r2, [sp, #4]
 800d1bc:	9a02      	ldr	r2, [sp, #8]
 800d1be:	9303      	str	r3, [sp, #12]
 800d1c0:	429a      	cmp	r2, r3
 800d1c2:	d80c      	bhi.n	800d1de <__multiply+0x9e>
 800d1c4:	2e00      	cmp	r6, #0
 800d1c6:	dd03      	ble.n	800d1d0 <__multiply+0x90>
 800d1c8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d05a      	beq.n	800d286 <__multiply+0x146>
 800d1d0:	6106      	str	r6, [r0, #16]
 800d1d2:	b005      	add	sp, #20
 800d1d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1d8:	f843 2b04 	str.w	r2, [r3], #4
 800d1dc:	e7d8      	b.n	800d190 <__multiply+0x50>
 800d1de:	f8b3 a000 	ldrh.w	sl, [r3]
 800d1e2:	f1ba 0f00 	cmp.w	sl, #0
 800d1e6:	d024      	beq.n	800d232 <__multiply+0xf2>
 800d1e8:	f104 0e14 	add.w	lr, r4, #20
 800d1ec:	46a9      	mov	r9, r5
 800d1ee:	f04f 0c00 	mov.w	ip, #0
 800d1f2:	f85e 2b04 	ldr.w	r2, [lr], #4
 800d1f6:	f8d9 1000 	ldr.w	r1, [r9]
 800d1fa:	fa1f fb82 	uxth.w	fp, r2
 800d1fe:	b289      	uxth	r1, r1
 800d200:	fb0a 110b 	mla	r1, sl, fp, r1
 800d204:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800d208:	f8d9 2000 	ldr.w	r2, [r9]
 800d20c:	4461      	add	r1, ip
 800d20e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d212:	fb0a c20b 	mla	r2, sl, fp, ip
 800d216:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d21a:	b289      	uxth	r1, r1
 800d21c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d220:	4577      	cmp	r7, lr
 800d222:	f849 1b04 	str.w	r1, [r9], #4
 800d226:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d22a:	d8e2      	bhi.n	800d1f2 <__multiply+0xb2>
 800d22c:	9a01      	ldr	r2, [sp, #4]
 800d22e:	f845 c002 	str.w	ip, [r5, r2]
 800d232:	9a03      	ldr	r2, [sp, #12]
 800d234:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d238:	3304      	adds	r3, #4
 800d23a:	f1b9 0f00 	cmp.w	r9, #0
 800d23e:	d020      	beq.n	800d282 <__multiply+0x142>
 800d240:	6829      	ldr	r1, [r5, #0]
 800d242:	f104 0c14 	add.w	ip, r4, #20
 800d246:	46ae      	mov	lr, r5
 800d248:	f04f 0a00 	mov.w	sl, #0
 800d24c:	f8bc b000 	ldrh.w	fp, [ip]
 800d250:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800d254:	fb09 220b 	mla	r2, r9, fp, r2
 800d258:	4492      	add	sl, r2
 800d25a:	b289      	uxth	r1, r1
 800d25c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800d260:	f84e 1b04 	str.w	r1, [lr], #4
 800d264:	f85c 2b04 	ldr.w	r2, [ip], #4
 800d268:	f8be 1000 	ldrh.w	r1, [lr]
 800d26c:	0c12      	lsrs	r2, r2, #16
 800d26e:	fb09 1102 	mla	r1, r9, r2, r1
 800d272:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800d276:	4567      	cmp	r7, ip
 800d278:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d27c:	d8e6      	bhi.n	800d24c <__multiply+0x10c>
 800d27e:	9a01      	ldr	r2, [sp, #4]
 800d280:	50a9      	str	r1, [r5, r2]
 800d282:	3504      	adds	r5, #4
 800d284:	e79a      	b.n	800d1bc <__multiply+0x7c>
 800d286:	3e01      	subs	r6, #1
 800d288:	e79c      	b.n	800d1c4 <__multiply+0x84>
 800d28a:	bf00      	nop
 800d28c:	0800fe5c 	.word	0x0800fe5c
 800d290:	0800feff 	.word	0x0800feff

0800d294 <__pow5mult>:
 800d294:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d298:	4615      	mov	r5, r2
 800d29a:	f012 0203 	ands.w	r2, r2, #3
 800d29e:	4606      	mov	r6, r0
 800d2a0:	460f      	mov	r7, r1
 800d2a2:	d007      	beq.n	800d2b4 <__pow5mult+0x20>
 800d2a4:	4c25      	ldr	r4, [pc, #148]	; (800d33c <__pow5mult+0xa8>)
 800d2a6:	3a01      	subs	r2, #1
 800d2a8:	2300      	movs	r3, #0
 800d2aa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d2ae:	f7ff fe51 	bl	800cf54 <__multadd>
 800d2b2:	4607      	mov	r7, r0
 800d2b4:	10ad      	asrs	r5, r5, #2
 800d2b6:	d03d      	beq.n	800d334 <__pow5mult+0xa0>
 800d2b8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d2ba:	b97c      	cbnz	r4, 800d2dc <__pow5mult+0x48>
 800d2bc:	2010      	movs	r0, #16
 800d2be:	f001 f8d9 	bl	800e474 <malloc>
 800d2c2:	4602      	mov	r2, r0
 800d2c4:	6270      	str	r0, [r6, #36]	; 0x24
 800d2c6:	b928      	cbnz	r0, 800d2d4 <__pow5mult+0x40>
 800d2c8:	4b1d      	ldr	r3, [pc, #116]	; (800d340 <__pow5mult+0xac>)
 800d2ca:	481e      	ldr	r0, [pc, #120]	; (800d344 <__pow5mult+0xb0>)
 800d2cc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800d2d0:	f001 f85c 	bl	800e38c <__assert_func>
 800d2d4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d2d8:	6004      	str	r4, [r0, #0]
 800d2da:	60c4      	str	r4, [r0, #12]
 800d2dc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d2e0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d2e4:	b94c      	cbnz	r4, 800d2fa <__pow5mult+0x66>
 800d2e6:	f240 2171 	movw	r1, #625	; 0x271
 800d2ea:	4630      	mov	r0, r6
 800d2ec:	f7ff ff12 	bl	800d114 <__i2b>
 800d2f0:	2300      	movs	r3, #0
 800d2f2:	f8c8 0008 	str.w	r0, [r8, #8]
 800d2f6:	4604      	mov	r4, r0
 800d2f8:	6003      	str	r3, [r0, #0]
 800d2fa:	f04f 0900 	mov.w	r9, #0
 800d2fe:	07eb      	lsls	r3, r5, #31
 800d300:	d50a      	bpl.n	800d318 <__pow5mult+0x84>
 800d302:	4639      	mov	r1, r7
 800d304:	4622      	mov	r2, r4
 800d306:	4630      	mov	r0, r6
 800d308:	f7ff ff1a 	bl	800d140 <__multiply>
 800d30c:	4639      	mov	r1, r7
 800d30e:	4680      	mov	r8, r0
 800d310:	4630      	mov	r0, r6
 800d312:	f7ff fdfd 	bl	800cf10 <_Bfree>
 800d316:	4647      	mov	r7, r8
 800d318:	106d      	asrs	r5, r5, #1
 800d31a:	d00b      	beq.n	800d334 <__pow5mult+0xa0>
 800d31c:	6820      	ldr	r0, [r4, #0]
 800d31e:	b938      	cbnz	r0, 800d330 <__pow5mult+0x9c>
 800d320:	4622      	mov	r2, r4
 800d322:	4621      	mov	r1, r4
 800d324:	4630      	mov	r0, r6
 800d326:	f7ff ff0b 	bl	800d140 <__multiply>
 800d32a:	6020      	str	r0, [r4, #0]
 800d32c:	f8c0 9000 	str.w	r9, [r0]
 800d330:	4604      	mov	r4, r0
 800d332:	e7e4      	b.n	800d2fe <__pow5mult+0x6a>
 800d334:	4638      	mov	r0, r7
 800d336:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d33a:	bf00      	nop
 800d33c:	08010050 	.word	0x08010050
 800d340:	0800fee8 	.word	0x0800fee8
 800d344:	0800feff 	.word	0x0800feff

0800d348 <__lshift>:
 800d348:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d34c:	460c      	mov	r4, r1
 800d34e:	6849      	ldr	r1, [r1, #4]
 800d350:	6923      	ldr	r3, [r4, #16]
 800d352:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d356:	68a3      	ldr	r3, [r4, #8]
 800d358:	4607      	mov	r7, r0
 800d35a:	4691      	mov	r9, r2
 800d35c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d360:	f108 0601 	add.w	r6, r8, #1
 800d364:	42b3      	cmp	r3, r6
 800d366:	db0b      	blt.n	800d380 <__lshift+0x38>
 800d368:	4638      	mov	r0, r7
 800d36a:	f7ff fd91 	bl	800ce90 <_Balloc>
 800d36e:	4605      	mov	r5, r0
 800d370:	b948      	cbnz	r0, 800d386 <__lshift+0x3e>
 800d372:	4602      	mov	r2, r0
 800d374:	4b2a      	ldr	r3, [pc, #168]	; (800d420 <__lshift+0xd8>)
 800d376:	482b      	ldr	r0, [pc, #172]	; (800d424 <__lshift+0xdc>)
 800d378:	f240 11d9 	movw	r1, #473	; 0x1d9
 800d37c:	f001 f806 	bl	800e38c <__assert_func>
 800d380:	3101      	adds	r1, #1
 800d382:	005b      	lsls	r3, r3, #1
 800d384:	e7ee      	b.n	800d364 <__lshift+0x1c>
 800d386:	2300      	movs	r3, #0
 800d388:	f100 0114 	add.w	r1, r0, #20
 800d38c:	f100 0210 	add.w	r2, r0, #16
 800d390:	4618      	mov	r0, r3
 800d392:	4553      	cmp	r3, sl
 800d394:	db37      	blt.n	800d406 <__lshift+0xbe>
 800d396:	6920      	ldr	r0, [r4, #16]
 800d398:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d39c:	f104 0314 	add.w	r3, r4, #20
 800d3a0:	f019 091f 	ands.w	r9, r9, #31
 800d3a4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d3a8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800d3ac:	d02f      	beq.n	800d40e <__lshift+0xc6>
 800d3ae:	f1c9 0e20 	rsb	lr, r9, #32
 800d3b2:	468a      	mov	sl, r1
 800d3b4:	f04f 0c00 	mov.w	ip, #0
 800d3b8:	681a      	ldr	r2, [r3, #0]
 800d3ba:	fa02 f209 	lsl.w	r2, r2, r9
 800d3be:	ea42 020c 	orr.w	r2, r2, ip
 800d3c2:	f84a 2b04 	str.w	r2, [sl], #4
 800d3c6:	f853 2b04 	ldr.w	r2, [r3], #4
 800d3ca:	4298      	cmp	r0, r3
 800d3cc:	fa22 fc0e 	lsr.w	ip, r2, lr
 800d3d0:	d8f2      	bhi.n	800d3b8 <__lshift+0x70>
 800d3d2:	1b03      	subs	r3, r0, r4
 800d3d4:	3b15      	subs	r3, #21
 800d3d6:	f023 0303 	bic.w	r3, r3, #3
 800d3da:	3304      	adds	r3, #4
 800d3dc:	f104 0215 	add.w	r2, r4, #21
 800d3e0:	4290      	cmp	r0, r2
 800d3e2:	bf38      	it	cc
 800d3e4:	2304      	movcc	r3, #4
 800d3e6:	f841 c003 	str.w	ip, [r1, r3]
 800d3ea:	f1bc 0f00 	cmp.w	ip, #0
 800d3ee:	d001      	beq.n	800d3f4 <__lshift+0xac>
 800d3f0:	f108 0602 	add.w	r6, r8, #2
 800d3f4:	3e01      	subs	r6, #1
 800d3f6:	4638      	mov	r0, r7
 800d3f8:	612e      	str	r6, [r5, #16]
 800d3fa:	4621      	mov	r1, r4
 800d3fc:	f7ff fd88 	bl	800cf10 <_Bfree>
 800d400:	4628      	mov	r0, r5
 800d402:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d406:	f842 0f04 	str.w	r0, [r2, #4]!
 800d40a:	3301      	adds	r3, #1
 800d40c:	e7c1      	b.n	800d392 <__lshift+0x4a>
 800d40e:	3904      	subs	r1, #4
 800d410:	f853 2b04 	ldr.w	r2, [r3], #4
 800d414:	f841 2f04 	str.w	r2, [r1, #4]!
 800d418:	4298      	cmp	r0, r3
 800d41a:	d8f9      	bhi.n	800d410 <__lshift+0xc8>
 800d41c:	e7ea      	b.n	800d3f4 <__lshift+0xac>
 800d41e:	bf00      	nop
 800d420:	0800fe5c 	.word	0x0800fe5c
 800d424:	0800feff 	.word	0x0800feff

0800d428 <__mcmp>:
 800d428:	b530      	push	{r4, r5, lr}
 800d42a:	6902      	ldr	r2, [r0, #16]
 800d42c:	690c      	ldr	r4, [r1, #16]
 800d42e:	1b12      	subs	r2, r2, r4
 800d430:	d10e      	bne.n	800d450 <__mcmp+0x28>
 800d432:	f100 0314 	add.w	r3, r0, #20
 800d436:	3114      	adds	r1, #20
 800d438:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d43c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d440:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d444:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d448:	42a5      	cmp	r5, r4
 800d44a:	d003      	beq.n	800d454 <__mcmp+0x2c>
 800d44c:	d305      	bcc.n	800d45a <__mcmp+0x32>
 800d44e:	2201      	movs	r2, #1
 800d450:	4610      	mov	r0, r2
 800d452:	bd30      	pop	{r4, r5, pc}
 800d454:	4283      	cmp	r3, r0
 800d456:	d3f3      	bcc.n	800d440 <__mcmp+0x18>
 800d458:	e7fa      	b.n	800d450 <__mcmp+0x28>
 800d45a:	f04f 32ff 	mov.w	r2, #4294967295
 800d45e:	e7f7      	b.n	800d450 <__mcmp+0x28>

0800d460 <__mdiff>:
 800d460:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d464:	460c      	mov	r4, r1
 800d466:	4606      	mov	r6, r0
 800d468:	4611      	mov	r1, r2
 800d46a:	4620      	mov	r0, r4
 800d46c:	4690      	mov	r8, r2
 800d46e:	f7ff ffdb 	bl	800d428 <__mcmp>
 800d472:	1e05      	subs	r5, r0, #0
 800d474:	d110      	bne.n	800d498 <__mdiff+0x38>
 800d476:	4629      	mov	r1, r5
 800d478:	4630      	mov	r0, r6
 800d47a:	f7ff fd09 	bl	800ce90 <_Balloc>
 800d47e:	b930      	cbnz	r0, 800d48e <__mdiff+0x2e>
 800d480:	4b3a      	ldr	r3, [pc, #232]	; (800d56c <__mdiff+0x10c>)
 800d482:	4602      	mov	r2, r0
 800d484:	f240 2132 	movw	r1, #562	; 0x232
 800d488:	4839      	ldr	r0, [pc, #228]	; (800d570 <__mdiff+0x110>)
 800d48a:	f000 ff7f 	bl	800e38c <__assert_func>
 800d48e:	2301      	movs	r3, #1
 800d490:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d494:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d498:	bfa4      	itt	ge
 800d49a:	4643      	movge	r3, r8
 800d49c:	46a0      	movge	r8, r4
 800d49e:	4630      	mov	r0, r6
 800d4a0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d4a4:	bfa6      	itte	ge
 800d4a6:	461c      	movge	r4, r3
 800d4a8:	2500      	movge	r5, #0
 800d4aa:	2501      	movlt	r5, #1
 800d4ac:	f7ff fcf0 	bl	800ce90 <_Balloc>
 800d4b0:	b920      	cbnz	r0, 800d4bc <__mdiff+0x5c>
 800d4b2:	4b2e      	ldr	r3, [pc, #184]	; (800d56c <__mdiff+0x10c>)
 800d4b4:	4602      	mov	r2, r0
 800d4b6:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d4ba:	e7e5      	b.n	800d488 <__mdiff+0x28>
 800d4bc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d4c0:	6926      	ldr	r6, [r4, #16]
 800d4c2:	60c5      	str	r5, [r0, #12]
 800d4c4:	f104 0914 	add.w	r9, r4, #20
 800d4c8:	f108 0514 	add.w	r5, r8, #20
 800d4cc:	f100 0e14 	add.w	lr, r0, #20
 800d4d0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800d4d4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d4d8:	f108 0210 	add.w	r2, r8, #16
 800d4dc:	46f2      	mov	sl, lr
 800d4de:	2100      	movs	r1, #0
 800d4e0:	f859 3b04 	ldr.w	r3, [r9], #4
 800d4e4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d4e8:	fa1f f883 	uxth.w	r8, r3
 800d4ec:	fa11 f18b 	uxtah	r1, r1, fp
 800d4f0:	0c1b      	lsrs	r3, r3, #16
 800d4f2:	eba1 0808 	sub.w	r8, r1, r8
 800d4f6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d4fa:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d4fe:	fa1f f888 	uxth.w	r8, r8
 800d502:	1419      	asrs	r1, r3, #16
 800d504:	454e      	cmp	r6, r9
 800d506:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d50a:	f84a 3b04 	str.w	r3, [sl], #4
 800d50e:	d8e7      	bhi.n	800d4e0 <__mdiff+0x80>
 800d510:	1b33      	subs	r3, r6, r4
 800d512:	3b15      	subs	r3, #21
 800d514:	f023 0303 	bic.w	r3, r3, #3
 800d518:	3304      	adds	r3, #4
 800d51a:	3415      	adds	r4, #21
 800d51c:	42a6      	cmp	r6, r4
 800d51e:	bf38      	it	cc
 800d520:	2304      	movcc	r3, #4
 800d522:	441d      	add	r5, r3
 800d524:	4473      	add	r3, lr
 800d526:	469e      	mov	lr, r3
 800d528:	462e      	mov	r6, r5
 800d52a:	4566      	cmp	r6, ip
 800d52c:	d30e      	bcc.n	800d54c <__mdiff+0xec>
 800d52e:	f10c 0203 	add.w	r2, ip, #3
 800d532:	1b52      	subs	r2, r2, r5
 800d534:	f022 0203 	bic.w	r2, r2, #3
 800d538:	3d03      	subs	r5, #3
 800d53a:	45ac      	cmp	ip, r5
 800d53c:	bf38      	it	cc
 800d53e:	2200      	movcc	r2, #0
 800d540:	441a      	add	r2, r3
 800d542:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800d546:	b17b      	cbz	r3, 800d568 <__mdiff+0x108>
 800d548:	6107      	str	r7, [r0, #16]
 800d54a:	e7a3      	b.n	800d494 <__mdiff+0x34>
 800d54c:	f856 8b04 	ldr.w	r8, [r6], #4
 800d550:	fa11 f288 	uxtah	r2, r1, r8
 800d554:	1414      	asrs	r4, r2, #16
 800d556:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800d55a:	b292      	uxth	r2, r2
 800d55c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800d560:	f84e 2b04 	str.w	r2, [lr], #4
 800d564:	1421      	asrs	r1, r4, #16
 800d566:	e7e0      	b.n	800d52a <__mdiff+0xca>
 800d568:	3f01      	subs	r7, #1
 800d56a:	e7ea      	b.n	800d542 <__mdiff+0xe2>
 800d56c:	0800fe5c 	.word	0x0800fe5c
 800d570:	0800feff 	.word	0x0800feff

0800d574 <__ulp>:
 800d574:	b082      	sub	sp, #8
 800d576:	ed8d 0b00 	vstr	d0, [sp]
 800d57a:	9b01      	ldr	r3, [sp, #4]
 800d57c:	4912      	ldr	r1, [pc, #72]	; (800d5c8 <__ulp+0x54>)
 800d57e:	4019      	ands	r1, r3
 800d580:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800d584:	2900      	cmp	r1, #0
 800d586:	dd05      	ble.n	800d594 <__ulp+0x20>
 800d588:	2200      	movs	r2, #0
 800d58a:	460b      	mov	r3, r1
 800d58c:	ec43 2b10 	vmov	d0, r2, r3
 800d590:	b002      	add	sp, #8
 800d592:	4770      	bx	lr
 800d594:	4249      	negs	r1, r1
 800d596:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800d59a:	ea4f 5021 	mov.w	r0, r1, asr #20
 800d59e:	f04f 0200 	mov.w	r2, #0
 800d5a2:	f04f 0300 	mov.w	r3, #0
 800d5a6:	da04      	bge.n	800d5b2 <__ulp+0x3e>
 800d5a8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800d5ac:	fa41 f300 	asr.w	r3, r1, r0
 800d5b0:	e7ec      	b.n	800d58c <__ulp+0x18>
 800d5b2:	f1a0 0114 	sub.w	r1, r0, #20
 800d5b6:	291e      	cmp	r1, #30
 800d5b8:	bfda      	itte	le
 800d5ba:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800d5be:	fa20 f101 	lsrle.w	r1, r0, r1
 800d5c2:	2101      	movgt	r1, #1
 800d5c4:	460a      	mov	r2, r1
 800d5c6:	e7e1      	b.n	800d58c <__ulp+0x18>
 800d5c8:	7ff00000 	.word	0x7ff00000

0800d5cc <__b2d>:
 800d5cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d5ce:	6905      	ldr	r5, [r0, #16]
 800d5d0:	f100 0714 	add.w	r7, r0, #20
 800d5d4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800d5d8:	1f2e      	subs	r6, r5, #4
 800d5da:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800d5de:	4620      	mov	r0, r4
 800d5e0:	f7ff fd48 	bl	800d074 <__hi0bits>
 800d5e4:	f1c0 0320 	rsb	r3, r0, #32
 800d5e8:	280a      	cmp	r0, #10
 800d5ea:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800d668 <__b2d+0x9c>
 800d5ee:	600b      	str	r3, [r1, #0]
 800d5f0:	dc14      	bgt.n	800d61c <__b2d+0x50>
 800d5f2:	f1c0 0e0b 	rsb	lr, r0, #11
 800d5f6:	fa24 f10e 	lsr.w	r1, r4, lr
 800d5fa:	42b7      	cmp	r7, r6
 800d5fc:	ea41 030c 	orr.w	r3, r1, ip
 800d600:	bf34      	ite	cc
 800d602:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800d606:	2100      	movcs	r1, #0
 800d608:	3015      	adds	r0, #21
 800d60a:	fa04 f000 	lsl.w	r0, r4, r0
 800d60e:	fa21 f10e 	lsr.w	r1, r1, lr
 800d612:	ea40 0201 	orr.w	r2, r0, r1
 800d616:	ec43 2b10 	vmov	d0, r2, r3
 800d61a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d61c:	42b7      	cmp	r7, r6
 800d61e:	bf3a      	itte	cc
 800d620:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800d624:	f1a5 0608 	subcc.w	r6, r5, #8
 800d628:	2100      	movcs	r1, #0
 800d62a:	380b      	subs	r0, #11
 800d62c:	d017      	beq.n	800d65e <__b2d+0x92>
 800d62e:	f1c0 0c20 	rsb	ip, r0, #32
 800d632:	fa04 f500 	lsl.w	r5, r4, r0
 800d636:	42be      	cmp	r6, r7
 800d638:	fa21 f40c 	lsr.w	r4, r1, ip
 800d63c:	ea45 0504 	orr.w	r5, r5, r4
 800d640:	bf8c      	ite	hi
 800d642:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800d646:	2400      	movls	r4, #0
 800d648:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800d64c:	fa01 f000 	lsl.w	r0, r1, r0
 800d650:	fa24 f40c 	lsr.w	r4, r4, ip
 800d654:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800d658:	ea40 0204 	orr.w	r2, r0, r4
 800d65c:	e7db      	b.n	800d616 <__b2d+0x4a>
 800d65e:	ea44 030c 	orr.w	r3, r4, ip
 800d662:	460a      	mov	r2, r1
 800d664:	e7d7      	b.n	800d616 <__b2d+0x4a>
 800d666:	bf00      	nop
 800d668:	3ff00000 	.word	0x3ff00000

0800d66c <__d2b>:
 800d66c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d670:	4689      	mov	r9, r1
 800d672:	2101      	movs	r1, #1
 800d674:	ec57 6b10 	vmov	r6, r7, d0
 800d678:	4690      	mov	r8, r2
 800d67a:	f7ff fc09 	bl	800ce90 <_Balloc>
 800d67e:	4604      	mov	r4, r0
 800d680:	b930      	cbnz	r0, 800d690 <__d2b+0x24>
 800d682:	4602      	mov	r2, r0
 800d684:	4b25      	ldr	r3, [pc, #148]	; (800d71c <__d2b+0xb0>)
 800d686:	4826      	ldr	r0, [pc, #152]	; (800d720 <__d2b+0xb4>)
 800d688:	f240 310a 	movw	r1, #778	; 0x30a
 800d68c:	f000 fe7e 	bl	800e38c <__assert_func>
 800d690:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800d694:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d698:	bb35      	cbnz	r5, 800d6e8 <__d2b+0x7c>
 800d69a:	2e00      	cmp	r6, #0
 800d69c:	9301      	str	r3, [sp, #4]
 800d69e:	d028      	beq.n	800d6f2 <__d2b+0x86>
 800d6a0:	4668      	mov	r0, sp
 800d6a2:	9600      	str	r6, [sp, #0]
 800d6a4:	f7ff fd06 	bl	800d0b4 <__lo0bits>
 800d6a8:	9900      	ldr	r1, [sp, #0]
 800d6aa:	b300      	cbz	r0, 800d6ee <__d2b+0x82>
 800d6ac:	9a01      	ldr	r2, [sp, #4]
 800d6ae:	f1c0 0320 	rsb	r3, r0, #32
 800d6b2:	fa02 f303 	lsl.w	r3, r2, r3
 800d6b6:	430b      	orrs	r3, r1
 800d6b8:	40c2      	lsrs	r2, r0
 800d6ba:	6163      	str	r3, [r4, #20]
 800d6bc:	9201      	str	r2, [sp, #4]
 800d6be:	9b01      	ldr	r3, [sp, #4]
 800d6c0:	61a3      	str	r3, [r4, #24]
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	bf14      	ite	ne
 800d6c6:	2202      	movne	r2, #2
 800d6c8:	2201      	moveq	r2, #1
 800d6ca:	6122      	str	r2, [r4, #16]
 800d6cc:	b1d5      	cbz	r5, 800d704 <__d2b+0x98>
 800d6ce:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d6d2:	4405      	add	r5, r0
 800d6d4:	f8c9 5000 	str.w	r5, [r9]
 800d6d8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d6dc:	f8c8 0000 	str.w	r0, [r8]
 800d6e0:	4620      	mov	r0, r4
 800d6e2:	b003      	add	sp, #12
 800d6e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d6e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d6ec:	e7d5      	b.n	800d69a <__d2b+0x2e>
 800d6ee:	6161      	str	r1, [r4, #20]
 800d6f0:	e7e5      	b.n	800d6be <__d2b+0x52>
 800d6f2:	a801      	add	r0, sp, #4
 800d6f4:	f7ff fcde 	bl	800d0b4 <__lo0bits>
 800d6f8:	9b01      	ldr	r3, [sp, #4]
 800d6fa:	6163      	str	r3, [r4, #20]
 800d6fc:	2201      	movs	r2, #1
 800d6fe:	6122      	str	r2, [r4, #16]
 800d700:	3020      	adds	r0, #32
 800d702:	e7e3      	b.n	800d6cc <__d2b+0x60>
 800d704:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d708:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d70c:	f8c9 0000 	str.w	r0, [r9]
 800d710:	6918      	ldr	r0, [r3, #16]
 800d712:	f7ff fcaf 	bl	800d074 <__hi0bits>
 800d716:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d71a:	e7df      	b.n	800d6dc <__d2b+0x70>
 800d71c:	0800fe5c 	.word	0x0800fe5c
 800d720:	0800feff 	.word	0x0800feff

0800d724 <__ratio>:
 800d724:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d728:	4688      	mov	r8, r1
 800d72a:	4669      	mov	r1, sp
 800d72c:	4681      	mov	r9, r0
 800d72e:	f7ff ff4d 	bl	800d5cc <__b2d>
 800d732:	a901      	add	r1, sp, #4
 800d734:	4640      	mov	r0, r8
 800d736:	ec55 4b10 	vmov	r4, r5, d0
 800d73a:	f7ff ff47 	bl	800d5cc <__b2d>
 800d73e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d742:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800d746:	eba3 0c02 	sub.w	ip, r3, r2
 800d74a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800d74e:	1a9b      	subs	r3, r3, r2
 800d750:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800d754:	ec51 0b10 	vmov	r0, r1, d0
 800d758:	2b00      	cmp	r3, #0
 800d75a:	bfd6      	itet	le
 800d75c:	460a      	movle	r2, r1
 800d75e:	462a      	movgt	r2, r5
 800d760:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d764:	468b      	mov	fp, r1
 800d766:	462f      	mov	r7, r5
 800d768:	bfd4      	ite	le
 800d76a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800d76e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800d772:	4620      	mov	r0, r4
 800d774:	ee10 2a10 	vmov	r2, s0
 800d778:	465b      	mov	r3, fp
 800d77a:	4639      	mov	r1, r7
 800d77c:	f7f3 f886 	bl	800088c <__aeabi_ddiv>
 800d780:	ec41 0b10 	vmov	d0, r0, r1
 800d784:	b003      	add	sp, #12
 800d786:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d78a <__copybits>:
 800d78a:	3901      	subs	r1, #1
 800d78c:	b570      	push	{r4, r5, r6, lr}
 800d78e:	1149      	asrs	r1, r1, #5
 800d790:	6914      	ldr	r4, [r2, #16]
 800d792:	3101      	adds	r1, #1
 800d794:	f102 0314 	add.w	r3, r2, #20
 800d798:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d79c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d7a0:	1f05      	subs	r5, r0, #4
 800d7a2:	42a3      	cmp	r3, r4
 800d7a4:	d30c      	bcc.n	800d7c0 <__copybits+0x36>
 800d7a6:	1aa3      	subs	r3, r4, r2
 800d7a8:	3b11      	subs	r3, #17
 800d7aa:	f023 0303 	bic.w	r3, r3, #3
 800d7ae:	3211      	adds	r2, #17
 800d7b0:	42a2      	cmp	r2, r4
 800d7b2:	bf88      	it	hi
 800d7b4:	2300      	movhi	r3, #0
 800d7b6:	4418      	add	r0, r3
 800d7b8:	2300      	movs	r3, #0
 800d7ba:	4288      	cmp	r0, r1
 800d7bc:	d305      	bcc.n	800d7ca <__copybits+0x40>
 800d7be:	bd70      	pop	{r4, r5, r6, pc}
 800d7c0:	f853 6b04 	ldr.w	r6, [r3], #4
 800d7c4:	f845 6f04 	str.w	r6, [r5, #4]!
 800d7c8:	e7eb      	b.n	800d7a2 <__copybits+0x18>
 800d7ca:	f840 3b04 	str.w	r3, [r0], #4
 800d7ce:	e7f4      	b.n	800d7ba <__copybits+0x30>

0800d7d0 <__any_on>:
 800d7d0:	f100 0214 	add.w	r2, r0, #20
 800d7d4:	6900      	ldr	r0, [r0, #16]
 800d7d6:	114b      	asrs	r3, r1, #5
 800d7d8:	4298      	cmp	r0, r3
 800d7da:	b510      	push	{r4, lr}
 800d7dc:	db11      	blt.n	800d802 <__any_on+0x32>
 800d7de:	dd0a      	ble.n	800d7f6 <__any_on+0x26>
 800d7e0:	f011 011f 	ands.w	r1, r1, #31
 800d7e4:	d007      	beq.n	800d7f6 <__any_on+0x26>
 800d7e6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d7ea:	fa24 f001 	lsr.w	r0, r4, r1
 800d7ee:	fa00 f101 	lsl.w	r1, r0, r1
 800d7f2:	428c      	cmp	r4, r1
 800d7f4:	d10b      	bne.n	800d80e <__any_on+0x3e>
 800d7f6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d7fa:	4293      	cmp	r3, r2
 800d7fc:	d803      	bhi.n	800d806 <__any_on+0x36>
 800d7fe:	2000      	movs	r0, #0
 800d800:	bd10      	pop	{r4, pc}
 800d802:	4603      	mov	r3, r0
 800d804:	e7f7      	b.n	800d7f6 <__any_on+0x26>
 800d806:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d80a:	2900      	cmp	r1, #0
 800d80c:	d0f5      	beq.n	800d7fa <__any_on+0x2a>
 800d80e:	2001      	movs	r0, #1
 800d810:	e7f6      	b.n	800d800 <__any_on+0x30>

0800d812 <_calloc_r>:
 800d812:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d814:	fba1 2402 	umull	r2, r4, r1, r2
 800d818:	b94c      	cbnz	r4, 800d82e <_calloc_r+0x1c>
 800d81a:	4611      	mov	r1, r2
 800d81c:	9201      	str	r2, [sp, #4]
 800d81e:	f000 f87b 	bl	800d918 <_malloc_r>
 800d822:	9a01      	ldr	r2, [sp, #4]
 800d824:	4605      	mov	r5, r0
 800d826:	b930      	cbnz	r0, 800d836 <_calloc_r+0x24>
 800d828:	4628      	mov	r0, r5
 800d82a:	b003      	add	sp, #12
 800d82c:	bd30      	pop	{r4, r5, pc}
 800d82e:	220c      	movs	r2, #12
 800d830:	6002      	str	r2, [r0, #0]
 800d832:	2500      	movs	r5, #0
 800d834:	e7f8      	b.n	800d828 <_calloc_r+0x16>
 800d836:	4621      	mov	r1, r4
 800d838:	f7fd fb3e 	bl	800aeb8 <memset>
 800d83c:	e7f4      	b.n	800d828 <_calloc_r+0x16>
	...

0800d840 <_free_r>:
 800d840:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d842:	2900      	cmp	r1, #0
 800d844:	d044      	beq.n	800d8d0 <_free_r+0x90>
 800d846:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d84a:	9001      	str	r0, [sp, #4]
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	f1a1 0404 	sub.w	r4, r1, #4
 800d852:	bfb8      	it	lt
 800d854:	18e4      	addlt	r4, r4, r3
 800d856:	f000 fe2f 	bl	800e4b8 <__malloc_lock>
 800d85a:	4a1e      	ldr	r2, [pc, #120]	; (800d8d4 <_free_r+0x94>)
 800d85c:	9801      	ldr	r0, [sp, #4]
 800d85e:	6813      	ldr	r3, [r2, #0]
 800d860:	b933      	cbnz	r3, 800d870 <_free_r+0x30>
 800d862:	6063      	str	r3, [r4, #4]
 800d864:	6014      	str	r4, [r2, #0]
 800d866:	b003      	add	sp, #12
 800d868:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d86c:	f000 be2a 	b.w	800e4c4 <__malloc_unlock>
 800d870:	42a3      	cmp	r3, r4
 800d872:	d908      	bls.n	800d886 <_free_r+0x46>
 800d874:	6825      	ldr	r5, [r4, #0]
 800d876:	1961      	adds	r1, r4, r5
 800d878:	428b      	cmp	r3, r1
 800d87a:	bf01      	itttt	eq
 800d87c:	6819      	ldreq	r1, [r3, #0]
 800d87e:	685b      	ldreq	r3, [r3, #4]
 800d880:	1949      	addeq	r1, r1, r5
 800d882:	6021      	streq	r1, [r4, #0]
 800d884:	e7ed      	b.n	800d862 <_free_r+0x22>
 800d886:	461a      	mov	r2, r3
 800d888:	685b      	ldr	r3, [r3, #4]
 800d88a:	b10b      	cbz	r3, 800d890 <_free_r+0x50>
 800d88c:	42a3      	cmp	r3, r4
 800d88e:	d9fa      	bls.n	800d886 <_free_r+0x46>
 800d890:	6811      	ldr	r1, [r2, #0]
 800d892:	1855      	adds	r5, r2, r1
 800d894:	42a5      	cmp	r5, r4
 800d896:	d10b      	bne.n	800d8b0 <_free_r+0x70>
 800d898:	6824      	ldr	r4, [r4, #0]
 800d89a:	4421      	add	r1, r4
 800d89c:	1854      	adds	r4, r2, r1
 800d89e:	42a3      	cmp	r3, r4
 800d8a0:	6011      	str	r1, [r2, #0]
 800d8a2:	d1e0      	bne.n	800d866 <_free_r+0x26>
 800d8a4:	681c      	ldr	r4, [r3, #0]
 800d8a6:	685b      	ldr	r3, [r3, #4]
 800d8a8:	6053      	str	r3, [r2, #4]
 800d8aa:	4421      	add	r1, r4
 800d8ac:	6011      	str	r1, [r2, #0]
 800d8ae:	e7da      	b.n	800d866 <_free_r+0x26>
 800d8b0:	d902      	bls.n	800d8b8 <_free_r+0x78>
 800d8b2:	230c      	movs	r3, #12
 800d8b4:	6003      	str	r3, [r0, #0]
 800d8b6:	e7d6      	b.n	800d866 <_free_r+0x26>
 800d8b8:	6825      	ldr	r5, [r4, #0]
 800d8ba:	1961      	adds	r1, r4, r5
 800d8bc:	428b      	cmp	r3, r1
 800d8be:	bf04      	itt	eq
 800d8c0:	6819      	ldreq	r1, [r3, #0]
 800d8c2:	685b      	ldreq	r3, [r3, #4]
 800d8c4:	6063      	str	r3, [r4, #4]
 800d8c6:	bf04      	itt	eq
 800d8c8:	1949      	addeq	r1, r1, r5
 800d8ca:	6021      	streq	r1, [r4, #0]
 800d8cc:	6054      	str	r4, [r2, #4]
 800d8ce:	e7ca      	b.n	800d866 <_free_r+0x26>
 800d8d0:	b003      	add	sp, #12
 800d8d2:	bd30      	pop	{r4, r5, pc}
 800d8d4:	200006cc 	.word	0x200006cc

0800d8d8 <sbrk_aligned>:
 800d8d8:	b570      	push	{r4, r5, r6, lr}
 800d8da:	4e0e      	ldr	r6, [pc, #56]	; (800d914 <sbrk_aligned+0x3c>)
 800d8dc:	460c      	mov	r4, r1
 800d8de:	6831      	ldr	r1, [r6, #0]
 800d8e0:	4605      	mov	r5, r0
 800d8e2:	b911      	cbnz	r1, 800d8ea <sbrk_aligned+0x12>
 800d8e4:	f000 fce0 	bl	800e2a8 <_sbrk_r>
 800d8e8:	6030      	str	r0, [r6, #0]
 800d8ea:	4621      	mov	r1, r4
 800d8ec:	4628      	mov	r0, r5
 800d8ee:	f000 fcdb 	bl	800e2a8 <_sbrk_r>
 800d8f2:	1c43      	adds	r3, r0, #1
 800d8f4:	d00a      	beq.n	800d90c <sbrk_aligned+0x34>
 800d8f6:	1cc4      	adds	r4, r0, #3
 800d8f8:	f024 0403 	bic.w	r4, r4, #3
 800d8fc:	42a0      	cmp	r0, r4
 800d8fe:	d007      	beq.n	800d910 <sbrk_aligned+0x38>
 800d900:	1a21      	subs	r1, r4, r0
 800d902:	4628      	mov	r0, r5
 800d904:	f000 fcd0 	bl	800e2a8 <_sbrk_r>
 800d908:	3001      	adds	r0, #1
 800d90a:	d101      	bne.n	800d910 <sbrk_aligned+0x38>
 800d90c:	f04f 34ff 	mov.w	r4, #4294967295
 800d910:	4620      	mov	r0, r4
 800d912:	bd70      	pop	{r4, r5, r6, pc}
 800d914:	200006d0 	.word	0x200006d0

0800d918 <_malloc_r>:
 800d918:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d91c:	1ccd      	adds	r5, r1, #3
 800d91e:	f025 0503 	bic.w	r5, r5, #3
 800d922:	3508      	adds	r5, #8
 800d924:	2d0c      	cmp	r5, #12
 800d926:	bf38      	it	cc
 800d928:	250c      	movcc	r5, #12
 800d92a:	2d00      	cmp	r5, #0
 800d92c:	4607      	mov	r7, r0
 800d92e:	db01      	blt.n	800d934 <_malloc_r+0x1c>
 800d930:	42a9      	cmp	r1, r5
 800d932:	d905      	bls.n	800d940 <_malloc_r+0x28>
 800d934:	230c      	movs	r3, #12
 800d936:	603b      	str	r3, [r7, #0]
 800d938:	2600      	movs	r6, #0
 800d93a:	4630      	mov	r0, r6
 800d93c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d940:	4e2e      	ldr	r6, [pc, #184]	; (800d9fc <_malloc_r+0xe4>)
 800d942:	f000 fdb9 	bl	800e4b8 <__malloc_lock>
 800d946:	6833      	ldr	r3, [r6, #0]
 800d948:	461c      	mov	r4, r3
 800d94a:	bb34      	cbnz	r4, 800d99a <_malloc_r+0x82>
 800d94c:	4629      	mov	r1, r5
 800d94e:	4638      	mov	r0, r7
 800d950:	f7ff ffc2 	bl	800d8d8 <sbrk_aligned>
 800d954:	1c43      	adds	r3, r0, #1
 800d956:	4604      	mov	r4, r0
 800d958:	d14d      	bne.n	800d9f6 <_malloc_r+0xde>
 800d95a:	6834      	ldr	r4, [r6, #0]
 800d95c:	4626      	mov	r6, r4
 800d95e:	2e00      	cmp	r6, #0
 800d960:	d140      	bne.n	800d9e4 <_malloc_r+0xcc>
 800d962:	6823      	ldr	r3, [r4, #0]
 800d964:	4631      	mov	r1, r6
 800d966:	4638      	mov	r0, r7
 800d968:	eb04 0803 	add.w	r8, r4, r3
 800d96c:	f000 fc9c 	bl	800e2a8 <_sbrk_r>
 800d970:	4580      	cmp	r8, r0
 800d972:	d13a      	bne.n	800d9ea <_malloc_r+0xd2>
 800d974:	6821      	ldr	r1, [r4, #0]
 800d976:	3503      	adds	r5, #3
 800d978:	1a6d      	subs	r5, r5, r1
 800d97a:	f025 0503 	bic.w	r5, r5, #3
 800d97e:	3508      	adds	r5, #8
 800d980:	2d0c      	cmp	r5, #12
 800d982:	bf38      	it	cc
 800d984:	250c      	movcc	r5, #12
 800d986:	4629      	mov	r1, r5
 800d988:	4638      	mov	r0, r7
 800d98a:	f7ff ffa5 	bl	800d8d8 <sbrk_aligned>
 800d98e:	3001      	adds	r0, #1
 800d990:	d02b      	beq.n	800d9ea <_malloc_r+0xd2>
 800d992:	6823      	ldr	r3, [r4, #0]
 800d994:	442b      	add	r3, r5
 800d996:	6023      	str	r3, [r4, #0]
 800d998:	e00e      	b.n	800d9b8 <_malloc_r+0xa0>
 800d99a:	6822      	ldr	r2, [r4, #0]
 800d99c:	1b52      	subs	r2, r2, r5
 800d99e:	d41e      	bmi.n	800d9de <_malloc_r+0xc6>
 800d9a0:	2a0b      	cmp	r2, #11
 800d9a2:	d916      	bls.n	800d9d2 <_malloc_r+0xba>
 800d9a4:	1961      	adds	r1, r4, r5
 800d9a6:	42a3      	cmp	r3, r4
 800d9a8:	6025      	str	r5, [r4, #0]
 800d9aa:	bf18      	it	ne
 800d9ac:	6059      	strne	r1, [r3, #4]
 800d9ae:	6863      	ldr	r3, [r4, #4]
 800d9b0:	bf08      	it	eq
 800d9b2:	6031      	streq	r1, [r6, #0]
 800d9b4:	5162      	str	r2, [r4, r5]
 800d9b6:	604b      	str	r3, [r1, #4]
 800d9b8:	4638      	mov	r0, r7
 800d9ba:	f104 060b 	add.w	r6, r4, #11
 800d9be:	f000 fd81 	bl	800e4c4 <__malloc_unlock>
 800d9c2:	f026 0607 	bic.w	r6, r6, #7
 800d9c6:	1d23      	adds	r3, r4, #4
 800d9c8:	1af2      	subs	r2, r6, r3
 800d9ca:	d0b6      	beq.n	800d93a <_malloc_r+0x22>
 800d9cc:	1b9b      	subs	r3, r3, r6
 800d9ce:	50a3      	str	r3, [r4, r2]
 800d9d0:	e7b3      	b.n	800d93a <_malloc_r+0x22>
 800d9d2:	6862      	ldr	r2, [r4, #4]
 800d9d4:	42a3      	cmp	r3, r4
 800d9d6:	bf0c      	ite	eq
 800d9d8:	6032      	streq	r2, [r6, #0]
 800d9da:	605a      	strne	r2, [r3, #4]
 800d9dc:	e7ec      	b.n	800d9b8 <_malloc_r+0xa0>
 800d9de:	4623      	mov	r3, r4
 800d9e0:	6864      	ldr	r4, [r4, #4]
 800d9e2:	e7b2      	b.n	800d94a <_malloc_r+0x32>
 800d9e4:	4634      	mov	r4, r6
 800d9e6:	6876      	ldr	r6, [r6, #4]
 800d9e8:	e7b9      	b.n	800d95e <_malloc_r+0x46>
 800d9ea:	230c      	movs	r3, #12
 800d9ec:	603b      	str	r3, [r7, #0]
 800d9ee:	4638      	mov	r0, r7
 800d9f0:	f000 fd68 	bl	800e4c4 <__malloc_unlock>
 800d9f4:	e7a1      	b.n	800d93a <_malloc_r+0x22>
 800d9f6:	6025      	str	r5, [r4, #0]
 800d9f8:	e7de      	b.n	800d9b8 <_malloc_r+0xa0>
 800d9fa:	bf00      	nop
 800d9fc:	200006cc 	.word	0x200006cc

0800da00 <__ssputs_r>:
 800da00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800da04:	688e      	ldr	r6, [r1, #8]
 800da06:	429e      	cmp	r6, r3
 800da08:	4682      	mov	sl, r0
 800da0a:	460c      	mov	r4, r1
 800da0c:	4690      	mov	r8, r2
 800da0e:	461f      	mov	r7, r3
 800da10:	d838      	bhi.n	800da84 <__ssputs_r+0x84>
 800da12:	898a      	ldrh	r2, [r1, #12]
 800da14:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800da18:	d032      	beq.n	800da80 <__ssputs_r+0x80>
 800da1a:	6825      	ldr	r5, [r4, #0]
 800da1c:	6909      	ldr	r1, [r1, #16]
 800da1e:	eba5 0901 	sub.w	r9, r5, r1
 800da22:	6965      	ldr	r5, [r4, #20]
 800da24:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800da28:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800da2c:	3301      	adds	r3, #1
 800da2e:	444b      	add	r3, r9
 800da30:	106d      	asrs	r5, r5, #1
 800da32:	429d      	cmp	r5, r3
 800da34:	bf38      	it	cc
 800da36:	461d      	movcc	r5, r3
 800da38:	0553      	lsls	r3, r2, #21
 800da3a:	d531      	bpl.n	800daa0 <__ssputs_r+0xa0>
 800da3c:	4629      	mov	r1, r5
 800da3e:	f7ff ff6b 	bl	800d918 <_malloc_r>
 800da42:	4606      	mov	r6, r0
 800da44:	b950      	cbnz	r0, 800da5c <__ssputs_r+0x5c>
 800da46:	230c      	movs	r3, #12
 800da48:	f8ca 3000 	str.w	r3, [sl]
 800da4c:	89a3      	ldrh	r3, [r4, #12]
 800da4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800da52:	81a3      	strh	r3, [r4, #12]
 800da54:	f04f 30ff 	mov.w	r0, #4294967295
 800da58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da5c:	6921      	ldr	r1, [r4, #16]
 800da5e:	464a      	mov	r2, r9
 800da60:	f7fd fa1c 	bl	800ae9c <memcpy>
 800da64:	89a3      	ldrh	r3, [r4, #12]
 800da66:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800da6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800da6e:	81a3      	strh	r3, [r4, #12]
 800da70:	6126      	str	r6, [r4, #16]
 800da72:	6165      	str	r5, [r4, #20]
 800da74:	444e      	add	r6, r9
 800da76:	eba5 0509 	sub.w	r5, r5, r9
 800da7a:	6026      	str	r6, [r4, #0]
 800da7c:	60a5      	str	r5, [r4, #8]
 800da7e:	463e      	mov	r6, r7
 800da80:	42be      	cmp	r6, r7
 800da82:	d900      	bls.n	800da86 <__ssputs_r+0x86>
 800da84:	463e      	mov	r6, r7
 800da86:	6820      	ldr	r0, [r4, #0]
 800da88:	4632      	mov	r2, r6
 800da8a:	4641      	mov	r1, r8
 800da8c:	f000 fcfa 	bl	800e484 <memmove>
 800da90:	68a3      	ldr	r3, [r4, #8]
 800da92:	1b9b      	subs	r3, r3, r6
 800da94:	60a3      	str	r3, [r4, #8]
 800da96:	6823      	ldr	r3, [r4, #0]
 800da98:	4433      	add	r3, r6
 800da9a:	6023      	str	r3, [r4, #0]
 800da9c:	2000      	movs	r0, #0
 800da9e:	e7db      	b.n	800da58 <__ssputs_r+0x58>
 800daa0:	462a      	mov	r2, r5
 800daa2:	f000 fd15 	bl	800e4d0 <_realloc_r>
 800daa6:	4606      	mov	r6, r0
 800daa8:	2800      	cmp	r0, #0
 800daaa:	d1e1      	bne.n	800da70 <__ssputs_r+0x70>
 800daac:	6921      	ldr	r1, [r4, #16]
 800daae:	4650      	mov	r0, sl
 800dab0:	f7ff fec6 	bl	800d840 <_free_r>
 800dab4:	e7c7      	b.n	800da46 <__ssputs_r+0x46>
	...

0800dab8 <_svfiprintf_r>:
 800dab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dabc:	4698      	mov	r8, r3
 800dabe:	898b      	ldrh	r3, [r1, #12]
 800dac0:	061b      	lsls	r3, r3, #24
 800dac2:	b09d      	sub	sp, #116	; 0x74
 800dac4:	4607      	mov	r7, r0
 800dac6:	460d      	mov	r5, r1
 800dac8:	4614      	mov	r4, r2
 800daca:	d50e      	bpl.n	800daea <_svfiprintf_r+0x32>
 800dacc:	690b      	ldr	r3, [r1, #16]
 800dace:	b963      	cbnz	r3, 800daea <_svfiprintf_r+0x32>
 800dad0:	2140      	movs	r1, #64	; 0x40
 800dad2:	f7ff ff21 	bl	800d918 <_malloc_r>
 800dad6:	6028      	str	r0, [r5, #0]
 800dad8:	6128      	str	r0, [r5, #16]
 800dada:	b920      	cbnz	r0, 800dae6 <_svfiprintf_r+0x2e>
 800dadc:	230c      	movs	r3, #12
 800dade:	603b      	str	r3, [r7, #0]
 800dae0:	f04f 30ff 	mov.w	r0, #4294967295
 800dae4:	e0d1      	b.n	800dc8a <_svfiprintf_r+0x1d2>
 800dae6:	2340      	movs	r3, #64	; 0x40
 800dae8:	616b      	str	r3, [r5, #20]
 800daea:	2300      	movs	r3, #0
 800daec:	9309      	str	r3, [sp, #36]	; 0x24
 800daee:	2320      	movs	r3, #32
 800daf0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800daf4:	f8cd 800c 	str.w	r8, [sp, #12]
 800daf8:	2330      	movs	r3, #48	; 0x30
 800dafa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800dca4 <_svfiprintf_r+0x1ec>
 800dafe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800db02:	f04f 0901 	mov.w	r9, #1
 800db06:	4623      	mov	r3, r4
 800db08:	469a      	mov	sl, r3
 800db0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800db0e:	b10a      	cbz	r2, 800db14 <_svfiprintf_r+0x5c>
 800db10:	2a25      	cmp	r2, #37	; 0x25
 800db12:	d1f9      	bne.n	800db08 <_svfiprintf_r+0x50>
 800db14:	ebba 0b04 	subs.w	fp, sl, r4
 800db18:	d00b      	beq.n	800db32 <_svfiprintf_r+0x7a>
 800db1a:	465b      	mov	r3, fp
 800db1c:	4622      	mov	r2, r4
 800db1e:	4629      	mov	r1, r5
 800db20:	4638      	mov	r0, r7
 800db22:	f7ff ff6d 	bl	800da00 <__ssputs_r>
 800db26:	3001      	adds	r0, #1
 800db28:	f000 80aa 	beq.w	800dc80 <_svfiprintf_r+0x1c8>
 800db2c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800db2e:	445a      	add	r2, fp
 800db30:	9209      	str	r2, [sp, #36]	; 0x24
 800db32:	f89a 3000 	ldrb.w	r3, [sl]
 800db36:	2b00      	cmp	r3, #0
 800db38:	f000 80a2 	beq.w	800dc80 <_svfiprintf_r+0x1c8>
 800db3c:	2300      	movs	r3, #0
 800db3e:	f04f 32ff 	mov.w	r2, #4294967295
 800db42:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800db46:	f10a 0a01 	add.w	sl, sl, #1
 800db4a:	9304      	str	r3, [sp, #16]
 800db4c:	9307      	str	r3, [sp, #28]
 800db4e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800db52:	931a      	str	r3, [sp, #104]	; 0x68
 800db54:	4654      	mov	r4, sl
 800db56:	2205      	movs	r2, #5
 800db58:	f814 1b01 	ldrb.w	r1, [r4], #1
 800db5c:	4851      	ldr	r0, [pc, #324]	; (800dca4 <_svfiprintf_r+0x1ec>)
 800db5e:	f7f2 fb5f 	bl	8000220 <memchr>
 800db62:	9a04      	ldr	r2, [sp, #16]
 800db64:	b9d8      	cbnz	r0, 800db9e <_svfiprintf_r+0xe6>
 800db66:	06d0      	lsls	r0, r2, #27
 800db68:	bf44      	itt	mi
 800db6a:	2320      	movmi	r3, #32
 800db6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800db70:	0711      	lsls	r1, r2, #28
 800db72:	bf44      	itt	mi
 800db74:	232b      	movmi	r3, #43	; 0x2b
 800db76:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800db7a:	f89a 3000 	ldrb.w	r3, [sl]
 800db7e:	2b2a      	cmp	r3, #42	; 0x2a
 800db80:	d015      	beq.n	800dbae <_svfiprintf_r+0xf6>
 800db82:	9a07      	ldr	r2, [sp, #28]
 800db84:	4654      	mov	r4, sl
 800db86:	2000      	movs	r0, #0
 800db88:	f04f 0c0a 	mov.w	ip, #10
 800db8c:	4621      	mov	r1, r4
 800db8e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800db92:	3b30      	subs	r3, #48	; 0x30
 800db94:	2b09      	cmp	r3, #9
 800db96:	d94e      	bls.n	800dc36 <_svfiprintf_r+0x17e>
 800db98:	b1b0      	cbz	r0, 800dbc8 <_svfiprintf_r+0x110>
 800db9a:	9207      	str	r2, [sp, #28]
 800db9c:	e014      	b.n	800dbc8 <_svfiprintf_r+0x110>
 800db9e:	eba0 0308 	sub.w	r3, r0, r8
 800dba2:	fa09 f303 	lsl.w	r3, r9, r3
 800dba6:	4313      	orrs	r3, r2
 800dba8:	9304      	str	r3, [sp, #16]
 800dbaa:	46a2      	mov	sl, r4
 800dbac:	e7d2      	b.n	800db54 <_svfiprintf_r+0x9c>
 800dbae:	9b03      	ldr	r3, [sp, #12]
 800dbb0:	1d19      	adds	r1, r3, #4
 800dbb2:	681b      	ldr	r3, [r3, #0]
 800dbb4:	9103      	str	r1, [sp, #12]
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	bfbb      	ittet	lt
 800dbba:	425b      	neglt	r3, r3
 800dbbc:	f042 0202 	orrlt.w	r2, r2, #2
 800dbc0:	9307      	strge	r3, [sp, #28]
 800dbc2:	9307      	strlt	r3, [sp, #28]
 800dbc4:	bfb8      	it	lt
 800dbc6:	9204      	strlt	r2, [sp, #16]
 800dbc8:	7823      	ldrb	r3, [r4, #0]
 800dbca:	2b2e      	cmp	r3, #46	; 0x2e
 800dbcc:	d10c      	bne.n	800dbe8 <_svfiprintf_r+0x130>
 800dbce:	7863      	ldrb	r3, [r4, #1]
 800dbd0:	2b2a      	cmp	r3, #42	; 0x2a
 800dbd2:	d135      	bne.n	800dc40 <_svfiprintf_r+0x188>
 800dbd4:	9b03      	ldr	r3, [sp, #12]
 800dbd6:	1d1a      	adds	r2, r3, #4
 800dbd8:	681b      	ldr	r3, [r3, #0]
 800dbda:	9203      	str	r2, [sp, #12]
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	bfb8      	it	lt
 800dbe0:	f04f 33ff 	movlt.w	r3, #4294967295
 800dbe4:	3402      	adds	r4, #2
 800dbe6:	9305      	str	r3, [sp, #20]
 800dbe8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800dcb4 <_svfiprintf_r+0x1fc>
 800dbec:	7821      	ldrb	r1, [r4, #0]
 800dbee:	2203      	movs	r2, #3
 800dbf0:	4650      	mov	r0, sl
 800dbf2:	f7f2 fb15 	bl	8000220 <memchr>
 800dbf6:	b140      	cbz	r0, 800dc0a <_svfiprintf_r+0x152>
 800dbf8:	2340      	movs	r3, #64	; 0x40
 800dbfa:	eba0 000a 	sub.w	r0, r0, sl
 800dbfe:	fa03 f000 	lsl.w	r0, r3, r0
 800dc02:	9b04      	ldr	r3, [sp, #16]
 800dc04:	4303      	orrs	r3, r0
 800dc06:	3401      	adds	r4, #1
 800dc08:	9304      	str	r3, [sp, #16]
 800dc0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc0e:	4826      	ldr	r0, [pc, #152]	; (800dca8 <_svfiprintf_r+0x1f0>)
 800dc10:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dc14:	2206      	movs	r2, #6
 800dc16:	f7f2 fb03 	bl	8000220 <memchr>
 800dc1a:	2800      	cmp	r0, #0
 800dc1c:	d038      	beq.n	800dc90 <_svfiprintf_r+0x1d8>
 800dc1e:	4b23      	ldr	r3, [pc, #140]	; (800dcac <_svfiprintf_r+0x1f4>)
 800dc20:	bb1b      	cbnz	r3, 800dc6a <_svfiprintf_r+0x1b2>
 800dc22:	9b03      	ldr	r3, [sp, #12]
 800dc24:	3307      	adds	r3, #7
 800dc26:	f023 0307 	bic.w	r3, r3, #7
 800dc2a:	3308      	adds	r3, #8
 800dc2c:	9303      	str	r3, [sp, #12]
 800dc2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc30:	4433      	add	r3, r6
 800dc32:	9309      	str	r3, [sp, #36]	; 0x24
 800dc34:	e767      	b.n	800db06 <_svfiprintf_r+0x4e>
 800dc36:	fb0c 3202 	mla	r2, ip, r2, r3
 800dc3a:	460c      	mov	r4, r1
 800dc3c:	2001      	movs	r0, #1
 800dc3e:	e7a5      	b.n	800db8c <_svfiprintf_r+0xd4>
 800dc40:	2300      	movs	r3, #0
 800dc42:	3401      	adds	r4, #1
 800dc44:	9305      	str	r3, [sp, #20]
 800dc46:	4619      	mov	r1, r3
 800dc48:	f04f 0c0a 	mov.w	ip, #10
 800dc4c:	4620      	mov	r0, r4
 800dc4e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dc52:	3a30      	subs	r2, #48	; 0x30
 800dc54:	2a09      	cmp	r2, #9
 800dc56:	d903      	bls.n	800dc60 <_svfiprintf_r+0x1a8>
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	d0c5      	beq.n	800dbe8 <_svfiprintf_r+0x130>
 800dc5c:	9105      	str	r1, [sp, #20]
 800dc5e:	e7c3      	b.n	800dbe8 <_svfiprintf_r+0x130>
 800dc60:	fb0c 2101 	mla	r1, ip, r1, r2
 800dc64:	4604      	mov	r4, r0
 800dc66:	2301      	movs	r3, #1
 800dc68:	e7f0      	b.n	800dc4c <_svfiprintf_r+0x194>
 800dc6a:	ab03      	add	r3, sp, #12
 800dc6c:	9300      	str	r3, [sp, #0]
 800dc6e:	462a      	mov	r2, r5
 800dc70:	4b0f      	ldr	r3, [pc, #60]	; (800dcb0 <_svfiprintf_r+0x1f8>)
 800dc72:	a904      	add	r1, sp, #16
 800dc74:	4638      	mov	r0, r7
 800dc76:	f3af 8000 	nop.w
 800dc7a:	1c42      	adds	r2, r0, #1
 800dc7c:	4606      	mov	r6, r0
 800dc7e:	d1d6      	bne.n	800dc2e <_svfiprintf_r+0x176>
 800dc80:	89ab      	ldrh	r3, [r5, #12]
 800dc82:	065b      	lsls	r3, r3, #25
 800dc84:	f53f af2c 	bmi.w	800dae0 <_svfiprintf_r+0x28>
 800dc88:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dc8a:	b01d      	add	sp, #116	; 0x74
 800dc8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc90:	ab03      	add	r3, sp, #12
 800dc92:	9300      	str	r3, [sp, #0]
 800dc94:	462a      	mov	r2, r5
 800dc96:	4b06      	ldr	r3, [pc, #24]	; (800dcb0 <_svfiprintf_r+0x1f8>)
 800dc98:	a904      	add	r1, sp, #16
 800dc9a:	4638      	mov	r0, r7
 800dc9c:	f000 f9d4 	bl	800e048 <_printf_i>
 800dca0:	e7eb      	b.n	800dc7a <_svfiprintf_r+0x1c2>
 800dca2:	bf00      	nop
 800dca4:	0801005c 	.word	0x0801005c
 800dca8:	08010066 	.word	0x08010066
 800dcac:	00000000 	.word	0x00000000
 800dcb0:	0800da01 	.word	0x0800da01
 800dcb4:	08010062 	.word	0x08010062

0800dcb8 <__sfputc_r>:
 800dcb8:	6893      	ldr	r3, [r2, #8]
 800dcba:	3b01      	subs	r3, #1
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	b410      	push	{r4}
 800dcc0:	6093      	str	r3, [r2, #8]
 800dcc2:	da08      	bge.n	800dcd6 <__sfputc_r+0x1e>
 800dcc4:	6994      	ldr	r4, [r2, #24]
 800dcc6:	42a3      	cmp	r3, r4
 800dcc8:	db01      	blt.n	800dcce <__sfputc_r+0x16>
 800dcca:	290a      	cmp	r1, #10
 800dccc:	d103      	bne.n	800dcd6 <__sfputc_r+0x1e>
 800dcce:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dcd2:	f7fe ba7d 	b.w	800c1d0 <__swbuf_r>
 800dcd6:	6813      	ldr	r3, [r2, #0]
 800dcd8:	1c58      	adds	r0, r3, #1
 800dcda:	6010      	str	r0, [r2, #0]
 800dcdc:	7019      	strb	r1, [r3, #0]
 800dcde:	4608      	mov	r0, r1
 800dce0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dce4:	4770      	bx	lr

0800dce6 <__sfputs_r>:
 800dce6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dce8:	4606      	mov	r6, r0
 800dcea:	460f      	mov	r7, r1
 800dcec:	4614      	mov	r4, r2
 800dcee:	18d5      	adds	r5, r2, r3
 800dcf0:	42ac      	cmp	r4, r5
 800dcf2:	d101      	bne.n	800dcf8 <__sfputs_r+0x12>
 800dcf4:	2000      	movs	r0, #0
 800dcf6:	e007      	b.n	800dd08 <__sfputs_r+0x22>
 800dcf8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dcfc:	463a      	mov	r2, r7
 800dcfe:	4630      	mov	r0, r6
 800dd00:	f7ff ffda 	bl	800dcb8 <__sfputc_r>
 800dd04:	1c43      	adds	r3, r0, #1
 800dd06:	d1f3      	bne.n	800dcf0 <__sfputs_r+0xa>
 800dd08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800dd0c <_vfiprintf_r>:
 800dd0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd10:	460d      	mov	r5, r1
 800dd12:	b09d      	sub	sp, #116	; 0x74
 800dd14:	4614      	mov	r4, r2
 800dd16:	4698      	mov	r8, r3
 800dd18:	4606      	mov	r6, r0
 800dd1a:	b118      	cbz	r0, 800dd24 <_vfiprintf_r+0x18>
 800dd1c:	6983      	ldr	r3, [r0, #24]
 800dd1e:	b90b      	cbnz	r3, 800dd24 <_vfiprintf_r+0x18>
 800dd20:	f7fe fc30 	bl	800c584 <__sinit>
 800dd24:	4b89      	ldr	r3, [pc, #548]	; (800df4c <_vfiprintf_r+0x240>)
 800dd26:	429d      	cmp	r5, r3
 800dd28:	d11b      	bne.n	800dd62 <_vfiprintf_r+0x56>
 800dd2a:	6875      	ldr	r5, [r6, #4]
 800dd2c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dd2e:	07d9      	lsls	r1, r3, #31
 800dd30:	d405      	bmi.n	800dd3e <_vfiprintf_r+0x32>
 800dd32:	89ab      	ldrh	r3, [r5, #12]
 800dd34:	059a      	lsls	r2, r3, #22
 800dd36:	d402      	bmi.n	800dd3e <_vfiprintf_r+0x32>
 800dd38:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dd3a:	f7ff f830 	bl	800cd9e <__retarget_lock_acquire_recursive>
 800dd3e:	89ab      	ldrh	r3, [r5, #12]
 800dd40:	071b      	lsls	r3, r3, #28
 800dd42:	d501      	bpl.n	800dd48 <_vfiprintf_r+0x3c>
 800dd44:	692b      	ldr	r3, [r5, #16]
 800dd46:	b9eb      	cbnz	r3, 800dd84 <_vfiprintf_r+0x78>
 800dd48:	4629      	mov	r1, r5
 800dd4a:	4630      	mov	r0, r6
 800dd4c:	f7fe fa92 	bl	800c274 <__swsetup_r>
 800dd50:	b1c0      	cbz	r0, 800dd84 <_vfiprintf_r+0x78>
 800dd52:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dd54:	07dc      	lsls	r4, r3, #31
 800dd56:	d50e      	bpl.n	800dd76 <_vfiprintf_r+0x6a>
 800dd58:	f04f 30ff 	mov.w	r0, #4294967295
 800dd5c:	b01d      	add	sp, #116	; 0x74
 800dd5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd62:	4b7b      	ldr	r3, [pc, #492]	; (800df50 <_vfiprintf_r+0x244>)
 800dd64:	429d      	cmp	r5, r3
 800dd66:	d101      	bne.n	800dd6c <_vfiprintf_r+0x60>
 800dd68:	68b5      	ldr	r5, [r6, #8]
 800dd6a:	e7df      	b.n	800dd2c <_vfiprintf_r+0x20>
 800dd6c:	4b79      	ldr	r3, [pc, #484]	; (800df54 <_vfiprintf_r+0x248>)
 800dd6e:	429d      	cmp	r5, r3
 800dd70:	bf08      	it	eq
 800dd72:	68f5      	ldreq	r5, [r6, #12]
 800dd74:	e7da      	b.n	800dd2c <_vfiprintf_r+0x20>
 800dd76:	89ab      	ldrh	r3, [r5, #12]
 800dd78:	0598      	lsls	r0, r3, #22
 800dd7a:	d4ed      	bmi.n	800dd58 <_vfiprintf_r+0x4c>
 800dd7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dd7e:	f7ff f80f 	bl	800cda0 <__retarget_lock_release_recursive>
 800dd82:	e7e9      	b.n	800dd58 <_vfiprintf_r+0x4c>
 800dd84:	2300      	movs	r3, #0
 800dd86:	9309      	str	r3, [sp, #36]	; 0x24
 800dd88:	2320      	movs	r3, #32
 800dd8a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dd8e:	f8cd 800c 	str.w	r8, [sp, #12]
 800dd92:	2330      	movs	r3, #48	; 0x30
 800dd94:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800df58 <_vfiprintf_r+0x24c>
 800dd98:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dd9c:	f04f 0901 	mov.w	r9, #1
 800dda0:	4623      	mov	r3, r4
 800dda2:	469a      	mov	sl, r3
 800dda4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dda8:	b10a      	cbz	r2, 800ddae <_vfiprintf_r+0xa2>
 800ddaa:	2a25      	cmp	r2, #37	; 0x25
 800ddac:	d1f9      	bne.n	800dda2 <_vfiprintf_r+0x96>
 800ddae:	ebba 0b04 	subs.w	fp, sl, r4
 800ddb2:	d00b      	beq.n	800ddcc <_vfiprintf_r+0xc0>
 800ddb4:	465b      	mov	r3, fp
 800ddb6:	4622      	mov	r2, r4
 800ddb8:	4629      	mov	r1, r5
 800ddba:	4630      	mov	r0, r6
 800ddbc:	f7ff ff93 	bl	800dce6 <__sfputs_r>
 800ddc0:	3001      	adds	r0, #1
 800ddc2:	f000 80aa 	beq.w	800df1a <_vfiprintf_r+0x20e>
 800ddc6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ddc8:	445a      	add	r2, fp
 800ddca:	9209      	str	r2, [sp, #36]	; 0x24
 800ddcc:	f89a 3000 	ldrb.w	r3, [sl]
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	f000 80a2 	beq.w	800df1a <_vfiprintf_r+0x20e>
 800ddd6:	2300      	movs	r3, #0
 800ddd8:	f04f 32ff 	mov.w	r2, #4294967295
 800dddc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dde0:	f10a 0a01 	add.w	sl, sl, #1
 800dde4:	9304      	str	r3, [sp, #16]
 800dde6:	9307      	str	r3, [sp, #28]
 800dde8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ddec:	931a      	str	r3, [sp, #104]	; 0x68
 800ddee:	4654      	mov	r4, sl
 800ddf0:	2205      	movs	r2, #5
 800ddf2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ddf6:	4858      	ldr	r0, [pc, #352]	; (800df58 <_vfiprintf_r+0x24c>)
 800ddf8:	f7f2 fa12 	bl	8000220 <memchr>
 800ddfc:	9a04      	ldr	r2, [sp, #16]
 800ddfe:	b9d8      	cbnz	r0, 800de38 <_vfiprintf_r+0x12c>
 800de00:	06d1      	lsls	r1, r2, #27
 800de02:	bf44      	itt	mi
 800de04:	2320      	movmi	r3, #32
 800de06:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800de0a:	0713      	lsls	r3, r2, #28
 800de0c:	bf44      	itt	mi
 800de0e:	232b      	movmi	r3, #43	; 0x2b
 800de10:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800de14:	f89a 3000 	ldrb.w	r3, [sl]
 800de18:	2b2a      	cmp	r3, #42	; 0x2a
 800de1a:	d015      	beq.n	800de48 <_vfiprintf_r+0x13c>
 800de1c:	9a07      	ldr	r2, [sp, #28]
 800de1e:	4654      	mov	r4, sl
 800de20:	2000      	movs	r0, #0
 800de22:	f04f 0c0a 	mov.w	ip, #10
 800de26:	4621      	mov	r1, r4
 800de28:	f811 3b01 	ldrb.w	r3, [r1], #1
 800de2c:	3b30      	subs	r3, #48	; 0x30
 800de2e:	2b09      	cmp	r3, #9
 800de30:	d94e      	bls.n	800ded0 <_vfiprintf_r+0x1c4>
 800de32:	b1b0      	cbz	r0, 800de62 <_vfiprintf_r+0x156>
 800de34:	9207      	str	r2, [sp, #28]
 800de36:	e014      	b.n	800de62 <_vfiprintf_r+0x156>
 800de38:	eba0 0308 	sub.w	r3, r0, r8
 800de3c:	fa09 f303 	lsl.w	r3, r9, r3
 800de40:	4313      	orrs	r3, r2
 800de42:	9304      	str	r3, [sp, #16]
 800de44:	46a2      	mov	sl, r4
 800de46:	e7d2      	b.n	800ddee <_vfiprintf_r+0xe2>
 800de48:	9b03      	ldr	r3, [sp, #12]
 800de4a:	1d19      	adds	r1, r3, #4
 800de4c:	681b      	ldr	r3, [r3, #0]
 800de4e:	9103      	str	r1, [sp, #12]
 800de50:	2b00      	cmp	r3, #0
 800de52:	bfbb      	ittet	lt
 800de54:	425b      	neglt	r3, r3
 800de56:	f042 0202 	orrlt.w	r2, r2, #2
 800de5a:	9307      	strge	r3, [sp, #28]
 800de5c:	9307      	strlt	r3, [sp, #28]
 800de5e:	bfb8      	it	lt
 800de60:	9204      	strlt	r2, [sp, #16]
 800de62:	7823      	ldrb	r3, [r4, #0]
 800de64:	2b2e      	cmp	r3, #46	; 0x2e
 800de66:	d10c      	bne.n	800de82 <_vfiprintf_r+0x176>
 800de68:	7863      	ldrb	r3, [r4, #1]
 800de6a:	2b2a      	cmp	r3, #42	; 0x2a
 800de6c:	d135      	bne.n	800deda <_vfiprintf_r+0x1ce>
 800de6e:	9b03      	ldr	r3, [sp, #12]
 800de70:	1d1a      	adds	r2, r3, #4
 800de72:	681b      	ldr	r3, [r3, #0]
 800de74:	9203      	str	r2, [sp, #12]
 800de76:	2b00      	cmp	r3, #0
 800de78:	bfb8      	it	lt
 800de7a:	f04f 33ff 	movlt.w	r3, #4294967295
 800de7e:	3402      	adds	r4, #2
 800de80:	9305      	str	r3, [sp, #20]
 800de82:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800df68 <_vfiprintf_r+0x25c>
 800de86:	7821      	ldrb	r1, [r4, #0]
 800de88:	2203      	movs	r2, #3
 800de8a:	4650      	mov	r0, sl
 800de8c:	f7f2 f9c8 	bl	8000220 <memchr>
 800de90:	b140      	cbz	r0, 800dea4 <_vfiprintf_r+0x198>
 800de92:	2340      	movs	r3, #64	; 0x40
 800de94:	eba0 000a 	sub.w	r0, r0, sl
 800de98:	fa03 f000 	lsl.w	r0, r3, r0
 800de9c:	9b04      	ldr	r3, [sp, #16]
 800de9e:	4303      	orrs	r3, r0
 800dea0:	3401      	adds	r4, #1
 800dea2:	9304      	str	r3, [sp, #16]
 800dea4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dea8:	482c      	ldr	r0, [pc, #176]	; (800df5c <_vfiprintf_r+0x250>)
 800deaa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800deae:	2206      	movs	r2, #6
 800deb0:	f7f2 f9b6 	bl	8000220 <memchr>
 800deb4:	2800      	cmp	r0, #0
 800deb6:	d03f      	beq.n	800df38 <_vfiprintf_r+0x22c>
 800deb8:	4b29      	ldr	r3, [pc, #164]	; (800df60 <_vfiprintf_r+0x254>)
 800deba:	bb1b      	cbnz	r3, 800df04 <_vfiprintf_r+0x1f8>
 800debc:	9b03      	ldr	r3, [sp, #12]
 800debe:	3307      	adds	r3, #7
 800dec0:	f023 0307 	bic.w	r3, r3, #7
 800dec4:	3308      	adds	r3, #8
 800dec6:	9303      	str	r3, [sp, #12]
 800dec8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800deca:	443b      	add	r3, r7
 800decc:	9309      	str	r3, [sp, #36]	; 0x24
 800dece:	e767      	b.n	800dda0 <_vfiprintf_r+0x94>
 800ded0:	fb0c 3202 	mla	r2, ip, r2, r3
 800ded4:	460c      	mov	r4, r1
 800ded6:	2001      	movs	r0, #1
 800ded8:	e7a5      	b.n	800de26 <_vfiprintf_r+0x11a>
 800deda:	2300      	movs	r3, #0
 800dedc:	3401      	adds	r4, #1
 800dede:	9305      	str	r3, [sp, #20]
 800dee0:	4619      	mov	r1, r3
 800dee2:	f04f 0c0a 	mov.w	ip, #10
 800dee6:	4620      	mov	r0, r4
 800dee8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800deec:	3a30      	subs	r2, #48	; 0x30
 800deee:	2a09      	cmp	r2, #9
 800def0:	d903      	bls.n	800defa <_vfiprintf_r+0x1ee>
 800def2:	2b00      	cmp	r3, #0
 800def4:	d0c5      	beq.n	800de82 <_vfiprintf_r+0x176>
 800def6:	9105      	str	r1, [sp, #20]
 800def8:	e7c3      	b.n	800de82 <_vfiprintf_r+0x176>
 800defa:	fb0c 2101 	mla	r1, ip, r1, r2
 800defe:	4604      	mov	r4, r0
 800df00:	2301      	movs	r3, #1
 800df02:	e7f0      	b.n	800dee6 <_vfiprintf_r+0x1da>
 800df04:	ab03      	add	r3, sp, #12
 800df06:	9300      	str	r3, [sp, #0]
 800df08:	462a      	mov	r2, r5
 800df0a:	4b16      	ldr	r3, [pc, #88]	; (800df64 <_vfiprintf_r+0x258>)
 800df0c:	a904      	add	r1, sp, #16
 800df0e:	4630      	mov	r0, r6
 800df10:	f3af 8000 	nop.w
 800df14:	4607      	mov	r7, r0
 800df16:	1c78      	adds	r0, r7, #1
 800df18:	d1d6      	bne.n	800dec8 <_vfiprintf_r+0x1bc>
 800df1a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800df1c:	07d9      	lsls	r1, r3, #31
 800df1e:	d405      	bmi.n	800df2c <_vfiprintf_r+0x220>
 800df20:	89ab      	ldrh	r3, [r5, #12]
 800df22:	059a      	lsls	r2, r3, #22
 800df24:	d402      	bmi.n	800df2c <_vfiprintf_r+0x220>
 800df26:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800df28:	f7fe ff3a 	bl	800cda0 <__retarget_lock_release_recursive>
 800df2c:	89ab      	ldrh	r3, [r5, #12]
 800df2e:	065b      	lsls	r3, r3, #25
 800df30:	f53f af12 	bmi.w	800dd58 <_vfiprintf_r+0x4c>
 800df34:	9809      	ldr	r0, [sp, #36]	; 0x24
 800df36:	e711      	b.n	800dd5c <_vfiprintf_r+0x50>
 800df38:	ab03      	add	r3, sp, #12
 800df3a:	9300      	str	r3, [sp, #0]
 800df3c:	462a      	mov	r2, r5
 800df3e:	4b09      	ldr	r3, [pc, #36]	; (800df64 <_vfiprintf_r+0x258>)
 800df40:	a904      	add	r1, sp, #16
 800df42:	4630      	mov	r0, r6
 800df44:	f000 f880 	bl	800e048 <_printf_i>
 800df48:	e7e4      	b.n	800df14 <_vfiprintf_r+0x208>
 800df4a:	bf00      	nop
 800df4c:	0800fe1c 	.word	0x0800fe1c
 800df50:	0800fe3c 	.word	0x0800fe3c
 800df54:	0800fdfc 	.word	0x0800fdfc
 800df58:	0801005c 	.word	0x0801005c
 800df5c:	08010066 	.word	0x08010066
 800df60:	00000000 	.word	0x00000000
 800df64:	0800dce7 	.word	0x0800dce7
 800df68:	08010062 	.word	0x08010062

0800df6c <_printf_common>:
 800df6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800df70:	4616      	mov	r6, r2
 800df72:	4699      	mov	r9, r3
 800df74:	688a      	ldr	r2, [r1, #8]
 800df76:	690b      	ldr	r3, [r1, #16]
 800df78:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800df7c:	4293      	cmp	r3, r2
 800df7e:	bfb8      	it	lt
 800df80:	4613      	movlt	r3, r2
 800df82:	6033      	str	r3, [r6, #0]
 800df84:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800df88:	4607      	mov	r7, r0
 800df8a:	460c      	mov	r4, r1
 800df8c:	b10a      	cbz	r2, 800df92 <_printf_common+0x26>
 800df8e:	3301      	adds	r3, #1
 800df90:	6033      	str	r3, [r6, #0]
 800df92:	6823      	ldr	r3, [r4, #0]
 800df94:	0699      	lsls	r1, r3, #26
 800df96:	bf42      	ittt	mi
 800df98:	6833      	ldrmi	r3, [r6, #0]
 800df9a:	3302      	addmi	r3, #2
 800df9c:	6033      	strmi	r3, [r6, #0]
 800df9e:	6825      	ldr	r5, [r4, #0]
 800dfa0:	f015 0506 	ands.w	r5, r5, #6
 800dfa4:	d106      	bne.n	800dfb4 <_printf_common+0x48>
 800dfa6:	f104 0a19 	add.w	sl, r4, #25
 800dfaa:	68e3      	ldr	r3, [r4, #12]
 800dfac:	6832      	ldr	r2, [r6, #0]
 800dfae:	1a9b      	subs	r3, r3, r2
 800dfb0:	42ab      	cmp	r3, r5
 800dfb2:	dc26      	bgt.n	800e002 <_printf_common+0x96>
 800dfb4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800dfb8:	1e13      	subs	r3, r2, #0
 800dfba:	6822      	ldr	r2, [r4, #0]
 800dfbc:	bf18      	it	ne
 800dfbe:	2301      	movne	r3, #1
 800dfc0:	0692      	lsls	r2, r2, #26
 800dfc2:	d42b      	bmi.n	800e01c <_printf_common+0xb0>
 800dfc4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800dfc8:	4649      	mov	r1, r9
 800dfca:	4638      	mov	r0, r7
 800dfcc:	47c0      	blx	r8
 800dfce:	3001      	adds	r0, #1
 800dfd0:	d01e      	beq.n	800e010 <_printf_common+0xa4>
 800dfd2:	6823      	ldr	r3, [r4, #0]
 800dfd4:	68e5      	ldr	r5, [r4, #12]
 800dfd6:	6832      	ldr	r2, [r6, #0]
 800dfd8:	f003 0306 	and.w	r3, r3, #6
 800dfdc:	2b04      	cmp	r3, #4
 800dfde:	bf08      	it	eq
 800dfe0:	1aad      	subeq	r5, r5, r2
 800dfe2:	68a3      	ldr	r3, [r4, #8]
 800dfe4:	6922      	ldr	r2, [r4, #16]
 800dfe6:	bf0c      	ite	eq
 800dfe8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800dfec:	2500      	movne	r5, #0
 800dfee:	4293      	cmp	r3, r2
 800dff0:	bfc4      	itt	gt
 800dff2:	1a9b      	subgt	r3, r3, r2
 800dff4:	18ed      	addgt	r5, r5, r3
 800dff6:	2600      	movs	r6, #0
 800dff8:	341a      	adds	r4, #26
 800dffa:	42b5      	cmp	r5, r6
 800dffc:	d11a      	bne.n	800e034 <_printf_common+0xc8>
 800dffe:	2000      	movs	r0, #0
 800e000:	e008      	b.n	800e014 <_printf_common+0xa8>
 800e002:	2301      	movs	r3, #1
 800e004:	4652      	mov	r2, sl
 800e006:	4649      	mov	r1, r9
 800e008:	4638      	mov	r0, r7
 800e00a:	47c0      	blx	r8
 800e00c:	3001      	adds	r0, #1
 800e00e:	d103      	bne.n	800e018 <_printf_common+0xac>
 800e010:	f04f 30ff 	mov.w	r0, #4294967295
 800e014:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e018:	3501      	adds	r5, #1
 800e01a:	e7c6      	b.n	800dfaa <_printf_common+0x3e>
 800e01c:	18e1      	adds	r1, r4, r3
 800e01e:	1c5a      	adds	r2, r3, #1
 800e020:	2030      	movs	r0, #48	; 0x30
 800e022:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e026:	4422      	add	r2, r4
 800e028:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e02c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e030:	3302      	adds	r3, #2
 800e032:	e7c7      	b.n	800dfc4 <_printf_common+0x58>
 800e034:	2301      	movs	r3, #1
 800e036:	4622      	mov	r2, r4
 800e038:	4649      	mov	r1, r9
 800e03a:	4638      	mov	r0, r7
 800e03c:	47c0      	blx	r8
 800e03e:	3001      	adds	r0, #1
 800e040:	d0e6      	beq.n	800e010 <_printf_common+0xa4>
 800e042:	3601      	adds	r6, #1
 800e044:	e7d9      	b.n	800dffa <_printf_common+0x8e>
	...

0800e048 <_printf_i>:
 800e048:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e04c:	7e0f      	ldrb	r7, [r1, #24]
 800e04e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e050:	2f78      	cmp	r7, #120	; 0x78
 800e052:	4691      	mov	r9, r2
 800e054:	4680      	mov	r8, r0
 800e056:	460c      	mov	r4, r1
 800e058:	469a      	mov	sl, r3
 800e05a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e05e:	d807      	bhi.n	800e070 <_printf_i+0x28>
 800e060:	2f62      	cmp	r7, #98	; 0x62
 800e062:	d80a      	bhi.n	800e07a <_printf_i+0x32>
 800e064:	2f00      	cmp	r7, #0
 800e066:	f000 80d8 	beq.w	800e21a <_printf_i+0x1d2>
 800e06a:	2f58      	cmp	r7, #88	; 0x58
 800e06c:	f000 80a3 	beq.w	800e1b6 <_printf_i+0x16e>
 800e070:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e074:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e078:	e03a      	b.n	800e0f0 <_printf_i+0xa8>
 800e07a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e07e:	2b15      	cmp	r3, #21
 800e080:	d8f6      	bhi.n	800e070 <_printf_i+0x28>
 800e082:	a101      	add	r1, pc, #4	; (adr r1, 800e088 <_printf_i+0x40>)
 800e084:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e088:	0800e0e1 	.word	0x0800e0e1
 800e08c:	0800e0f5 	.word	0x0800e0f5
 800e090:	0800e071 	.word	0x0800e071
 800e094:	0800e071 	.word	0x0800e071
 800e098:	0800e071 	.word	0x0800e071
 800e09c:	0800e071 	.word	0x0800e071
 800e0a0:	0800e0f5 	.word	0x0800e0f5
 800e0a4:	0800e071 	.word	0x0800e071
 800e0a8:	0800e071 	.word	0x0800e071
 800e0ac:	0800e071 	.word	0x0800e071
 800e0b0:	0800e071 	.word	0x0800e071
 800e0b4:	0800e201 	.word	0x0800e201
 800e0b8:	0800e125 	.word	0x0800e125
 800e0bc:	0800e1e3 	.word	0x0800e1e3
 800e0c0:	0800e071 	.word	0x0800e071
 800e0c4:	0800e071 	.word	0x0800e071
 800e0c8:	0800e223 	.word	0x0800e223
 800e0cc:	0800e071 	.word	0x0800e071
 800e0d0:	0800e125 	.word	0x0800e125
 800e0d4:	0800e071 	.word	0x0800e071
 800e0d8:	0800e071 	.word	0x0800e071
 800e0dc:	0800e1eb 	.word	0x0800e1eb
 800e0e0:	682b      	ldr	r3, [r5, #0]
 800e0e2:	1d1a      	adds	r2, r3, #4
 800e0e4:	681b      	ldr	r3, [r3, #0]
 800e0e6:	602a      	str	r2, [r5, #0]
 800e0e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e0ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e0f0:	2301      	movs	r3, #1
 800e0f2:	e0a3      	b.n	800e23c <_printf_i+0x1f4>
 800e0f4:	6820      	ldr	r0, [r4, #0]
 800e0f6:	6829      	ldr	r1, [r5, #0]
 800e0f8:	0606      	lsls	r6, r0, #24
 800e0fa:	f101 0304 	add.w	r3, r1, #4
 800e0fe:	d50a      	bpl.n	800e116 <_printf_i+0xce>
 800e100:	680e      	ldr	r6, [r1, #0]
 800e102:	602b      	str	r3, [r5, #0]
 800e104:	2e00      	cmp	r6, #0
 800e106:	da03      	bge.n	800e110 <_printf_i+0xc8>
 800e108:	232d      	movs	r3, #45	; 0x2d
 800e10a:	4276      	negs	r6, r6
 800e10c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e110:	485e      	ldr	r0, [pc, #376]	; (800e28c <_printf_i+0x244>)
 800e112:	230a      	movs	r3, #10
 800e114:	e019      	b.n	800e14a <_printf_i+0x102>
 800e116:	680e      	ldr	r6, [r1, #0]
 800e118:	602b      	str	r3, [r5, #0]
 800e11a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e11e:	bf18      	it	ne
 800e120:	b236      	sxthne	r6, r6
 800e122:	e7ef      	b.n	800e104 <_printf_i+0xbc>
 800e124:	682b      	ldr	r3, [r5, #0]
 800e126:	6820      	ldr	r0, [r4, #0]
 800e128:	1d19      	adds	r1, r3, #4
 800e12a:	6029      	str	r1, [r5, #0]
 800e12c:	0601      	lsls	r1, r0, #24
 800e12e:	d501      	bpl.n	800e134 <_printf_i+0xec>
 800e130:	681e      	ldr	r6, [r3, #0]
 800e132:	e002      	b.n	800e13a <_printf_i+0xf2>
 800e134:	0646      	lsls	r6, r0, #25
 800e136:	d5fb      	bpl.n	800e130 <_printf_i+0xe8>
 800e138:	881e      	ldrh	r6, [r3, #0]
 800e13a:	4854      	ldr	r0, [pc, #336]	; (800e28c <_printf_i+0x244>)
 800e13c:	2f6f      	cmp	r7, #111	; 0x6f
 800e13e:	bf0c      	ite	eq
 800e140:	2308      	moveq	r3, #8
 800e142:	230a      	movne	r3, #10
 800e144:	2100      	movs	r1, #0
 800e146:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e14a:	6865      	ldr	r5, [r4, #4]
 800e14c:	60a5      	str	r5, [r4, #8]
 800e14e:	2d00      	cmp	r5, #0
 800e150:	bfa2      	ittt	ge
 800e152:	6821      	ldrge	r1, [r4, #0]
 800e154:	f021 0104 	bicge.w	r1, r1, #4
 800e158:	6021      	strge	r1, [r4, #0]
 800e15a:	b90e      	cbnz	r6, 800e160 <_printf_i+0x118>
 800e15c:	2d00      	cmp	r5, #0
 800e15e:	d04d      	beq.n	800e1fc <_printf_i+0x1b4>
 800e160:	4615      	mov	r5, r2
 800e162:	fbb6 f1f3 	udiv	r1, r6, r3
 800e166:	fb03 6711 	mls	r7, r3, r1, r6
 800e16a:	5dc7      	ldrb	r7, [r0, r7]
 800e16c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e170:	4637      	mov	r7, r6
 800e172:	42bb      	cmp	r3, r7
 800e174:	460e      	mov	r6, r1
 800e176:	d9f4      	bls.n	800e162 <_printf_i+0x11a>
 800e178:	2b08      	cmp	r3, #8
 800e17a:	d10b      	bne.n	800e194 <_printf_i+0x14c>
 800e17c:	6823      	ldr	r3, [r4, #0]
 800e17e:	07de      	lsls	r6, r3, #31
 800e180:	d508      	bpl.n	800e194 <_printf_i+0x14c>
 800e182:	6923      	ldr	r3, [r4, #16]
 800e184:	6861      	ldr	r1, [r4, #4]
 800e186:	4299      	cmp	r1, r3
 800e188:	bfde      	ittt	le
 800e18a:	2330      	movle	r3, #48	; 0x30
 800e18c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e190:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e194:	1b52      	subs	r2, r2, r5
 800e196:	6122      	str	r2, [r4, #16]
 800e198:	f8cd a000 	str.w	sl, [sp]
 800e19c:	464b      	mov	r3, r9
 800e19e:	aa03      	add	r2, sp, #12
 800e1a0:	4621      	mov	r1, r4
 800e1a2:	4640      	mov	r0, r8
 800e1a4:	f7ff fee2 	bl	800df6c <_printf_common>
 800e1a8:	3001      	adds	r0, #1
 800e1aa:	d14c      	bne.n	800e246 <_printf_i+0x1fe>
 800e1ac:	f04f 30ff 	mov.w	r0, #4294967295
 800e1b0:	b004      	add	sp, #16
 800e1b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e1b6:	4835      	ldr	r0, [pc, #212]	; (800e28c <_printf_i+0x244>)
 800e1b8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800e1bc:	6829      	ldr	r1, [r5, #0]
 800e1be:	6823      	ldr	r3, [r4, #0]
 800e1c0:	f851 6b04 	ldr.w	r6, [r1], #4
 800e1c4:	6029      	str	r1, [r5, #0]
 800e1c6:	061d      	lsls	r5, r3, #24
 800e1c8:	d514      	bpl.n	800e1f4 <_printf_i+0x1ac>
 800e1ca:	07df      	lsls	r7, r3, #31
 800e1cc:	bf44      	itt	mi
 800e1ce:	f043 0320 	orrmi.w	r3, r3, #32
 800e1d2:	6023      	strmi	r3, [r4, #0]
 800e1d4:	b91e      	cbnz	r6, 800e1de <_printf_i+0x196>
 800e1d6:	6823      	ldr	r3, [r4, #0]
 800e1d8:	f023 0320 	bic.w	r3, r3, #32
 800e1dc:	6023      	str	r3, [r4, #0]
 800e1de:	2310      	movs	r3, #16
 800e1e0:	e7b0      	b.n	800e144 <_printf_i+0xfc>
 800e1e2:	6823      	ldr	r3, [r4, #0]
 800e1e4:	f043 0320 	orr.w	r3, r3, #32
 800e1e8:	6023      	str	r3, [r4, #0]
 800e1ea:	2378      	movs	r3, #120	; 0x78
 800e1ec:	4828      	ldr	r0, [pc, #160]	; (800e290 <_printf_i+0x248>)
 800e1ee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e1f2:	e7e3      	b.n	800e1bc <_printf_i+0x174>
 800e1f4:	0659      	lsls	r1, r3, #25
 800e1f6:	bf48      	it	mi
 800e1f8:	b2b6      	uxthmi	r6, r6
 800e1fa:	e7e6      	b.n	800e1ca <_printf_i+0x182>
 800e1fc:	4615      	mov	r5, r2
 800e1fe:	e7bb      	b.n	800e178 <_printf_i+0x130>
 800e200:	682b      	ldr	r3, [r5, #0]
 800e202:	6826      	ldr	r6, [r4, #0]
 800e204:	6961      	ldr	r1, [r4, #20]
 800e206:	1d18      	adds	r0, r3, #4
 800e208:	6028      	str	r0, [r5, #0]
 800e20a:	0635      	lsls	r5, r6, #24
 800e20c:	681b      	ldr	r3, [r3, #0]
 800e20e:	d501      	bpl.n	800e214 <_printf_i+0x1cc>
 800e210:	6019      	str	r1, [r3, #0]
 800e212:	e002      	b.n	800e21a <_printf_i+0x1d2>
 800e214:	0670      	lsls	r0, r6, #25
 800e216:	d5fb      	bpl.n	800e210 <_printf_i+0x1c8>
 800e218:	8019      	strh	r1, [r3, #0]
 800e21a:	2300      	movs	r3, #0
 800e21c:	6123      	str	r3, [r4, #16]
 800e21e:	4615      	mov	r5, r2
 800e220:	e7ba      	b.n	800e198 <_printf_i+0x150>
 800e222:	682b      	ldr	r3, [r5, #0]
 800e224:	1d1a      	adds	r2, r3, #4
 800e226:	602a      	str	r2, [r5, #0]
 800e228:	681d      	ldr	r5, [r3, #0]
 800e22a:	6862      	ldr	r2, [r4, #4]
 800e22c:	2100      	movs	r1, #0
 800e22e:	4628      	mov	r0, r5
 800e230:	f7f1 fff6 	bl	8000220 <memchr>
 800e234:	b108      	cbz	r0, 800e23a <_printf_i+0x1f2>
 800e236:	1b40      	subs	r0, r0, r5
 800e238:	6060      	str	r0, [r4, #4]
 800e23a:	6863      	ldr	r3, [r4, #4]
 800e23c:	6123      	str	r3, [r4, #16]
 800e23e:	2300      	movs	r3, #0
 800e240:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e244:	e7a8      	b.n	800e198 <_printf_i+0x150>
 800e246:	6923      	ldr	r3, [r4, #16]
 800e248:	462a      	mov	r2, r5
 800e24a:	4649      	mov	r1, r9
 800e24c:	4640      	mov	r0, r8
 800e24e:	47d0      	blx	sl
 800e250:	3001      	adds	r0, #1
 800e252:	d0ab      	beq.n	800e1ac <_printf_i+0x164>
 800e254:	6823      	ldr	r3, [r4, #0]
 800e256:	079b      	lsls	r3, r3, #30
 800e258:	d413      	bmi.n	800e282 <_printf_i+0x23a>
 800e25a:	68e0      	ldr	r0, [r4, #12]
 800e25c:	9b03      	ldr	r3, [sp, #12]
 800e25e:	4298      	cmp	r0, r3
 800e260:	bfb8      	it	lt
 800e262:	4618      	movlt	r0, r3
 800e264:	e7a4      	b.n	800e1b0 <_printf_i+0x168>
 800e266:	2301      	movs	r3, #1
 800e268:	4632      	mov	r2, r6
 800e26a:	4649      	mov	r1, r9
 800e26c:	4640      	mov	r0, r8
 800e26e:	47d0      	blx	sl
 800e270:	3001      	adds	r0, #1
 800e272:	d09b      	beq.n	800e1ac <_printf_i+0x164>
 800e274:	3501      	adds	r5, #1
 800e276:	68e3      	ldr	r3, [r4, #12]
 800e278:	9903      	ldr	r1, [sp, #12]
 800e27a:	1a5b      	subs	r3, r3, r1
 800e27c:	42ab      	cmp	r3, r5
 800e27e:	dcf2      	bgt.n	800e266 <_printf_i+0x21e>
 800e280:	e7eb      	b.n	800e25a <_printf_i+0x212>
 800e282:	2500      	movs	r5, #0
 800e284:	f104 0619 	add.w	r6, r4, #25
 800e288:	e7f5      	b.n	800e276 <_printf_i+0x22e>
 800e28a:	bf00      	nop
 800e28c:	0801006d 	.word	0x0801006d
 800e290:	0801007e 	.word	0x0801007e
 800e294:	00000000 	.word	0x00000000

0800e298 <nan>:
 800e298:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800e2a0 <nan+0x8>
 800e29c:	4770      	bx	lr
 800e29e:	bf00      	nop
 800e2a0:	00000000 	.word	0x00000000
 800e2a4:	7ff80000 	.word	0x7ff80000

0800e2a8 <_sbrk_r>:
 800e2a8:	b538      	push	{r3, r4, r5, lr}
 800e2aa:	4d06      	ldr	r5, [pc, #24]	; (800e2c4 <_sbrk_r+0x1c>)
 800e2ac:	2300      	movs	r3, #0
 800e2ae:	4604      	mov	r4, r0
 800e2b0:	4608      	mov	r0, r1
 800e2b2:	602b      	str	r3, [r5, #0]
 800e2b4:	f7f8 fae2 	bl	800687c <_sbrk>
 800e2b8:	1c43      	adds	r3, r0, #1
 800e2ba:	d102      	bne.n	800e2c2 <_sbrk_r+0x1a>
 800e2bc:	682b      	ldr	r3, [r5, #0]
 800e2be:	b103      	cbz	r3, 800e2c2 <_sbrk_r+0x1a>
 800e2c0:	6023      	str	r3, [r4, #0]
 800e2c2:	bd38      	pop	{r3, r4, r5, pc}
 800e2c4:	200006d4 	.word	0x200006d4

0800e2c8 <__sread>:
 800e2c8:	b510      	push	{r4, lr}
 800e2ca:	460c      	mov	r4, r1
 800e2cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e2d0:	f000 f92e 	bl	800e530 <_read_r>
 800e2d4:	2800      	cmp	r0, #0
 800e2d6:	bfab      	itete	ge
 800e2d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e2da:	89a3      	ldrhlt	r3, [r4, #12]
 800e2dc:	181b      	addge	r3, r3, r0
 800e2de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e2e2:	bfac      	ite	ge
 800e2e4:	6563      	strge	r3, [r4, #84]	; 0x54
 800e2e6:	81a3      	strhlt	r3, [r4, #12]
 800e2e8:	bd10      	pop	{r4, pc}

0800e2ea <__swrite>:
 800e2ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e2ee:	461f      	mov	r7, r3
 800e2f0:	898b      	ldrh	r3, [r1, #12]
 800e2f2:	05db      	lsls	r3, r3, #23
 800e2f4:	4605      	mov	r5, r0
 800e2f6:	460c      	mov	r4, r1
 800e2f8:	4616      	mov	r6, r2
 800e2fa:	d505      	bpl.n	800e308 <__swrite+0x1e>
 800e2fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e300:	2302      	movs	r3, #2
 800e302:	2200      	movs	r2, #0
 800e304:	f000 f8a4 	bl	800e450 <_lseek_r>
 800e308:	89a3      	ldrh	r3, [r4, #12]
 800e30a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e30e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e312:	81a3      	strh	r3, [r4, #12]
 800e314:	4632      	mov	r2, r6
 800e316:	463b      	mov	r3, r7
 800e318:	4628      	mov	r0, r5
 800e31a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e31e:	f000 b823 	b.w	800e368 <_write_r>

0800e322 <__sseek>:
 800e322:	b510      	push	{r4, lr}
 800e324:	460c      	mov	r4, r1
 800e326:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e32a:	f000 f891 	bl	800e450 <_lseek_r>
 800e32e:	1c43      	adds	r3, r0, #1
 800e330:	89a3      	ldrh	r3, [r4, #12]
 800e332:	bf15      	itete	ne
 800e334:	6560      	strne	r0, [r4, #84]	; 0x54
 800e336:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e33a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e33e:	81a3      	strheq	r3, [r4, #12]
 800e340:	bf18      	it	ne
 800e342:	81a3      	strhne	r3, [r4, #12]
 800e344:	bd10      	pop	{r4, pc}

0800e346 <__sclose>:
 800e346:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e34a:	f000 b83d 	b.w	800e3c8 <_close_r>

0800e34e <__ascii_wctomb>:
 800e34e:	b149      	cbz	r1, 800e364 <__ascii_wctomb+0x16>
 800e350:	2aff      	cmp	r2, #255	; 0xff
 800e352:	bf85      	ittet	hi
 800e354:	238a      	movhi	r3, #138	; 0x8a
 800e356:	6003      	strhi	r3, [r0, #0]
 800e358:	700a      	strbls	r2, [r1, #0]
 800e35a:	f04f 30ff 	movhi.w	r0, #4294967295
 800e35e:	bf98      	it	ls
 800e360:	2001      	movls	r0, #1
 800e362:	4770      	bx	lr
 800e364:	4608      	mov	r0, r1
 800e366:	4770      	bx	lr

0800e368 <_write_r>:
 800e368:	b538      	push	{r3, r4, r5, lr}
 800e36a:	4d07      	ldr	r5, [pc, #28]	; (800e388 <_write_r+0x20>)
 800e36c:	4604      	mov	r4, r0
 800e36e:	4608      	mov	r0, r1
 800e370:	4611      	mov	r1, r2
 800e372:	2200      	movs	r2, #0
 800e374:	602a      	str	r2, [r5, #0]
 800e376:	461a      	mov	r2, r3
 800e378:	f7f3 fdae 	bl	8001ed8 <_write>
 800e37c:	1c43      	adds	r3, r0, #1
 800e37e:	d102      	bne.n	800e386 <_write_r+0x1e>
 800e380:	682b      	ldr	r3, [r5, #0]
 800e382:	b103      	cbz	r3, 800e386 <_write_r+0x1e>
 800e384:	6023      	str	r3, [r4, #0]
 800e386:	bd38      	pop	{r3, r4, r5, pc}
 800e388:	200006d4 	.word	0x200006d4

0800e38c <__assert_func>:
 800e38c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e38e:	4614      	mov	r4, r2
 800e390:	461a      	mov	r2, r3
 800e392:	4b09      	ldr	r3, [pc, #36]	; (800e3b8 <__assert_func+0x2c>)
 800e394:	681b      	ldr	r3, [r3, #0]
 800e396:	4605      	mov	r5, r0
 800e398:	68d8      	ldr	r0, [r3, #12]
 800e39a:	b14c      	cbz	r4, 800e3b0 <__assert_func+0x24>
 800e39c:	4b07      	ldr	r3, [pc, #28]	; (800e3bc <__assert_func+0x30>)
 800e39e:	9100      	str	r1, [sp, #0]
 800e3a0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e3a4:	4906      	ldr	r1, [pc, #24]	; (800e3c0 <__assert_func+0x34>)
 800e3a6:	462b      	mov	r3, r5
 800e3a8:	f000 f81e 	bl	800e3e8 <fiprintf>
 800e3ac:	f000 f8d2 	bl	800e554 <abort>
 800e3b0:	4b04      	ldr	r3, [pc, #16]	; (800e3c4 <__assert_func+0x38>)
 800e3b2:	461c      	mov	r4, r3
 800e3b4:	e7f3      	b.n	800e39e <__assert_func+0x12>
 800e3b6:	bf00      	nop
 800e3b8:	20000064 	.word	0x20000064
 800e3bc:	0801008f 	.word	0x0801008f
 800e3c0:	0801009c 	.word	0x0801009c
 800e3c4:	080100ca 	.word	0x080100ca

0800e3c8 <_close_r>:
 800e3c8:	b538      	push	{r3, r4, r5, lr}
 800e3ca:	4d06      	ldr	r5, [pc, #24]	; (800e3e4 <_close_r+0x1c>)
 800e3cc:	2300      	movs	r3, #0
 800e3ce:	4604      	mov	r4, r0
 800e3d0:	4608      	mov	r0, r1
 800e3d2:	602b      	str	r3, [r5, #0]
 800e3d4:	f7f8 fa1d 	bl	8006812 <_close>
 800e3d8:	1c43      	adds	r3, r0, #1
 800e3da:	d102      	bne.n	800e3e2 <_close_r+0x1a>
 800e3dc:	682b      	ldr	r3, [r5, #0]
 800e3de:	b103      	cbz	r3, 800e3e2 <_close_r+0x1a>
 800e3e0:	6023      	str	r3, [r4, #0]
 800e3e2:	bd38      	pop	{r3, r4, r5, pc}
 800e3e4:	200006d4 	.word	0x200006d4

0800e3e8 <fiprintf>:
 800e3e8:	b40e      	push	{r1, r2, r3}
 800e3ea:	b503      	push	{r0, r1, lr}
 800e3ec:	4601      	mov	r1, r0
 800e3ee:	ab03      	add	r3, sp, #12
 800e3f0:	4805      	ldr	r0, [pc, #20]	; (800e408 <fiprintf+0x20>)
 800e3f2:	f853 2b04 	ldr.w	r2, [r3], #4
 800e3f6:	6800      	ldr	r0, [r0, #0]
 800e3f8:	9301      	str	r3, [sp, #4]
 800e3fa:	f7ff fc87 	bl	800dd0c <_vfiprintf_r>
 800e3fe:	b002      	add	sp, #8
 800e400:	f85d eb04 	ldr.w	lr, [sp], #4
 800e404:	b003      	add	sp, #12
 800e406:	4770      	bx	lr
 800e408:	20000064 	.word	0x20000064

0800e40c <_fstat_r>:
 800e40c:	b538      	push	{r3, r4, r5, lr}
 800e40e:	4d07      	ldr	r5, [pc, #28]	; (800e42c <_fstat_r+0x20>)
 800e410:	2300      	movs	r3, #0
 800e412:	4604      	mov	r4, r0
 800e414:	4608      	mov	r0, r1
 800e416:	4611      	mov	r1, r2
 800e418:	602b      	str	r3, [r5, #0]
 800e41a:	f7f8 fa06 	bl	800682a <_fstat>
 800e41e:	1c43      	adds	r3, r0, #1
 800e420:	d102      	bne.n	800e428 <_fstat_r+0x1c>
 800e422:	682b      	ldr	r3, [r5, #0]
 800e424:	b103      	cbz	r3, 800e428 <_fstat_r+0x1c>
 800e426:	6023      	str	r3, [r4, #0]
 800e428:	bd38      	pop	{r3, r4, r5, pc}
 800e42a:	bf00      	nop
 800e42c:	200006d4 	.word	0x200006d4

0800e430 <_isatty_r>:
 800e430:	b538      	push	{r3, r4, r5, lr}
 800e432:	4d06      	ldr	r5, [pc, #24]	; (800e44c <_isatty_r+0x1c>)
 800e434:	2300      	movs	r3, #0
 800e436:	4604      	mov	r4, r0
 800e438:	4608      	mov	r0, r1
 800e43a:	602b      	str	r3, [r5, #0]
 800e43c:	f7f8 fa05 	bl	800684a <_isatty>
 800e440:	1c43      	adds	r3, r0, #1
 800e442:	d102      	bne.n	800e44a <_isatty_r+0x1a>
 800e444:	682b      	ldr	r3, [r5, #0]
 800e446:	b103      	cbz	r3, 800e44a <_isatty_r+0x1a>
 800e448:	6023      	str	r3, [r4, #0]
 800e44a:	bd38      	pop	{r3, r4, r5, pc}
 800e44c:	200006d4 	.word	0x200006d4

0800e450 <_lseek_r>:
 800e450:	b538      	push	{r3, r4, r5, lr}
 800e452:	4d07      	ldr	r5, [pc, #28]	; (800e470 <_lseek_r+0x20>)
 800e454:	4604      	mov	r4, r0
 800e456:	4608      	mov	r0, r1
 800e458:	4611      	mov	r1, r2
 800e45a:	2200      	movs	r2, #0
 800e45c:	602a      	str	r2, [r5, #0]
 800e45e:	461a      	mov	r2, r3
 800e460:	f7f8 f9fe 	bl	8006860 <_lseek>
 800e464:	1c43      	adds	r3, r0, #1
 800e466:	d102      	bne.n	800e46e <_lseek_r+0x1e>
 800e468:	682b      	ldr	r3, [r5, #0]
 800e46a:	b103      	cbz	r3, 800e46e <_lseek_r+0x1e>
 800e46c:	6023      	str	r3, [r4, #0]
 800e46e:	bd38      	pop	{r3, r4, r5, pc}
 800e470:	200006d4 	.word	0x200006d4

0800e474 <malloc>:
 800e474:	4b02      	ldr	r3, [pc, #8]	; (800e480 <malloc+0xc>)
 800e476:	4601      	mov	r1, r0
 800e478:	6818      	ldr	r0, [r3, #0]
 800e47a:	f7ff ba4d 	b.w	800d918 <_malloc_r>
 800e47e:	bf00      	nop
 800e480:	20000064 	.word	0x20000064

0800e484 <memmove>:
 800e484:	4288      	cmp	r0, r1
 800e486:	b510      	push	{r4, lr}
 800e488:	eb01 0402 	add.w	r4, r1, r2
 800e48c:	d902      	bls.n	800e494 <memmove+0x10>
 800e48e:	4284      	cmp	r4, r0
 800e490:	4623      	mov	r3, r4
 800e492:	d807      	bhi.n	800e4a4 <memmove+0x20>
 800e494:	1e43      	subs	r3, r0, #1
 800e496:	42a1      	cmp	r1, r4
 800e498:	d008      	beq.n	800e4ac <memmove+0x28>
 800e49a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e49e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e4a2:	e7f8      	b.n	800e496 <memmove+0x12>
 800e4a4:	4402      	add	r2, r0
 800e4a6:	4601      	mov	r1, r0
 800e4a8:	428a      	cmp	r2, r1
 800e4aa:	d100      	bne.n	800e4ae <memmove+0x2a>
 800e4ac:	bd10      	pop	{r4, pc}
 800e4ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e4b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e4b6:	e7f7      	b.n	800e4a8 <memmove+0x24>

0800e4b8 <__malloc_lock>:
 800e4b8:	4801      	ldr	r0, [pc, #4]	; (800e4c0 <__malloc_lock+0x8>)
 800e4ba:	f7fe bc70 	b.w	800cd9e <__retarget_lock_acquire_recursive>
 800e4be:	bf00      	nop
 800e4c0:	200006c8 	.word	0x200006c8

0800e4c4 <__malloc_unlock>:
 800e4c4:	4801      	ldr	r0, [pc, #4]	; (800e4cc <__malloc_unlock+0x8>)
 800e4c6:	f7fe bc6b 	b.w	800cda0 <__retarget_lock_release_recursive>
 800e4ca:	bf00      	nop
 800e4cc:	200006c8 	.word	0x200006c8

0800e4d0 <_realloc_r>:
 800e4d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e4d4:	4680      	mov	r8, r0
 800e4d6:	4614      	mov	r4, r2
 800e4d8:	460e      	mov	r6, r1
 800e4da:	b921      	cbnz	r1, 800e4e6 <_realloc_r+0x16>
 800e4dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e4e0:	4611      	mov	r1, r2
 800e4e2:	f7ff ba19 	b.w	800d918 <_malloc_r>
 800e4e6:	b92a      	cbnz	r2, 800e4f4 <_realloc_r+0x24>
 800e4e8:	f7ff f9aa 	bl	800d840 <_free_r>
 800e4ec:	4625      	mov	r5, r4
 800e4ee:	4628      	mov	r0, r5
 800e4f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e4f4:	f000 f835 	bl	800e562 <_malloc_usable_size_r>
 800e4f8:	4284      	cmp	r4, r0
 800e4fa:	4607      	mov	r7, r0
 800e4fc:	d802      	bhi.n	800e504 <_realloc_r+0x34>
 800e4fe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e502:	d812      	bhi.n	800e52a <_realloc_r+0x5a>
 800e504:	4621      	mov	r1, r4
 800e506:	4640      	mov	r0, r8
 800e508:	f7ff fa06 	bl	800d918 <_malloc_r>
 800e50c:	4605      	mov	r5, r0
 800e50e:	2800      	cmp	r0, #0
 800e510:	d0ed      	beq.n	800e4ee <_realloc_r+0x1e>
 800e512:	42bc      	cmp	r4, r7
 800e514:	4622      	mov	r2, r4
 800e516:	4631      	mov	r1, r6
 800e518:	bf28      	it	cs
 800e51a:	463a      	movcs	r2, r7
 800e51c:	f7fc fcbe 	bl	800ae9c <memcpy>
 800e520:	4631      	mov	r1, r6
 800e522:	4640      	mov	r0, r8
 800e524:	f7ff f98c 	bl	800d840 <_free_r>
 800e528:	e7e1      	b.n	800e4ee <_realloc_r+0x1e>
 800e52a:	4635      	mov	r5, r6
 800e52c:	e7df      	b.n	800e4ee <_realloc_r+0x1e>
	...

0800e530 <_read_r>:
 800e530:	b538      	push	{r3, r4, r5, lr}
 800e532:	4d07      	ldr	r5, [pc, #28]	; (800e550 <_read_r+0x20>)
 800e534:	4604      	mov	r4, r0
 800e536:	4608      	mov	r0, r1
 800e538:	4611      	mov	r1, r2
 800e53a:	2200      	movs	r2, #0
 800e53c:	602a      	str	r2, [r5, #0]
 800e53e:	461a      	mov	r2, r3
 800e540:	f7f8 f94a 	bl	80067d8 <_read>
 800e544:	1c43      	adds	r3, r0, #1
 800e546:	d102      	bne.n	800e54e <_read_r+0x1e>
 800e548:	682b      	ldr	r3, [r5, #0]
 800e54a:	b103      	cbz	r3, 800e54e <_read_r+0x1e>
 800e54c:	6023      	str	r3, [r4, #0]
 800e54e:	bd38      	pop	{r3, r4, r5, pc}
 800e550:	200006d4 	.word	0x200006d4

0800e554 <abort>:
 800e554:	b508      	push	{r3, lr}
 800e556:	2006      	movs	r0, #6
 800e558:	f000 f834 	bl	800e5c4 <raise>
 800e55c:	2001      	movs	r0, #1
 800e55e:	f7f8 f931 	bl	80067c4 <_exit>

0800e562 <_malloc_usable_size_r>:
 800e562:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e566:	1f18      	subs	r0, r3, #4
 800e568:	2b00      	cmp	r3, #0
 800e56a:	bfbc      	itt	lt
 800e56c:	580b      	ldrlt	r3, [r1, r0]
 800e56e:	18c0      	addlt	r0, r0, r3
 800e570:	4770      	bx	lr

0800e572 <_raise_r>:
 800e572:	291f      	cmp	r1, #31
 800e574:	b538      	push	{r3, r4, r5, lr}
 800e576:	4604      	mov	r4, r0
 800e578:	460d      	mov	r5, r1
 800e57a:	d904      	bls.n	800e586 <_raise_r+0x14>
 800e57c:	2316      	movs	r3, #22
 800e57e:	6003      	str	r3, [r0, #0]
 800e580:	f04f 30ff 	mov.w	r0, #4294967295
 800e584:	bd38      	pop	{r3, r4, r5, pc}
 800e586:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e588:	b112      	cbz	r2, 800e590 <_raise_r+0x1e>
 800e58a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e58e:	b94b      	cbnz	r3, 800e5a4 <_raise_r+0x32>
 800e590:	4620      	mov	r0, r4
 800e592:	f000 f831 	bl	800e5f8 <_getpid_r>
 800e596:	462a      	mov	r2, r5
 800e598:	4601      	mov	r1, r0
 800e59a:	4620      	mov	r0, r4
 800e59c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e5a0:	f000 b818 	b.w	800e5d4 <_kill_r>
 800e5a4:	2b01      	cmp	r3, #1
 800e5a6:	d00a      	beq.n	800e5be <_raise_r+0x4c>
 800e5a8:	1c59      	adds	r1, r3, #1
 800e5aa:	d103      	bne.n	800e5b4 <_raise_r+0x42>
 800e5ac:	2316      	movs	r3, #22
 800e5ae:	6003      	str	r3, [r0, #0]
 800e5b0:	2001      	movs	r0, #1
 800e5b2:	e7e7      	b.n	800e584 <_raise_r+0x12>
 800e5b4:	2400      	movs	r4, #0
 800e5b6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e5ba:	4628      	mov	r0, r5
 800e5bc:	4798      	blx	r3
 800e5be:	2000      	movs	r0, #0
 800e5c0:	e7e0      	b.n	800e584 <_raise_r+0x12>
	...

0800e5c4 <raise>:
 800e5c4:	4b02      	ldr	r3, [pc, #8]	; (800e5d0 <raise+0xc>)
 800e5c6:	4601      	mov	r1, r0
 800e5c8:	6818      	ldr	r0, [r3, #0]
 800e5ca:	f7ff bfd2 	b.w	800e572 <_raise_r>
 800e5ce:	bf00      	nop
 800e5d0:	20000064 	.word	0x20000064

0800e5d4 <_kill_r>:
 800e5d4:	b538      	push	{r3, r4, r5, lr}
 800e5d6:	4d07      	ldr	r5, [pc, #28]	; (800e5f4 <_kill_r+0x20>)
 800e5d8:	2300      	movs	r3, #0
 800e5da:	4604      	mov	r4, r0
 800e5dc:	4608      	mov	r0, r1
 800e5de:	4611      	mov	r1, r2
 800e5e0:	602b      	str	r3, [r5, #0]
 800e5e2:	f7f8 f8df 	bl	80067a4 <_kill>
 800e5e6:	1c43      	adds	r3, r0, #1
 800e5e8:	d102      	bne.n	800e5f0 <_kill_r+0x1c>
 800e5ea:	682b      	ldr	r3, [r5, #0]
 800e5ec:	b103      	cbz	r3, 800e5f0 <_kill_r+0x1c>
 800e5ee:	6023      	str	r3, [r4, #0]
 800e5f0:	bd38      	pop	{r3, r4, r5, pc}
 800e5f2:	bf00      	nop
 800e5f4:	200006d4 	.word	0x200006d4

0800e5f8 <_getpid_r>:
 800e5f8:	f7f8 b8cc 	b.w	8006794 <_getpid>

0800e5fc <pow>:
 800e5fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e5fe:	ed2d 8b02 	vpush	{d8}
 800e602:	eeb0 8a40 	vmov.f32	s16, s0
 800e606:	eef0 8a60 	vmov.f32	s17, s1
 800e60a:	ec55 4b11 	vmov	r4, r5, d1
 800e60e:	f000 f8b3 	bl	800e778 <__ieee754_pow>
 800e612:	4622      	mov	r2, r4
 800e614:	462b      	mov	r3, r5
 800e616:	4620      	mov	r0, r4
 800e618:	4629      	mov	r1, r5
 800e61a:	ec57 6b10 	vmov	r6, r7, d0
 800e61e:	f7f2 faa5 	bl	8000b6c <__aeabi_dcmpun>
 800e622:	2800      	cmp	r0, #0
 800e624:	d13b      	bne.n	800e69e <pow+0xa2>
 800e626:	ec51 0b18 	vmov	r0, r1, d8
 800e62a:	2200      	movs	r2, #0
 800e62c:	2300      	movs	r3, #0
 800e62e:	f7f2 fa6b 	bl	8000b08 <__aeabi_dcmpeq>
 800e632:	b1b8      	cbz	r0, 800e664 <pow+0x68>
 800e634:	2200      	movs	r2, #0
 800e636:	2300      	movs	r3, #0
 800e638:	4620      	mov	r0, r4
 800e63a:	4629      	mov	r1, r5
 800e63c:	f7f2 fa64 	bl	8000b08 <__aeabi_dcmpeq>
 800e640:	2800      	cmp	r0, #0
 800e642:	d146      	bne.n	800e6d2 <pow+0xd6>
 800e644:	ec45 4b10 	vmov	d0, r4, r5
 800e648:	f001 f838 	bl	800f6bc <finite>
 800e64c:	b338      	cbz	r0, 800e69e <pow+0xa2>
 800e64e:	2200      	movs	r2, #0
 800e650:	2300      	movs	r3, #0
 800e652:	4620      	mov	r0, r4
 800e654:	4629      	mov	r1, r5
 800e656:	f7f2 fa61 	bl	8000b1c <__aeabi_dcmplt>
 800e65a:	b300      	cbz	r0, 800e69e <pow+0xa2>
 800e65c:	f7fc fbf4 	bl	800ae48 <__errno>
 800e660:	2322      	movs	r3, #34	; 0x22
 800e662:	e01b      	b.n	800e69c <pow+0xa0>
 800e664:	ec47 6b10 	vmov	d0, r6, r7
 800e668:	f001 f828 	bl	800f6bc <finite>
 800e66c:	b9e0      	cbnz	r0, 800e6a8 <pow+0xac>
 800e66e:	eeb0 0a48 	vmov.f32	s0, s16
 800e672:	eef0 0a68 	vmov.f32	s1, s17
 800e676:	f001 f821 	bl	800f6bc <finite>
 800e67a:	b1a8      	cbz	r0, 800e6a8 <pow+0xac>
 800e67c:	ec45 4b10 	vmov	d0, r4, r5
 800e680:	f001 f81c 	bl	800f6bc <finite>
 800e684:	b180      	cbz	r0, 800e6a8 <pow+0xac>
 800e686:	4632      	mov	r2, r6
 800e688:	463b      	mov	r3, r7
 800e68a:	4630      	mov	r0, r6
 800e68c:	4639      	mov	r1, r7
 800e68e:	f7f2 fa6d 	bl	8000b6c <__aeabi_dcmpun>
 800e692:	2800      	cmp	r0, #0
 800e694:	d0e2      	beq.n	800e65c <pow+0x60>
 800e696:	f7fc fbd7 	bl	800ae48 <__errno>
 800e69a:	2321      	movs	r3, #33	; 0x21
 800e69c:	6003      	str	r3, [r0, #0]
 800e69e:	ecbd 8b02 	vpop	{d8}
 800e6a2:	ec47 6b10 	vmov	d0, r6, r7
 800e6a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e6a8:	2200      	movs	r2, #0
 800e6aa:	2300      	movs	r3, #0
 800e6ac:	4630      	mov	r0, r6
 800e6ae:	4639      	mov	r1, r7
 800e6b0:	f7f2 fa2a 	bl	8000b08 <__aeabi_dcmpeq>
 800e6b4:	2800      	cmp	r0, #0
 800e6b6:	d0f2      	beq.n	800e69e <pow+0xa2>
 800e6b8:	eeb0 0a48 	vmov.f32	s0, s16
 800e6bc:	eef0 0a68 	vmov.f32	s1, s17
 800e6c0:	f000 fffc 	bl	800f6bc <finite>
 800e6c4:	2800      	cmp	r0, #0
 800e6c6:	d0ea      	beq.n	800e69e <pow+0xa2>
 800e6c8:	ec45 4b10 	vmov	d0, r4, r5
 800e6cc:	f000 fff6 	bl	800f6bc <finite>
 800e6d0:	e7c3      	b.n	800e65a <pow+0x5e>
 800e6d2:	4f01      	ldr	r7, [pc, #4]	; (800e6d8 <pow+0xdc>)
 800e6d4:	2600      	movs	r6, #0
 800e6d6:	e7e2      	b.n	800e69e <pow+0xa2>
 800e6d8:	3ff00000 	.word	0x3ff00000

0800e6dc <asinf>:
 800e6dc:	b508      	push	{r3, lr}
 800e6de:	ed2d 8b02 	vpush	{d8}
 800e6e2:	eeb0 8a40 	vmov.f32	s16, s0
 800e6e6:	f000 fe27 	bl	800f338 <__ieee754_asinf>
 800e6ea:	eeb4 8a48 	vcmp.f32	s16, s16
 800e6ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e6f2:	eef0 8a40 	vmov.f32	s17, s0
 800e6f6:	d615      	bvs.n	800e724 <asinf+0x48>
 800e6f8:	eeb0 0a48 	vmov.f32	s0, s16
 800e6fc:	f001 f946 	bl	800f98c <fabsf>
 800e700:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800e704:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800e708:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e70c:	dd0a      	ble.n	800e724 <asinf+0x48>
 800e70e:	f7fc fb9b 	bl	800ae48 <__errno>
 800e712:	ecbd 8b02 	vpop	{d8}
 800e716:	2321      	movs	r3, #33	; 0x21
 800e718:	6003      	str	r3, [r0, #0]
 800e71a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800e71e:	4804      	ldr	r0, [pc, #16]	; (800e730 <asinf+0x54>)
 800e720:	f7fc be70 	b.w	800b404 <nanf>
 800e724:	eeb0 0a68 	vmov.f32	s0, s17
 800e728:	ecbd 8b02 	vpop	{d8}
 800e72c:	bd08      	pop	{r3, pc}
 800e72e:	bf00      	nop
 800e730:	080100ca 	.word	0x080100ca

0800e734 <atan2f>:
 800e734:	f000 bee6 	b.w	800f504 <__ieee754_atan2f>

0800e738 <sqrtf>:
 800e738:	b508      	push	{r3, lr}
 800e73a:	ed2d 8b02 	vpush	{d8}
 800e73e:	eeb0 8a40 	vmov.f32	s16, s0
 800e742:	f000 ff7f 	bl	800f644 <__ieee754_sqrtf>
 800e746:	eeb4 8a48 	vcmp.f32	s16, s16
 800e74a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e74e:	d60c      	bvs.n	800e76a <sqrtf+0x32>
 800e750:	eddf 8a07 	vldr	s17, [pc, #28]	; 800e770 <sqrtf+0x38>
 800e754:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800e758:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e75c:	d505      	bpl.n	800e76a <sqrtf+0x32>
 800e75e:	f7fc fb73 	bl	800ae48 <__errno>
 800e762:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800e766:	2321      	movs	r3, #33	; 0x21
 800e768:	6003      	str	r3, [r0, #0]
 800e76a:	ecbd 8b02 	vpop	{d8}
 800e76e:	bd08      	pop	{r3, pc}
	...

0800e778 <__ieee754_pow>:
 800e778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e77c:	ed2d 8b06 	vpush	{d8-d10}
 800e780:	b089      	sub	sp, #36	; 0x24
 800e782:	ed8d 1b00 	vstr	d1, [sp]
 800e786:	e9dd 2900 	ldrd	r2, r9, [sp]
 800e78a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800e78e:	ea58 0102 	orrs.w	r1, r8, r2
 800e792:	ec57 6b10 	vmov	r6, r7, d0
 800e796:	d115      	bne.n	800e7c4 <__ieee754_pow+0x4c>
 800e798:	19b3      	adds	r3, r6, r6
 800e79a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800e79e:	4152      	adcs	r2, r2
 800e7a0:	4299      	cmp	r1, r3
 800e7a2:	4b89      	ldr	r3, [pc, #548]	; (800e9c8 <__ieee754_pow+0x250>)
 800e7a4:	4193      	sbcs	r3, r2
 800e7a6:	f080 84d2 	bcs.w	800f14e <__ieee754_pow+0x9d6>
 800e7aa:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e7ae:	4630      	mov	r0, r6
 800e7b0:	4639      	mov	r1, r7
 800e7b2:	f7f1 fd8b 	bl	80002cc <__adddf3>
 800e7b6:	ec41 0b10 	vmov	d0, r0, r1
 800e7ba:	b009      	add	sp, #36	; 0x24
 800e7bc:	ecbd 8b06 	vpop	{d8-d10}
 800e7c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e7c4:	4b81      	ldr	r3, [pc, #516]	; (800e9cc <__ieee754_pow+0x254>)
 800e7c6:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800e7ca:	429c      	cmp	r4, r3
 800e7cc:	ee10 aa10 	vmov	sl, s0
 800e7d0:	463d      	mov	r5, r7
 800e7d2:	dc06      	bgt.n	800e7e2 <__ieee754_pow+0x6a>
 800e7d4:	d101      	bne.n	800e7da <__ieee754_pow+0x62>
 800e7d6:	2e00      	cmp	r6, #0
 800e7d8:	d1e7      	bne.n	800e7aa <__ieee754_pow+0x32>
 800e7da:	4598      	cmp	r8, r3
 800e7dc:	dc01      	bgt.n	800e7e2 <__ieee754_pow+0x6a>
 800e7de:	d10f      	bne.n	800e800 <__ieee754_pow+0x88>
 800e7e0:	b172      	cbz	r2, 800e800 <__ieee754_pow+0x88>
 800e7e2:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800e7e6:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800e7ea:	ea55 050a 	orrs.w	r5, r5, sl
 800e7ee:	d1dc      	bne.n	800e7aa <__ieee754_pow+0x32>
 800e7f0:	e9dd 3200 	ldrd	r3, r2, [sp]
 800e7f4:	18db      	adds	r3, r3, r3
 800e7f6:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800e7fa:	4152      	adcs	r2, r2
 800e7fc:	429d      	cmp	r5, r3
 800e7fe:	e7d0      	b.n	800e7a2 <__ieee754_pow+0x2a>
 800e800:	2d00      	cmp	r5, #0
 800e802:	da3b      	bge.n	800e87c <__ieee754_pow+0x104>
 800e804:	4b72      	ldr	r3, [pc, #456]	; (800e9d0 <__ieee754_pow+0x258>)
 800e806:	4598      	cmp	r8, r3
 800e808:	dc51      	bgt.n	800e8ae <__ieee754_pow+0x136>
 800e80a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800e80e:	4598      	cmp	r8, r3
 800e810:	f340 84ac 	ble.w	800f16c <__ieee754_pow+0x9f4>
 800e814:	ea4f 5328 	mov.w	r3, r8, asr #20
 800e818:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800e81c:	2b14      	cmp	r3, #20
 800e81e:	dd0f      	ble.n	800e840 <__ieee754_pow+0xc8>
 800e820:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800e824:	fa22 f103 	lsr.w	r1, r2, r3
 800e828:	fa01 f303 	lsl.w	r3, r1, r3
 800e82c:	4293      	cmp	r3, r2
 800e82e:	f040 849d 	bne.w	800f16c <__ieee754_pow+0x9f4>
 800e832:	f001 0101 	and.w	r1, r1, #1
 800e836:	f1c1 0302 	rsb	r3, r1, #2
 800e83a:	9304      	str	r3, [sp, #16]
 800e83c:	b182      	cbz	r2, 800e860 <__ieee754_pow+0xe8>
 800e83e:	e05f      	b.n	800e900 <__ieee754_pow+0x188>
 800e840:	2a00      	cmp	r2, #0
 800e842:	d15b      	bne.n	800e8fc <__ieee754_pow+0x184>
 800e844:	f1c3 0314 	rsb	r3, r3, #20
 800e848:	fa48 f103 	asr.w	r1, r8, r3
 800e84c:	fa01 f303 	lsl.w	r3, r1, r3
 800e850:	4543      	cmp	r3, r8
 800e852:	f040 8488 	bne.w	800f166 <__ieee754_pow+0x9ee>
 800e856:	f001 0101 	and.w	r1, r1, #1
 800e85a:	f1c1 0302 	rsb	r3, r1, #2
 800e85e:	9304      	str	r3, [sp, #16]
 800e860:	4b5c      	ldr	r3, [pc, #368]	; (800e9d4 <__ieee754_pow+0x25c>)
 800e862:	4598      	cmp	r8, r3
 800e864:	d132      	bne.n	800e8cc <__ieee754_pow+0x154>
 800e866:	f1b9 0f00 	cmp.w	r9, #0
 800e86a:	f280 8478 	bge.w	800f15e <__ieee754_pow+0x9e6>
 800e86e:	4959      	ldr	r1, [pc, #356]	; (800e9d4 <__ieee754_pow+0x25c>)
 800e870:	4632      	mov	r2, r6
 800e872:	463b      	mov	r3, r7
 800e874:	2000      	movs	r0, #0
 800e876:	f7f2 f809 	bl	800088c <__aeabi_ddiv>
 800e87a:	e79c      	b.n	800e7b6 <__ieee754_pow+0x3e>
 800e87c:	2300      	movs	r3, #0
 800e87e:	9304      	str	r3, [sp, #16]
 800e880:	2a00      	cmp	r2, #0
 800e882:	d13d      	bne.n	800e900 <__ieee754_pow+0x188>
 800e884:	4b51      	ldr	r3, [pc, #324]	; (800e9cc <__ieee754_pow+0x254>)
 800e886:	4598      	cmp	r8, r3
 800e888:	d1ea      	bne.n	800e860 <__ieee754_pow+0xe8>
 800e88a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800e88e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800e892:	ea53 030a 	orrs.w	r3, r3, sl
 800e896:	f000 845a 	beq.w	800f14e <__ieee754_pow+0x9d6>
 800e89a:	4b4f      	ldr	r3, [pc, #316]	; (800e9d8 <__ieee754_pow+0x260>)
 800e89c:	429c      	cmp	r4, r3
 800e89e:	dd08      	ble.n	800e8b2 <__ieee754_pow+0x13a>
 800e8a0:	f1b9 0f00 	cmp.w	r9, #0
 800e8a4:	f2c0 8457 	blt.w	800f156 <__ieee754_pow+0x9de>
 800e8a8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e8ac:	e783      	b.n	800e7b6 <__ieee754_pow+0x3e>
 800e8ae:	2302      	movs	r3, #2
 800e8b0:	e7e5      	b.n	800e87e <__ieee754_pow+0x106>
 800e8b2:	f1b9 0f00 	cmp.w	r9, #0
 800e8b6:	f04f 0000 	mov.w	r0, #0
 800e8ba:	f04f 0100 	mov.w	r1, #0
 800e8be:	f6bf af7a 	bge.w	800e7b6 <__ieee754_pow+0x3e>
 800e8c2:	e9dd 0300 	ldrd	r0, r3, [sp]
 800e8c6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800e8ca:	e774      	b.n	800e7b6 <__ieee754_pow+0x3e>
 800e8cc:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800e8d0:	d106      	bne.n	800e8e0 <__ieee754_pow+0x168>
 800e8d2:	4632      	mov	r2, r6
 800e8d4:	463b      	mov	r3, r7
 800e8d6:	4630      	mov	r0, r6
 800e8d8:	4639      	mov	r1, r7
 800e8da:	f7f1 fead 	bl	8000638 <__aeabi_dmul>
 800e8de:	e76a      	b.n	800e7b6 <__ieee754_pow+0x3e>
 800e8e0:	4b3e      	ldr	r3, [pc, #248]	; (800e9dc <__ieee754_pow+0x264>)
 800e8e2:	4599      	cmp	r9, r3
 800e8e4:	d10c      	bne.n	800e900 <__ieee754_pow+0x188>
 800e8e6:	2d00      	cmp	r5, #0
 800e8e8:	db0a      	blt.n	800e900 <__ieee754_pow+0x188>
 800e8ea:	ec47 6b10 	vmov	d0, r6, r7
 800e8ee:	b009      	add	sp, #36	; 0x24
 800e8f0:	ecbd 8b06 	vpop	{d8-d10}
 800e8f4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8f8:	f000 bc6c 	b.w	800f1d4 <__ieee754_sqrt>
 800e8fc:	2300      	movs	r3, #0
 800e8fe:	9304      	str	r3, [sp, #16]
 800e900:	ec47 6b10 	vmov	d0, r6, r7
 800e904:	f000 fed1 	bl	800f6aa <fabs>
 800e908:	ec51 0b10 	vmov	r0, r1, d0
 800e90c:	f1ba 0f00 	cmp.w	sl, #0
 800e910:	d129      	bne.n	800e966 <__ieee754_pow+0x1ee>
 800e912:	b124      	cbz	r4, 800e91e <__ieee754_pow+0x1a6>
 800e914:	4b2f      	ldr	r3, [pc, #188]	; (800e9d4 <__ieee754_pow+0x25c>)
 800e916:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800e91a:	429a      	cmp	r2, r3
 800e91c:	d123      	bne.n	800e966 <__ieee754_pow+0x1ee>
 800e91e:	f1b9 0f00 	cmp.w	r9, #0
 800e922:	da05      	bge.n	800e930 <__ieee754_pow+0x1b8>
 800e924:	4602      	mov	r2, r0
 800e926:	460b      	mov	r3, r1
 800e928:	2000      	movs	r0, #0
 800e92a:	492a      	ldr	r1, [pc, #168]	; (800e9d4 <__ieee754_pow+0x25c>)
 800e92c:	f7f1 ffae 	bl	800088c <__aeabi_ddiv>
 800e930:	2d00      	cmp	r5, #0
 800e932:	f6bf af40 	bge.w	800e7b6 <__ieee754_pow+0x3e>
 800e936:	9b04      	ldr	r3, [sp, #16]
 800e938:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800e93c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800e940:	4323      	orrs	r3, r4
 800e942:	d108      	bne.n	800e956 <__ieee754_pow+0x1de>
 800e944:	4602      	mov	r2, r0
 800e946:	460b      	mov	r3, r1
 800e948:	4610      	mov	r0, r2
 800e94a:	4619      	mov	r1, r3
 800e94c:	f7f1 fcbc 	bl	80002c8 <__aeabi_dsub>
 800e950:	4602      	mov	r2, r0
 800e952:	460b      	mov	r3, r1
 800e954:	e78f      	b.n	800e876 <__ieee754_pow+0xfe>
 800e956:	9b04      	ldr	r3, [sp, #16]
 800e958:	2b01      	cmp	r3, #1
 800e95a:	f47f af2c 	bne.w	800e7b6 <__ieee754_pow+0x3e>
 800e95e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e962:	4619      	mov	r1, r3
 800e964:	e727      	b.n	800e7b6 <__ieee754_pow+0x3e>
 800e966:	0feb      	lsrs	r3, r5, #31
 800e968:	3b01      	subs	r3, #1
 800e96a:	9306      	str	r3, [sp, #24]
 800e96c:	9a06      	ldr	r2, [sp, #24]
 800e96e:	9b04      	ldr	r3, [sp, #16]
 800e970:	4313      	orrs	r3, r2
 800e972:	d102      	bne.n	800e97a <__ieee754_pow+0x202>
 800e974:	4632      	mov	r2, r6
 800e976:	463b      	mov	r3, r7
 800e978:	e7e6      	b.n	800e948 <__ieee754_pow+0x1d0>
 800e97a:	4b19      	ldr	r3, [pc, #100]	; (800e9e0 <__ieee754_pow+0x268>)
 800e97c:	4598      	cmp	r8, r3
 800e97e:	f340 80fb 	ble.w	800eb78 <__ieee754_pow+0x400>
 800e982:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800e986:	4598      	cmp	r8, r3
 800e988:	4b13      	ldr	r3, [pc, #76]	; (800e9d8 <__ieee754_pow+0x260>)
 800e98a:	dd0c      	ble.n	800e9a6 <__ieee754_pow+0x22e>
 800e98c:	429c      	cmp	r4, r3
 800e98e:	dc0f      	bgt.n	800e9b0 <__ieee754_pow+0x238>
 800e990:	f1b9 0f00 	cmp.w	r9, #0
 800e994:	da0f      	bge.n	800e9b6 <__ieee754_pow+0x23e>
 800e996:	2000      	movs	r0, #0
 800e998:	b009      	add	sp, #36	; 0x24
 800e99a:	ecbd 8b06 	vpop	{d8-d10}
 800e99e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9a2:	f000 be79 	b.w	800f698 <__math_oflow>
 800e9a6:	429c      	cmp	r4, r3
 800e9a8:	dbf2      	blt.n	800e990 <__ieee754_pow+0x218>
 800e9aa:	4b0a      	ldr	r3, [pc, #40]	; (800e9d4 <__ieee754_pow+0x25c>)
 800e9ac:	429c      	cmp	r4, r3
 800e9ae:	dd19      	ble.n	800e9e4 <__ieee754_pow+0x26c>
 800e9b0:	f1b9 0f00 	cmp.w	r9, #0
 800e9b4:	dcef      	bgt.n	800e996 <__ieee754_pow+0x21e>
 800e9b6:	2000      	movs	r0, #0
 800e9b8:	b009      	add	sp, #36	; 0x24
 800e9ba:	ecbd 8b06 	vpop	{d8-d10}
 800e9be:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9c2:	f000 be60 	b.w	800f686 <__math_uflow>
 800e9c6:	bf00      	nop
 800e9c8:	fff00000 	.word	0xfff00000
 800e9cc:	7ff00000 	.word	0x7ff00000
 800e9d0:	433fffff 	.word	0x433fffff
 800e9d4:	3ff00000 	.word	0x3ff00000
 800e9d8:	3fefffff 	.word	0x3fefffff
 800e9dc:	3fe00000 	.word	0x3fe00000
 800e9e0:	41e00000 	.word	0x41e00000
 800e9e4:	4b60      	ldr	r3, [pc, #384]	; (800eb68 <__ieee754_pow+0x3f0>)
 800e9e6:	2200      	movs	r2, #0
 800e9e8:	f7f1 fc6e 	bl	80002c8 <__aeabi_dsub>
 800e9ec:	a354      	add	r3, pc, #336	; (adr r3, 800eb40 <__ieee754_pow+0x3c8>)
 800e9ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9f2:	4604      	mov	r4, r0
 800e9f4:	460d      	mov	r5, r1
 800e9f6:	f7f1 fe1f 	bl	8000638 <__aeabi_dmul>
 800e9fa:	a353      	add	r3, pc, #332	; (adr r3, 800eb48 <__ieee754_pow+0x3d0>)
 800e9fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea00:	4606      	mov	r6, r0
 800ea02:	460f      	mov	r7, r1
 800ea04:	4620      	mov	r0, r4
 800ea06:	4629      	mov	r1, r5
 800ea08:	f7f1 fe16 	bl	8000638 <__aeabi_dmul>
 800ea0c:	4b57      	ldr	r3, [pc, #348]	; (800eb6c <__ieee754_pow+0x3f4>)
 800ea0e:	4682      	mov	sl, r0
 800ea10:	468b      	mov	fp, r1
 800ea12:	2200      	movs	r2, #0
 800ea14:	4620      	mov	r0, r4
 800ea16:	4629      	mov	r1, r5
 800ea18:	f7f1 fe0e 	bl	8000638 <__aeabi_dmul>
 800ea1c:	4602      	mov	r2, r0
 800ea1e:	460b      	mov	r3, r1
 800ea20:	a14b      	add	r1, pc, #300	; (adr r1, 800eb50 <__ieee754_pow+0x3d8>)
 800ea22:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ea26:	f7f1 fc4f 	bl	80002c8 <__aeabi_dsub>
 800ea2a:	4622      	mov	r2, r4
 800ea2c:	462b      	mov	r3, r5
 800ea2e:	f7f1 fe03 	bl	8000638 <__aeabi_dmul>
 800ea32:	4602      	mov	r2, r0
 800ea34:	460b      	mov	r3, r1
 800ea36:	2000      	movs	r0, #0
 800ea38:	494d      	ldr	r1, [pc, #308]	; (800eb70 <__ieee754_pow+0x3f8>)
 800ea3a:	f7f1 fc45 	bl	80002c8 <__aeabi_dsub>
 800ea3e:	4622      	mov	r2, r4
 800ea40:	4680      	mov	r8, r0
 800ea42:	4689      	mov	r9, r1
 800ea44:	462b      	mov	r3, r5
 800ea46:	4620      	mov	r0, r4
 800ea48:	4629      	mov	r1, r5
 800ea4a:	f7f1 fdf5 	bl	8000638 <__aeabi_dmul>
 800ea4e:	4602      	mov	r2, r0
 800ea50:	460b      	mov	r3, r1
 800ea52:	4640      	mov	r0, r8
 800ea54:	4649      	mov	r1, r9
 800ea56:	f7f1 fdef 	bl	8000638 <__aeabi_dmul>
 800ea5a:	a33f      	add	r3, pc, #252	; (adr r3, 800eb58 <__ieee754_pow+0x3e0>)
 800ea5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea60:	f7f1 fdea 	bl	8000638 <__aeabi_dmul>
 800ea64:	4602      	mov	r2, r0
 800ea66:	460b      	mov	r3, r1
 800ea68:	4650      	mov	r0, sl
 800ea6a:	4659      	mov	r1, fp
 800ea6c:	f7f1 fc2c 	bl	80002c8 <__aeabi_dsub>
 800ea70:	4602      	mov	r2, r0
 800ea72:	460b      	mov	r3, r1
 800ea74:	4680      	mov	r8, r0
 800ea76:	4689      	mov	r9, r1
 800ea78:	4630      	mov	r0, r6
 800ea7a:	4639      	mov	r1, r7
 800ea7c:	f7f1 fc26 	bl	80002cc <__adddf3>
 800ea80:	2000      	movs	r0, #0
 800ea82:	4632      	mov	r2, r6
 800ea84:	463b      	mov	r3, r7
 800ea86:	4604      	mov	r4, r0
 800ea88:	460d      	mov	r5, r1
 800ea8a:	f7f1 fc1d 	bl	80002c8 <__aeabi_dsub>
 800ea8e:	4602      	mov	r2, r0
 800ea90:	460b      	mov	r3, r1
 800ea92:	4640      	mov	r0, r8
 800ea94:	4649      	mov	r1, r9
 800ea96:	f7f1 fc17 	bl	80002c8 <__aeabi_dsub>
 800ea9a:	9b04      	ldr	r3, [sp, #16]
 800ea9c:	9a06      	ldr	r2, [sp, #24]
 800ea9e:	3b01      	subs	r3, #1
 800eaa0:	4313      	orrs	r3, r2
 800eaa2:	4682      	mov	sl, r0
 800eaa4:	468b      	mov	fp, r1
 800eaa6:	f040 81e7 	bne.w	800ee78 <__ieee754_pow+0x700>
 800eaaa:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800eb60 <__ieee754_pow+0x3e8>
 800eaae:	eeb0 8a47 	vmov.f32	s16, s14
 800eab2:	eef0 8a67 	vmov.f32	s17, s15
 800eab6:	e9dd 6700 	ldrd	r6, r7, [sp]
 800eaba:	2600      	movs	r6, #0
 800eabc:	4632      	mov	r2, r6
 800eabe:	463b      	mov	r3, r7
 800eac0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800eac4:	f7f1 fc00 	bl	80002c8 <__aeabi_dsub>
 800eac8:	4622      	mov	r2, r4
 800eaca:	462b      	mov	r3, r5
 800eacc:	f7f1 fdb4 	bl	8000638 <__aeabi_dmul>
 800ead0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ead4:	4680      	mov	r8, r0
 800ead6:	4689      	mov	r9, r1
 800ead8:	4650      	mov	r0, sl
 800eada:	4659      	mov	r1, fp
 800eadc:	f7f1 fdac 	bl	8000638 <__aeabi_dmul>
 800eae0:	4602      	mov	r2, r0
 800eae2:	460b      	mov	r3, r1
 800eae4:	4640      	mov	r0, r8
 800eae6:	4649      	mov	r1, r9
 800eae8:	f7f1 fbf0 	bl	80002cc <__adddf3>
 800eaec:	4632      	mov	r2, r6
 800eaee:	463b      	mov	r3, r7
 800eaf0:	4680      	mov	r8, r0
 800eaf2:	4689      	mov	r9, r1
 800eaf4:	4620      	mov	r0, r4
 800eaf6:	4629      	mov	r1, r5
 800eaf8:	f7f1 fd9e 	bl	8000638 <__aeabi_dmul>
 800eafc:	460b      	mov	r3, r1
 800eafe:	4604      	mov	r4, r0
 800eb00:	460d      	mov	r5, r1
 800eb02:	4602      	mov	r2, r0
 800eb04:	4649      	mov	r1, r9
 800eb06:	4640      	mov	r0, r8
 800eb08:	f7f1 fbe0 	bl	80002cc <__adddf3>
 800eb0c:	4b19      	ldr	r3, [pc, #100]	; (800eb74 <__ieee754_pow+0x3fc>)
 800eb0e:	4299      	cmp	r1, r3
 800eb10:	ec45 4b19 	vmov	d9, r4, r5
 800eb14:	4606      	mov	r6, r0
 800eb16:	460f      	mov	r7, r1
 800eb18:	468b      	mov	fp, r1
 800eb1a:	f340 82f1 	ble.w	800f100 <__ieee754_pow+0x988>
 800eb1e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800eb22:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800eb26:	4303      	orrs	r3, r0
 800eb28:	f000 81e4 	beq.w	800eef4 <__ieee754_pow+0x77c>
 800eb2c:	ec51 0b18 	vmov	r0, r1, d8
 800eb30:	2200      	movs	r2, #0
 800eb32:	2300      	movs	r3, #0
 800eb34:	f7f1 fff2 	bl	8000b1c <__aeabi_dcmplt>
 800eb38:	3800      	subs	r0, #0
 800eb3a:	bf18      	it	ne
 800eb3c:	2001      	movne	r0, #1
 800eb3e:	e72b      	b.n	800e998 <__ieee754_pow+0x220>
 800eb40:	60000000 	.word	0x60000000
 800eb44:	3ff71547 	.word	0x3ff71547
 800eb48:	f85ddf44 	.word	0xf85ddf44
 800eb4c:	3e54ae0b 	.word	0x3e54ae0b
 800eb50:	55555555 	.word	0x55555555
 800eb54:	3fd55555 	.word	0x3fd55555
 800eb58:	652b82fe 	.word	0x652b82fe
 800eb5c:	3ff71547 	.word	0x3ff71547
 800eb60:	00000000 	.word	0x00000000
 800eb64:	bff00000 	.word	0xbff00000
 800eb68:	3ff00000 	.word	0x3ff00000
 800eb6c:	3fd00000 	.word	0x3fd00000
 800eb70:	3fe00000 	.word	0x3fe00000
 800eb74:	408fffff 	.word	0x408fffff
 800eb78:	4bd5      	ldr	r3, [pc, #852]	; (800eed0 <__ieee754_pow+0x758>)
 800eb7a:	402b      	ands	r3, r5
 800eb7c:	2200      	movs	r2, #0
 800eb7e:	b92b      	cbnz	r3, 800eb8c <__ieee754_pow+0x414>
 800eb80:	4bd4      	ldr	r3, [pc, #848]	; (800eed4 <__ieee754_pow+0x75c>)
 800eb82:	f7f1 fd59 	bl	8000638 <__aeabi_dmul>
 800eb86:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800eb8a:	460c      	mov	r4, r1
 800eb8c:	1523      	asrs	r3, r4, #20
 800eb8e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800eb92:	4413      	add	r3, r2
 800eb94:	9305      	str	r3, [sp, #20]
 800eb96:	4bd0      	ldr	r3, [pc, #832]	; (800eed8 <__ieee754_pow+0x760>)
 800eb98:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800eb9c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800eba0:	429c      	cmp	r4, r3
 800eba2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800eba6:	dd08      	ble.n	800ebba <__ieee754_pow+0x442>
 800eba8:	4bcc      	ldr	r3, [pc, #816]	; (800eedc <__ieee754_pow+0x764>)
 800ebaa:	429c      	cmp	r4, r3
 800ebac:	f340 8162 	ble.w	800ee74 <__ieee754_pow+0x6fc>
 800ebb0:	9b05      	ldr	r3, [sp, #20]
 800ebb2:	3301      	adds	r3, #1
 800ebb4:	9305      	str	r3, [sp, #20]
 800ebb6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800ebba:	2400      	movs	r4, #0
 800ebbc:	00e3      	lsls	r3, r4, #3
 800ebbe:	9307      	str	r3, [sp, #28]
 800ebc0:	4bc7      	ldr	r3, [pc, #796]	; (800eee0 <__ieee754_pow+0x768>)
 800ebc2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ebc6:	ed93 7b00 	vldr	d7, [r3]
 800ebca:	4629      	mov	r1, r5
 800ebcc:	ec53 2b17 	vmov	r2, r3, d7
 800ebd0:	eeb0 9a47 	vmov.f32	s18, s14
 800ebd4:	eef0 9a67 	vmov.f32	s19, s15
 800ebd8:	4682      	mov	sl, r0
 800ebda:	f7f1 fb75 	bl	80002c8 <__aeabi_dsub>
 800ebde:	4652      	mov	r2, sl
 800ebe0:	4606      	mov	r6, r0
 800ebe2:	460f      	mov	r7, r1
 800ebe4:	462b      	mov	r3, r5
 800ebe6:	ec51 0b19 	vmov	r0, r1, d9
 800ebea:	f7f1 fb6f 	bl	80002cc <__adddf3>
 800ebee:	4602      	mov	r2, r0
 800ebf0:	460b      	mov	r3, r1
 800ebf2:	2000      	movs	r0, #0
 800ebf4:	49bb      	ldr	r1, [pc, #748]	; (800eee4 <__ieee754_pow+0x76c>)
 800ebf6:	f7f1 fe49 	bl	800088c <__aeabi_ddiv>
 800ebfa:	ec41 0b1a 	vmov	d10, r0, r1
 800ebfe:	4602      	mov	r2, r0
 800ec00:	460b      	mov	r3, r1
 800ec02:	4630      	mov	r0, r6
 800ec04:	4639      	mov	r1, r7
 800ec06:	f7f1 fd17 	bl	8000638 <__aeabi_dmul>
 800ec0a:	2300      	movs	r3, #0
 800ec0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ec10:	9302      	str	r3, [sp, #8]
 800ec12:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800ec16:	46ab      	mov	fp, r5
 800ec18:	106d      	asrs	r5, r5, #1
 800ec1a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800ec1e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800ec22:	ec41 0b18 	vmov	d8, r0, r1
 800ec26:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800ec2a:	2200      	movs	r2, #0
 800ec2c:	4640      	mov	r0, r8
 800ec2e:	4649      	mov	r1, r9
 800ec30:	4614      	mov	r4, r2
 800ec32:	461d      	mov	r5, r3
 800ec34:	f7f1 fd00 	bl	8000638 <__aeabi_dmul>
 800ec38:	4602      	mov	r2, r0
 800ec3a:	460b      	mov	r3, r1
 800ec3c:	4630      	mov	r0, r6
 800ec3e:	4639      	mov	r1, r7
 800ec40:	f7f1 fb42 	bl	80002c8 <__aeabi_dsub>
 800ec44:	ec53 2b19 	vmov	r2, r3, d9
 800ec48:	4606      	mov	r6, r0
 800ec4a:	460f      	mov	r7, r1
 800ec4c:	4620      	mov	r0, r4
 800ec4e:	4629      	mov	r1, r5
 800ec50:	f7f1 fb3a 	bl	80002c8 <__aeabi_dsub>
 800ec54:	4602      	mov	r2, r0
 800ec56:	460b      	mov	r3, r1
 800ec58:	4650      	mov	r0, sl
 800ec5a:	4659      	mov	r1, fp
 800ec5c:	f7f1 fb34 	bl	80002c8 <__aeabi_dsub>
 800ec60:	4642      	mov	r2, r8
 800ec62:	464b      	mov	r3, r9
 800ec64:	f7f1 fce8 	bl	8000638 <__aeabi_dmul>
 800ec68:	4602      	mov	r2, r0
 800ec6a:	460b      	mov	r3, r1
 800ec6c:	4630      	mov	r0, r6
 800ec6e:	4639      	mov	r1, r7
 800ec70:	f7f1 fb2a 	bl	80002c8 <__aeabi_dsub>
 800ec74:	ec53 2b1a 	vmov	r2, r3, d10
 800ec78:	f7f1 fcde 	bl	8000638 <__aeabi_dmul>
 800ec7c:	ec53 2b18 	vmov	r2, r3, d8
 800ec80:	ec41 0b19 	vmov	d9, r0, r1
 800ec84:	ec51 0b18 	vmov	r0, r1, d8
 800ec88:	f7f1 fcd6 	bl	8000638 <__aeabi_dmul>
 800ec8c:	a37c      	add	r3, pc, #496	; (adr r3, 800ee80 <__ieee754_pow+0x708>)
 800ec8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec92:	4604      	mov	r4, r0
 800ec94:	460d      	mov	r5, r1
 800ec96:	f7f1 fccf 	bl	8000638 <__aeabi_dmul>
 800ec9a:	a37b      	add	r3, pc, #492	; (adr r3, 800ee88 <__ieee754_pow+0x710>)
 800ec9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eca0:	f7f1 fb14 	bl	80002cc <__adddf3>
 800eca4:	4622      	mov	r2, r4
 800eca6:	462b      	mov	r3, r5
 800eca8:	f7f1 fcc6 	bl	8000638 <__aeabi_dmul>
 800ecac:	a378      	add	r3, pc, #480	; (adr r3, 800ee90 <__ieee754_pow+0x718>)
 800ecae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecb2:	f7f1 fb0b 	bl	80002cc <__adddf3>
 800ecb6:	4622      	mov	r2, r4
 800ecb8:	462b      	mov	r3, r5
 800ecba:	f7f1 fcbd 	bl	8000638 <__aeabi_dmul>
 800ecbe:	a376      	add	r3, pc, #472	; (adr r3, 800ee98 <__ieee754_pow+0x720>)
 800ecc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecc4:	f7f1 fb02 	bl	80002cc <__adddf3>
 800ecc8:	4622      	mov	r2, r4
 800ecca:	462b      	mov	r3, r5
 800eccc:	f7f1 fcb4 	bl	8000638 <__aeabi_dmul>
 800ecd0:	a373      	add	r3, pc, #460	; (adr r3, 800eea0 <__ieee754_pow+0x728>)
 800ecd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecd6:	f7f1 faf9 	bl	80002cc <__adddf3>
 800ecda:	4622      	mov	r2, r4
 800ecdc:	462b      	mov	r3, r5
 800ecde:	f7f1 fcab 	bl	8000638 <__aeabi_dmul>
 800ece2:	a371      	add	r3, pc, #452	; (adr r3, 800eea8 <__ieee754_pow+0x730>)
 800ece4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ece8:	f7f1 faf0 	bl	80002cc <__adddf3>
 800ecec:	4622      	mov	r2, r4
 800ecee:	4606      	mov	r6, r0
 800ecf0:	460f      	mov	r7, r1
 800ecf2:	462b      	mov	r3, r5
 800ecf4:	4620      	mov	r0, r4
 800ecf6:	4629      	mov	r1, r5
 800ecf8:	f7f1 fc9e 	bl	8000638 <__aeabi_dmul>
 800ecfc:	4602      	mov	r2, r0
 800ecfe:	460b      	mov	r3, r1
 800ed00:	4630      	mov	r0, r6
 800ed02:	4639      	mov	r1, r7
 800ed04:	f7f1 fc98 	bl	8000638 <__aeabi_dmul>
 800ed08:	4642      	mov	r2, r8
 800ed0a:	4604      	mov	r4, r0
 800ed0c:	460d      	mov	r5, r1
 800ed0e:	464b      	mov	r3, r9
 800ed10:	ec51 0b18 	vmov	r0, r1, d8
 800ed14:	f7f1 fada 	bl	80002cc <__adddf3>
 800ed18:	ec53 2b19 	vmov	r2, r3, d9
 800ed1c:	f7f1 fc8c 	bl	8000638 <__aeabi_dmul>
 800ed20:	4622      	mov	r2, r4
 800ed22:	462b      	mov	r3, r5
 800ed24:	f7f1 fad2 	bl	80002cc <__adddf3>
 800ed28:	4642      	mov	r2, r8
 800ed2a:	4682      	mov	sl, r0
 800ed2c:	468b      	mov	fp, r1
 800ed2e:	464b      	mov	r3, r9
 800ed30:	4640      	mov	r0, r8
 800ed32:	4649      	mov	r1, r9
 800ed34:	f7f1 fc80 	bl	8000638 <__aeabi_dmul>
 800ed38:	4b6b      	ldr	r3, [pc, #428]	; (800eee8 <__ieee754_pow+0x770>)
 800ed3a:	2200      	movs	r2, #0
 800ed3c:	4606      	mov	r6, r0
 800ed3e:	460f      	mov	r7, r1
 800ed40:	f7f1 fac4 	bl	80002cc <__adddf3>
 800ed44:	4652      	mov	r2, sl
 800ed46:	465b      	mov	r3, fp
 800ed48:	f7f1 fac0 	bl	80002cc <__adddf3>
 800ed4c:	2000      	movs	r0, #0
 800ed4e:	4604      	mov	r4, r0
 800ed50:	460d      	mov	r5, r1
 800ed52:	4602      	mov	r2, r0
 800ed54:	460b      	mov	r3, r1
 800ed56:	4640      	mov	r0, r8
 800ed58:	4649      	mov	r1, r9
 800ed5a:	f7f1 fc6d 	bl	8000638 <__aeabi_dmul>
 800ed5e:	4b62      	ldr	r3, [pc, #392]	; (800eee8 <__ieee754_pow+0x770>)
 800ed60:	4680      	mov	r8, r0
 800ed62:	4689      	mov	r9, r1
 800ed64:	2200      	movs	r2, #0
 800ed66:	4620      	mov	r0, r4
 800ed68:	4629      	mov	r1, r5
 800ed6a:	f7f1 faad 	bl	80002c8 <__aeabi_dsub>
 800ed6e:	4632      	mov	r2, r6
 800ed70:	463b      	mov	r3, r7
 800ed72:	f7f1 faa9 	bl	80002c8 <__aeabi_dsub>
 800ed76:	4602      	mov	r2, r0
 800ed78:	460b      	mov	r3, r1
 800ed7a:	4650      	mov	r0, sl
 800ed7c:	4659      	mov	r1, fp
 800ed7e:	f7f1 faa3 	bl	80002c8 <__aeabi_dsub>
 800ed82:	ec53 2b18 	vmov	r2, r3, d8
 800ed86:	f7f1 fc57 	bl	8000638 <__aeabi_dmul>
 800ed8a:	4622      	mov	r2, r4
 800ed8c:	4606      	mov	r6, r0
 800ed8e:	460f      	mov	r7, r1
 800ed90:	462b      	mov	r3, r5
 800ed92:	ec51 0b19 	vmov	r0, r1, d9
 800ed96:	f7f1 fc4f 	bl	8000638 <__aeabi_dmul>
 800ed9a:	4602      	mov	r2, r0
 800ed9c:	460b      	mov	r3, r1
 800ed9e:	4630      	mov	r0, r6
 800eda0:	4639      	mov	r1, r7
 800eda2:	f7f1 fa93 	bl	80002cc <__adddf3>
 800eda6:	4606      	mov	r6, r0
 800eda8:	460f      	mov	r7, r1
 800edaa:	4602      	mov	r2, r0
 800edac:	460b      	mov	r3, r1
 800edae:	4640      	mov	r0, r8
 800edb0:	4649      	mov	r1, r9
 800edb2:	f7f1 fa8b 	bl	80002cc <__adddf3>
 800edb6:	a33e      	add	r3, pc, #248	; (adr r3, 800eeb0 <__ieee754_pow+0x738>)
 800edb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edbc:	2000      	movs	r0, #0
 800edbe:	4604      	mov	r4, r0
 800edc0:	460d      	mov	r5, r1
 800edc2:	f7f1 fc39 	bl	8000638 <__aeabi_dmul>
 800edc6:	4642      	mov	r2, r8
 800edc8:	ec41 0b18 	vmov	d8, r0, r1
 800edcc:	464b      	mov	r3, r9
 800edce:	4620      	mov	r0, r4
 800edd0:	4629      	mov	r1, r5
 800edd2:	f7f1 fa79 	bl	80002c8 <__aeabi_dsub>
 800edd6:	4602      	mov	r2, r0
 800edd8:	460b      	mov	r3, r1
 800edda:	4630      	mov	r0, r6
 800eddc:	4639      	mov	r1, r7
 800edde:	f7f1 fa73 	bl	80002c8 <__aeabi_dsub>
 800ede2:	a335      	add	r3, pc, #212	; (adr r3, 800eeb8 <__ieee754_pow+0x740>)
 800ede4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ede8:	f7f1 fc26 	bl	8000638 <__aeabi_dmul>
 800edec:	a334      	add	r3, pc, #208	; (adr r3, 800eec0 <__ieee754_pow+0x748>)
 800edee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edf2:	4606      	mov	r6, r0
 800edf4:	460f      	mov	r7, r1
 800edf6:	4620      	mov	r0, r4
 800edf8:	4629      	mov	r1, r5
 800edfa:	f7f1 fc1d 	bl	8000638 <__aeabi_dmul>
 800edfe:	4602      	mov	r2, r0
 800ee00:	460b      	mov	r3, r1
 800ee02:	4630      	mov	r0, r6
 800ee04:	4639      	mov	r1, r7
 800ee06:	f7f1 fa61 	bl	80002cc <__adddf3>
 800ee0a:	9a07      	ldr	r2, [sp, #28]
 800ee0c:	4b37      	ldr	r3, [pc, #220]	; (800eeec <__ieee754_pow+0x774>)
 800ee0e:	4413      	add	r3, r2
 800ee10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee14:	f7f1 fa5a 	bl	80002cc <__adddf3>
 800ee18:	4682      	mov	sl, r0
 800ee1a:	9805      	ldr	r0, [sp, #20]
 800ee1c:	468b      	mov	fp, r1
 800ee1e:	f7f1 fba1 	bl	8000564 <__aeabi_i2d>
 800ee22:	9a07      	ldr	r2, [sp, #28]
 800ee24:	4b32      	ldr	r3, [pc, #200]	; (800eef0 <__ieee754_pow+0x778>)
 800ee26:	4413      	add	r3, r2
 800ee28:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ee2c:	4606      	mov	r6, r0
 800ee2e:	460f      	mov	r7, r1
 800ee30:	4652      	mov	r2, sl
 800ee32:	465b      	mov	r3, fp
 800ee34:	ec51 0b18 	vmov	r0, r1, d8
 800ee38:	f7f1 fa48 	bl	80002cc <__adddf3>
 800ee3c:	4642      	mov	r2, r8
 800ee3e:	464b      	mov	r3, r9
 800ee40:	f7f1 fa44 	bl	80002cc <__adddf3>
 800ee44:	4632      	mov	r2, r6
 800ee46:	463b      	mov	r3, r7
 800ee48:	f7f1 fa40 	bl	80002cc <__adddf3>
 800ee4c:	2000      	movs	r0, #0
 800ee4e:	4632      	mov	r2, r6
 800ee50:	463b      	mov	r3, r7
 800ee52:	4604      	mov	r4, r0
 800ee54:	460d      	mov	r5, r1
 800ee56:	f7f1 fa37 	bl	80002c8 <__aeabi_dsub>
 800ee5a:	4642      	mov	r2, r8
 800ee5c:	464b      	mov	r3, r9
 800ee5e:	f7f1 fa33 	bl	80002c8 <__aeabi_dsub>
 800ee62:	ec53 2b18 	vmov	r2, r3, d8
 800ee66:	f7f1 fa2f 	bl	80002c8 <__aeabi_dsub>
 800ee6a:	4602      	mov	r2, r0
 800ee6c:	460b      	mov	r3, r1
 800ee6e:	4650      	mov	r0, sl
 800ee70:	4659      	mov	r1, fp
 800ee72:	e610      	b.n	800ea96 <__ieee754_pow+0x31e>
 800ee74:	2401      	movs	r4, #1
 800ee76:	e6a1      	b.n	800ebbc <__ieee754_pow+0x444>
 800ee78:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800eec8 <__ieee754_pow+0x750>
 800ee7c:	e617      	b.n	800eaae <__ieee754_pow+0x336>
 800ee7e:	bf00      	nop
 800ee80:	4a454eef 	.word	0x4a454eef
 800ee84:	3fca7e28 	.word	0x3fca7e28
 800ee88:	93c9db65 	.word	0x93c9db65
 800ee8c:	3fcd864a 	.word	0x3fcd864a
 800ee90:	a91d4101 	.word	0xa91d4101
 800ee94:	3fd17460 	.word	0x3fd17460
 800ee98:	518f264d 	.word	0x518f264d
 800ee9c:	3fd55555 	.word	0x3fd55555
 800eea0:	db6fabff 	.word	0xdb6fabff
 800eea4:	3fdb6db6 	.word	0x3fdb6db6
 800eea8:	33333303 	.word	0x33333303
 800eeac:	3fe33333 	.word	0x3fe33333
 800eeb0:	e0000000 	.word	0xe0000000
 800eeb4:	3feec709 	.word	0x3feec709
 800eeb8:	dc3a03fd 	.word	0xdc3a03fd
 800eebc:	3feec709 	.word	0x3feec709
 800eec0:	145b01f5 	.word	0x145b01f5
 800eec4:	be3e2fe0 	.word	0xbe3e2fe0
 800eec8:	00000000 	.word	0x00000000
 800eecc:	3ff00000 	.word	0x3ff00000
 800eed0:	7ff00000 	.word	0x7ff00000
 800eed4:	43400000 	.word	0x43400000
 800eed8:	0003988e 	.word	0x0003988e
 800eedc:	000bb679 	.word	0x000bb679
 800eee0:	080100d0 	.word	0x080100d0
 800eee4:	3ff00000 	.word	0x3ff00000
 800eee8:	40080000 	.word	0x40080000
 800eeec:	080100f0 	.word	0x080100f0
 800eef0:	080100e0 	.word	0x080100e0
 800eef4:	a3b5      	add	r3, pc, #724	; (adr r3, 800f1cc <__ieee754_pow+0xa54>)
 800eef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eefa:	4640      	mov	r0, r8
 800eefc:	4649      	mov	r1, r9
 800eefe:	f7f1 f9e5 	bl	80002cc <__adddf3>
 800ef02:	4622      	mov	r2, r4
 800ef04:	ec41 0b1a 	vmov	d10, r0, r1
 800ef08:	462b      	mov	r3, r5
 800ef0a:	4630      	mov	r0, r6
 800ef0c:	4639      	mov	r1, r7
 800ef0e:	f7f1 f9db 	bl	80002c8 <__aeabi_dsub>
 800ef12:	4602      	mov	r2, r0
 800ef14:	460b      	mov	r3, r1
 800ef16:	ec51 0b1a 	vmov	r0, r1, d10
 800ef1a:	f7f1 fe1d 	bl	8000b58 <__aeabi_dcmpgt>
 800ef1e:	2800      	cmp	r0, #0
 800ef20:	f47f ae04 	bne.w	800eb2c <__ieee754_pow+0x3b4>
 800ef24:	4aa4      	ldr	r2, [pc, #656]	; (800f1b8 <__ieee754_pow+0xa40>)
 800ef26:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ef2a:	4293      	cmp	r3, r2
 800ef2c:	f340 8108 	ble.w	800f140 <__ieee754_pow+0x9c8>
 800ef30:	151b      	asrs	r3, r3, #20
 800ef32:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800ef36:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800ef3a:	fa4a f303 	asr.w	r3, sl, r3
 800ef3e:	445b      	add	r3, fp
 800ef40:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800ef44:	4e9d      	ldr	r6, [pc, #628]	; (800f1bc <__ieee754_pow+0xa44>)
 800ef46:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800ef4a:	4116      	asrs	r6, r2
 800ef4c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800ef50:	2000      	movs	r0, #0
 800ef52:	ea23 0106 	bic.w	r1, r3, r6
 800ef56:	f1c2 0214 	rsb	r2, r2, #20
 800ef5a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800ef5e:	fa4a fa02 	asr.w	sl, sl, r2
 800ef62:	f1bb 0f00 	cmp.w	fp, #0
 800ef66:	4602      	mov	r2, r0
 800ef68:	460b      	mov	r3, r1
 800ef6a:	4620      	mov	r0, r4
 800ef6c:	4629      	mov	r1, r5
 800ef6e:	bfb8      	it	lt
 800ef70:	f1ca 0a00 	rsblt	sl, sl, #0
 800ef74:	f7f1 f9a8 	bl	80002c8 <__aeabi_dsub>
 800ef78:	ec41 0b19 	vmov	d9, r0, r1
 800ef7c:	4642      	mov	r2, r8
 800ef7e:	464b      	mov	r3, r9
 800ef80:	ec51 0b19 	vmov	r0, r1, d9
 800ef84:	f7f1 f9a2 	bl	80002cc <__adddf3>
 800ef88:	a37b      	add	r3, pc, #492	; (adr r3, 800f178 <__ieee754_pow+0xa00>)
 800ef8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef8e:	2000      	movs	r0, #0
 800ef90:	4604      	mov	r4, r0
 800ef92:	460d      	mov	r5, r1
 800ef94:	f7f1 fb50 	bl	8000638 <__aeabi_dmul>
 800ef98:	ec53 2b19 	vmov	r2, r3, d9
 800ef9c:	4606      	mov	r6, r0
 800ef9e:	460f      	mov	r7, r1
 800efa0:	4620      	mov	r0, r4
 800efa2:	4629      	mov	r1, r5
 800efa4:	f7f1 f990 	bl	80002c8 <__aeabi_dsub>
 800efa8:	4602      	mov	r2, r0
 800efaa:	460b      	mov	r3, r1
 800efac:	4640      	mov	r0, r8
 800efae:	4649      	mov	r1, r9
 800efb0:	f7f1 f98a 	bl	80002c8 <__aeabi_dsub>
 800efb4:	a372      	add	r3, pc, #456	; (adr r3, 800f180 <__ieee754_pow+0xa08>)
 800efb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efba:	f7f1 fb3d 	bl	8000638 <__aeabi_dmul>
 800efbe:	a372      	add	r3, pc, #456	; (adr r3, 800f188 <__ieee754_pow+0xa10>)
 800efc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efc4:	4680      	mov	r8, r0
 800efc6:	4689      	mov	r9, r1
 800efc8:	4620      	mov	r0, r4
 800efca:	4629      	mov	r1, r5
 800efcc:	f7f1 fb34 	bl	8000638 <__aeabi_dmul>
 800efd0:	4602      	mov	r2, r0
 800efd2:	460b      	mov	r3, r1
 800efd4:	4640      	mov	r0, r8
 800efd6:	4649      	mov	r1, r9
 800efd8:	f7f1 f978 	bl	80002cc <__adddf3>
 800efdc:	4604      	mov	r4, r0
 800efde:	460d      	mov	r5, r1
 800efe0:	4602      	mov	r2, r0
 800efe2:	460b      	mov	r3, r1
 800efe4:	4630      	mov	r0, r6
 800efe6:	4639      	mov	r1, r7
 800efe8:	f7f1 f970 	bl	80002cc <__adddf3>
 800efec:	4632      	mov	r2, r6
 800efee:	463b      	mov	r3, r7
 800eff0:	4680      	mov	r8, r0
 800eff2:	4689      	mov	r9, r1
 800eff4:	f7f1 f968 	bl	80002c8 <__aeabi_dsub>
 800eff8:	4602      	mov	r2, r0
 800effa:	460b      	mov	r3, r1
 800effc:	4620      	mov	r0, r4
 800effe:	4629      	mov	r1, r5
 800f000:	f7f1 f962 	bl	80002c8 <__aeabi_dsub>
 800f004:	4642      	mov	r2, r8
 800f006:	4606      	mov	r6, r0
 800f008:	460f      	mov	r7, r1
 800f00a:	464b      	mov	r3, r9
 800f00c:	4640      	mov	r0, r8
 800f00e:	4649      	mov	r1, r9
 800f010:	f7f1 fb12 	bl	8000638 <__aeabi_dmul>
 800f014:	a35e      	add	r3, pc, #376	; (adr r3, 800f190 <__ieee754_pow+0xa18>)
 800f016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f01a:	4604      	mov	r4, r0
 800f01c:	460d      	mov	r5, r1
 800f01e:	f7f1 fb0b 	bl	8000638 <__aeabi_dmul>
 800f022:	a35d      	add	r3, pc, #372	; (adr r3, 800f198 <__ieee754_pow+0xa20>)
 800f024:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f028:	f7f1 f94e 	bl	80002c8 <__aeabi_dsub>
 800f02c:	4622      	mov	r2, r4
 800f02e:	462b      	mov	r3, r5
 800f030:	f7f1 fb02 	bl	8000638 <__aeabi_dmul>
 800f034:	a35a      	add	r3, pc, #360	; (adr r3, 800f1a0 <__ieee754_pow+0xa28>)
 800f036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f03a:	f7f1 f947 	bl	80002cc <__adddf3>
 800f03e:	4622      	mov	r2, r4
 800f040:	462b      	mov	r3, r5
 800f042:	f7f1 faf9 	bl	8000638 <__aeabi_dmul>
 800f046:	a358      	add	r3, pc, #352	; (adr r3, 800f1a8 <__ieee754_pow+0xa30>)
 800f048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f04c:	f7f1 f93c 	bl	80002c8 <__aeabi_dsub>
 800f050:	4622      	mov	r2, r4
 800f052:	462b      	mov	r3, r5
 800f054:	f7f1 faf0 	bl	8000638 <__aeabi_dmul>
 800f058:	a355      	add	r3, pc, #340	; (adr r3, 800f1b0 <__ieee754_pow+0xa38>)
 800f05a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f05e:	f7f1 f935 	bl	80002cc <__adddf3>
 800f062:	4622      	mov	r2, r4
 800f064:	462b      	mov	r3, r5
 800f066:	f7f1 fae7 	bl	8000638 <__aeabi_dmul>
 800f06a:	4602      	mov	r2, r0
 800f06c:	460b      	mov	r3, r1
 800f06e:	4640      	mov	r0, r8
 800f070:	4649      	mov	r1, r9
 800f072:	f7f1 f929 	bl	80002c8 <__aeabi_dsub>
 800f076:	4604      	mov	r4, r0
 800f078:	460d      	mov	r5, r1
 800f07a:	4602      	mov	r2, r0
 800f07c:	460b      	mov	r3, r1
 800f07e:	4640      	mov	r0, r8
 800f080:	4649      	mov	r1, r9
 800f082:	f7f1 fad9 	bl	8000638 <__aeabi_dmul>
 800f086:	2200      	movs	r2, #0
 800f088:	ec41 0b19 	vmov	d9, r0, r1
 800f08c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800f090:	4620      	mov	r0, r4
 800f092:	4629      	mov	r1, r5
 800f094:	f7f1 f918 	bl	80002c8 <__aeabi_dsub>
 800f098:	4602      	mov	r2, r0
 800f09a:	460b      	mov	r3, r1
 800f09c:	ec51 0b19 	vmov	r0, r1, d9
 800f0a0:	f7f1 fbf4 	bl	800088c <__aeabi_ddiv>
 800f0a4:	4632      	mov	r2, r6
 800f0a6:	4604      	mov	r4, r0
 800f0a8:	460d      	mov	r5, r1
 800f0aa:	463b      	mov	r3, r7
 800f0ac:	4640      	mov	r0, r8
 800f0ae:	4649      	mov	r1, r9
 800f0b0:	f7f1 fac2 	bl	8000638 <__aeabi_dmul>
 800f0b4:	4632      	mov	r2, r6
 800f0b6:	463b      	mov	r3, r7
 800f0b8:	f7f1 f908 	bl	80002cc <__adddf3>
 800f0bc:	4602      	mov	r2, r0
 800f0be:	460b      	mov	r3, r1
 800f0c0:	4620      	mov	r0, r4
 800f0c2:	4629      	mov	r1, r5
 800f0c4:	f7f1 f900 	bl	80002c8 <__aeabi_dsub>
 800f0c8:	4642      	mov	r2, r8
 800f0ca:	464b      	mov	r3, r9
 800f0cc:	f7f1 f8fc 	bl	80002c8 <__aeabi_dsub>
 800f0d0:	460b      	mov	r3, r1
 800f0d2:	4602      	mov	r2, r0
 800f0d4:	493a      	ldr	r1, [pc, #232]	; (800f1c0 <__ieee754_pow+0xa48>)
 800f0d6:	2000      	movs	r0, #0
 800f0d8:	f7f1 f8f6 	bl	80002c8 <__aeabi_dsub>
 800f0dc:	ec41 0b10 	vmov	d0, r0, r1
 800f0e0:	ee10 3a90 	vmov	r3, s1
 800f0e4:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800f0e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f0ec:	da2b      	bge.n	800f146 <__ieee754_pow+0x9ce>
 800f0ee:	4650      	mov	r0, sl
 800f0f0:	f000 faf2 	bl	800f6d8 <scalbn>
 800f0f4:	ec51 0b10 	vmov	r0, r1, d0
 800f0f8:	ec53 2b18 	vmov	r2, r3, d8
 800f0fc:	f7ff bbed 	b.w	800e8da <__ieee754_pow+0x162>
 800f100:	4b30      	ldr	r3, [pc, #192]	; (800f1c4 <__ieee754_pow+0xa4c>)
 800f102:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800f106:	429e      	cmp	r6, r3
 800f108:	f77f af0c 	ble.w	800ef24 <__ieee754_pow+0x7ac>
 800f10c:	4b2e      	ldr	r3, [pc, #184]	; (800f1c8 <__ieee754_pow+0xa50>)
 800f10e:	440b      	add	r3, r1
 800f110:	4303      	orrs	r3, r0
 800f112:	d009      	beq.n	800f128 <__ieee754_pow+0x9b0>
 800f114:	ec51 0b18 	vmov	r0, r1, d8
 800f118:	2200      	movs	r2, #0
 800f11a:	2300      	movs	r3, #0
 800f11c:	f7f1 fcfe 	bl	8000b1c <__aeabi_dcmplt>
 800f120:	3800      	subs	r0, #0
 800f122:	bf18      	it	ne
 800f124:	2001      	movne	r0, #1
 800f126:	e447      	b.n	800e9b8 <__ieee754_pow+0x240>
 800f128:	4622      	mov	r2, r4
 800f12a:	462b      	mov	r3, r5
 800f12c:	f7f1 f8cc 	bl	80002c8 <__aeabi_dsub>
 800f130:	4642      	mov	r2, r8
 800f132:	464b      	mov	r3, r9
 800f134:	f7f1 fd06 	bl	8000b44 <__aeabi_dcmpge>
 800f138:	2800      	cmp	r0, #0
 800f13a:	f43f aef3 	beq.w	800ef24 <__ieee754_pow+0x7ac>
 800f13e:	e7e9      	b.n	800f114 <__ieee754_pow+0x99c>
 800f140:	f04f 0a00 	mov.w	sl, #0
 800f144:	e71a      	b.n	800ef7c <__ieee754_pow+0x804>
 800f146:	ec51 0b10 	vmov	r0, r1, d0
 800f14a:	4619      	mov	r1, r3
 800f14c:	e7d4      	b.n	800f0f8 <__ieee754_pow+0x980>
 800f14e:	491c      	ldr	r1, [pc, #112]	; (800f1c0 <__ieee754_pow+0xa48>)
 800f150:	2000      	movs	r0, #0
 800f152:	f7ff bb30 	b.w	800e7b6 <__ieee754_pow+0x3e>
 800f156:	2000      	movs	r0, #0
 800f158:	2100      	movs	r1, #0
 800f15a:	f7ff bb2c 	b.w	800e7b6 <__ieee754_pow+0x3e>
 800f15e:	4630      	mov	r0, r6
 800f160:	4639      	mov	r1, r7
 800f162:	f7ff bb28 	b.w	800e7b6 <__ieee754_pow+0x3e>
 800f166:	9204      	str	r2, [sp, #16]
 800f168:	f7ff bb7a 	b.w	800e860 <__ieee754_pow+0xe8>
 800f16c:	2300      	movs	r3, #0
 800f16e:	f7ff bb64 	b.w	800e83a <__ieee754_pow+0xc2>
 800f172:	bf00      	nop
 800f174:	f3af 8000 	nop.w
 800f178:	00000000 	.word	0x00000000
 800f17c:	3fe62e43 	.word	0x3fe62e43
 800f180:	fefa39ef 	.word	0xfefa39ef
 800f184:	3fe62e42 	.word	0x3fe62e42
 800f188:	0ca86c39 	.word	0x0ca86c39
 800f18c:	be205c61 	.word	0xbe205c61
 800f190:	72bea4d0 	.word	0x72bea4d0
 800f194:	3e663769 	.word	0x3e663769
 800f198:	c5d26bf1 	.word	0xc5d26bf1
 800f19c:	3ebbbd41 	.word	0x3ebbbd41
 800f1a0:	af25de2c 	.word	0xaf25de2c
 800f1a4:	3f11566a 	.word	0x3f11566a
 800f1a8:	16bebd93 	.word	0x16bebd93
 800f1ac:	3f66c16c 	.word	0x3f66c16c
 800f1b0:	5555553e 	.word	0x5555553e
 800f1b4:	3fc55555 	.word	0x3fc55555
 800f1b8:	3fe00000 	.word	0x3fe00000
 800f1bc:	000fffff 	.word	0x000fffff
 800f1c0:	3ff00000 	.word	0x3ff00000
 800f1c4:	4090cbff 	.word	0x4090cbff
 800f1c8:	3f6f3400 	.word	0x3f6f3400
 800f1cc:	652b82fe 	.word	0x652b82fe
 800f1d0:	3c971547 	.word	0x3c971547

0800f1d4 <__ieee754_sqrt>:
 800f1d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f1d8:	ec55 4b10 	vmov	r4, r5, d0
 800f1dc:	4e55      	ldr	r6, [pc, #340]	; (800f334 <__ieee754_sqrt+0x160>)
 800f1de:	43ae      	bics	r6, r5
 800f1e0:	ee10 0a10 	vmov	r0, s0
 800f1e4:	ee10 3a10 	vmov	r3, s0
 800f1e8:	462a      	mov	r2, r5
 800f1ea:	4629      	mov	r1, r5
 800f1ec:	d110      	bne.n	800f210 <__ieee754_sqrt+0x3c>
 800f1ee:	ee10 2a10 	vmov	r2, s0
 800f1f2:	462b      	mov	r3, r5
 800f1f4:	f7f1 fa20 	bl	8000638 <__aeabi_dmul>
 800f1f8:	4602      	mov	r2, r0
 800f1fa:	460b      	mov	r3, r1
 800f1fc:	4620      	mov	r0, r4
 800f1fe:	4629      	mov	r1, r5
 800f200:	f7f1 f864 	bl	80002cc <__adddf3>
 800f204:	4604      	mov	r4, r0
 800f206:	460d      	mov	r5, r1
 800f208:	ec45 4b10 	vmov	d0, r4, r5
 800f20c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f210:	2d00      	cmp	r5, #0
 800f212:	dc10      	bgt.n	800f236 <__ieee754_sqrt+0x62>
 800f214:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800f218:	4330      	orrs	r0, r6
 800f21a:	d0f5      	beq.n	800f208 <__ieee754_sqrt+0x34>
 800f21c:	b15d      	cbz	r5, 800f236 <__ieee754_sqrt+0x62>
 800f21e:	ee10 2a10 	vmov	r2, s0
 800f222:	462b      	mov	r3, r5
 800f224:	ee10 0a10 	vmov	r0, s0
 800f228:	f7f1 f84e 	bl	80002c8 <__aeabi_dsub>
 800f22c:	4602      	mov	r2, r0
 800f22e:	460b      	mov	r3, r1
 800f230:	f7f1 fb2c 	bl	800088c <__aeabi_ddiv>
 800f234:	e7e6      	b.n	800f204 <__ieee754_sqrt+0x30>
 800f236:	1512      	asrs	r2, r2, #20
 800f238:	d074      	beq.n	800f324 <__ieee754_sqrt+0x150>
 800f23a:	07d4      	lsls	r4, r2, #31
 800f23c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800f240:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800f244:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800f248:	bf5e      	ittt	pl
 800f24a:	0fda      	lsrpl	r2, r3, #31
 800f24c:	005b      	lslpl	r3, r3, #1
 800f24e:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800f252:	2400      	movs	r4, #0
 800f254:	0fda      	lsrs	r2, r3, #31
 800f256:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800f25a:	107f      	asrs	r7, r7, #1
 800f25c:	005b      	lsls	r3, r3, #1
 800f25e:	2516      	movs	r5, #22
 800f260:	4620      	mov	r0, r4
 800f262:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800f266:	1886      	adds	r6, r0, r2
 800f268:	428e      	cmp	r6, r1
 800f26a:	bfde      	ittt	le
 800f26c:	1b89      	suble	r1, r1, r6
 800f26e:	18b0      	addle	r0, r6, r2
 800f270:	18a4      	addle	r4, r4, r2
 800f272:	0049      	lsls	r1, r1, #1
 800f274:	3d01      	subs	r5, #1
 800f276:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800f27a:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800f27e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800f282:	d1f0      	bne.n	800f266 <__ieee754_sqrt+0x92>
 800f284:	462a      	mov	r2, r5
 800f286:	f04f 0e20 	mov.w	lr, #32
 800f28a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800f28e:	4281      	cmp	r1, r0
 800f290:	eb06 0c05 	add.w	ip, r6, r5
 800f294:	dc02      	bgt.n	800f29c <__ieee754_sqrt+0xc8>
 800f296:	d113      	bne.n	800f2c0 <__ieee754_sqrt+0xec>
 800f298:	459c      	cmp	ip, r3
 800f29a:	d811      	bhi.n	800f2c0 <__ieee754_sqrt+0xec>
 800f29c:	f1bc 0f00 	cmp.w	ip, #0
 800f2a0:	eb0c 0506 	add.w	r5, ip, r6
 800f2a4:	da43      	bge.n	800f32e <__ieee754_sqrt+0x15a>
 800f2a6:	2d00      	cmp	r5, #0
 800f2a8:	db41      	blt.n	800f32e <__ieee754_sqrt+0x15a>
 800f2aa:	f100 0801 	add.w	r8, r0, #1
 800f2ae:	1a09      	subs	r1, r1, r0
 800f2b0:	459c      	cmp	ip, r3
 800f2b2:	bf88      	it	hi
 800f2b4:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800f2b8:	eba3 030c 	sub.w	r3, r3, ip
 800f2bc:	4432      	add	r2, r6
 800f2be:	4640      	mov	r0, r8
 800f2c0:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800f2c4:	f1be 0e01 	subs.w	lr, lr, #1
 800f2c8:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800f2cc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800f2d0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800f2d4:	d1db      	bne.n	800f28e <__ieee754_sqrt+0xba>
 800f2d6:	430b      	orrs	r3, r1
 800f2d8:	d006      	beq.n	800f2e8 <__ieee754_sqrt+0x114>
 800f2da:	1c50      	adds	r0, r2, #1
 800f2dc:	bf13      	iteet	ne
 800f2de:	3201      	addne	r2, #1
 800f2e0:	3401      	addeq	r4, #1
 800f2e2:	4672      	moveq	r2, lr
 800f2e4:	f022 0201 	bicne.w	r2, r2, #1
 800f2e8:	1063      	asrs	r3, r4, #1
 800f2ea:	0852      	lsrs	r2, r2, #1
 800f2ec:	07e1      	lsls	r1, r4, #31
 800f2ee:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800f2f2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800f2f6:	bf48      	it	mi
 800f2f8:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800f2fc:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800f300:	4614      	mov	r4, r2
 800f302:	e781      	b.n	800f208 <__ieee754_sqrt+0x34>
 800f304:	0ad9      	lsrs	r1, r3, #11
 800f306:	3815      	subs	r0, #21
 800f308:	055b      	lsls	r3, r3, #21
 800f30a:	2900      	cmp	r1, #0
 800f30c:	d0fa      	beq.n	800f304 <__ieee754_sqrt+0x130>
 800f30e:	02cd      	lsls	r5, r1, #11
 800f310:	d50a      	bpl.n	800f328 <__ieee754_sqrt+0x154>
 800f312:	f1c2 0420 	rsb	r4, r2, #32
 800f316:	fa23 f404 	lsr.w	r4, r3, r4
 800f31a:	1e55      	subs	r5, r2, #1
 800f31c:	4093      	lsls	r3, r2
 800f31e:	4321      	orrs	r1, r4
 800f320:	1b42      	subs	r2, r0, r5
 800f322:	e78a      	b.n	800f23a <__ieee754_sqrt+0x66>
 800f324:	4610      	mov	r0, r2
 800f326:	e7f0      	b.n	800f30a <__ieee754_sqrt+0x136>
 800f328:	0049      	lsls	r1, r1, #1
 800f32a:	3201      	adds	r2, #1
 800f32c:	e7ef      	b.n	800f30e <__ieee754_sqrt+0x13a>
 800f32e:	4680      	mov	r8, r0
 800f330:	e7bd      	b.n	800f2ae <__ieee754_sqrt+0xda>
 800f332:	bf00      	nop
 800f334:	7ff00000 	.word	0x7ff00000

0800f338 <__ieee754_asinf>:
 800f338:	b538      	push	{r3, r4, r5, lr}
 800f33a:	ee10 5a10 	vmov	r5, s0
 800f33e:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800f342:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800f346:	ed2d 8b04 	vpush	{d8-d9}
 800f34a:	d10c      	bne.n	800f366 <__ieee754_asinf+0x2e>
 800f34c:	eddf 7a5d 	vldr	s15, [pc, #372]	; 800f4c4 <__ieee754_asinf+0x18c>
 800f350:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 800f4c8 <__ieee754_asinf+0x190>
 800f354:	ee60 7a27 	vmul.f32	s15, s0, s15
 800f358:	eee0 7a07 	vfma.f32	s15, s0, s14
 800f35c:	eeb0 0a67 	vmov.f32	s0, s15
 800f360:	ecbd 8b04 	vpop	{d8-d9}
 800f364:	bd38      	pop	{r3, r4, r5, pc}
 800f366:	dd04      	ble.n	800f372 <__ieee754_asinf+0x3a>
 800f368:	ee70 7a40 	vsub.f32	s15, s0, s0
 800f36c:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800f370:	e7f6      	b.n	800f360 <__ieee754_asinf+0x28>
 800f372:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 800f376:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800f37a:	da0b      	bge.n	800f394 <__ieee754_asinf+0x5c>
 800f37c:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 800f380:	da52      	bge.n	800f428 <__ieee754_asinf+0xf0>
 800f382:	eddf 7a52 	vldr	s15, [pc, #328]	; 800f4cc <__ieee754_asinf+0x194>
 800f386:	ee70 7a27 	vadd.f32	s15, s0, s15
 800f38a:	eef4 7ae8 	vcmpe.f32	s15, s17
 800f38e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f392:	dce5      	bgt.n	800f360 <__ieee754_asinf+0x28>
 800f394:	f000 fafa 	bl	800f98c <fabsf>
 800f398:	ee38 0ac0 	vsub.f32	s0, s17, s0
 800f39c:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 800f3a0:	ee20 8a08 	vmul.f32	s16, s0, s16
 800f3a4:	eddf 7a4a 	vldr	s15, [pc, #296]	; 800f4d0 <__ieee754_asinf+0x198>
 800f3a8:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 800f4d4 <__ieee754_asinf+0x19c>
 800f3ac:	ed9f 9a4a 	vldr	s18, [pc, #296]	; 800f4d8 <__ieee754_asinf+0x1a0>
 800f3b0:	eea8 7a27 	vfma.f32	s14, s16, s15
 800f3b4:	eddf 7a49 	vldr	s15, [pc, #292]	; 800f4dc <__ieee754_asinf+0x1a4>
 800f3b8:	eee7 7a08 	vfma.f32	s15, s14, s16
 800f3bc:	ed9f 7a48 	vldr	s14, [pc, #288]	; 800f4e0 <__ieee754_asinf+0x1a8>
 800f3c0:	eea7 7a88 	vfma.f32	s14, s15, s16
 800f3c4:	eddf 7a47 	vldr	s15, [pc, #284]	; 800f4e4 <__ieee754_asinf+0x1ac>
 800f3c8:	eee7 7a08 	vfma.f32	s15, s14, s16
 800f3cc:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800f4e8 <__ieee754_asinf+0x1b0>
 800f3d0:	eea7 9a88 	vfma.f32	s18, s15, s16
 800f3d4:	eddf 7a45 	vldr	s15, [pc, #276]	; 800f4ec <__ieee754_asinf+0x1b4>
 800f3d8:	eee8 7a07 	vfma.f32	s15, s16, s14
 800f3dc:	ed9f 7a44 	vldr	s14, [pc, #272]	; 800f4f0 <__ieee754_asinf+0x1b8>
 800f3e0:	eea7 7a88 	vfma.f32	s14, s15, s16
 800f3e4:	eddf 7a43 	vldr	s15, [pc, #268]	; 800f4f4 <__ieee754_asinf+0x1bc>
 800f3e8:	eee7 7a08 	vfma.f32	s15, s14, s16
 800f3ec:	eeb0 0a48 	vmov.f32	s0, s16
 800f3f0:	eee7 8a88 	vfma.f32	s17, s15, s16
 800f3f4:	f000 f926 	bl	800f644 <__ieee754_sqrtf>
 800f3f8:	4b3f      	ldr	r3, [pc, #252]	; (800f4f8 <__ieee754_asinf+0x1c0>)
 800f3fa:	ee29 9a08 	vmul.f32	s18, s18, s16
 800f3fe:	429c      	cmp	r4, r3
 800f400:	ee89 6a28 	vdiv.f32	s12, s18, s17
 800f404:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800f408:	dd3d      	ble.n	800f486 <__ieee754_asinf+0x14e>
 800f40a:	eea0 0a06 	vfma.f32	s0, s0, s12
 800f40e:	eddf 7a3b 	vldr	s15, [pc, #236]	; 800f4fc <__ieee754_asinf+0x1c4>
 800f412:	eee0 7a26 	vfma.f32	s15, s0, s13
 800f416:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 800f4c8 <__ieee754_asinf+0x190>
 800f41a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800f41e:	2d00      	cmp	r5, #0
 800f420:	bfd8      	it	le
 800f422:	eeb1 0a40 	vnegle.f32	s0, s0
 800f426:	e79b      	b.n	800f360 <__ieee754_asinf+0x28>
 800f428:	ee60 7a00 	vmul.f32	s15, s0, s0
 800f42c:	eddf 6a28 	vldr	s13, [pc, #160]	; 800f4d0 <__ieee754_asinf+0x198>
 800f430:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800f4d4 <__ieee754_asinf+0x19c>
 800f434:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 800f4e8 <__ieee754_asinf+0x1b0>
 800f438:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800f43c:	eddf 6a27 	vldr	s13, [pc, #156]	; 800f4dc <__ieee754_asinf+0x1a4>
 800f440:	eee7 6a27 	vfma.f32	s13, s14, s15
 800f444:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800f4e0 <__ieee754_asinf+0x1a8>
 800f448:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800f44c:	eddf 6a25 	vldr	s13, [pc, #148]	; 800f4e4 <__ieee754_asinf+0x1ac>
 800f450:	eee7 6a27 	vfma.f32	s13, s14, s15
 800f454:	ed9f 7a20 	vldr	s14, [pc, #128]	; 800f4d8 <__ieee754_asinf+0x1a0>
 800f458:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800f45c:	eddf 6a23 	vldr	s13, [pc, #140]	; 800f4ec <__ieee754_asinf+0x1b4>
 800f460:	eee7 6a86 	vfma.f32	s13, s15, s12
 800f464:	ed9f 6a22 	vldr	s12, [pc, #136]	; 800f4f0 <__ieee754_asinf+0x1b8>
 800f468:	eea6 6aa7 	vfma.f32	s12, s13, s15
 800f46c:	eddf 6a21 	vldr	s13, [pc, #132]	; 800f4f4 <__ieee754_asinf+0x1bc>
 800f470:	eee6 6a27 	vfma.f32	s13, s12, s15
 800f474:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f478:	eee6 8aa7 	vfma.f32	s17, s13, s15
 800f47c:	eec7 7a28 	vdiv.f32	s15, s14, s17
 800f480:	eea0 0a27 	vfma.f32	s0, s0, s15
 800f484:	e76c      	b.n	800f360 <__ieee754_asinf+0x28>
 800f486:	ee10 3a10 	vmov	r3, s0
 800f48a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800f48e:	f023 030f 	bic.w	r3, r3, #15
 800f492:	ee07 3a10 	vmov	s14, r3
 800f496:	eea7 8a47 	vfms.f32	s16, s14, s14
 800f49a:	ee70 7a07 	vadd.f32	s15, s0, s14
 800f49e:	ee30 0a00 	vadd.f32	s0, s0, s0
 800f4a2:	eec8 5a27 	vdiv.f32	s11, s16, s15
 800f4a6:	eddf 7a07 	vldr	s15, [pc, #28]	; 800f4c4 <__ieee754_asinf+0x18c>
 800f4aa:	eee5 7ae6 	vfms.f32	s15, s11, s13
 800f4ae:	eed0 7a06 	vfnms.f32	s15, s0, s12
 800f4b2:	ed9f 0a13 	vldr	s0, [pc, #76]	; 800f500 <__ieee754_asinf+0x1c8>
 800f4b6:	eeb0 6a40 	vmov.f32	s12, s0
 800f4ba:	eea7 6a66 	vfms.f32	s12, s14, s13
 800f4be:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800f4c2:	e7aa      	b.n	800f41a <__ieee754_asinf+0xe2>
 800f4c4:	b33bbd2e 	.word	0xb33bbd2e
 800f4c8:	3fc90fdb 	.word	0x3fc90fdb
 800f4cc:	7149f2ca 	.word	0x7149f2ca
 800f4d0:	3811ef08 	.word	0x3811ef08
 800f4d4:	3a4f7f04 	.word	0x3a4f7f04
 800f4d8:	3e2aaaab 	.word	0x3e2aaaab
 800f4dc:	bd241146 	.word	0xbd241146
 800f4e0:	3e4e0aa8 	.word	0x3e4e0aa8
 800f4e4:	bea6b090 	.word	0xbea6b090
 800f4e8:	3d9dc62e 	.word	0x3d9dc62e
 800f4ec:	bf303361 	.word	0xbf303361
 800f4f0:	4001572d 	.word	0x4001572d
 800f4f4:	c019d139 	.word	0xc019d139
 800f4f8:	3f799999 	.word	0x3f799999
 800f4fc:	333bbd2e 	.word	0x333bbd2e
 800f500:	3f490fdb 	.word	0x3f490fdb

0800f504 <__ieee754_atan2f>:
 800f504:	ee10 2a90 	vmov	r2, s1
 800f508:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800f50c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800f510:	b510      	push	{r4, lr}
 800f512:	eef0 7a40 	vmov.f32	s15, s0
 800f516:	dc06      	bgt.n	800f526 <__ieee754_atan2f+0x22>
 800f518:	ee10 0a10 	vmov	r0, s0
 800f51c:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800f520:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800f524:	dd04      	ble.n	800f530 <__ieee754_atan2f+0x2c>
 800f526:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800f52a:	eeb0 0a67 	vmov.f32	s0, s15
 800f52e:	bd10      	pop	{r4, pc}
 800f530:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 800f534:	d103      	bne.n	800f53e <__ieee754_atan2f+0x3a>
 800f536:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f53a:	f000 b953 	b.w	800f7e4 <atanf>
 800f53e:	1794      	asrs	r4, r2, #30
 800f540:	f004 0402 	and.w	r4, r4, #2
 800f544:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800f548:	b943      	cbnz	r3, 800f55c <__ieee754_atan2f+0x58>
 800f54a:	2c02      	cmp	r4, #2
 800f54c:	d05e      	beq.n	800f60c <__ieee754_atan2f+0x108>
 800f54e:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800f620 <__ieee754_atan2f+0x11c>
 800f552:	2c03      	cmp	r4, #3
 800f554:	bf08      	it	eq
 800f556:	eef0 7a47 	vmoveq.f32	s15, s14
 800f55a:	e7e6      	b.n	800f52a <__ieee754_atan2f+0x26>
 800f55c:	b941      	cbnz	r1, 800f570 <__ieee754_atan2f+0x6c>
 800f55e:	eddf 7a31 	vldr	s15, [pc, #196]	; 800f624 <__ieee754_atan2f+0x120>
 800f562:	ed9f 0a31 	vldr	s0, [pc, #196]	; 800f628 <__ieee754_atan2f+0x124>
 800f566:	2800      	cmp	r0, #0
 800f568:	bfb8      	it	lt
 800f56a:	eef0 7a40 	vmovlt.f32	s15, s0
 800f56e:	e7dc      	b.n	800f52a <__ieee754_atan2f+0x26>
 800f570:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800f574:	d110      	bne.n	800f598 <__ieee754_atan2f+0x94>
 800f576:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800f57a:	f104 34ff 	add.w	r4, r4, #4294967295
 800f57e:	d107      	bne.n	800f590 <__ieee754_atan2f+0x8c>
 800f580:	2c02      	cmp	r4, #2
 800f582:	d846      	bhi.n	800f612 <__ieee754_atan2f+0x10e>
 800f584:	4b29      	ldr	r3, [pc, #164]	; (800f62c <__ieee754_atan2f+0x128>)
 800f586:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800f58a:	edd4 7a00 	vldr	s15, [r4]
 800f58e:	e7cc      	b.n	800f52a <__ieee754_atan2f+0x26>
 800f590:	2c02      	cmp	r4, #2
 800f592:	d841      	bhi.n	800f618 <__ieee754_atan2f+0x114>
 800f594:	4b26      	ldr	r3, [pc, #152]	; (800f630 <__ieee754_atan2f+0x12c>)
 800f596:	e7f6      	b.n	800f586 <__ieee754_atan2f+0x82>
 800f598:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800f59c:	d0df      	beq.n	800f55e <__ieee754_atan2f+0x5a>
 800f59e:	1a5b      	subs	r3, r3, r1
 800f5a0:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 800f5a4:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800f5a8:	da1a      	bge.n	800f5e0 <__ieee754_atan2f+0xdc>
 800f5aa:	2a00      	cmp	r2, #0
 800f5ac:	da01      	bge.n	800f5b2 <__ieee754_atan2f+0xae>
 800f5ae:	313c      	adds	r1, #60	; 0x3c
 800f5b0:	db19      	blt.n	800f5e6 <__ieee754_atan2f+0xe2>
 800f5b2:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800f5b6:	f000 f9e9 	bl	800f98c <fabsf>
 800f5ba:	f000 f913 	bl	800f7e4 <atanf>
 800f5be:	eef0 7a40 	vmov.f32	s15, s0
 800f5c2:	2c01      	cmp	r4, #1
 800f5c4:	d012      	beq.n	800f5ec <__ieee754_atan2f+0xe8>
 800f5c6:	2c02      	cmp	r4, #2
 800f5c8:	d017      	beq.n	800f5fa <__ieee754_atan2f+0xf6>
 800f5ca:	2c00      	cmp	r4, #0
 800f5cc:	d0ad      	beq.n	800f52a <__ieee754_atan2f+0x26>
 800f5ce:	ed9f 0a19 	vldr	s0, [pc, #100]	; 800f634 <__ieee754_atan2f+0x130>
 800f5d2:	ee77 7a80 	vadd.f32	s15, s15, s0
 800f5d6:	ed9f 0a18 	vldr	s0, [pc, #96]	; 800f638 <__ieee754_atan2f+0x134>
 800f5da:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800f5de:	e7a4      	b.n	800f52a <__ieee754_atan2f+0x26>
 800f5e0:	eddf 7a10 	vldr	s15, [pc, #64]	; 800f624 <__ieee754_atan2f+0x120>
 800f5e4:	e7ed      	b.n	800f5c2 <__ieee754_atan2f+0xbe>
 800f5e6:	eddf 7a15 	vldr	s15, [pc, #84]	; 800f63c <__ieee754_atan2f+0x138>
 800f5ea:	e7ea      	b.n	800f5c2 <__ieee754_atan2f+0xbe>
 800f5ec:	ee17 3a90 	vmov	r3, s15
 800f5f0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800f5f4:	ee07 3a90 	vmov	s15, r3
 800f5f8:	e797      	b.n	800f52a <__ieee754_atan2f+0x26>
 800f5fa:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800f634 <__ieee754_atan2f+0x130>
 800f5fe:	ee77 7a80 	vadd.f32	s15, s15, s0
 800f602:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 800f638 <__ieee754_atan2f+0x134>
 800f606:	ee70 7a67 	vsub.f32	s15, s0, s15
 800f60a:	e78e      	b.n	800f52a <__ieee754_atan2f+0x26>
 800f60c:	eddf 7a0a 	vldr	s15, [pc, #40]	; 800f638 <__ieee754_atan2f+0x134>
 800f610:	e78b      	b.n	800f52a <__ieee754_atan2f+0x26>
 800f612:	eddf 7a0b 	vldr	s15, [pc, #44]	; 800f640 <__ieee754_atan2f+0x13c>
 800f616:	e788      	b.n	800f52a <__ieee754_atan2f+0x26>
 800f618:	eddf 7a08 	vldr	s15, [pc, #32]	; 800f63c <__ieee754_atan2f+0x138>
 800f61c:	e785      	b.n	800f52a <__ieee754_atan2f+0x26>
 800f61e:	bf00      	nop
 800f620:	c0490fdb 	.word	0xc0490fdb
 800f624:	3fc90fdb 	.word	0x3fc90fdb
 800f628:	bfc90fdb 	.word	0xbfc90fdb
 800f62c:	08010100 	.word	0x08010100
 800f630:	0801010c 	.word	0x0801010c
 800f634:	33bbbd2e 	.word	0x33bbbd2e
 800f638:	40490fdb 	.word	0x40490fdb
 800f63c:	00000000 	.word	0x00000000
 800f640:	3f490fdb 	.word	0x3f490fdb

0800f644 <__ieee754_sqrtf>:
 800f644:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800f648:	4770      	bx	lr

0800f64a <with_errno>:
 800f64a:	b570      	push	{r4, r5, r6, lr}
 800f64c:	4604      	mov	r4, r0
 800f64e:	460d      	mov	r5, r1
 800f650:	4616      	mov	r6, r2
 800f652:	f7fb fbf9 	bl	800ae48 <__errno>
 800f656:	4629      	mov	r1, r5
 800f658:	6006      	str	r6, [r0, #0]
 800f65a:	4620      	mov	r0, r4
 800f65c:	bd70      	pop	{r4, r5, r6, pc}

0800f65e <xflow>:
 800f65e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f660:	4614      	mov	r4, r2
 800f662:	461d      	mov	r5, r3
 800f664:	b108      	cbz	r0, 800f66a <xflow+0xc>
 800f666:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800f66a:	e9cd 2300 	strd	r2, r3, [sp]
 800f66e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f672:	4620      	mov	r0, r4
 800f674:	4629      	mov	r1, r5
 800f676:	f7f0 ffdf 	bl	8000638 <__aeabi_dmul>
 800f67a:	2222      	movs	r2, #34	; 0x22
 800f67c:	b003      	add	sp, #12
 800f67e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f682:	f7ff bfe2 	b.w	800f64a <with_errno>

0800f686 <__math_uflow>:
 800f686:	b508      	push	{r3, lr}
 800f688:	2200      	movs	r2, #0
 800f68a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800f68e:	f7ff ffe6 	bl	800f65e <xflow>
 800f692:	ec41 0b10 	vmov	d0, r0, r1
 800f696:	bd08      	pop	{r3, pc}

0800f698 <__math_oflow>:
 800f698:	b508      	push	{r3, lr}
 800f69a:	2200      	movs	r2, #0
 800f69c:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800f6a0:	f7ff ffdd 	bl	800f65e <xflow>
 800f6a4:	ec41 0b10 	vmov	d0, r0, r1
 800f6a8:	bd08      	pop	{r3, pc}

0800f6aa <fabs>:
 800f6aa:	ec51 0b10 	vmov	r0, r1, d0
 800f6ae:	ee10 2a10 	vmov	r2, s0
 800f6b2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f6b6:	ec43 2b10 	vmov	d0, r2, r3
 800f6ba:	4770      	bx	lr

0800f6bc <finite>:
 800f6bc:	b082      	sub	sp, #8
 800f6be:	ed8d 0b00 	vstr	d0, [sp]
 800f6c2:	9801      	ldr	r0, [sp, #4]
 800f6c4:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800f6c8:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800f6cc:	0fc0      	lsrs	r0, r0, #31
 800f6ce:	b002      	add	sp, #8
 800f6d0:	4770      	bx	lr
 800f6d2:	0000      	movs	r0, r0
 800f6d4:	0000      	movs	r0, r0
	...

0800f6d8 <scalbn>:
 800f6d8:	b570      	push	{r4, r5, r6, lr}
 800f6da:	ec55 4b10 	vmov	r4, r5, d0
 800f6de:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800f6e2:	4606      	mov	r6, r0
 800f6e4:	462b      	mov	r3, r5
 800f6e6:	b99a      	cbnz	r2, 800f710 <scalbn+0x38>
 800f6e8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800f6ec:	4323      	orrs	r3, r4
 800f6ee:	d036      	beq.n	800f75e <scalbn+0x86>
 800f6f0:	4b39      	ldr	r3, [pc, #228]	; (800f7d8 <scalbn+0x100>)
 800f6f2:	4629      	mov	r1, r5
 800f6f4:	ee10 0a10 	vmov	r0, s0
 800f6f8:	2200      	movs	r2, #0
 800f6fa:	f7f0 ff9d 	bl	8000638 <__aeabi_dmul>
 800f6fe:	4b37      	ldr	r3, [pc, #220]	; (800f7dc <scalbn+0x104>)
 800f700:	429e      	cmp	r6, r3
 800f702:	4604      	mov	r4, r0
 800f704:	460d      	mov	r5, r1
 800f706:	da10      	bge.n	800f72a <scalbn+0x52>
 800f708:	a32b      	add	r3, pc, #172	; (adr r3, 800f7b8 <scalbn+0xe0>)
 800f70a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f70e:	e03a      	b.n	800f786 <scalbn+0xae>
 800f710:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800f714:	428a      	cmp	r2, r1
 800f716:	d10c      	bne.n	800f732 <scalbn+0x5a>
 800f718:	ee10 2a10 	vmov	r2, s0
 800f71c:	4620      	mov	r0, r4
 800f71e:	4629      	mov	r1, r5
 800f720:	f7f0 fdd4 	bl	80002cc <__adddf3>
 800f724:	4604      	mov	r4, r0
 800f726:	460d      	mov	r5, r1
 800f728:	e019      	b.n	800f75e <scalbn+0x86>
 800f72a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800f72e:	460b      	mov	r3, r1
 800f730:	3a36      	subs	r2, #54	; 0x36
 800f732:	4432      	add	r2, r6
 800f734:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800f738:	428a      	cmp	r2, r1
 800f73a:	dd08      	ble.n	800f74e <scalbn+0x76>
 800f73c:	2d00      	cmp	r5, #0
 800f73e:	a120      	add	r1, pc, #128	; (adr r1, 800f7c0 <scalbn+0xe8>)
 800f740:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f744:	da1c      	bge.n	800f780 <scalbn+0xa8>
 800f746:	a120      	add	r1, pc, #128	; (adr r1, 800f7c8 <scalbn+0xf0>)
 800f748:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f74c:	e018      	b.n	800f780 <scalbn+0xa8>
 800f74e:	2a00      	cmp	r2, #0
 800f750:	dd08      	ble.n	800f764 <scalbn+0x8c>
 800f752:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f756:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f75a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800f75e:	ec45 4b10 	vmov	d0, r4, r5
 800f762:	bd70      	pop	{r4, r5, r6, pc}
 800f764:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800f768:	da19      	bge.n	800f79e <scalbn+0xc6>
 800f76a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800f76e:	429e      	cmp	r6, r3
 800f770:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800f774:	dd0a      	ble.n	800f78c <scalbn+0xb4>
 800f776:	a112      	add	r1, pc, #72	; (adr r1, 800f7c0 <scalbn+0xe8>)
 800f778:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f77c:	2b00      	cmp	r3, #0
 800f77e:	d1e2      	bne.n	800f746 <scalbn+0x6e>
 800f780:	a30f      	add	r3, pc, #60	; (adr r3, 800f7c0 <scalbn+0xe8>)
 800f782:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f786:	f7f0 ff57 	bl	8000638 <__aeabi_dmul>
 800f78a:	e7cb      	b.n	800f724 <scalbn+0x4c>
 800f78c:	a10a      	add	r1, pc, #40	; (adr r1, 800f7b8 <scalbn+0xe0>)
 800f78e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f792:	2b00      	cmp	r3, #0
 800f794:	d0b8      	beq.n	800f708 <scalbn+0x30>
 800f796:	a10e      	add	r1, pc, #56	; (adr r1, 800f7d0 <scalbn+0xf8>)
 800f798:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f79c:	e7b4      	b.n	800f708 <scalbn+0x30>
 800f79e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f7a2:	3236      	adds	r2, #54	; 0x36
 800f7a4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f7a8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800f7ac:	4620      	mov	r0, r4
 800f7ae:	4b0c      	ldr	r3, [pc, #48]	; (800f7e0 <scalbn+0x108>)
 800f7b0:	2200      	movs	r2, #0
 800f7b2:	e7e8      	b.n	800f786 <scalbn+0xae>
 800f7b4:	f3af 8000 	nop.w
 800f7b8:	c2f8f359 	.word	0xc2f8f359
 800f7bc:	01a56e1f 	.word	0x01a56e1f
 800f7c0:	8800759c 	.word	0x8800759c
 800f7c4:	7e37e43c 	.word	0x7e37e43c
 800f7c8:	8800759c 	.word	0x8800759c
 800f7cc:	fe37e43c 	.word	0xfe37e43c
 800f7d0:	c2f8f359 	.word	0xc2f8f359
 800f7d4:	81a56e1f 	.word	0x81a56e1f
 800f7d8:	43500000 	.word	0x43500000
 800f7dc:	ffff3cb0 	.word	0xffff3cb0
 800f7e0:	3c900000 	.word	0x3c900000

0800f7e4 <atanf>:
 800f7e4:	b538      	push	{r3, r4, r5, lr}
 800f7e6:	ee10 5a10 	vmov	r5, s0
 800f7ea:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800f7ee:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 800f7f2:	eef0 7a40 	vmov.f32	s15, s0
 800f7f6:	db10      	blt.n	800f81a <atanf+0x36>
 800f7f8:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800f7fc:	dd04      	ble.n	800f808 <atanf+0x24>
 800f7fe:	ee70 7a00 	vadd.f32	s15, s0, s0
 800f802:	eeb0 0a67 	vmov.f32	s0, s15
 800f806:	bd38      	pop	{r3, r4, r5, pc}
 800f808:	eddf 7a4d 	vldr	s15, [pc, #308]	; 800f940 <atanf+0x15c>
 800f80c:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 800f944 <atanf+0x160>
 800f810:	2d00      	cmp	r5, #0
 800f812:	bfd8      	it	le
 800f814:	eef0 7a40 	vmovle.f32	s15, s0
 800f818:	e7f3      	b.n	800f802 <atanf+0x1e>
 800f81a:	4b4b      	ldr	r3, [pc, #300]	; (800f948 <atanf+0x164>)
 800f81c:	429c      	cmp	r4, r3
 800f81e:	dc10      	bgt.n	800f842 <atanf+0x5e>
 800f820:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 800f824:	da0a      	bge.n	800f83c <atanf+0x58>
 800f826:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800f94c <atanf+0x168>
 800f82a:	ee30 7a07 	vadd.f32	s14, s0, s14
 800f82e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f832:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800f836:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f83a:	dce2      	bgt.n	800f802 <atanf+0x1e>
 800f83c:	f04f 33ff 	mov.w	r3, #4294967295
 800f840:	e013      	b.n	800f86a <atanf+0x86>
 800f842:	f000 f8a3 	bl	800f98c <fabsf>
 800f846:	4b42      	ldr	r3, [pc, #264]	; (800f950 <atanf+0x16c>)
 800f848:	429c      	cmp	r4, r3
 800f84a:	dc4f      	bgt.n	800f8ec <atanf+0x108>
 800f84c:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800f850:	429c      	cmp	r4, r3
 800f852:	dc41      	bgt.n	800f8d8 <atanf+0xf4>
 800f854:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800f858:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800f85c:	eea0 7a27 	vfma.f32	s14, s0, s15
 800f860:	2300      	movs	r3, #0
 800f862:	ee30 0a27 	vadd.f32	s0, s0, s15
 800f866:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800f86a:	1c5a      	adds	r2, r3, #1
 800f86c:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800f870:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800f954 <atanf+0x170>
 800f874:	eddf 5a38 	vldr	s11, [pc, #224]	; 800f958 <atanf+0x174>
 800f878:	ed9f 5a38 	vldr	s10, [pc, #224]	; 800f95c <atanf+0x178>
 800f87c:	ee66 6a06 	vmul.f32	s13, s12, s12
 800f880:	eee6 5a87 	vfma.f32	s11, s13, s14
 800f884:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800f960 <atanf+0x17c>
 800f888:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800f88c:	eddf 5a35 	vldr	s11, [pc, #212]	; 800f964 <atanf+0x180>
 800f890:	eee7 5a26 	vfma.f32	s11, s14, s13
 800f894:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800f968 <atanf+0x184>
 800f898:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800f89c:	eddf 5a33 	vldr	s11, [pc, #204]	; 800f96c <atanf+0x188>
 800f8a0:	eee7 5a26 	vfma.f32	s11, s14, s13
 800f8a4:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800f970 <atanf+0x18c>
 800f8a8:	eea6 5a87 	vfma.f32	s10, s13, s14
 800f8ac:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800f974 <atanf+0x190>
 800f8b0:	eea5 7a26 	vfma.f32	s14, s10, s13
 800f8b4:	ed9f 5a30 	vldr	s10, [pc, #192]	; 800f978 <atanf+0x194>
 800f8b8:	eea7 5a26 	vfma.f32	s10, s14, s13
 800f8bc:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800f97c <atanf+0x198>
 800f8c0:	eea5 7a26 	vfma.f32	s14, s10, s13
 800f8c4:	ee27 7a26 	vmul.f32	s14, s14, s13
 800f8c8:	eea5 7a86 	vfma.f32	s14, s11, s12
 800f8cc:	ee27 7a87 	vmul.f32	s14, s15, s14
 800f8d0:	d121      	bne.n	800f916 <atanf+0x132>
 800f8d2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f8d6:	e794      	b.n	800f802 <atanf+0x1e>
 800f8d8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800f8dc:	ee30 7a67 	vsub.f32	s14, s0, s15
 800f8e0:	ee30 0a27 	vadd.f32	s0, s0, s15
 800f8e4:	2301      	movs	r3, #1
 800f8e6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800f8ea:	e7be      	b.n	800f86a <atanf+0x86>
 800f8ec:	4b24      	ldr	r3, [pc, #144]	; (800f980 <atanf+0x19c>)
 800f8ee:	429c      	cmp	r4, r3
 800f8f0:	dc0b      	bgt.n	800f90a <atanf+0x126>
 800f8f2:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 800f8f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f8fa:	eea0 7a27 	vfma.f32	s14, s0, s15
 800f8fe:	2302      	movs	r3, #2
 800f900:	ee70 6a67 	vsub.f32	s13, s0, s15
 800f904:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f908:	e7af      	b.n	800f86a <atanf+0x86>
 800f90a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800f90e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800f912:	2303      	movs	r3, #3
 800f914:	e7a9      	b.n	800f86a <atanf+0x86>
 800f916:	4a1b      	ldr	r2, [pc, #108]	; (800f984 <atanf+0x1a0>)
 800f918:	491b      	ldr	r1, [pc, #108]	; (800f988 <atanf+0x1a4>)
 800f91a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800f91e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800f922:	ed93 0a00 	vldr	s0, [r3]
 800f926:	ee37 7a40 	vsub.f32	s14, s14, s0
 800f92a:	ed92 0a00 	vldr	s0, [r2]
 800f92e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f932:	2d00      	cmp	r5, #0
 800f934:	ee70 7a67 	vsub.f32	s15, s0, s15
 800f938:	bfb8      	it	lt
 800f93a:	eef1 7a67 	vneglt.f32	s15, s15
 800f93e:	e760      	b.n	800f802 <atanf+0x1e>
 800f940:	3fc90fdb 	.word	0x3fc90fdb
 800f944:	bfc90fdb 	.word	0xbfc90fdb
 800f948:	3edfffff 	.word	0x3edfffff
 800f94c:	7149f2ca 	.word	0x7149f2ca
 800f950:	3f97ffff 	.word	0x3f97ffff
 800f954:	3c8569d7 	.word	0x3c8569d7
 800f958:	3d4bda59 	.word	0x3d4bda59
 800f95c:	bd6ef16b 	.word	0xbd6ef16b
 800f960:	3d886b35 	.word	0x3d886b35
 800f964:	3dba2e6e 	.word	0x3dba2e6e
 800f968:	3e124925 	.word	0x3e124925
 800f96c:	3eaaaaab 	.word	0x3eaaaaab
 800f970:	bd15a221 	.word	0xbd15a221
 800f974:	bd9d8795 	.word	0xbd9d8795
 800f978:	bde38e38 	.word	0xbde38e38
 800f97c:	be4ccccd 	.word	0xbe4ccccd
 800f980:	401bffff 	.word	0x401bffff
 800f984:	08010118 	.word	0x08010118
 800f988:	08010128 	.word	0x08010128

0800f98c <fabsf>:
 800f98c:	ee10 3a10 	vmov	r3, s0
 800f990:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f994:	ee00 3a10 	vmov	s0, r3
 800f998:	4770      	bx	lr
	...

0800f99c <_init>:
 800f99c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f99e:	bf00      	nop
 800f9a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f9a2:	bc08      	pop	{r3}
 800f9a4:	469e      	mov	lr, r3
 800f9a6:	4770      	bx	lr

0800f9a8 <_fini>:
 800f9a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f9aa:	bf00      	nop
 800f9ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f9ae:	bc08      	pop	{r3}
 800f9b0:	469e      	mov	lr, r3
 800f9b2:	4770      	bx	lr
